<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Eto</name>
    </assembly>
    <members>
        <member name="T:Eto.AutoInitializeAttribute">
            <summary>
            Attribute to specify whether the handler interface should be initialized automatically
            </summary>
            <remarks>
            Handler interfaces that defer creation of the control to various Create() methods can apply this attribute
            so that the initialization can be done afterwards.
            
            If auto initialization is disabled, the widget author must call Widget.Initialize() after the control is created.
            
            Initialization applies styles to the widget and the handler, sets up events based on overridden event methods, etc.
            
            This is only needed by widget authors in advanced scenarios.  The default is to auto initialize, so this is
            only needed if you want to disable this behaviour.
            </remarks>
            <example>
            An example handler that implements this behaviour:
            <code>
            [AutoInitialize(false)]
            public interface IMyWidget : IControl
            {
            	void CreateWithParams(int param1, bool param2);
            }
            
            [Handler(typeof(IMyWidget))]
            public class MyWidget : Control
            {
            	public MyWidget(int param1, bool param2)
            	{
            		((IMyWidget)Handler).CreateWithParams(param1, param2);
            		Initialize(); // ensure you call this on any constructor of your widget
            	}
            }
            </code>
            </example>
            <copyright>(c) 2014 by Curtis Wensley</copyright>
            <license type="BSD-3">See LICENSE for full terms</license>
        </member>
        <member name="P:Eto.AutoInitializeAttribute.Initialize">
            <summary>
            Gets a value indicating whether to auto initialize the handler, false to defer this to the widget author
            </summary>
            <value><c>true</c> if initialize; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Eto.AutoInitializeAttribute.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Eto.AutoInitializeAttribute"/> class.
            </summary>
            <param name="initialize">If set to <c>true</c> initialize the widget automatically, otherwise <c>false</c>.</param>
        </member>
        <member name="T:Eto.CollectionChangedHandler`2">
            <summary>
            Class to help implement collection changed events on a data store
            </summary>
            <remarks>
            This is used for the platform handler of controls that use collections.
            This class helps detect changes to a collection so that the appropriate action
            can be taken to update the UI with the changes.
            
            This is a simple helper that is much easier to implement than handling
            the <see cref="E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged"/> event directly.
            </remarks>
            <typeparam name="TItem">Type of the items in the collection</typeparam>
            <typeparam name="TCollection">Type of the collection</typeparam>
        </member>
        <member name="P:Eto.CollectionChangedHandler`2.Collection">
            <summary>
            Gets the collection that this handler is observing
            </summary>
        </member>
        <member name="M:Eto.CollectionChangedHandler`2.OnRegisterCollection(System.EventArgs)">
            <summary>
            Called when the object has been registered (attached) to a collection
            </summary>
        </member>
        <member name="M:Eto.CollectionChangedHandler`2.OnUnregisterCollection(System.EventArgs)">
            <summary>
            Called when the object has unregistered the collection
            </summary>
        </member>
        <member name="M:Eto.CollectionChangedHandler`2.Register(`1)">
            <summary>
            Registers a specific collection to observe
            </summary>
            <param name="collection">collection to observe</param>
            <returns>true if the collection was registered, false otherwise</returns>
        </member>
        <member name="M:Eto.CollectionChangedHandler`2.Unregister">
            <summary>
            Unregisters the current registered collection
            </summary>
        </member>
        <member name="M:Eto.CollectionChangedHandler`2.IndexOf(`0)">
            <summary>
            Gets the index of the specified item
            </summary>
            <param name="item">Item to find the index of</param>
            <returns>Index of the item if contained in the collection, otherwise -1</returns>
        </member>
        <member name="M:Eto.CollectionChangedHandler`2.ElementAt(System.Int32)">
            <summary>
            Gets the element at the specified index of the current registered collection.
            </summary>
            <returns>The item at the specified index.</returns>
            <param name="index">Index of the item to get.</param>
        </member>
        <member name="P:Eto.CollectionChangedHandler`2.Count">
            <summary>
            Gets the count of the items in the current registered collection.
            </summary>
            <value>The count of items.</value>
        </member>
        <member name="M:Eto.CollectionChangedHandler`2.InternalIndexOf(`0)">
            <summary>
            Gets the index of the item from the collection
            </summary>
            <remarks>
            Derived classes should implement this to get the index of the item.
            </remarks>
            <param name="item">Item to find the index</param>
            <returns>index of the item in the collection, or -1 if the item is not found</returns>
        </member>
        <member name="M:Eto.CollectionChangedHandler`2.InternalElementAt(System.Int32)">
            <summary>
            Gets the element at the specified index.
            </summary>
            <remarks>
            Derived classes should implement this to get the item at the specified index.
            </remarks>
            <returns>The item at the specified index.</returns>
            <param name="index">Index of the item to get.</param>
        </member>
        <member name="M:Eto.CollectionChangedHandler`2.AddItem(`0)">
            <summary>
            Adds the item to the end of the collection
            </summary>
            <param name="item">Item to add to the collection</param>
        </member>
        <member name="M:Eto.CollectionChangedHandler`2.InsertItem(System.Int32,`0)">
            <summary>
            Inserts an item at the specified index in the collection
            </summary>
            <param name="index">Index to insert the item to</param>
            <param name="item">Item to insert</param>
        </member>
        <member name="M:Eto.CollectionChangedHandler`2.RemoveItem(System.Int32)">
            <summary>
            Removes the item at the specified index
            </summary>
            <param name="index">Index of the item to remove</param>
        </member>
        <member name="M:Eto.CollectionChangedHandler`2.RemoveAllItems">
            <summary>
            Removes all items from the collection
            </summary>
        </member>
        <member name="M:Eto.CollectionChangedHandler`2.RemoveItem(`0)">
            <summary>
            Removes the specified item
            </summary>
            <remarks>
            This will remove the item by finding the index and removing based on index.
            Implementors should override this method if there is a faster mechanism to do so.
            </remarks>
            <param name="item">Item to remove from the collection</param>
        </member>
        <member name="M:Eto.CollectionChangedHandler`2.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Adds multiple items to the end of the collection
            </summary>
            <remarks>
            This simply calls <see cref="M:Eto.CollectionChangedHandler`2.AddItem(`0)"/> for each item in the list.  If there
            is a faster mechanism for doing so, implementors should override this method.
            
            For example, sometimes adding a single item will update the UI for each item, this
            should be overridden so the UI is updated after all items have been added.
            </remarks>
            <param name="items">Enumeration of items to add to the end of the collection</param>
        </member>
        <member name="M:Eto.CollectionChangedHandler`2.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Inserts multiple items to the specified index in the collection
            </summary>
            <remarks>
            This simply calls <see cref="M:Eto.CollectionChangedHandler`2.InsertItem(System.Int32,`0)"/> for each item in the list.  If there
            is a faster mechanism for doing so, implementors should override this method.
            
            For example, sometimes inserting a single item will update the UI for each item, this
            should be overridden so the UI is updated after all items have been inserted.
            </remarks>
            <param name="index">Index to start adding the items</param>
            <param name="items">Enumeration of items to add</param>
        </member>
        <member name="M:Eto.CollectionChangedHandler`2.RemoveRange(System.Int32,System.Int32)">
            <summary>
            Removes a specified count of items from the collection starting at the specified index
            </summary>
            <remarks>
            This simply calls <see cref="M:Eto.CollectionChangedHandler`2.RemoveItem(System.Int32)"/> for each item to remove.  If there
            is a faster mechanism for doing so, implementors should override this method.
            
            For example, sometimes removing a single item will update the UI for each item, this
            should be overridden so the UI is updated after all items have been removed.
            </remarks>
            <param name="index">Index to start removing the items from</param>
            <param name="count">Number of items to remove</param>
        </member>
        <member name="M:Eto.CollectionChangedHandler`2.RemoveRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Removes the specified items from the collection
            </summary>
            <remarks>
            This simply calls <see cref="M:Eto.CollectionChangedHandler`2.RemoveItem(`0)"/> for each item to remove.  If there
            is a faster mechanism for doing so, implementors should override this method.
            
            For example, sometimes removing a single item will update the UI for each item, this
            should be overridden so the UI is updated after all items have been removed.
            </remarks>
            <param name="items">List of items to remove</param>
        </member>
        <member name="T:Eto.EnumerableChangedHandler`1">
            <summary>
            Helper class to handle collection change events of an <see cref="T:System.Collections.IEnumerable"/>
            </summary>
            <remarks>
            This is used for the platform handler of controls that use collections.
            This class helps detect changes to a collection so that the appropriate action
            can be taken to update the UI with the changes.
            
            Use this class as a base when you only have an <see cref="T:System.Collections.IEnumerable"/>.  If the object
            also implements <see cref="T:System.Collections.Specialized.INotifyCollectionChanged"/> it will get changed events
            otherwise you must register a new collection each time.
            </remarks>
            <typeparam name="TItem">Type of each item in the enumerable</typeparam>
        </member>
        <member name="T:Eto.EnumerableChangedHandler`2">
            <summary>
            Helper class to handle collection change events of an <see cref="T:System.Collections.IEnumerable"/>
            </summary>
            <remarks>
            This is used for the platform handler of controls that use collections.
            This class helps detect changes to a collection so that the appropriate action
            can be taken to update the UI with the changes.
            
            Use this class as a base when you only have an <see cref="T:System.Collections.IEnumerable"/>.  If the object
            also implements <see cref="T:System.Collections.Specialized.INotifyCollectionChanged"/> it will get changed events
            otherwise you must register a new collection each time.
            </remarks>
            <typeparam name="TItem">Type of each item in the enumerable</typeparam>
            <typeparam name="TCollection">Type of the collection to handle the change events for</typeparam>
        </member>
        <member name="M:Eto.EnumerableChangedHandler`2.InternalIndexOf(`0)">
            <summary>
            Implements the mechanism for finding the index of an item (the slow way)
            </summary>
            <remarks>
            If the collection object implements <see cref="T:System.Collections.IList"/>, this will not get called
            as it will call it's method of getting the index.  This is used as a fallback.
            </remarks>
            <param name="item">Item to find in the collection</param>
            <returns>Index of the item, or -1 if not found</returns>
        </member>
        <member name="P:Eto.EnumerableChangedHandler`2.Count">
            <summary>
            Gets the count of the items in the current registered collection.
            </summary>
            <value>The count of items.</value>
        </member>
        <member name="M:Eto.EnumerableChangedHandler`2.InternalElementAt(System.Int32)">
            <summary>
            Gets the element at the specified index.
            </summary>
            <remarks>Derived classes should implement this to get the item at the specified index.</remarks>
            <returns>The item at the specified index.</returns>
            <param name="index">Index of the item to get.</param>
        </member>
        <member name="M:Eto.EnumerableChangedHandler`2.OnRegisterCollection(System.EventArgs)">
            <summary>
            Called when the collection is registered
            </summary>
        </member>
        <member name="M:Eto.EnumerableChangedHandler`2.InitializeCollection">
            <summary>
            Initializes the collection, usually by adding the collection to the underlying handler.
            </summary>
        </member>
        <member name="T:Eto.DataStoreChangedHandler`2">
            <summary>
            Class to help implement change handling for a <see cref="T:Eto.Forms.IDataStore`1"/>
            </summary>
            <remarks>
            This is used for the platform handler of controls that use collections.
            This class helps detect changes to a collection so that the appropriate action
            can be taken to update the UI with the changes.
            
            Use this class as a base when you are detecting changes for an <see cref="T:Eto.Forms.IDataStore`1"/>.
            If the object also implements <see cref="T:System.Collections.Specialized.INotifyCollectionChanged"/>, it will get changed events.
            Otherwise, you must register a new collection each time.
            </remarks>
            <typeparam name="TItem">Type of items in the data store</typeparam>
            <typeparam name="TCollection">Type of the data store to detect changes on</typeparam>
        </member>
        <member name="M:Eto.DataStoreChangedHandler`2.GetEnumerator">
            <summary>
            Gets the enumerator.
            </summary>
            <returns>The enumerator.</returns>
        </member>
        <member name="M:Eto.DataStoreChangedHandler`2.OnRegisterCollection(System.EventArgs)">
            <summary>
            Called when the collection is registered
            </summary>
        </member>
        <member name="M:Eto.DataStoreChangedHandler`2.InternalIndexOf(`0)">
            <summary>
            Implements the mechanism for finding the index of an item (the slow way)
            </summary>
            <remarks>
            If the collection object implements <see cref="T:System.Collections.IList"/>, this will not get called
            as it will call it's method of getting the index.  This is used as a fallback.
            </remarks>
            <param name="item">Item to find in the collection</param>
            <returns>Index of the item, or -1 if not found</returns>
        </member>
        <member name="P:Eto.DataStoreChangedHandler`2.Count">
            <summary>
            Gets the count of the items in the current registered collection.
            </summary>
            <value>The count of items.</value>
        </member>
        <member name="M:Eto.DataStoreChangedHandler`2.InternalElementAt(System.Int32)">
            <summary>
            Gets the element at the specified index.
            </summary>
            <remarks>Derived classes should implement this to get the item at the specified index.</remarks>
            <returns>The item at the specified index.</returns>
            <param name="index">Index of the item to get.</param>
        </member>
        <member name="T:Eto.ContentPropertyAttribute">
            <summary>
            Attribute to indicate which property of a type is the content property
            </summary>
            <remarks>
            Used for compatibility with XAML.
            </remarks>
        </member>
        <member name="M:Eto.ContentPropertyAttribute.#ctor">
            <summary>
            Initializes a new instance of the ContentPropertyAttribute class
            </summary>
        </member>
        <member name="M:Eto.ContentPropertyAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the ContentPropertyAttribute class with the specified name
            </summary>
            <param name="name">Name of the property that should be used as the content property</param>
        </member>
        <member name="P:Eto.ContentPropertyAttribute.Name">
            <summary>
            Gets the name of the property to use as the content property
            </summary>
        </member>
        <member name="T:Eto.Drawing.PixelFormat">
            <summary>
            Format of bytes used in a <see cref="T:Eto.Drawing.Bitmap"/>
            </summary>
            <remarks>
            The format is important when modifying the bytes directly via <see cref="M:Eto.Drawing.Bitmap.Lock"/>.
            </remarks>
            <copyright>(c) 2012-2014 by Curtis Wensley</copyright>
            <license type="BSD-3">See LICENSE for full terms</license>
        </member>
        <member name="F:Eto.Drawing.PixelFormat.Format32bppRgb">
            <summary>
            32-bits (4 bytes) per pixel, ordered by an Empty byte in the highest order, followed by Red, Green, and Blue.
            </summary>
        </member>
        <member name="F:Eto.Drawing.PixelFormat.Format24bppRgb">
            <summary>
            24-bits (4 bytes) per pixel, ordered by Red in the highest order, followed by Green, and Blue.
            </summary>
        </member>
        <member name="F:Eto.Drawing.PixelFormat.Format32bppRgba">
            <summary>
            32-bits (4 bytes) per pixel, ordered by an Alpha byte in the highest order, followed by Red, Green, and Blue.
            </summary>
        </member>
        <member name="T:Eto.Drawing.ImageFormat">
            <summary>
            Format of the image to use when saving, loading, etc.
            </summary>
            <remarks>
            The format is typically used only when saving via <see cref="M:Eto.Drawing.Bitmap.Save"/>
            </remarks>
            <copyright>(c) 2012-2014 by Curtis Wensley</copyright>
            <license type="BSD-3">See LICENSE for full terms</license>
        </member>
        <member name="F:Eto.Drawing.ImageFormat.Jpeg">
            <summary>
            Jpeg format
            </summary>
        </member>
        <member name="F:Eto.Drawing.ImageFormat.Bitmap">
            <summary>
            Windows BMP format
            </summary>
        </member>
        <member name="F:Eto.Drawing.ImageFormat.Tiff">
            <summary>
            Tiff format
            </summary>
        </member>
        <member name="F:Eto.Drawing.ImageFormat.Png">
            <summary>
            Portable Network Graphics format
            </summary>
        </member>
        <member name="F:Eto.Drawing.ImageFormat.Gif">
            <summary>
            Graphics Interchange Format
            </summary>
        </member>
        <member name="T:Eto.Drawing.Bitmap">
            <summary>
            Represents an image
            </summary>
            <copyright>(c) 2012-2014 by Curtis Wensley</copyright>
            <license type="BSD-3">See LICENSE for full terms</license>
        </member>
        <member name="M:Eto.Drawing.Bitmap.FromResource(System.String,System.Reflection.Assembly)">
            <summary>
            Loads a bitmap from the resource in the specified or caller's assembly
            </summary>
            <param name="resourceName">Name of the resource in the caller's assembly to load. E.g. "MyProject.SomeFolder.YourFile.extension"</param>
            <param name="assembly">Assembly to load the resource from, or null to use the caller's assembly</param>
            <returns>A new instance of a Bitmap loaded from the specified resource</returns>
        </member>
        <member name="M:Eto.Drawing.Bitmap.FromResource(System.String,System.Type)">
            <summary>
            Loads a bitmap from a resource in the same assembly as the specified <paramref name="type"/>
            </summary>
            <returns>The bitmap instance.</returns>
            <param name="resourceName">Full name of the resource in the type's assembly. E.g. "MyProject.SomeFolder.YourFile.extension"</param>
            <param name="type">Type of the assembly to get the resource.</param>
        </member>
        <member name="M:Eto.Drawing.Bitmap.#ctor(System.String)">
            <summary>
            Initializes a new instance of a Bitmap from a file
            </summary>
            <param name="fileName">File to load as a bitmap</param>
        </member>
        <member name="M:Eto.Drawing.Bitmap.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of a Bitmap from a stream
            </summary>
            <param name="stream">Stream to load from the bitmap</param>
        </member>
        <member name="M:Eto.Drawing.Bitmap.#ctor(Eto.Drawing.Size,Eto.Drawing.PixelFormat)">
            <summary>
            Initializes a new instance of a Bitmap with the specified size and format
            </summary>
            <param name="size">Size of the bitmap to create</param>
            <param name="pixelFormat">Format of each pixel</param>
        </member>
        <member name="M:Eto.Drawing.Bitmap.#ctor(System.Int32,System.Int32,Eto.Drawing.PixelFormat)">
            <summary>
            Initializes a new instance of a Bitmap with the specified size and format
            </summary>
            <param name="width">Width of the new bitmap</param>
            <param name="height">Height of the new bitmap</param>
            <param name="pixelFormat">Format of each pixel</param>
        </member>
        <member name="M:Eto.Drawing.Bitmap.#ctor(System.Int32,System.Int32,Eto.Drawing.Graphics)">
            <summary>
            Creates a new bitmap optimized for drawing on the specified <paramref name="graphics"/>
            </summary>
            <param name="width">Width of the bitmap</param>
            <param name="height">Height of the bitmap</param>
            <param name="graphics">Graphics context the bitmap is intended to be drawn on</param>
        </member>
        <member name="M:Eto.Drawing.Bitmap.#ctor(Eto.Drawing.Image,System.Nullable{System.Int32},System.Nullable{System.Int32},Eto.Drawing.ImageInterpolation)">
            <summary>
            Create a new scaled bitmap with the specified <paramref name="width"/> and <paramref name="height"/>
            </summary>
            <param name="image">Image to scale</param>
            <param name="width">Width to scale the source image to</param>
            <param name="height">Height to scale the source image to</param>
            <param name="interpolation">Interpolation quality</param>
        </member>
        <member name="M:Eto.Drawing.Bitmap.#ctor(System.Int32,System.Int32,Eto.Drawing.PixelFormat,System.Collections.Generic.IEnumerable{Eto.Drawing.Color})">
            <summary>
            Creates a new bitmap with the specified dimensions, format and pixel data
            </summary>
            <param name="width">Width of the bitmap</param>
            <param name="height">Height of the bitmap</param>
            <param name="pixelFormat">Format of each pixel</param>
            <param name="data">Color data enumeration, starting from top-left of the bitmap and width*height length</param>
        </member>
        <member name="M:Eto.Drawing.Bitmap.#ctor(System.Int32,System.Int32,Eto.Drawing.PixelFormat,System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Creates a new bitmap with the specified dimensions, format, and integer pixel data
            </summary>
            <param name="width">Width of the bitmap</param>
            <param name="height">Height of the bitmap</param>
            <param name="pixelFormat">Format for each pixel</param>
            <param name="data">Colordata enumeration, in ARGB format, starting from top-left of the bitmap and width*height length</param>
        </member>
        <member name="M:Eto.Drawing.Bitmap.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of a Bitmap from a <paramref name="bytes"/> array
            </summary>
            <param name="bytes">Array of bytes containing the image data in one of the supported <see cref="T:Eto.Drawing.ImageFormat"/> types</param>
        </member>
        <member name="M:Eto.Drawing.Bitmap.#ctor(Eto.Drawing.Bitmap.IHandler)">
            <summary>
            Initializes a new instance of a Bitmap with the specified handler
            </summary>
            <remarks>
            This is intended to be used by platform specific code to return bitmap instances with a particular handler
            </remarks>
            <param name="handler">Platform handler to use for this instance</param>
        </member>
        <member name="M:Eto.Drawing.Bitmap.Lock">
            <summary>
            Locks the data of the image to directly access the bytes of the image
            </summary>
            <remarks>
            This locks the data to read and write to directly using unsafe pointers. After reading or updating
            the data, you must call <see cref="M:Eto.Drawing.BitmapData.Dispose"/> to unlock the data before using the bitmap.
            e.g.:
            
            <code>
            using (var bd = bitmap.Lock ()) {
            	byte* pdata = bd.Data;
            	// access data
            }
            </code>
            </remarks>
            <returns>A BitmapData object that carries a pointer and functions for manipulating the data directly</returns>
        </member>
        <member name="M:Eto.Drawing.Bitmap.Save(System.String,Eto.Drawing.ImageFormat)">
            <summary>
            Saves the bitmap to a file in the specified format
            </summary>
            <param name="fileName">File to save the bitmap to</param>
            <param name="format">Format to save as</param>
        </member>
        <member name="M:Eto.Drawing.Bitmap.Save(System.IO.Stream,Eto.Drawing.ImageFormat)">
            <summary>
            Saves the bitmap to a stream in the specified format
            </summary>
            <param name="stream">Stream to save the bitmap to</param>
            <param name="format">Format to save as</param>
        </member>
        <member name="M:Eto.Drawing.Bitmap.ToByteArray(Eto.Drawing.ImageFormat)">
            <summary>
            Saves the bitmap to an image of the specified <paramref name="imageFormat"/> into a byte array
            </summary>
            <remarks>
            This is merely a helper to save to a byte array instead of a stream.
            </remarks>
            <param name="imageFormat"></param>
            <returns></returns>
        </member>
        <member name="M:Eto.Drawing.Bitmap.Clone(System.Nullable{Eto.Drawing.Rectangle})">
            <summary>
            Creates a clone of the bitmap
            </summary>
        </member>
        <member name="M:Eto.Drawing.Bitmap.GetPixel(Eto.Drawing.Point)">
            <summary>
            Gets the color of the pixel at the specified <paramref name="position"/>
            </summary>
            <remarks>
            Note that this method can be extremely slow to go through each pixel of a bitmap.
            If you need better performance, use <see cref="M:Eto.Drawing.Bitmap.Lock"/> to get access to the bitmap's pixel buffer directly, 
            then optionally use <see cref="M:Eto.Drawing.BitmapData.GetPixel(Eto.Drawing.Point)"/> to get each pixel value.
            </remarks>
            <returns>The color of the pixel.</returns>
            <param name="position">Position to get the color of the pixel.</param>
        </member>
        <member name="M:Eto.Drawing.Bitmap.GetPixel(System.Int32,System.Int32)">
            <summary>
            Gets the color of the pixel at the specified coordinates.
            </summary>
            <remarks>
            Note that this method can be extremely slow to go through each pixel of a bitmap.
            If you need better performance, use <see cref="M:Eto.Drawing.Bitmap.Lock"/> to get access to the bitmap's pixel buffer directly, 
            then optionally use <see cref="M:Eto.Drawing.BitmapData.GetPixel(System.Int32,System.Int32)"/> to get each pixel value.
            </remarks>
            <returns>The color of the pixel at the specified coordinates</returns>
            <param name="x">The x coordinate</param>
            <param name="y">The y coordinate</param>
        </member>
        <member name="M:Eto.Drawing.Bitmap.SetPixel(Eto.Drawing.Point,Eto.Drawing.Color)">
            <summary>
            Sets the pixel color at the specified <paramref name="position"/>.
            </summary>
            <remarks>
            Note that this method can be extremely slow to set each pixel of a bitmap.
            If you need better performance, use <see cref="M:Eto.Drawing.Bitmap.Lock"/> to get access to the bitmap's pixel buffer directly, 
            then optionally use <see cref="M:Eto.Drawing.BitmapData.SetPixel(Eto.Drawing.Point,Eto.Drawing.Color)"/> to set each pixel value.
            </remarks>
            <param name="position">Position to set the pixel color.</param>
            <param name="color">Color to set.</param>
        </member>
        <member name="M:Eto.Drawing.Bitmap.SetPixel(System.Int32,System.Int32,Eto.Drawing.Color)">
            <summary>
            Sets the color of the pixel at the specified coordinates.
            </summary>
            <remarks>
            Note that this method can be extremely slow to set each pixel of a bitmap.
            If you need better performance, use <see cref="M:Eto.Drawing.Bitmap.Lock"/> to get access to the bitmap's pixel buffer directly, 
            then optionally use <see cref="M:Eto.Drawing.BitmapData.SetPixel(System.Int32,System.Int32,Eto.Drawing.Color)"/> to set each pixel value.
            </remarks>
            <param name="x">The x coordinate of the pixel to set.</param>
            <param name="y">The y coordinate of the pixel to set.</param>
            <param name="color">Color to set the pixel to.</param>
        </member>
        <member name="M:Eto.Drawing.Bitmap.WithSize(System.Int32,System.Int32)">
            <summary>
            Gets an Icon representation of this Bitmap scaled to draw within the specified fitting size.
            </summary>
            <remarks>
            This is useful when you want to draw the image at a different size than the default size without resizing the image.
            Note that the <paramref name="width"/> and <paramref name="height"/> specifies the maxiumum drawing size of the Icon, but will not
            change the aspect of each frame's bitmap.  For example, if an existing frame is 128x128, and you specify 16x32,
            then the resulting frame will draw at 16x16.
            </remarks>
            <returns>A new icon that will draw within the fitting size.</returns>
            <param name="width">Maxiumum drawing width for the new icon.</param>
            <param name="height">Maxiumum drawing height for the new icon.</param>
        </member>
        <member name="M:Eto.Drawing.Bitmap.WithSize(Eto.Drawing.Size)">
            <summary>
            Gets an Icon representation of this Bitmap scaled to draw within the specified fitting size.
            </summary>
            <remarks>
            This is useful when you want to draw the image at a different size than the default size without resizing the image.
            Note that the <paramref name="fittingSize"/> specifies the maxiumum drawing size of the Icon, but will not
            change the aspect of each frame's bitmap.  For example, if an existing frame is 128x128, and you specify 16x32,
            then the resulting frame will draw at 16x16.
            </remarks>
            <returns>A new icon that will draw within the fitting size.</returns>
            <param name="fittingSize">The maximum size to draw the Icon.</param>
        </member>
        <member name="T:Eto.Drawing.Bitmap.IHandler">
            <summary>
            Handler interface for the <see cref="T:Eto.Drawing.Bitmap"/> class
            </summary>
            <copyright>(c) 2012-2014 by Curtis Wensley</copyright>
            <license type="BSD-3">See LICENSE for full terms</license>
        </member>
        <member name="M:Eto.Drawing.Bitmap.IHandler.Create(System.String)">
            <summary>
            Create a bitmap from a file
            </summary>
            <param name="fileName">File to load as a bitmap</param>
        </member>
        <member name="M:Eto.Drawing.Bitmap.IHandler.Create(System.IO.Stream)">
            <summary>
            Create a bitmap from a specified stream
            </summary>
            <param name="stream">Stream to load from the bitmap</param>
        </member>
        <member name="M:Eto.Drawing.Bitmap.IHandler.Create(System.Int32,System.Int32,Eto.Drawing.PixelFormat)">
            <summary>
            Creates a new bitmap in-memory with the specified format
            </summary>
            <param name="width">Initial width of the bitmap</param>
            <param name="height">Initial height of the bitmap</param>
            <param name="pixelFormat">Format of each of the pixels in the bitmap</param>
        </member>
        <member name="M:Eto.Drawing.Bitmap.IHandler.Create(System.Int32,System.Int32,Eto.Drawing.Graphics)">
            <summary>
            Creates a new bitmap optimized for drawing on the specified <paramref name="graphics"/>
            </summary>
            <param name="width">Width of the bitmap</param>
            <param name="height">Height of the bitmap</param>
            <param name="graphics">Graphics context the bitmap is intended to be drawn on</param>
        </member>
        <member name="M:Eto.Drawing.Bitmap.IHandler.Create(Eto.Drawing.Image,System.Int32,System.Int32,Eto.Drawing.ImageInterpolation)">
            <summary>
            Create a new scaled bitmap with the specified <paramref name="width"/> and <paramref name="height"/>
            </summary>
            <param name="image">Image to scale</param>
            <param name="width">Width to scale the source image to</param>
            <param name="height">Height to scale the source image to</param>
            <param name="interpolation">Interpolation quality</param>
        </member>
        <member name="M:Eto.Drawing.Bitmap.IHandler.Save(System.IO.Stream,Eto.Drawing.ImageFormat)">
            <summary>
            Saves the bitmap to a stream in the specified format
            </summary>
            <param name="stream">Stream to save the bitmap to</param>
            <param name="format">Format to save as</param>
        </member>
        <member name="M:Eto.Drawing.Bitmap.IHandler.Save(System.String,Eto.Drawing.ImageFormat)">
            <summary>
            Saves the bitmap to a file in the specified format
            </summary>
            <param name="fileName">File to save the bitmap to</param>
            <param name="format">Format to save as</param>
        </member>
        <member name="M:Eto.Drawing.Bitmap.IHandler.Clone(System.Nullable{Eto.Drawing.Rectangle})">
            <summary>
            Creates a clone of the bitmap
            </summary>
            <param name="rectangle">If specified, the region of the bitmap to clone</param>
            <returns></returns>
        </member>
        <member name="M:Eto.Drawing.Bitmap.IHandler.GetPixel(System.Int32,System.Int32)">
            <summary>
            Gets the color of the pixel at the specified coordinates
            </summary>
            <returns>The color of the pixel at the specified coordinates</returns>
            <param name="x">The x coordinate</param>
            <param name="y">The y coordinate</param>
        </member>
        <member name="T:Eto.Drawing.BitmapData">
            <summary>
            Bitmap data information when accessing a <see cref="T:Eto.Drawing.Bitmap"/>'s data directly
            </summary>
            <remarks>
            The bitmap data is accessed through <see cref="M:Eto.Drawing.Bitmap.Lock"/>, which locks the data
            for direct access using the <see cref="P:Eto.Drawing.BitmapData.Data"/> pointer.
            
            Ensure you call dispose the instance when you are done accessing or writing the data,
            otherwise the bitmap may be left in an unusable state.
            </remarks>
            <copyright>(c) 2012-2014 by Curtis Wensley</copyright>
            <license type="BSD-3">See LICENSE for full terms</license>
        </member>
        <member name="M:Eto.Drawing.BitmapData.#ctor(Eto.Drawing.Image,System.IntPtr,System.Int32,System.Int32,System.Object)">
            <summary>
            Initializes a new instance of the BitmapData class
            </summary>
            <param name="image">Image this data is for</param>
            <param name="data">Pointer to the bitmap data</param>
            <param name="scanWidth">Width of each scan row, in bytes</param>
            <param name="bitsPerPixel">Bits per pixel</param>
            <param name="controlObject">Platform specific object for the bitmap data (if any)</param>
        </member>
        <member name="P:Eto.Drawing.BitmapData.Image">
            <summary>
            Gets the image this data is for
            </summary>
            <value>The bitmap.</value>
        </member>
        <member name="P:Eto.Drawing.BitmapData.BitsPerPixel">
            <summary>
            Gets the bits per pixel
            </summary>
            <value>The bits per pixel</value>
        </member>
        <member name="P:Eto.Drawing.BitmapData.BytesPerPixel">
            <summary>
            Gets the bytes per pixel
            </summary>
            <value>The bytes per pixel</value>
        </member>
        <member name="M:Eto.Drawing.BitmapData.TranslateArgbToData(System.Int32)">
            <summary>
            Translates a 32-bit ARGB value to the platform specific pixel format value
            </summary>
            <remarks>
            Use this method to translate an ARGB (Alpha in most significant) to the value
            required by the bitmap for the pixel.
            
            Each platform can have a different pixel format, and this allows you to abstract 
            setting the data directly.
            
            The ARGB value can be easily retrieved using <see cref="M:Eto.Drawing.Color.ToArgb"/>.
            
            For non-alpha bitmaps, the alpha component will be ignored
            </remarks>
            <param name="argb">ARGB pixel value to translate into the platform-specific format</param>
            <returns>Platform-specific format of the pixels that can be set directly onto the data</returns>
        </member>
        <member name="M:Eto.Drawing.BitmapData.TranslateDataToArgb(System.Int32)">
            <summary>
            Translates the platform specific pixel format to a 32-bit ARGB value
            </summary>
            <remarks>
            Use this method to translate an value from the bitmap data to a 32-bit ARGB (Alpha in most significant byte).
            
            Each platform can have a different pixel format, and this allows you to abstract 
            getting the data into a 32-bit colour.
            
            The ARGB value can be easily handled using <see cref="C:Eto.Drawing.Color(uint)"/>.
            
            For non-alpha bitmaps, the alpha component will be ignored
            </remarks>
            <param name="bitmapData">Platform specific bitmap data for a pixel to translate</param>
            <returns>Translated ARGB value from the bitmap data</returns>
        </member>
        <member name="P:Eto.Drawing.BitmapData.Data">
            <summary>
            Gets the pointer to the data of the bitmap
            </summary>
            <remarks>
            This does not include any headers, etc. so it directly points to the beginning of the data.
            
            Each row may not be on a pixel boundary, so to increment to the next row, use the <see cref="P:Eto.Drawing.BitmapData.ScanWidth"/>
            to increment the pointer to the next row.
            </remarks>
        </member>
        <member name="P:Eto.Drawing.BitmapData.Flipped">
            <summary>
            Gets a value indicating that the data is flipped (upside down)
            </summary>
            <remarks>
            Some platforms may handle memory bitmaps in a flipped fashion, such that the top of the image
            is at the bottom of the data.
            
            If this is true, then the starting row of the data is the bottom row of the image.
            </remarks>
        </member>
        <member name="M:Eto.Drawing.BitmapData.GetPixel(Eto.Drawing.Point)">
            <summary>
            Gets the color of the pixel at the specified <paramref name="position"/>
            </summary>
            <returns>The color of the pixel.</returns>
            <param name="position">Position to get the color of the pixel.</param>
        </member>
        <member name="M:Eto.Drawing.BitmapData.GetPixel(System.Int32,System.Int32)">
            <summary>
            Gets the color of the pixel at the specified coordinates.
            </summary>
            <returns>The color of the pixel.</returns>
            <param name="x">The x coordinate to get the color from.</param>
            <param name="y">The y coordinate to get the color from.</param>
        </member>
        <member name="M:Eto.Drawing.BitmapData.SetPixel(Eto.Drawing.Point,Eto.Drawing.Color)">
            <summary>
            Sets the pixel color at the specified <paramref name="position"/>.
            </summary>
            <param name="position">Position to set the pixel color.</param>
            <param name="color">Color to set.</param>
        </member>
        <member name="M:Eto.Drawing.BitmapData.SetPixel(System.Int32,System.Int32,Eto.Drawing.Color)">
            <summary>
            Sets the pixel color at the specified coordinates.
            </summary>
            <param name="x">The x coordinate of the pixel to set.</param>
            <param name="y">The y coordinate of the pixel to set.</param>
            <param name="color">Color to set the pixel to.</param>
        </member>
        <member name="P:Eto.Drawing.BitmapData.ScanWidth">
            <summary>
            Gets the width (in bytes) of each scan line (row) of pixel data
            </summary>
            <remarks>
            When advancing to the next row, use this to increment the pointer.  The number of bytes
            for each row might not be equivalent to the bytes per pixel multiplied by the width of the image.
            </remarks>
        </member>
        <member name="P:Eto.Drawing.BitmapData.ControlObject">
            <summary>
            Gets the platform-specific control object for the bitmap data
            </summary>
        </member>
        <member name="M:Eto.Drawing.BitmapData.Dispose">
            <summary>
            Releases all resource used by the <see cref="T:Eto.Drawing.BitmapData"/> object.
            </summary>
            <remarks>Call <see cref="M:Eto.Drawing.BitmapData.Dispose"/> when you are finished using the <see cref="T:Eto.Drawing.BitmapData"/>. The
            <see cref="M:Eto.Drawing.BitmapData.Dispose"/> method leaves the <see cref="T:Eto.Drawing.BitmapData"/> in an unusable state. After calling
            <see cref="M:Eto.Drawing.BitmapData.Dispose"/>, you must release all references to the <see cref="T:Eto.Drawing.BitmapData"/> so the garbage
            collector can reclaim the memory that the <see cref="T:Eto.Drawing.BitmapData"/> was occupying.</remarks>
        </member>
        <member name="M:Eto.Drawing.BitmapData.Dispose(System.Boolean)">
            <summary>
            Disposes the brush
            </summary>
            <param name="disposing">If set to <c>true</c> dispose was called explicitly, otherwise specify false if calling from a finalizer</param>
        </member>
        <member name="M:Eto.Drawing.BitmapData.GetPixels">
            <summary>
            Gets an enumerable of pixels for each scan line from top to bottom.
            </summary>
            <remarks>
            You can use this to translate the pixel data into an array, e.g. 
            <code>
            int[] argbData = bitmapData.GetPixels().Select(p => p.ToArgb()).ToArray();
            </code>
            </remarks>
            <returns></returns>
        </member>
        <member name="M:Eto.Drawing.BitmapData.SetPixels(System.Collections.Generic.IEnumerable{Eto.Drawing.Color})">
            <summary>
            Use this to set the pixels of the bitmap from an array or other source.
            </summary>
            <remarks>
            For example, you can use this to set the pixel data from an int array like so:
            <code>
            int[] myData;
            bitmapData.SetPixels(myData.Select(Color.FromArgb));
            </code>
            This will set all the pixels up till the end of the enumeration.  
            If there isn't enough data to fill the bitmap entirely, it will not set any additional pixels.
            </remarks>
            <param name="pixels">Enumerator that returns each pixel of the bitmap from top to bottom</param>
        </member>
        <member name="T:Eto.Drawing.Brush">
            <summary>
            Base brush class to use when calling fill methods of a <see cref="T:Eto.Drawing.Graphics"/> object
            </summary>
            <copyright>(c) 2012-2014 by Curtis Wensley</copyright>
            <license type="BSD-3">See LICENSE for full terms</license>
        </member>
        <member name="P:Eto.Drawing.Brush.ControlObject">
            <summary>
            Gets or sets the control object for this widget
            </summary>
            <value>The control object for the widget</value>
        </member>
        <member name="P:Eto.Drawing.Brush.Handler">
            <summary>
            Gets the platform handler object for the widget
            </summary>
            <value>The handler for the widget</value>
        </member>
        <member name="M:Eto.Drawing.Brush.Dispose">
            <summary>
            Releases all resource used by the <see cref="T:Eto.Drawing.Brush"/> object.
            </summary>
            <remarks>Call <see cref="M:Eto.Drawing.Brush.Dispose"/> when you are finished using the <see cref="T:Eto.Drawing.Brush"/>. The
            <see cref="M:Eto.Drawing.Brush.Dispose"/> method leaves the <see cref="T:Eto.Drawing.Brush"/> in an unusable state. After calling
            <see cref="M:Eto.Drawing.Brush.Dispose"/>, you must release all references to the <see cref="T:Eto.Drawing.Brush"/> so the garbage
            collector can reclaim the memory that the <see cref="T:Eto.Drawing.Brush"/> was occupying.</remarks>
        </member>
        <member name="M:Eto.Drawing.Brush.Dispose(System.Boolean)">
            <summary>
            Disposes the brush
            </summary>
            <param name="disposing">If set to <c>true</c> dispose was called explicitly, otherwise specify false if calling from a finalizer</param>
        </member>
        <member name="T:Eto.Drawing.Brush.IHandler">
            <summary>
            Base interface for brush handlers of type <see cref="T:Eto.Drawing.Brush"/>
            </summary>
            <copyright>(c) 2012-2014 by Curtis Wensley</copyright>
            <license type="BSD-3">See LICENSE for full terms</license>
        </member>
        <member name="T:Eto.Drawing.Brushes">
            <summary>
            List of brushes with common colors and brush cache for solid color brushes
            </summary>
            <copyright>(c) 2012-2014 by Curtis Wensley</copyright>
            <license type="BSD-3">See LICENSE for full terms</license>
        </member>
        <member name="M:Eto.Drawing.Brushes.Cached(Eto.Drawing.Color)">
            <summary>
            Gets a cached solid brush with the specified color
            </summary>
            <param name="color">Color of the cached solid brush to get</param>
        </member>
        <member name="M:Eto.Drawing.Brushes.ClearCache">
            <summary>
            Clears the brush cache
            </summary>
            <remarks>
            This is useful if you are using the <see cref="M:Eto.Drawing.Brushes.Cached(Eto.Drawing.Color)"/> method to cache brushes and want to clear it
            to conserve memory or resources.
            </remarks>
        </member>
        <member name="P:Eto.Drawing.Brushes.Transparent">
            <summary>Gets a solid brush with an ARGB value of #00000000</summary>
        </member>
        <member name="P:Eto.Drawing.Brushes.IndianRed">
            <summary>Gets a solid brush with a color ARGB value of #FFCD5C5C</summary>
        </member>
        <member name="P:Eto.Drawing.Brushes.LightCoral">
            <summary>Gets a solid brush with a color ARGB value of #FFF08080</summary>
        </member>
        <member name="P:Eto.Drawing.Brushes.Salmon">
            <summary>Gets a solid brush with a color ARGB value of #FFFA8072</summary>
        </member>
        <member name="P:Eto.Drawing.Brushes.DarkSalmon">
            <summary>Gets a solid brush with a color ARGB value of #FFE9967A</summary>
        </member>
        <member name="P:Eto.Drawing.Brushes.LightSalmon">
            <summary>Gets a solid brush with a color ARGB value of #FFFFA07A</summary>
        </member>
        <member name="P:Eto.Drawing.Brushes.Red">
            <summary>Gets a solid brush with a color ARGB value of #FFFF0000</summary>
        </member>
        <member name="P:Eto.Drawing.Brushes.Crimson">
            <summary>Gets a solid brush with a color ARGB value of #FFDC143C</summary>
        </member>
        <member name="P:Eto.Drawing.Brushes.Firebrick">
            <summary>Gets a solid brush with a color ARGB value of #FFB22222</summary>
        </member>
        <member name="P:Eto.Drawing.Brushes.DarkRed">
            <summary>Gets a solid brush with a color ARGB value of #FF8B0000</summary>
        </member>
        <member name="P:Eto.Drawing.Brushes.Pink">
            <summary>Gets a solid brush with a color ARGB value of #FFFFC0CB</summary>
        </member>
        <member name="P:Eto.Drawing.Brushes.LightPink">
            <summary>Gets a solid brush with a color ARGB value of #FFFFB6C1</summary>
        </member>
        <member name="P:Eto.Drawing.Brushes.HotPink">
            <summary>Gets a solid brush with a color ARGB value of #FFFF69B4</summary>
        </member>
        <member name="P:Eto.Drawing.Brushes.DeepPink">
            <summary>Gets a solid brush with a color ARGB value of #FFFF1493</summary>
        </member>
        <member name="P:Eto.Drawing.Brushes.MediumVioletRed">
            <summary>Gets a solid brush with a color ARGB value of #FFC71585</summary>
        </member>
        <member name="P:Eto.Drawing.Brushes.PaleVioletRed">
            <summary>Gets a solid brush with a color ARGB value of #FFDB7093</summary>
        </member>
        <member name="P:Eto.Drawing.Brushes.Coral">
            <summary>Gets a solid brush with a color ARGB value of #FFFF7F50</summary>
        </member>
        <member name="P:Eto.Drawing.Brushes.Tomato">
            <summary>Gets a solid brush with a color ARGB value of #FFFF6347</summary>
        </member>
        <member name="P:Eto.Drawing.Brushes.OrangeRed">
            <summary>Gets a solid brush with a color ARGB value of #FFFF4500</summary>
        </member>
        <member name="P:Eto.Drawing.Brushes.DarkOrange">
            <summary>Gets a solid brush with a color ARGB value of #FFFF8C00</summary>
        </member>
        <member name="P:Eto.Drawing.Brushes.Orange">
            <summary>Gets a solid brush with a color ARGB value of #FFFFA500</summary>
        </member>
        <member name="P:Eto.Drawing.Brushes.Gold">
            <summary>Gets a solid brush with a color ARGB value of #FFFFD700</summary>
        </member>
        <member name="P:Eto.Drawing.Brushes.Yellow">
            <summary>Gets a solid brush with a color ARGB value of #FFFFFF00</summary>
        </member>
        <member name="P:Eto.Drawing.Brushes.LightYellow">
            <summary>Gets a solid brush with a color ARGB value of #FFFFFFE0</summary>
        </member>
        <member name="P:Eto.Drawing.Brushes.LemonChiffon">
            <summary>Gets a solid brush with a color ARGB value of #FFFFFACD</summary>
        </member>
        <member name="P:Eto.Drawing.Brushes.LightGoldenrodYellow">
            <summary>Gets a solid brush with a color ARGB value of #FFFAFAD2</summary>
        </member>
        <member name="P:Eto.Drawing.Brushes.PapayaWhip">
            <summary>Gets a solid brush with a color ARGB value of #FFFFEFD5</summary>
        </member>
        <member name="P:Eto.Drawing.Brushes.Moccasin">
            <summary>Gets a solid brush with a color ARGB value of #FFFFE4B5</summary>
        </member>
        <member name="P:Eto.Drawing.Brushes.PeachPuff">
            <summary>Gets a solid brush with a color ARGB value of #FFFFDAB9</summary>
        </member>
        <member name="P:Eto.Drawing.Brushes.PaleGoldenrod">
            <summary>Gets a solid brush with a color ARGB value of #FFEEE8AA</summary>
        </member>
        <member name="P:Eto.Drawing.Brushes.Khaki">
            <summary>Gets a solid brush with a color ARGB value of #FFF0E68C</summary>
        </member>
        <member name="P:Eto.Drawing.Brushes.DarkKhaki">
            <summary>Gets a solid brush with a color ARGB value of #FFBDB76B</summary>
        </member>
        <member name="P:Eto.Drawing.Brushes.Lavender">
            <summary>Gets a solid brush with a color ARGB value of #FFE6E6FA</summary>
        </member>
        <member name="P:Eto.Drawing.Brushes.Thistle">
            <summary>Gets a solid brush with a color ARGB value of #FFD8BFD8</summary>
        </member>
        <member name="P:Eto.Drawing.Brushes.Plum">
            <summary>Gets a solid brush with a color ARGB value of #FFDDA0DD</summary>
        </member>
        <member name="P:Eto.Drawing.Brushes.Violet">
            <summary>Gets a solid brush with a color ARGB value of #FFEE82EE</summary>
        </member>
        <member name="P:Eto.Drawing.Brushes.Orchid">
            <summary>Gets a solid brush with a color ARGB value of #FFDA70D6</summary>
        </member>
        <member name="P:Eto.Drawing.Brushes.Fuchsia">
            <summary>Gets a solid brush with a color ARGB value of #FFFF00FF</summary>
        </member>
        <member name="P:Eto.Drawing.Brushes.Magenta">
            <summary>Gets a solid brush with a color ARGB value of #FFFF00FF</summary>
        </member>
        <member name="P:Eto.Drawing.Brushes.MediumOrchid">
            <summary>Gets a solid brush with a color ARGB value of #FFBA55D3</summary>
        </member>
        <member name="P:Eto.Drawing.Brushes.MediumPurple">
            <summary>Gets a solid brush with a color ARGB value of #FF9370DB</summary>
        </member>
        <member name="P:Eto.Drawing.Brushes.BlueViolet">
            <summary>Gets a solid brush with a color ARGB value of #FF8A2BE2</summary>
        </member>
        <member name="P:Eto.Drawing.Brushes.DarkViolet">
            <summary>Gets a solid brush with a color ARGB value of #FF9400D3</summary>
        </member>
        <member name="P:Eto.Drawing.Brushes.DarkOrchid">
            <summary>Gets a solid brush with a color ARGB value of #FF9932CC</summary>
        </member>
        <member name="P:Eto.Drawing.Brushes.DarkMagenta">
            <summary>Gets a solid brush with a color ARGB value of #FF8B008B</summary>
        </member>
        <member name="P:Eto.Drawing.Brushes.Purple">
            <summary>Gets a solid brush with a color ARGB value of #FF800080</summary>
        </member>
        <member name="P:Eto.Drawing.Brushes.Indigo">
            <summary>Gets a solid brush with a color ARGB value of #FF4B0082</summary>
        </member>
        <member name="P:Eto.Drawing.Brushes.DarkSlateBlue">
            <summary>Gets a solid brush with a color ARGB value of #FF483D8B</summary>
        </member>
        <member name="P:Eto.Drawing.Brushes.SlateBlue">
            <summary>Gets a solid brush with a color ARGB value of #FF6A5ACD</summary>
        </member>
        <member name="P:Eto.Drawing.Brushes.MediumSlateBlue">
            <summary>Gets a solid brush with a color ARGB value of #FF7B68EE</summary>
        </member>
        <member name="P:Eto.Drawing.Brushes.GreenYellow">
            <summary>Gets a solid brush with a color ARGB value of #FFADFF2F</summary>
        </member>
        <member name="P:Eto.Drawing.Brushes.Chartreuse">
            <summary>Gets a solid brush with a color ARGB value of #FF7FFF00</summary>
        </member>
        <member name="P:Eto.Drawing.Brushes.LawnGreen">
            <summary>Gets a solid brush with a color ARGB value of #FF7CFC00</summary>
        </member>
        <member name="P:Eto.Drawing.Brushes.Lime">
            <summary>Gets a solid brush with a color ARGB value of #FF00FF00</summary>
        </member>
        <member name="P:Eto.Drawing.Brushes.LimeGreen">
            <summary>Gets a solid brush with a color ARGB value of #FF32CD32</summary>
        </member>
        <member name="P:Eto.Drawing.Brushes.PaleGreen">
            <summary>Gets a solid brush with a color ARGB value of #FF98FB98</summary>
        </member>
        <member name="P:Eto.Drawing.Brushes.LightGreen">
            <summary>Gets a solid brush with a color ARGB value of #FF90EE90</summary>
        </member>
        <member name="P:Eto.Drawing.Brushes.MediumSpringGreen">
            <summary>Gets a solid brush with a color ARGB value of #FF00FA9A</summary>
        </member>
        <member name="P:Eto.Drawing.Brushes.SpringGreen">
            <summary>Gets a solid brush with a color ARGB value of #FF00FF7F</summary>
        </member>
        <member name="P:Eto.Drawing.Brushes.MediumSeaGreen">
            <summary>Gets a solid brush with a color ARGB value of #FF3CB371</summary>
        </member>
        <member name="P:Eto.Drawing.Brushes.SeaGreen">
            <summary>Gets a solid brush with a color ARGB value of #FF2E8B57</summary>
        </member>
        <member name="P:Eto.Drawing.Brushes.ForestGreen">
            <summary>Gets a solid brush with a color ARGB value of #FF228B22</summary>
        </member>
        <member name="P:Eto.Drawing.Brushes.Green">
            <summary>Gets a solid brush with a color ARGB value of #FF008000</summary>
        </member>
        <member name="P:Eto.Drawing.Brushes.DarkGreen">
            <summary>Gets a solid brush with a color ARGB value of #FF006400</summary>
        </member>
        <member name="P:Eto.Drawing.Brushes.YellowGreen">
            <summary>Gets a solid brush with a color ARGB value of #FF9ACD32</summary>
        </member>
        <member name="P:Eto.Drawing.Brushes.OliveDrab">
            <summary>Gets a solid brush with a color ARGB value of #FF6B8E23</summary>
        </member>
        <member name="P:Eto.Drawing.Brushes.Olive">
            <summary>Gets a solid brush with a color ARGB value of #FF808000</summary>
        </member>
        <member name="P:Eto.Drawing.Brushes.DarkOliveGreen">
            <summary>Gets a solid brush with a color ARGB value of #FF556B2F</summary>
        </member>
        <member name="P:Eto.Drawing.Brushes.MediumAquamarine">
            <summary>Gets a solid brush with a color ARGB value of #FF66CDAA</summary>
        </member>
        <member name="P:Eto.Drawing.Brushes.DarkSeaGreen">
            <summary>Gets a solid brush with a color ARGB value of #FF8FBC8F</summary>
        </member>
        <member name="P:Eto.Drawing.Brushes.LightSeaGreen">
            <summary>Gets a solid brush with a color ARGB value of #FF20B2AA</summary>
        </member>
        <member name="P:Eto.Drawing.Brushes.DarkCyan">
            <summary>Gets a solid brush with a color ARGB value of #FF008B8B</summary>
        </member>
        <member name="P:Eto.Drawing.Brushes.Teal">
            <summary>Gets a solid brush with a color ARGB value of #FF008080</summary>
        </member>
        <member name="P:Eto.Drawing.Brushes.Aqua">
            <summary>Gets a solid brush with a color ARGB value of #FF00FFFF</summary>
        </member>
        <member name="P:Eto.Drawing.Brushes.Cyan">
            <summary>Gets a solid brush with a color ARGB value of #FF00FFFF</summary>
        </member>
        <member name="P:Eto.Drawing.Brushes.LightCyan">
            <summary>Gets a solid brush with a color ARGB value of #FFE0FFFF</summary>
        </member>
        <member name="P:Eto.Drawing.Brushes.PaleTurquoise">
            <summary>Gets a solid brush with a color ARGB value of #FFAFEEEE</summary>
        </member>
        <member name="P:Eto.Drawing.Brushes.Aquamarine">
            <summary>Gets a solid brush with a color ARGB value of #FF7FFFD4</summary>
        </member>
        <member name="P:Eto.Drawing.Brushes.Turquoise">
            <summary>Gets a solid brush with a color ARGB value of #FF40E0D0</summary>
        </member>
        <member name="P:Eto.Drawing.Brushes.MediumTurquoise">
            <summary>Gets a solid brush with a color ARGB value of #FF48D1CC</summary>
        </member>
        <member name="P:Eto.Drawing.Brushes.DarkTurquoise">
            <summary>Gets a solid brush with a color ARGB value of #FF00CED1</summary>
        </member>
        <member name="P:Eto.Drawing.Brushes.CadetBlue">
            <summary>Gets a solid brush with a color ARGB value of #FF5F9EA0</summary>
        </member>
        <member name="P:Eto.Drawing.Brushes.SteelBlue">
            <summary>Gets a solid brush with a color ARGB value of #FF4682B4</summary>
        </member>
        <member name="P:Eto.Drawing.Brushes.LightSteelBlue">
            <summary>Gets a solid brush with a color ARGB value of #FFB0C4DE</summary>
        </member>
        <member name="P:Eto.Drawing.Brushes.PowderBlue">
            <summary>Gets a solid brush with a color ARGB value of #FFB0E0E6</summary>
        </member>
        <member name="P:Eto.Drawing.Brushes.LightBlue">
            <summary>Gets a solid brush with a color ARGB value of #FFADD8E6</summary>
        </member>
        <member name="P:Eto.Drawing.Brushes.SkyBlue">
            <summary>Gets a solid brush with a color ARGB value of #FF87CEEB</summary>
        </member>
        <member name="P:Eto.Drawing.Brushes.LightSkyBlue">
            <summary>Gets a solid brush with a color ARGB value of #FF87CEFA</summary>
        </member>
        <member name="P:Eto.Drawing.Brushes.DeepSkyBlue">
            <summary>Gets a solid brush with a color ARGB value of #FF00BFFF</summary>
        </member>
        <member name="P:Eto.Drawing.Brushes.DodgerBlue">
            <summary>Gets a solid brush with a color ARGB value of #FF1E90FF</summary>
        </member>
        <member name="P:Eto.Drawing.Brushes.CornflowerBlue">
            <summary>Gets a solid brush with a color ARGB value of #FF6495ED</summary>
        </member>
        <member name="P:Eto.Drawing.Brushes.RoyalBlue">
            <summary>Gets a solid brush with a color ARGB value of #FF4169E1</summary>
        </member>
        <member name="P:Eto.Drawing.Brushes.Blue">
            <summary>Gets a solid brush with a color ARGB value of #FF0000FF</summary>
        </member>
        <member name="P:Eto.Drawing.Brushes.MediumBlue">
            <summary>Gets a solid brush with a color ARGB value of #FF0000CD</summary>
        </member>
        <member name="P:Eto.Drawing.Brushes.DarkBlue">
            <summary>Gets a solid brush with a color ARGB value of #FF00008B</summary>
        </member>
        <member name="P:Eto.Drawing.Brushes.Navy">
            <summary>Gets a solid brush with a color ARGB value of #FF000080</summary>
        </member>
        <member name="P:Eto.Drawing.Brushes.MidnightBlue">
            <summary>Gets a solid brush with a color ARGB value of #FF191970</summary>
        </member>
        <member name="P:Eto.Drawing.Brushes.Cornsilk">
            <summary>Gets a solid brush with a color ARGB value of #FFFFF8DC</summary>
        </member>
        <member name="P:Eto.Drawing.Brushes.BlanchedAlmond">
            <summary>Gets a solid brush with a color ARGB value of #FFFFEBCD</summary>
        </member>
        <member name="P:Eto.Drawing.Brushes.Bisque">
            <summary>Gets a solid brush with a color ARGB value of #FFFFE4C4</summary>
        </member>
        <member name="P:Eto.Drawing.Brushes.NavajoWhite">
            <summary>Gets a solid brush with a color ARGB value of #FFFFDEAD</summary>
        </member>
        <member name="P:Eto.Drawing.Brushes.Wheat">
            <summary>Gets a solid brush with a color ARGB value of #FFF5DEB3</summary>
        </member>
        <member name="P:Eto.Drawing.Brushes.BurlyWood">
            <summary>Gets a solid brush with a color ARGB value of #FFDEB887</summary>
        </member>
        <member name="P:Eto.Drawing.Brushes.Tan">
            <summary>Gets a solid brush with a color ARGB value of #FFD2B48C</summary>
        </member>
        <member name="P:Eto.Drawing.Brushes.RosyBrown">
            <summary>Gets a solid brush with a color ARGB value of #FFBC8F8F</summary>
        </member>
        <member name="P:Eto.Drawing.Brushes.SandyBrown">
            <summary>Gets a solid brush with a color ARGB value of #FFF4A460</summary>
        </member>
        <member name="P:Eto.Drawing.Brushes.Goldenrod">
            <summary>Gets a solid brush with a color ARGB value of #FFDAA520</summary>
        </member>
        <member name="P:Eto.Drawing.Brushes.DarkGoldenrod">
            <summary>Gets a solid brush with a color ARGB value of #FFB8860B</summary>
        </member>
        <member name="P:Eto.Drawing.Brushes.Peru">
            <summary>Gets a solid brush with a color ARGB value of #FFCD853F</summary>
        </member>
        <member name="P:Eto.Drawing.Brushes.Chocolate">
            <summary>Gets a solid brush with a color ARGB value of #FFD2691E</summary>
        </member>
        <member name="P:Eto.Drawing.Brushes.SaddleBrown">
            <summary>Gets a solid brush with a color ARGB value of #FF8B4513</summary>
        </member>
        <member name="P:Eto.Drawing.Brushes.Sienna">
            <summary>Gets a solid brush with a color ARGB value of #FFA0522D</summary>
        </member>
        <member name="P:Eto.Drawing.Brushes.Brown">
            <summary>Gets a solid brush with a color ARGB value of #FFA52A2A</summary>
        </member>
        <member name="P:Eto.Drawing.Brushes.Maroon">
            <summary>Gets a solid brush with a color ARGB value of #FF800000</summary>
        </member>
        <member name="P:Eto.Drawing.Brushes.White">
            <summary>Gets a solid brush with a color ARGB value of #FFFFFFFF</summary>
        </member>
        <member name="P:Eto.Drawing.Brushes.Snow">
            <summary>Gets a solid brush with a color ARGB value of #FFFFFAFA</summary>
        </member>
        <member name="P:Eto.Drawing.Brushes.Honeydew">
            <summary>Gets a solid brush with a color ARGB value of #FFF0FFF0</summary>
        </member>
        <member name="P:Eto.Drawing.Brushes.MintCream">
            <summary>Gets a solid brush with a color ARGB value of #FFF5FFFA</summary>
        </member>
        <member name="P:Eto.Drawing.Brushes.Azure">
            <summary>Gets a solid brush with a color ARGB value of #FFF0FFFF</summary>
        </member>
        <member name="P:Eto.Drawing.Brushes.AliceBlue">
            <summary>Gets a solid brush with a color ARGB value of #FFF0F8FF</summary>
        </member>
        <member name="P:Eto.Drawing.Brushes.GhostWhite">
            <summary>Gets a solid brush with a color ARGB value of #FFF8F8FF</summary>
        </member>
        <member name="P:Eto.Drawing.Brushes.WhiteSmoke">
            <summary>Gets a solid brush with a color ARGB value of #FFF5F5F5</summary>
        </member>
        <member name="P:Eto.Drawing.Brushes.Seashell">
            <summary>Gets a solid brush with a color ARGB value of #FFFFF5EE</summary>
        </member>
        <member name="P:Eto.Drawing.Brushes.Beige">
            <summary>Gets a solid brush with a color ARGB value of #FFF5F5DC</summary>
        </member>
        <member name="P:Eto.Drawing.Brushes.OldLace">
            <summary>Gets a solid brush with a color ARGB value of #FFFDF5E6</summary>
        </member>
        <member name="P:Eto.Drawing.Brushes.FloralWhite">
            <summary>Gets a solid brush with a color ARGB value of #FFFFFAF0</summary>
        </member>
        <member name="P:Eto.Drawing.Brushes.Ivory">
            <summary>Gets a solid brush with a color ARGB value of #FFFFFFF0</summary>
        </member>
        <member name="P:Eto.Drawing.Brushes.AntiqueWhite">
            <summary>Gets a solid brush with a color ARGB value of #FFFAEBD7</summary>
        </member>
        <member name="P:Eto.Drawing.Brushes.Linen">
            <summary>Gets a solid brush with a color ARGB value of #FFFAF0E6</summary>
        </member>
        <member name="P:Eto.Drawing.Brushes.LavenderBlush">
            <summary>Gets a solid brush with a color ARGB value of #FFFFF0F5</summary>
        </member>
        <member name="P:Eto.Drawing.Brushes.MistyRose">
            <summary>Gets a solid brush with a color ARGB value of #FFFFE4E1</summary>
        </member>
        <member name="P:Eto.Drawing.Brushes.Gainsboro">
            <summary>Gets a solid brush with a color ARGB value of #FFDCDCDC</summary>
        </member>
        <member name="P:Eto.Drawing.Brushes.LightGrey">
            <summary>Gets a solid brush with a color ARGB value of #FFD3D3D3</summary>
        </member>
        <member name="P:Eto.Drawing.Brushes.Silver">
            <summary>Gets a solid brush with a color ARGB value of #FFC0C0C0</summary>
        </member>
        <member name="P:Eto.Drawing.Brushes.DarkGray">
            <summary>Gets a solid brush with a color ARGB value of #FFA9A9A9</summary>
        </member>
        <member name="P:Eto.Drawing.Brushes.Gray">
            <summary>Gets a solid brush with a color ARGB value of #FF808080</summary>
        </member>
        <member name="P:Eto.Drawing.Brushes.DimGray">
            <summary>Gets a solid brush with a color ARGB value of #FF696969</summary>
        </member>
        <member name="P:Eto.Drawing.Brushes.LightSlateGray">
            <summary>Gets a solid brush with a color ARGB value of #FF778899</summary>
        </member>
        <member name="P:Eto.Drawing.Brushes.SlateGray">
            <summary>Gets a solid brush with a color ARGB value of #FF708090</summary>
        </member>
        <member name="P:Eto.Drawing.Brushes.DarkSlateGray">
            <summary>Gets a solid brush with a color ARGB value of #FF2F4F4F</summary>
        </member>
        <member name="P:Eto.Drawing.Brushes.Black">
            <summary>Gets a solid brush with a color ARGB value of #FF000000</summary>
        </member>
        <member name="T:Eto.Drawing.Color">
            <summary>
            Represents a color with RGBA (Red, Green, Blue, and Alpha) components
            </summary>
            <copyright>(c) 2014 by Curtis Wensley</copyright>
            <license type="BSD-3">See LICENSE for full terms</license>
        </member>
        <member name="P:Eto.Drawing.Color.A">
            <summary>
            Gets or sets the alpha/opacity (0-1)
            </summary>
        </member>
        <member name="P:Eto.Drawing.Color.R">
            <summary>
            Gets or sets the red component (0-1)
            </summary>
        </member>
        <member name="P:Eto.Drawing.Color.G">
            <summary>
            Gets or sets the green (0-1)
            </summary>
        </member>
        <member name="P:Eto.Drawing.Color.B">
            <summary>
            Gets or sets the blue (0-1)
            </summary>
        </member>
        <member name="P:Eto.Drawing.Color.Ab">
            <summary>
            Gets or sets the alpha/opacity component as a byte of a 32-bit color (0-255)
            </summary>
            <value>The alpha component</value>
        </member>
        <member name="P:Eto.Drawing.Color.Rb">
            <summary>
            Gets or sets the red component as a byte of a 32-bit color (0-255)
            </summary>
            <value>The red component</value>
        </member>
        <member name="P:Eto.Drawing.Color.Gb">
            <summary>
            Gets or sets the green component as a byte of a 32-bit color (0-255)
            </summary>
            <value>The green component</value>
        </member>
        <member name="P:Eto.Drawing.Color.Bb">
            <summary>
            Gets or sets the blue component as a byte of a 32-bit color (0-255)
            </summary>
            <value>The blue component</value>
        </member>
        <member name="F:Eto.Drawing.Color.ColorSplitter">
            <summary>
            The character to split up the string which will be converted
            </summary>
        </member>
        <member name="M:Eto.Drawing.Color.FromArgb(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a color from 8-bit ARGB components
            </summary>
            <returns>A new instance of the Color object with the specified components</returns>
            <param name="red">The red component (0-255)</param>
            <param name="green">The green component (0-255)</param>
            <param name="blue">The blue component (0-255)</param>
            <param name="alpha">The alpha component (0-255)</param>
        </member>
        <member name="M:Eto.Drawing.Color.FromArgb(System.Int32)">
            <summary>
            Creates a Color from a 32-bit ARGB value
            </summary>
            <param name="argb">32-bit ARGB value with Alpha in the high byte</param>
            <returns>A new instance of the Color object with the specified color</returns>
        </member>
        <member name="M:Eto.Drawing.Color.FromRgb(System.Int32)">
            <summary>
            Creates a Color from a 24-bit RGB value
            </summary>
            <param name="argb">24-bit RGB value with Red in the high byte</param>
            <returns>A new instance of the Color object with the specified color</returns>
        </member>
        <member name="M:Eto.Drawing.Color.FromGrayscale(System.Single,System.Single)">
            <summary>
            Creates a Color with a specified value for the Red, Green, and Blue components
            </summary>
            <param name="val">Value for each RGB component</param>
            <param name="alpha">Alpha value</param>
            <returns>A new instance of the Color object with the specified grayscale color</returns>
        </member>
        <member name="M:Eto.Drawing.Color.Distance(Eto.Drawing.Color,Eto.Drawing.Color)">
            <summary>
            Calculates the distance of the two colors in the RGB scale
            </summary>
            This is useful for comparing two different color values to determine if they are similar.
            
            Typically though, <see cref="M:Eto.Drawing.ColorHSL.Distance(Eto.Drawing.ColorHSL,Eto.Drawing.ColorHSL)"/> gives the best result instead of using the RGB method.
            <param name="value1">First color to compare</param>
            <param name="value2">Second color to compare with</param>
            <returns>The overall distance/difference between the two colours. A lower value indicates a closer match</returns>
        </member>
        <member name="M:Eto.Drawing.Color.Blend(Eto.Drawing.Color,Eto.Drawing.Color)">
            <summary>
            Blends the <paramref name="blendColor"/> onto the specified <paramref name="baseColor"/>
            </summary>
            <remarks>
            This computes the blended value of two colors.
            </remarks>
            <param name="baseColor">Base color</param>
            <param name="blendColor">Color to blend onto the base color</param>
        </member>
        <member name="M:Eto.Drawing.Color.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the Color object with the specified red, green, blue, and alpha components
            </summary>
            <param name="red">Red component (0-1)</param>
            <param name="green">Green component (0-1)</param>
            <param name="blue">Blue component (0-1)</param>
            <param name="alpha">Alpha component (0-1)</param>
        </member>
        <member name="M:Eto.Drawing.Color.#ctor(Eto.Drawing.Color,System.Nullable{System.Single})">
            <summary>
            Initializes a new instance of the Color object as a copy of the specified <paramref name="color"/>
            </summary>
            <param name="color">Color to copy</param>
            <param name="alpha">Alpha to use for the new color, or null to use the alpha component from <paramref name="color"/></param>
        </member>
        <member name="M:Eto.Drawing.Color.TryParse(System.String,Eto.Drawing.Color@)">
            <summary>
            Converts the specified string to a color
            </summary>
            <remarks>
            The string can be any of these formats:
            	- #AARRGGBB or #RRGGBB  (where ARGB are hex values)
            	- 0xAARRGGBB or 0xRRGGBB
            	- [named] (where [named] is a name of one of the properties in <see cref="T:Eto.Drawing.Colors"/>)
            	- [uint]  (where [uint] is a base-10 ARGB value)
            	- [red], [green], [blue] (where each component is a value from 0-255)
            	- [alpha], [red], [green], [blue]  (where each component is a value from 0-255)
            	
            If the string is null or empty, this will return <see cref="P:Eto.Drawing.Colors.Transparent"/>
            </remarks>
            <param name="value">String value to parse</param>
            <param name="color">Color struct with the parsed value, or Transparent if value is invalid</param>
            <returns>True if the value was successfully parsed into a color, false otherwise</returns>
        </member>
        <member name="M:Eto.Drawing.Color.Parse(System.String)">
            <summary>
            Converts a string into a new instance of a Color
            </summary>
            <remarks>
            Use <see cref="M:Eto.Drawing.Color.TryParse(System.String,Eto.Drawing.Color@)"/> instead of try/catch.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">If the value is an invalid color</exception>
            <param name="value">Value to convert</param>
        </member>
        <member name="M:Eto.Drawing.Color.Equals(System.Object)">
            <summary>
            Tests if the specified object has the same value as this Color
            </summary>
            <param name="obj">Color to compare with</param>
            <returns>True if the specified object is a Color and has the same ARGB components as this color, false otherwise</returns>
        </member>
        <member name="M:Eto.Drawing.Color.GetHashCode">
            <summary>
            Gets the hash code for this Color
            </summary>
            <returns>Hash code for the color</returns>
        </member>
        <member name="M:Eto.Drawing.Color.op_Equality(Eto.Drawing.Color,Eto.Drawing.Color)">
            <summary>
            Compares two Color structs for equality
            </summary>
            <param name="color1">The first Color struct to compare</param>
            <param name="color2">The second Color struct to compare</param>
            <returns>True if both the Color structs have the same values for all ARGB components</returns>
        </member>
        <member name="M:Eto.Drawing.Color.op_Inequality(Eto.Drawing.Color,Eto.Drawing.Color)">
            <summary>
            Compares two Color structs for inequality
            </summary>
            <param name="color1">The first Color struct to compare</param>
            <param name="color2">The second Color struct to compare</param>
            <returns>True if the Color structs have a differing value for any of the ARGB components</returns>
        </member>
        <member name="M:Eto.Drawing.Color.Invert">
            <summary>
            Inverts the RGB color values
            </summary>
            <remarks>
            This inverts the color components (other than the alpha component) by making them
            equal to the 1 minus the component's value.  This is useful for when you want to show
            a highlighted color but still show the variation in colors.
            </remarks>
        </member>
        <member name="M:Eto.Drawing.Color.ToArgb">
            <summary>
            Converts this color to a 32-bit ARGB value.
            </summary>
            <returns>The 32-bit ARGB value that corresponds to this color</returns>
        </member>
        <member name="M:Eto.Drawing.Color.ToHex(System.Boolean)">
            <summary>
            Converts this color to a hex representation
            </summary>
            <remarks>
            This will either return a hex value with 8 digits (two per component), or 6 digits (two per RGB) if the <paramref name="includeAlpha"/> is set to false.
            </remarks>
            <param name="includeAlpha">True to include the alpha component, false to exclude it</param>
            <returns>A hex representation of this color, with 8 digits if <paramref name="includeAlpha"/> is true, or 6 digits if false</returns>
        </member>
        <member name="M:Eto.Drawing.Color.ToString">
            <summary>
            Converts this object to a string
            </summary>
            <remarks>
            This just calls <see cref="M:Eto.Drawing.Color.ToHex(System.Boolean)"/>
            </remarks>
            <returns>A string representation of this object</returns>
        </member>
        <member name="M:Eto.Drawing.Color.Equals(Eto.Drawing.Color)">
            <summary>
            Compares the specified color for equality
            </summary>
            <param name="other">Other color to determine equality</param>
            <returns>True if all components of the specified color are equal to this object</returns>
        </member>
        <member name="M:Eto.Drawing.Color.FromElementId(System.Int32,System.Int32)">
            <summary>
            Creates a new color from an Element ID value
            </summary>
            <remarks>
            This algorithm is from the SVG# code base:
            The counter is used to generate IDs in the range [0,2^24-1]
            The 24 bits of the counter are interpreted as follows:
            [red 7 bits | green 7 bits | blue 7 bits |shuffle term 3 bits]
            The shuffle term is used to define how the remaining high
            bit is set on each color. The colors are generated in the
            range [0,127] (7 bits) instead of [0,255]. Then the shuffle term
            is used to adjust them into the range [0,255].
            This algorithm has the feature that consecutive ids generate
            visually distinct colors.
            </remarks>
            <returns>A new instance of a Color with the value from the element id</returns>
            <param name="id">Identifier.</param>
            <param name="alpha">Alpha.</param>
        </member>
        <member name="M:Eto.Drawing.Color.ToElementId">
            <summary>
            Converts this color to an Element ID value
            </summary>
            <seealso cref="M:Eto.Drawing.Color.FromElementId(System.Int32,System.Int32)"/>
            <returns>The element id value of this color</returns>
        </member>
        <member name="M:Eto.Drawing.Color.System#IComparable{Eto#Drawing#Color}#CompareTo(Eto.Drawing.Color)">
            <summary>
            Compares two colors for sorting Colors in standard collections.
            </summary>
            <returns>A signed value indicating whether this instance is greater, less, or equal to other.</returns>
            <param name="other">The other color value to compare with.</param>
        </member>
        <member name="M:Eto.Drawing.Color.ToHSB">
            <summary>
            Converts this RGB color to the HSB colorspace.
            </summary>
            <returns>A new ColorHSB structure.</returns>
        </member>
        <member name="M:Eto.Drawing.Color.ToHSL">
            <summary>
            Converts this RGB color to the HSL colorspace.
            </summary>
            <returns>A new ColorHSL structure.</returns>
        </member>
        <member name="M:Eto.Drawing.Color.ToCMYK">
            <summary>
            Converts this RGB color to the CMYK colorspace.
            </summary>
            <returns>A new ColorCMYK structure.</returns>
        </member>
        <member name="T:Eto.Drawing.ColorCMYK">
            <summary>
            Represents a color in the CMYK color model.
            </summary>
            <remarks>
            This is a helper class to handle CMYK colors. Whenever a color is used it must be
            converted to a <see cref="T:Eto.Drawing.Color"/> struct first, either by using <see cref="M:Eto.Drawing.ColorCMYK.ToColor"/>
            or the implicit conversion.
            </remarks>
            <copyright>(c) 2014 by Curtis Wensley</copyright>
            <license type="BSD-3">See LICENSE for full terms</license>
        </member>
        <member name="P:Eto.Drawing.ColorCMYK.C">
            <summary>
            Cyan component
            </summary>
        </member>
        <member name="P:Eto.Drawing.ColorCMYK.M">
            <summary>
            Magenta component
            </summary>
        </member>
        <member name="P:Eto.Drawing.ColorCMYK.Y">
            <summary>
            Yellow component
            </summary>
        </member>
        <member name="P:Eto.Drawing.ColorCMYK.K">
            <summary>
            Key (black) component
            </summary>
        </member>
        <member name="P:Eto.Drawing.ColorCMYK.A">
            <summary>
            Alpha component
            </summary>
        </member>
        <member name="M:Eto.Drawing.ColorCMYK.Distance(Eto.Drawing.ColorCMYK,Eto.Drawing.ColorCMYK)">
            <summary>
            Calculates the 'distance' of two CMYK colors
            </summary>
            <remarks>
            This is useful for comparing two different color values to determine if they are similar.
            
            Typically though, <see cref="M:Eto.Drawing.ColorHSL.Distance(Eto.Drawing.ColorHSL,Eto.Drawing.ColorHSL)"/> gives the best result instead of this method.
            </remarks>
            <param name="value1">First color to compare</param>
            <param name="value2">Second color to compare</param>
            <returns>The overall distance/difference between the two colours. A lower value indicates a closer match</returns>
        </member>
        <member name="M:Eto.Drawing.ColorCMYK.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the ColorCMYK class
            </summary>
            <param name="cyan">Cyan component</param>
            <param name="magenta">Magenta component</param>
            <param name="yellow">Yellow component</param>
            <param name="black">Key/black component</param>
            <param name="alpha">Alpha component</param>
        </member>
        <member name="M:Eto.Drawing.ColorCMYK.#ctor(Eto.Drawing.Color)">
            <summary>
            Initializes a new instance of the ColorCMYK with the specified RGB <see cref="T:Eto.Drawing.Color"/>
            </summary>
            <param name="color">Color to convert from</param>
        </member>
        <member name="M:Eto.Drawing.ColorCMYK.ToColor">
            <summary>
            Gets this object as an ARGB color value
            </summary>
        </member>
        <member name="M:Eto.Drawing.ColorCMYK.op_Equality(Eto.Drawing.ColorCMYK,Eto.Drawing.ColorCMYK)">
            <summary>
            Compares two colors for equality
            </summary>
            <param name="color1">First color to compare</param>
            <param name="color2">Second color to compare</param>
            <returns>true if the two colors are equal, false otherwise</returns>
        </member>
        <member name="M:Eto.Drawing.ColorCMYK.op_Inequality(Eto.Drawing.ColorCMYK,Eto.Drawing.ColorCMYK)">
            <summary>
            Compares two colors for inequality
            </summary>
            <param name="color1">First color to compare</param>
            <param name="color2">Second color to compare</param>
            <returns>true if the two colors are not equal, false otherwise</returns>
        </member>
        <member name="M:Eto.Drawing.ColorCMYK.op_Implicit(Eto.Drawing.ColorCMYK)~Eto.Drawing.Color">
            <summary>
            Converts this instance to an ARGB color value
            </summary>
            <param name="cmyk">cmyk value to convert</param>
            <returns>A new instance of the Color class with the converted value</returns>
        </member>
        <member name="M:Eto.Drawing.ColorCMYK.op_Implicit(Eto.Drawing.Color)~Eto.Drawing.ColorCMYK">
            <summary>
            Converts this an ARGB color value to a CMYK value
            </summary>
            <param name="color">RGB value to convert</param>
            <returns>A new instance of the ColorCMYK class with the converted value</returns>
        </member>
        <member name="M:Eto.Drawing.ColorCMYK.Equals(System.Object)">
            <summary>
            Returns a value indicating that this is equal to the specified object
            </summary>
            <param name="obj">object to compare with</param>
            <returns>true if the colours are equal, false otherwise</returns>
        </member>
        <member name="M:Eto.Drawing.ColorCMYK.GetHashCode">
            <summary>
            Gets the hash code for this object
            </summary>
        </member>
        <member name="M:Eto.Drawing.ColorCMYK.Equals(Eto.Drawing.ColorCMYK)">
            <summary>
            Returns a value indicating that this is equal to the specified color
            </summary>
            <param name="other">ColorCMYK to compare with</param>
            <returns>True if the colours are equal, false otherwise</returns>
        </member>
        <member name="T:Eto.Drawing.ColorConverter">
            <summary>
            Converts instances of other types to and from a <see cref="T:Eto.Drawing.Color"/>.
            </summary>
            <remarks>
            This only supports converting from a string supported by the <see cref="M:Eto.Drawing.Color.TryParse(System.String,Eto.Drawing.Color@)"/> method.
            
            When converting to a string, it converts to a Hex format via <see cref="M:Eto.Drawing.Color.ToHex(System.Boolean)"/>
            </remarks>
            <copyright>(c) 2014 by Curtis Wensley</copyright>
            <license type="BSD-3">See LICENSE for full terms</license>
        </member>
        <member name="M:Eto.Drawing.ColorConverter.CanConvertTo(Eto.ITypeDescriptorContext,System.Type)">
            <summary>
            Determines if this can convert a <see cref="T:Eto.Drawing.Color"/> to the <paramref name="destinationType"/>
            </summary>
            <param name="context">Context of the conversion</param>
            <param name="destinationType">Type to convert to</param>
            <returns>True if this converter supports the <paramref name="destinationType"/>, false otherwise</returns>
        </member>
        <member name="M:Eto.Drawing.ColorConverter.CanConvertFrom(Eto.ITypeDescriptorContext,System.Type)">
            <summary>
            Determines if this can convert a value with the type of <paramref name="sourceType"/> to a <see cref="T:Eto.Drawing.Color"/>
            </summary>
            <param name="context">Context of the conversion</param>
            <param name="sourceType">Type to convert from</param>
            <returns>True if this can convert to the <paramref name="sourceType"/>, false otherwise</returns>
        </member>
        <member name="M:Eto.Drawing.ColorConverter.ConvertFrom(Eto.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts the <paramref name="value"/> to an instance of a <see cref="T:Eto.Drawing.Color"/>
            </summary>
            <param name="context">Context of the conversion</param>
            <param name="culture">Culture to use for the conversion</param>
            <param name="value">Value to convert</param>
            <returns>A <see cref="T:Eto.Drawing.Color"/> instance with the converted value</returns>
        </member>
        <member name="M:Eto.Drawing.ColorConverter.ConvertTo(Eto.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts a <see cref="T:Eto.Drawing.Color"/> instance to the specified <paramref name="destinationType"/>
            </summary>
            <param name="context">Context of the conversion</param>
            <param name="culture">Culture to use for the conversion</param>
            <param name="value"><see cref="T:Eto.Drawing.Color"/> value to convert</param>
            <param name="destinationType">Type to convert the <paramref name="value"/> to</param>
            <returns>An object of type <paramref name="destinationType"/> converted from <paramref name="value"/></returns>
        </member>
        <member name="T:Eto.Drawing.ColorHSB">
            <summary>
            Color representation in HSB color model
            </summary>
            <remarks>
            This allows you to manage a color in the HSB (otherwise known as HSV) cylindrical model.
            
            This is a helper class to handle HSB colors. Whenever a color is used it must be
            converted to a <see cref="T:Eto.Drawing.Color"/> struct first, either by using <see cref="M:Eto.Drawing.ColorHSB.ToColor"/>
            or the implicit conversion.
            </remarks>
            <copyright>(c) 2014 by Curtis Wensley</copyright>
            <license type="BSD-3">See LICENSE for full terms</license>
        </member>
        <member name="P:Eto.Drawing.ColorHSB.A">
            <summary>
            Gets or sets the alpha (0-1)
            </summary>
        </member>
        <member name="P:Eto.Drawing.ColorHSB.H">
            <summary>
            Gets or sets the hue (0-360)
            </summary>
        </member>
        <member name="P:Eto.Drawing.ColorHSB.S">
            <summary>
            Gets or sets the saturation (0-1)
            </summary>
        </member>
        <member name="P:Eto.Drawing.ColorHSB.B">
            <summary>
            Gets or sets the brightness (0-1)
            </summary>
        </member>
        <member name="M:Eto.Drawing.ColorHSB.Distance(Eto.Drawing.ColorHSB,Eto.Drawing.ColorHSB)">
            <summary>
            Calculates the 'distance' of two HSB colors
            </summary>
            <remarks>
            This is useful for comparing two different color values to determine if they are similar.
            
            Typically though, <see cref="M:Eto.Drawing.ColorHSL.Distance(Eto.Drawing.ColorHSL,Eto.Drawing.ColorHSL)"/> gives the best result instead of this method.
            </remarks>
            <param name="value1">First color to compare</param>
            <param name="value2">Second color to compare</param>
            <returns>The overall distance/difference between the two colours. A lower value indicates a closer match</returns>
        </member>
        <member name="M:Eto.Drawing.ColorHSB.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the ColorHSB class
            </summary>
            <param name="hue">Hue component (0-360)</param>
            <param name="saturation">Saturation component (0-1)</param>
            <param name="brightness">Brightness component (0-1)</param>
            <param name="alpha">Alpha component (0-1)</param>
        </member>
        <member name="M:Eto.Drawing.ColorHSB.#ctor(Eto.Drawing.Color)">
            <summary>
            Initializes a new instance of the ColorHSB class with the same color values as <paramref name="color"/>
            </summary>
            <param name="color">RBG Color value to convert to HSB</param>
        </member>
        <member name="M:Eto.Drawing.ColorHSB.ToColor">
            <summary>
            Converts this instance to an equivalent RGB <see cref="T:Eto.Drawing.Color"/>
            </summary>
            <returns>A new instance of a <see cref="T:Eto.Drawing.Color"/> with an equivalent color</returns>
        </member>
        <member name="M:Eto.Drawing.ColorHSB.op_Equality(Eto.Drawing.ColorHSB,Eto.Drawing.ColorHSB)">
            <summary>
            Compares two instances of the <see cref="T:Eto.Drawing.ColorHSB"/> for equality
            </summary>
            <param name="color1">First color to compare</param>
            <param name="color2">Secont color to compare</param>
            <returns>True if both instances are equal, false otherwise</returns>
        </member>
        <member name="M:Eto.Drawing.ColorHSB.op_Inequality(Eto.Drawing.ColorHSB,Eto.Drawing.ColorHSB)">
            <summary>
            Compares two instances of the <see cref="T:Eto.Drawing.ColorHSB"/> for inequality
            </summary>
            <param name="color1">First color to compare</param>
            <param name="color2">Secont color to compare</param>
            <returns>True if the instances are not equal, false if they are equal</returns>
        </member>
        <member name="M:Eto.Drawing.ColorHSB.op_Implicit(Eto.Drawing.ColorHSB)~Eto.Drawing.Color">
            <summary>
            Implicitly converts from a ColorHSB to a <see cref="T:Eto.Drawing.Color"/>
            </summary>
            <param name="hsb">HSB color instance to convert</param>
            <returns>A new instance of a <see cref="T:Eto.Drawing.Color"/> that represents the <paramref name="hsb"/> value</returns>
        </member>
        <member name="M:Eto.Drawing.ColorHSB.op_Implicit(Eto.Drawing.Color)~Eto.Drawing.ColorHSB">
            <summary>
            Implicitly converts from a <see cref="T:Eto.Drawing.Color"/> to a ColorHSB
            </summary>
            <param name="color">RGB color value to convert</param>
            <returns>A new instance of a ColorHSB that represents the RGB <paramref name="color"/> value</returns>
        </member>
        <member name="M:Eto.Drawing.ColorHSB.Equals(System.Object)">
            <summary>
            Compares an object to determine equality with this instance
            </summary>
            <param name="obj">Object to compare</param>
            <returns>True if the object is equal to this instance's value, false otherwise</returns>
        </member>
        <member name="M:Eto.Drawing.ColorHSB.GetHashCode">
            <summary>
            Gets the hash code for this object
            </summary>
            <returns>Hash code to use for this object</returns>
        </member>
        <member name="M:Eto.Drawing.ColorHSB.Equals(Eto.Drawing.ColorHSB)">
            <summary>
            Compares a ColorHSB for equality
            </summary>
            <param name="other">Other instance to compare with</param>
            <returns>True if <paramref name="other"/> is equal to this instance's value, false otherwise</returns>
        </member>
        <member name="T:Eto.Drawing.ColorHSL">
            <summary>
            Color representation in the HSL color model
            </summary>
            <remarks>
            This allows you to manage a color in the HSL cylindrical model.
            
            This is a helper class to handle HSL colors. Whenever a color is used it must be
            converted to a <see cref="T:Eto.Drawing.Color"/> struct first, either by using <see cref="M:Eto.Drawing.ColorHSL.ToColor"/>
            or the implicit conversion.
            </remarks>
            <copyright>(c) 2014 by Curtis Wensley</copyright>
            <license type="BSD-3">See LICENSE for full terms</license>
        </member>
        <member name="P:Eto.Drawing.ColorHSL.A">
            <summary>
            Gets or sets the alpha (0-1)
            </summary>
        </member>
        <member name="P:Eto.Drawing.ColorHSL.H">
            <summary>
            Gets or sets the hue (0-360)
            </summary>
        </member>
        <member name="P:Eto.Drawing.ColorHSL.S">
            <summary>
            Gets or sets the saturation (0-1)
            </summary>
        </member>
        <member name="P:Eto.Drawing.ColorHSL.L">
            <summary>
            Gets or sets the luminance (0-1)
            </summary>
        </member>
        <member name="M:Eto.Drawing.ColorHSL.Distance(Eto.Drawing.ColorHSL,Eto.Drawing.ColorHSL)">
            <summary>
            Calculates the 'distance' of two HSL colors
            </summary>
            <remarks>
            This is useful for comparing two different color values to determine if they are similar.
            
            The HSL comparison algorithm, while not essentially accurate, gives a good representation of like-colours
            to the human eye. This method of calculating distance is preferred over the other methods (RGB, CMYK, HSB)
            </remarks>
            <param name="value1">First color to compare</param>
            <param name="value2">Second color to compare</param>
            <returns>The overall distance/difference between the two colours. A lower value indicates a closer match</returns>
        </member>
        <member name="M:Eto.Drawing.ColorHSL.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the ColorHSL class
            </summary>
            <param name="hue">Hue component (0-360)</param>
            <param name="saturation">Saturation component (0-1)</param>
            <param name="luminance">Luminace component (0-1)</param>
            <param name="alpha">Alpha component (0-1)</param>
        </member>
        <member name="M:Eto.Drawing.ColorHSL.#ctor(Eto.Drawing.Color)">
            <summary>
            Initializes a new instance of the ColorHSL class with converted HSL values from a <see cref="T:Eto.Drawing.Color"/>
            </summary>
            <param name="color">RGB color to convert to HSL</param>
        </member>
        <member name="M:Eto.Drawing.ColorHSL.ToColor">
            <summary>
            Converts this HSL color to a RGB <see cref="T:Eto.Drawing.Color"/> value
            </summary>
            <returns>A new instance of an RGB <see cref="T:Eto.Drawing.Color"/> converted from HSL</returns>
        </member>
        <member name="M:Eto.Drawing.ColorHSL.op_Equality(Eto.Drawing.ColorHSL,Eto.Drawing.ColorHSL)">
            <summary>
            Compares two <see cref="T:Eto.Drawing.ColorHSL"/> objects for equality
            </summary>
            <param name="color1">First color to compare</param>
            <param name="color2">Second color to compare</param>
            <returns>True if the objects are equal, false otherwise</returns>
        </member>
        <member name="M:Eto.Drawing.ColorHSL.op_Inequality(Eto.Drawing.ColorHSL,Eto.Drawing.ColorHSL)">
            <summary>
            Compares two <see cref="T:Eto.Drawing.ColorHSL"/> objects for equality
            </summary>
            <param name="color1">First color to compare</param>
            <param name="color2">Second color to compare</param>
            <returns>True if the objects are equal, false otherwise</returns>
        </member>
        <member name="M:Eto.Drawing.ColorHSL.op_Implicit(Eto.Drawing.ColorHSL)~Eto.Drawing.Color">
            <summary>
            Implicitly converts a <see cref="T:Eto.Drawing.ColorHSL"/> to an RGB <see cref="T:Eto.Drawing.Color"/>
            </summary>
            <param name="hsl">HSL Color to convert</param>
            <returns>An RGB color converted from the specified <paramref name="hsl"/> color</returns>
        </member>
        <member name="M:Eto.Drawing.ColorHSL.op_Implicit(Eto.Drawing.Color)~Eto.Drawing.ColorHSL">
            <summary>
            Implicitly converts from a <see cref="T:Eto.Drawing.Color"/> to a ColorHSL
            </summary>
            <param name="color">RGB color value to convert</param>
            <returns>A new instance of a ColorHSL that represents the RGB <paramref name="color"/> value</returns>
        </member>
        <member name="M:Eto.Drawing.ColorHSL.Equals(System.Object)">
            <summary>
            Compares the given object for equality with this object
            </summary>
            <param name="obj">Object to compare with</param>
            <returns>True if the object is equal to this instance, false otherwise</returns>
        </member>
        <member name="M:Eto.Drawing.ColorHSL.GetHashCode">
            <summary>
            Gets the hash code for this object
            </summary>
            <returns>Hash code for this object</returns>
        </member>
        <member name="M:Eto.Drawing.ColorHSL.Equals(Eto.Drawing.ColorHSL)">
            <summary>
            Compares the given object for equality with this object
            </summary>
            <param name="other">Object to compare with</param>
            <returns>True if the object is equal to this instance, false otherwise</returns>
        </member>
        <member name="T:Eto.Drawing.Colors">
            <summary>
            List of common colors
            </summary>
            <copyright>(c) 2014 by Curtis Wensley</copyright>
            <license type="BSD-3">See LICENSE for full terms</license>
        </member>
        <member name="P:Eto.Drawing.Colors.Transparent">
            <summary>Gets a color with an ARGB value of #</summary>
        </member>
        <member name="P:Eto.Drawing.Colors.IndianRed">
            <summary>Gets a color with an ARGB value of #FFCD5C5C</summary>
        </member>
        <member name="P:Eto.Drawing.Colors.LightCoral">
            <summary>Gets a color with an ARGB value of #FFF08080</summary>
        </member>
        <member name="P:Eto.Drawing.Colors.Salmon">
            <summary>Gets a color with an ARGB value of #FFFA8072</summary>
        </member>
        <member name="P:Eto.Drawing.Colors.DarkSalmon">
            <summary>Gets a color with an ARGB value of #FFE9967A</summary>
        </member>
        <member name="P:Eto.Drawing.Colors.LightSalmon">
            <summary>Gets a color with an ARGB value of #FFFFA07A</summary>
        </member>
        <member name="P:Eto.Drawing.Colors.Red">
            <summary>Gets a color with an ARGB value of #FFFF0000</summary>
        </member>
        <member name="P:Eto.Drawing.Colors.Crimson">
            <summary>Gets a color with an ARGB value of #FFDC143C</summary>
        </member>
        <member name="P:Eto.Drawing.Colors.Firebrick">
            <summary>Gets a color with an ARGB value of #FFB22222</summary>
        </member>
        <member name="P:Eto.Drawing.Colors.DarkRed">
            <summary>Gets a color with an ARGB value of #FF8B0000</summary>
        </member>
        <member name="P:Eto.Drawing.Colors.Pink">
            <summary>Gets a color with an ARGB value of #FFFFC0CB</summary>
        </member>
        <member name="P:Eto.Drawing.Colors.LightPink">
            <summary>Gets a color with an ARGB value of #FFFFB6C1</summary>
        </member>
        <member name="P:Eto.Drawing.Colors.HotPink">
            <summary>Gets a color with an ARGB value of #FFFF69B4</summary>
        </member>
        <member name="P:Eto.Drawing.Colors.DeepPink">
            <summary>Gets a color with an ARGB value of #FFFF1493</summary>
        </member>
        <member name="P:Eto.Drawing.Colors.MediumVioletRed">
            <summary>Gets a color with an ARGB value of #FFC71585</summary>
        </member>
        <member name="P:Eto.Drawing.Colors.PaleVioletRed">
            <summary>Gets a color with an ARGB value of #FFDB7093</summary>
        </member>
        <member name="P:Eto.Drawing.Colors.Coral">
            <summary>Gets a color with an ARGB value of #FFFF7F50</summary>
        </member>
        <member name="P:Eto.Drawing.Colors.Tomato">
            <summary>Gets a color with an ARGB value of #FFFF6347</summary>
        </member>
        <member name="P:Eto.Drawing.Colors.OrangeRed">
            <summary>Gets a color with an ARGB value of #FFFF4500</summary>
        </member>
        <member name="P:Eto.Drawing.Colors.DarkOrange">
            <summary>Gets a color with an ARGB value of #FFFF8C00</summary>
        </member>
        <member name="P:Eto.Drawing.Colors.Orange">
            <summary>Gets a color with an ARGB value of #FFFFA500</summary>
        </member>
        <member name="P:Eto.Drawing.Colors.Gold">
            <summary>Gets a color with an ARGB value of #FFFFD700</summary>
        </member>
        <member name="P:Eto.Drawing.Colors.Yellow">
            <summary>Gets a color with an ARGB value of #FFFFFF00</summary>
        </member>
        <member name="P:Eto.Drawing.Colors.LightYellow">
            <summary>Gets a color with an ARGB value of #FFFFFFE0</summary>
        </member>
        <member name="P:Eto.Drawing.Colors.LemonChiffon">
            <summary>Gets a color with an ARGB value of #FFFFFACD</summary>
        </member>
        <member name="P:Eto.Drawing.Colors.LightGoldenrodYellow">
            <summary>Gets a color with an ARGB value of #FFFAFAD2</summary>
        </member>
        <member name="P:Eto.Drawing.Colors.PapayaWhip">
            <summary>Gets a color with an ARGB value of #FFFFEFD5</summary>
        </member>
        <member name="P:Eto.Drawing.Colors.Moccasin">
            <summary>Gets a color with an ARGB value of #FFFFE4B5</summary>
        </member>
        <member name="P:Eto.Drawing.Colors.PeachPuff">
            <summary>Gets a color with an ARGB value of #FFFFDAB9</summary>
        </member>
        <member name="P:Eto.Drawing.Colors.PaleGoldenrod">
            <summary>Gets a color with an ARGB value of #FFEEE8AA</summary>
        </member>
        <member name="P:Eto.Drawing.Colors.Khaki">
            <summary>Gets a color with an ARGB value of #FFF0E68C</summary>
        </member>
        <member name="P:Eto.Drawing.Colors.DarkKhaki">
            <summary>Gets a color with an ARGB value of #FFBDB76B</summary>
        </member>
        <member name="P:Eto.Drawing.Colors.Lavender">
            <summary>Gets a color with an ARGB value of #FFE6E6FA</summary>
        </member>
        <member name="P:Eto.Drawing.Colors.Thistle">
            <summary>Gets a color with an ARGB value of #FFD8BFD8</summary>
        </member>
        <member name="P:Eto.Drawing.Colors.Plum">
            <summary>Gets a color with an ARGB value of #FFDDA0DD</summary>
        </member>
        <member name="P:Eto.Drawing.Colors.Violet">
            <summary>Gets a color with an ARGB value of #FFEE82EE</summary>
        </member>
        <member name="P:Eto.Drawing.Colors.Orchid">
            <summary>Gets a color with an ARGB value of #FFDA70D6</summary>
        </member>
        <member name="P:Eto.Drawing.Colors.Fuchsia">
            <summary>Gets a color with an ARGB value of #FFFF00FF</summary>
        </member>
        <member name="P:Eto.Drawing.Colors.Magenta">
            <summary>Gets a color with an ARGB value of #FFFF00FF</summary>
        </member>
        <member name="P:Eto.Drawing.Colors.MediumOrchid">
            <summary>Gets a color with an ARGB value of #FFBA55D3</summary>
        </member>
        <member name="P:Eto.Drawing.Colors.MediumPurple">
            <summary>Gets a color with an ARGB value of #FF9370DB</summary>
        </member>
        <member name="P:Eto.Drawing.Colors.BlueViolet">
            <summary>Gets a color with an ARGB value of #FF8A2BE2</summary>
        </member>
        <member name="P:Eto.Drawing.Colors.DarkViolet">
            <summary>Gets a color with an ARGB value of #FF9400D3</summary>
        </member>
        <member name="P:Eto.Drawing.Colors.DarkOrchid">
            <summary>Gets a color with an ARGB value of #FF9932CC</summary>
        </member>
        <member name="P:Eto.Drawing.Colors.DarkMagenta">
            <summary>Gets a color with an ARGB value of #FF8B008B</summary>
        </member>
        <member name="P:Eto.Drawing.Colors.Purple">
            <summary>Gets a color with an ARGB value of #FF800080</summary>
        </member>
        <member name="P:Eto.Drawing.Colors.Indigo">
            <summary>Gets a color with an ARGB value of #FF4B0082</summary>
        </member>
        <member name="P:Eto.Drawing.Colors.DarkSlateBlue">
            <summary>Gets a color with an ARGB value of #FF483D8B</summary>
        </member>
        <member name="P:Eto.Drawing.Colors.SlateBlue">
            <summary>Gets a color with an ARGB value of #FF6A5ACD</summary>
        </member>
        <member name="P:Eto.Drawing.Colors.MediumSlateBlue">
            <summary>Gets a color with an ARGB value of #FF7B68EE</summary>
        </member>
        <member name="P:Eto.Drawing.Colors.GreenYellow">
            <summary>Gets a color with an ARGB value of #FFADFF2F</summary>
        </member>
        <member name="P:Eto.Drawing.Colors.Chartreuse">
            <summary>Gets a color with an ARGB value of #FF7FFF00</summary>
        </member>
        <member name="P:Eto.Drawing.Colors.LawnGreen">
            <summary>Gets a color with an ARGB value of #FF7CFC00</summary>
        </member>
        <member name="P:Eto.Drawing.Colors.Lime">
            <summary>Gets a color with an ARGB value of #FF00FF00</summary>
        </member>
        <member name="P:Eto.Drawing.Colors.LimeGreen">
            <summary>Gets a color with an ARGB value of #FF32CD32</summary>
        </member>
        <member name="P:Eto.Drawing.Colors.PaleGreen">
            <summary>Gets a color with an ARGB value of #FF98FB98</summary>
        </member>
        <member name="P:Eto.Drawing.Colors.LightGreen">
            <summary>Gets a color with an ARGB value of #FF90EE90</summary>
        </member>
        <member name="P:Eto.Drawing.Colors.MediumSpringGreen">
            <summary>Gets a color with an ARGB value of #FF00FA9A</summary>
        </member>
        <member name="P:Eto.Drawing.Colors.SpringGreen">
            <summary>Gets a color with an ARGB value of #FF00FF7F</summary>
        </member>
        <member name="P:Eto.Drawing.Colors.MediumSeaGreen">
            <summary>Gets a color with an ARGB value of #FF3CB371</summary>
        </member>
        <member name="P:Eto.Drawing.Colors.SeaGreen">
            <summary>Gets a color with an ARGB value of #FF2E8B57</summary>
        </member>
        <member name="P:Eto.Drawing.Colors.ForestGreen">
            <summary>Gets a color with an ARGB value of #FF228B22</summary>
        </member>
        <member name="P:Eto.Drawing.Colors.Green">
            <summary>Gets a color with an ARGB value of #FF008000</summary>
        </member>
        <member name="P:Eto.Drawing.Colors.DarkGreen">
            <summary>Gets a color with an ARGB value of #FF006400</summary>
        </member>
        <member name="P:Eto.Drawing.Colors.YellowGreen">
            <summary>Gets a color with an ARGB value of #FF9ACD32</summary>
        </member>
        <member name="P:Eto.Drawing.Colors.OliveDrab">
            <summary>Gets a color with an ARGB value of #FF6B8E23</summary>
        </member>
        <member name="P:Eto.Drawing.Colors.Olive">
            <summary>Gets a color with an ARGB value of #FF808000</summary>
        </member>
        <member name="P:Eto.Drawing.Colors.DarkOliveGreen">
            <summary>Gets a color with an ARGB value of #FF556B2F</summary>
        </member>
        <member name="P:Eto.Drawing.Colors.MediumAquamarine">
            <summary>Gets a color with an ARGB value of #FF66CDAA</summary>
        </member>
        <member name="P:Eto.Drawing.Colors.DarkSeaGreen">
            <summary>Gets a color with an ARGB value of #FF8FBC8F</summary>
        </member>
        <member name="P:Eto.Drawing.Colors.LightSeaGreen">
            <summary>Gets a color with an ARGB value of #FF20B2AA</summary>
        </member>
        <member name="P:Eto.Drawing.Colors.DarkCyan">
            <summary>Gets a color with an ARGB value of #FF008B8B</summary>
        </member>
        <member name="P:Eto.Drawing.Colors.Teal">
            <summary>Gets a color with an ARGB value of #FF008080</summary>
        </member>
        <member name="P:Eto.Drawing.Colors.Aqua">
            <summary>Gets a color with an ARGB value of #FF00FFFF</summary>
        </member>
        <member name="P:Eto.Drawing.Colors.Cyan">
            <summary>Gets a color with an ARGB value of #FF00FFFF</summary>
        </member>
        <member name="P:Eto.Drawing.Colors.LightCyan">
            <summary>Gets a color with an ARGB value of #FFE0FFFF</summary>
        </member>
        <member name="P:Eto.Drawing.Colors.PaleTurquoise">
            <summary>Gets a color with an ARGB value of #FFAFEEEE</summary>
        </member>
        <member name="P:Eto.Drawing.Colors.Aquamarine">
            <summary>Gets a color with an ARGB value of #FF7FFFD4</summary>
        </member>
        <member name="P:Eto.Drawing.Colors.Turquoise">
            <summary>Gets a color with an ARGB value of #FF40E0D0</summary>
        </member>
        <member name="P:Eto.Drawing.Colors.MediumTurquoise">
            <summary>Gets a color with an ARGB value of #FF48D1CC</summary>
        </member>
        <member name="P:Eto.Drawing.Colors.DarkTurquoise">
            <summary>Gets a color with an ARGB value of #FF00CED1</summary>
        </member>
        <member name="P:Eto.Drawing.Colors.CadetBlue">
            <summary>Gets a color with an ARGB value of #FF5F9EA0</summary>
        </member>
        <member name="P:Eto.Drawing.Colors.SteelBlue">
            <summary>Gets a color with an ARGB value of #FF4682B4</summary>
        </member>
        <member name="P:Eto.Drawing.Colors.LightSteelBlue">
            <summary>Gets a color with an ARGB value of #FFB0C4DE</summary>
        </member>
        <member name="P:Eto.Drawing.Colors.PowderBlue">
            <summary>Gets a color with an ARGB value of #FFB0E0E6</summary>
        </member>
        <member name="P:Eto.Drawing.Colors.LightBlue">
            <summary>Gets a color with an ARGB value of #FFADD8E6</summary>
        </member>
        <member name="P:Eto.Drawing.Colors.SkyBlue">
            <summary>Gets a color with an ARGB value of #FF87CEEB</summary>
        </member>
        <member name="P:Eto.Drawing.Colors.LightSkyBlue">
            <summary>Gets a color with an ARGB value of #FF87CEFA</summary>
        </member>
        <member name="P:Eto.Drawing.Colors.DeepSkyBlue">
            <summary>Gets a color with an ARGB value of #FF00BFFF</summary>
        </member>
        <member name="P:Eto.Drawing.Colors.DodgerBlue">
            <summary>Gets a color with an ARGB value of #FF1E90FF</summary>
        </member>
        <member name="P:Eto.Drawing.Colors.CornflowerBlue">
            <summary>Gets a color with an ARGB value of #FF6495ED</summary>
        </member>
        <member name="P:Eto.Drawing.Colors.RoyalBlue">
            <summary>Gets a color with an ARGB value of #FF4169E1</summary>
        </member>
        <member name="P:Eto.Drawing.Colors.Blue">
            <summary>Gets a color with an ARGB value of #FF0000FF</summary>
        </member>
        <member name="P:Eto.Drawing.Colors.MediumBlue">
            <summary>Gets a color with an ARGB value of #FF0000CD</summary>
        </member>
        <member name="P:Eto.Drawing.Colors.DarkBlue">
            <summary>Gets a color with an ARGB value of #FF00008B</summary>
        </member>
        <member name="P:Eto.Drawing.Colors.Navy">
            <summary>Gets a color with an ARGB value of #FF000080</summary>
        </member>
        <member name="P:Eto.Drawing.Colors.MidnightBlue">
            <summary>Gets a color with an ARGB value of #FF191970</summary>
        </member>
        <member name="P:Eto.Drawing.Colors.Cornsilk">
            <summary>Gets a color with an ARGB value of #FFFFF8DC</summary>
        </member>
        <member name="P:Eto.Drawing.Colors.BlanchedAlmond">
            <summary>Gets a color with an ARGB value of #FFFFEBCD</summary>
        </member>
        <member name="P:Eto.Drawing.Colors.Bisque">
            <summary>Gets a color with an ARGB value of #FFFFE4C4</summary>
        </member>
        <member name="P:Eto.Drawing.Colors.NavajoWhite">
            <summary>Gets a color with an ARGB value of #FFFFDEAD</summary>
        </member>
        <member name="P:Eto.Drawing.Colors.Wheat">
            <summary>Gets a color with an ARGB value of #FFF5DEB3</summary>
        </member>
        <member name="P:Eto.Drawing.Colors.BurlyWood">
            <summary>Gets a color with an ARGB value of #FFDEB887</summary>
        </member>
        <member name="P:Eto.Drawing.Colors.Tan">
            <summary>Gets a color with an ARGB value of #FFD2B48C</summary>
        </member>
        <member name="P:Eto.Drawing.Colors.RosyBrown">
            <summary>Gets a color with an ARGB value of #FFBC8F8F</summary>
        </member>
        <member name="P:Eto.Drawing.Colors.SandyBrown">
            <summary>Gets a color with an ARGB value of #FFF4A460</summary>
        </member>
        <member name="P:Eto.Drawing.Colors.Goldenrod">
            <summary>Gets a color with an ARGB value of #FFDAA520</summary>
        </member>
        <member name="P:Eto.Drawing.Colors.DarkGoldenrod">
            <summary>Gets a color with an ARGB value of #FFB8860B</summary>
        </member>
        <member name="P:Eto.Drawing.Colors.Peru">
            <summary>Gets a color with an ARGB value of #FFCD853F</summary>
        </member>
        <member name="P:Eto.Drawing.Colors.Chocolate">
            <summary>Gets a color with an ARGB value of #FFD2691E</summary>
        </member>
        <member name="P:Eto.Drawing.Colors.SaddleBrown">
            <summary>Gets a color with an ARGB value of #FF8B4513</summary>
        </member>
        <member name="P:Eto.Drawing.Colors.Sienna">
            <summary>Gets a color with an ARGB value of #FFA0522D</summary>
        </member>
        <member name="P:Eto.Drawing.Colors.Brown">
            <summary>Gets a color with an ARGB value of #FFA52A2A</summary>
        </member>
        <member name="P:Eto.Drawing.Colors.Maroon">
            <summary>Gets a color with an ARGB value of #FF800000</summary>
        </member>
        <member name="P:Eto.Drawing.Colors.White">
            <summary>Gets a color with an ARGB value of #FFFFFFFF</summary>
        </member>
        <member name="P:Eto.Drawing.Colors.Snow">
            <summary>Gets a color with an ARGB value of #FFFFFAFA</summary>
        </member>
        <member name="P:Eto.Drawing.Colors.Honeydew">
            <summary>Gets a color with an ARGB value of #FFF0FFF0</summary>
        </member>
        <member name="P:Eto.Drawing.Colors.MintCream">
            <summary>Gets a color with an ARGB value of #FFF5FFFA</summary>
        </member>
        <member name="P:Eto.Drawing.Colors.Azure">
            <summary>Gets a color with an ARGB value of #FFF0FFFF</summary>
        </member>
        <member name="P:Eto.Drawing.Colors.AliceBlue">
            <summary>Gets a color with an ARGB value of #FFF0F8FF</summary>
        </member>
        <member name="P:Eto.Drawing.Colors.GhostWhite">
            <summary>Gets a color with an ARGB value of #FFF8F8FF</summary>
        </member>
        <member name="P:Eto.Drawing.Colors.WhiteSmoke">
            <summary>Gets a color with an ARGB value of #FFF5F5F5</summary>
        </member>
        <member name="P:Eto.Drawing.Colors.Seashell">
            <summary>Gets a color with an ARGB value of #FFFFF5EE</summary>
        </member>
        <member name="P:Eto.Drawing.Colors.Beige">
            <summary>Gets a color with an ARGB value of #FFF5F5DC</summary>
        </member>
        <member name="P:Eto.Drawing.Colors.OldLace">
            <summary>Gets a color with an ARGB value of #FFFDF5E6</summary>
        </member>
        <member name="P:Eto.Drawing.Colors.FloralWhite">
            <summary>Gets a color with an ARGB value of #FFFFFAF0</summary>
        </member>
        <member name="P:Eto.Drawing.Colors.Ivory">
            <summary>Gets a color with an ARGB value of #FFFFFFF0</summary>
        </member>
        <member name="P:Eto.Drawing.Colors.AntiqueWhite">
            <summary>Gets a color with an ARGB value of #FFFAEBD7</summary>
        </member>
        <member name="P:Eto.Drawing.Colors.Linen">
            <summary>Gets a color with an ARGB value of #FFFAF0E6</summary>
        </member>
        <member name="P:Eto.Drawing.Colors.LavenderBlush">
            <summary>Gets a color with an ARGB value of #FFFFF0F5</summary>
        </member>
        <member name="P:Eto.Drawing.Colors.MistyRose">
            <summary>Gets a color with an ARGB value of #FFFFE4E1</summary>
        </member>
        <member name="P:Eto.Drawing.Colors.Gainsboro">
            <summary>Gets a color with an ARGB value of #FFDCDCDC</summary>
        </member>
        <member name="P:Eto.Drawing.Colors.LightGrey">
            <summary>Gets a color with an ARGB value of #FFD3D3D3</summary>
        </member>
        <member name="P:Eto.Drawing.Colors.Silver">
            <summary>Gets a color with an ARGB value of #FFC0C0C0</summary>
        </member>
        <member name="P:Eto.Drawing.Colors.DarkGray">
            <summary>Gets a color with an ARGB value of #FFA9A9A9</summary>
        </member>
        <member name="P:Eto.Drawing.Colors.Gray">
            <summary>Gets a color with an ARGB value of #FF808080</summary>
        </member>
        <member name="P:Eto.Drawing.Colors.DimGray">
            <summary>Gets a color with an ARGB value of #FF696969</summary>
        </member>
        <member name="P:Eto.Drawing.Colors.LightSlateGray">
            <summary>Gets a color with an ARGB value of #FF778899</summary>
        </member>
        <member name="P:Eto.Drawing.Colors.SlateGray">
            <summary>Gets a color with an ARGB value of #FF708090</summary>
        </member>
        <member name="P:Eto.Drawing.Colors.DarkSlateGray">
            <summary>Gets a color with an ARGB value of #FF2F4F4F</summary>
        </member>
        <member name="P:Eto.Drawing.Colors.Black">
            <summary>Gets a color with an ARGB value of #FF000000</summary>
        </member>
        <member name="T:Eto.Drawing.DashStyle">
            <summary>
            Dash style for a <see cref="T:Eto.Drawing.Pen"/>
            </summary>
            <seealso cref="P:Eto.Drawing.Pen.DashStyle"/>
            <copyright>(c) 2012-2014 by Curtis Wensley</copyright>
            <license type="BSD-3">See LICENSE for full terms</license>
        </member>
        <member name="P:Eto.Drawing.DashStyle.Dashes">
            <summary>
            Gets the dashes and gaps for this style
            </summary>
            <remarks>
            The values specified are the dash lengths and gap lengths in alternating order.
            The lengths are multiplied by the thickness of the pen.
            
            For example, values of 2, 1 would have a dash of (2 * thickness) followed by a gap of (1 * thickness).
            </remarks>
            <value>The dashes to use for a pen</value>
        </member>
        <member name="P:Eto.Drawing.DashStyle.Offset">
            <summary>
            Gets the offset of the first dash
            </summary>
            <remarks>
            A value of 1 indicates that the first dash should start at the (1*thickness) of the pen.
            </remarks>
            <value>The offset of the first dash, in multiples of pen thickness</value>
        </member>
        <member name="P:Eto.Drawing.DashStyle.IsSolid">
            <summary>
            Gets a value indicating whether this dash style is solid
            </summary>
            <value><c>true</c> if this instance is solid; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Eto.Drawing.DashStyle.TryParse(System.String,Eto.Drawing.DashStyle@)">
            <summary>
            Attempts to parse the specified <paramref name="value"/> into a dash style.  This can be one of the
            system styles (solid, dash, dot, dashdot, dashdotdot), or a series of numbers separated by commas 
            specifying the solid and gap parts (see <see cref="P:Eto.Drawing.DashStyle.Dashes"/>)
            </summary>
            <param name="value">String value to parse</param>
            <param name="style">DashStyle representation of the specified value if successful</param>
            <returns>True if successful, or false if the value could not be parsed</returns>
        </member>
        <member name="M:Eto.Drawing.DashStyle.Parse(System.String)">
            <summary>
            Attempts to parse the specified <paramref name="value"/> into a dash style.  This can be one of the
            system styles (solid, dash, dot, dashdot, dashdotdot), or a series of numbers separated by commas 
            specifying the solid and gap parts (see <see cref="P:Eto.Drawing.DashStyle.Dashes"/>). 
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Raised when the value could not be converted</exception>
            <param name="value">String value to parse</param>
            <returns>DashStyle representation of the specified value if successful</returns>
        </member>
        <member name="M:Eto.Drawing.DashStyle.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Eto.Drawing.DashStyle"/> class.
            </summary>
        </member>
        <member name="M:Eto.Drawing.DashStyle.#ctor(System.Single,System.Single[])">
            <summary>
            Initializes a new instance of the <see cref="T:Eto.Drawing.DashStyle"/> class.
            </summary>
            <param name="offset">Offset of the first dash in the style</param>
            <param name="dashes">Dashes to use for the style.  See <see cref="P:Eto.Drawing.DashStyle.Dashes"/></param>
        </member>
        <member name="M:Eto.Drawing.DashStyle.op_Equality(Eto.Drawing.DashStyle,Eto.Drawing.DashStyle)">
            <summary>
            Compares two DashStyle objects for equality
            </summary>
            <param name="style1">First style to compare</param>
            <param name="style2">Second style to compare</param>
        </member>
        <member name="M:Eto.Drawing.DashStyle.op_Inequality(Eto.Drawing.DashStyle,Eto.Drawing.DashStyle)">
            <summary>
            Compares two DashStyle objects for inequality
            </summary>
            <param name="style1">First style to compare</param>
            <param name="style2">Second style to compare</param>
        </member>
        <member name="M:Eto.Drawing.DashStyle.Equals(Eto.Drawing.DashStyle)">
            <summary>
            Determines whether the specified <see cref="T:Eto.Drawing.DashStyle"/> is equal to the current <see cref="T:Eto.Drawing.DashStyle"/>.
            </summary>
            <param name="other">The <see cref="T:Eto.Drawing.DashStyle"/> to compare with the current <see cref="T:Eto.Drawing.DashStyle"/>.</param>
            <returns><c>true</c> if the specified <see cref="T:Eto.Drawing.DashStyle"/> is equal to the current
            <see cref="T:Eto.Drawing.DashStyle"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Eto.Drawing.DashStyle.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:Eto.Drawing.DashStyle"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:Eto.Drawing.DashStyle"/>.</param>
            <returns><c>true</c> if the specified <see cref="T:System.Object"/> is equal to the current
            <see cref="T:Eto.Drawing.DashStyle"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Eto.Drawing.DashStyle.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:Eto.Drawing.DashStyle"/>.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents the current <see cref="T:Eto.Drawing.DashStyle"/>.</returns>
        </member>
        <member name="M:Eto.Drawing.DashStyle.GetHashCode">
            <summary>
            Serves as a hash function for a <see cref="T:Eto.Drawing.DashStyle"/> object.
            </summary>
            <returns>A hash code for this instance that is suitable for use in hashing algorithms and data structures such as a hash table.</returns>
        </member>
        <member name="T:Eto.Drawing.DashStyles">
            <summary>
            Common dash styles used for <see cref="T:Eto.Drawing.DashStyle"/>
            </summary>
            <seealso cref="P:Eto.Drawing.Pen.DashStyle"/>
            <copyright>(c) 2012-2014 by Curtis Wensley</copyright>
            <license type="BSD-3">See LICENSE for full terms</license>
        </member>
        <member name="P:Eto.Drawing.DashStyles.Solid">
            <summary>
            Gets a solid dash style
            </summary>
            <value>The solid dash style</value>
        </member>
        <member name="P:Eto.Drawing.DashStyles.Dash">
            <summary>
            Gets a dash style with a single dash
            </summary>
            <value>The dash style</value>
        </member>
        <member name="P:Eto.Drawing.DashStyles.Dot">
            <summary>
            Gets a dot style
            </summary>
            <value>The dot dash style</value>
        </member>
        <member name="P:Eto.Drawing.DashStyles.DashDot">
            <summary>
            Gets the dash dot style
            </summary>
            <value>The dash dot style</value>
        </member>
        <member name="P:Eto.Drawing.DashStyles.DashDotDot">
            <summary>
            Gets the dash dot dot style
            </summary>
            <value>The dash dot dot style</value>
        </member>
        <member name="T:Eto.Drawing.FillMode">
            <summary>
            Mode for how a closed <see cref="T:Eto.Drawing.IGraphicsPath"/> is filled
            </summary>
            <copyright>(c) 2014 by Curtis Wensley</copyright>
            <license type="BSD-3">See LICENSE for full terms</license>
        </member>
        <member name="F:Eto.Drawing.FillMode.Alternate">
            <summary>
            Alternating / Even-Odd fill mode
            </summary>
        </member>
        <member name="F:Eto.Drawing.FillMode.Winding">
            <summary>
            Winding fill mode
            </summary>
        </member>
        <member name="T:Eto.Drawing.SystemFont">
            <summary>
            Enumeration of the different system fonts for a <see cref="T:Eto.Drawing.Font"/>
            </summary>
            <remarks>
            This is useful when you want to use a font that is the same as standard UI elements.
            </remarks>
            <copyright>(c) 2014 by Curtis Wensley</copyright>
            <license type="BSD-3">See LICENSE for full terms</license>
        </member>
        <member name="F:Eto.Drawing.SystemFont.Default">
            <summary>
            Default system font
            </summary>
        </member>
        <member name="F:Eto.Drawing.SystemFont.Bold">
            <summary>
            Default system font in BOLD
            </summary>
        </member>
        <member name="F:Eto.Drawing.SystemFont.Label">
            <summary>
            Default label font
            </summary>
        </member>
        <member name="F:Eto.Drawing.SystemFont.TitleBar">
            <summary>
            Default title bar font (window title)
            </summary>
        </member>
        <member name="F:Eto.Drawing.SystemFont.ToolTip">
            <summary>
            Default tool top font
            </summary>
        </member>
        <member name="F:Eto.Drawing.SystemFont.MenuBar">
            <summary>
            Default menu bar font
            </summary>
        </member>
        <member name="F:Eto.Drawing.SystemFont.Menu">
            <summary>
            Default font for items in a menu
            </summary>
        </member>
        <member name="F:Eto.Drawing.SystemFont.Message">
            <summary>
            Default font for message boxes
            </summary>
        </member>
        <member name="F:Eto.Drawing.SystemFont.Palette">
            <summary>
            Default font for palette dialogs
            </summary>
        </member>
        <member name="F:Eto.Drawing.SystemFont.StatusBar">
            <summary>
            Default font for status bars
            </summary>
        </member>
        <member name="T:Eto.Drawing.FontStyle">
            <summary>
            Syles for a <see cref="T:Eto.Drawing.Font"/>
            </summary>
            <copyright>(c) 2014 by Curtis Wensley</copyright>
            <license type="BSD-3">See LICENSE for full terms</license>
        </member>
        <member name="F:Eto.Drawing.FontStyle.None">
            <summary>
            No extra font style applied
            </summary>
        </member>
        <member name="F:Eto.Drawing.FontStyle.Bold">
            <summary>
            Bold font style
            </summary>
        </member>
        <member name="F:Eto.Drawing.FontStyle.Italic">
            <summary>
            Italic font style
            </summary>
        </member>
        <member name="T:Eto.Drawing.FontDecoration">
            <summary>
            Decorations for a <see cref="T:Eto.Drawing.Font"/>
            </summary>
            <remarks>
            These specify the different decorations to apply to a font, and are not related to the style.
            </remarks>
            <copyright>(c) 2014 by Curtis Wensley</copyright>
            <license type="BSD-3">See LICENSE for full terms</license>
        </member>
        <member name="F:Eto.Drawing.FontDecoration.None">
            <summary>
            No decorations
            </summary>
        </member>
        <member name="F:Eto.Drawing.FontDecoration.Underline">
            <summary>
            Underline font decoration
            </summary>
        </member>
        <member name="F:Eto.Drawing.FontDecoration.Strikethrough">
            <summary>
            Strikethrough font decoration
            </summary>
        </member>
        <member name="T:Eto.Drawing.Font">
            <summary>
            Defines a format for text
            </summary>
            <remarks>
            A font is typically defined with a specified font family, with a given typeface.  Each typeface has certain characteristics
            that define the variation of the font family, for example Bold, or Italic.
            
            You can get a list of <see cref="T:Eto.Drawing.FontFamily"/> objects available in the current system using
            <see cref="P:Eto.Drawing.Fonts.AvailableFontFamilies"/>, which can then be used to create an instance of a font.
            </remarks>
            <copyright>(c) 2014 by Curtis Wensley</copyright>
            <license type="BSD-3">See LICENSE for full terms</license>
        </member>
        <member name="M:Eto.Drawing.Font.#ctor(System.String,System.Single,Eto.Drawing.FontStyle,Eto.Drawing.FontDecoration)">
            <summary>
            Creates a new instance of the Font class with a specified <paramref name="family"/>, <paramref name="size"/>, and <paramref name="style"/>
            </summary>
            <param name="family">Family of font to use</param>
            <param name="size">Size of the font, in points</param>
            <param name="style">Style of the font</param>
            <param name="decoration">Decorations to apply to the font</param>
        </member>
        <member name="M:Eto.Drawing.Font.#ctor(Eto.Drawing.FontFamily,System.Single,Eto.Drawing.FontStyle,Eto.Drawing.FontDecoration)">
            <summary>
            Creates a new instance of the Font class with a specified <paramref name="family"/>, <paramref name="size"/>, and <paramref name="style"/>
            </summary>
            <param name="family">Family of font to use</param>
            <param name="size">Size of the font, in points</param>
            <param name="style">Style of the font</param>
            <param name="decoration">Decorations to apply to the font</param>
        </member>
        <member name="M:Eto.Drawing.Font.#ctor(Eto.Drawing.SystemFont,System.Nullable{System.Single},Eto.Drawing.FontDecoration)">
            <summary>
            Creates a new instance of the Font class with a specified <paramref name="systemFont"/> and optional custom <paramref name="size"/>
            </summary>
            <remarks>
            The system fonts are the same fonts that the standard UI of each platform use for particular areas
            given the <see cref="T:Eto.Drawing.SystemFont"/> enumeration.
            </remarks>
            <param name="systemFont">Type of system font to create</param>
            <param name="size">Optional size of the font, in points. If not specified, the default size of the system font is used</param>
            <param name="decoration">Decorations to apply to the font</param>
        </member>
        <member name="M:Eto.Drawing.Font.#ctor(Eto.Drawing.FontTypeface,System.Single,Eto.Drawing.FontDecoration)">
            <summary>
            Initializes a new instance of the Font class with the specified <paramref name="typeface"/> and <paramref name="size"/>
            </summary>
            <param name="typeface">Typeface of the font to create</param>
            <param name="size">Size of the font in points</param>
            <param name="decoration">Decorations to apply to the font</param>
        </member>
        <member name="M:Eto.Drawing.Font.#ctor(Eto.Drawing.Font.IHandler)">
            <summary>
            Initializes a new instance of the Font class with the specified font <paramref name="handler"/>
            </summary>
            <remarks>
            Not intended to be used directly, this is used by each platform to pass back a font instance with a specific handler
            </remarks>
            <param name="handler">Handler for the font</param>
        </member>
        <member name="P:Eto.Drawing.Font.FamilyName">
            <summary>
            Gets the name of the family of this font
            </summary>
        </member>
        <member name="P:Eto.Drawing.Font.FontStyle">
            <summary>
            Gets the style flags for this font
            </summary>
            <remarks>
            This does not represent all of the style properties of the font. Each <see cref="P:Eto.Drawing.Font.Typeface"/>
            has its own style relative to the font family.
            </remarks>
        </member>
        <member name="P:Eto.Drawing.Font.FontDecoration">
            <summary>
            Gets the decorations applied to the font
            </summary>
            <remarks>
            Decorations can be applied to any typeface/style of font.
            </remarks>
            <value>The font decoration.</value>
        </member>
        <member name="P:Eto.Drawing.Font.Family">
            <summary>
            Gets the family information for this font
            </summary>
        </member>
        <member name="P:Eto.Drawing.Font.Typeface">
            <summary>
            Gets the typeface information for this font
            </summary>
        </member>
        <member name="P:Eto.Drawing.Font.XHeight">
            <summary>
            Gets the height of the lower case 'x' character
            </summary>
            <value>The height of the x character</value>
        </member>
        <member name="P:Eto.Drawing.Font.Ascent">
            <summary>
            Gets the top y co-ordinate from the baseline to the tallest character ascent
            </summary>
            <value>The tallest ascent of the font</value>
        </member>
        <member name="P:Eto.Drawing.Font.Descent">
            <summary>
            Gets the bottom y co-ordinate from the baseline to the longest character descent
            </summary>
            <value>The longest descent of the font</value>
        </member>
        <member name="P:Eto.Drawing.Font.LineHeight">
            <summary>
            Gets the height of a single line of the font
            </summary>
            <value>The height of a single line</value>
        </member>
        <member name="P:Eto.Drawing.Font.Leading">
            <summary>
            Gets the leading space between each line
            </summary>
            <value>The leading.</value>
        </member>
        <member name="P:Eto.Drawing.Font.Baseline">
            <summary>
            Gets the offset of the baseline from the drawing point
            </summary>
            <value>The baseline offset from the drawing point</value>
        </member>
        <member name="P:Eto.Drawing.Font.Size">
            <summary>
            Gets the size, in points, of this font
            </summary>
        </member>
        <member name="P:Eto.Drawing.Font.Bold">
            <summary>
            Gets a value indicating that this font has a bold style
            </summary>
        </member>
        <member name="P:Eto.Drawing.Font.Italic">
            <summary>
            Gets a value indicating that this font has an italic style
            </summary>
        </member>
        <member name="P:Eto.Drawing.Font.Underline">
            <summary>
            Gets a value indicating that this font has an underline decoration
            </summary>
        </member>
        <member name="P:Eto.Drawing.Font.Strikethrough">
            <summary>
            Gets a value indicating that this font has a strikethrough decoration
            </summary>
        </member>
        <member name="M:Eto.Drawing.Font.MeasureString(System.String)">
            <summary>
            Measures the specified string to get its size in logical pixels.
            </summary>
            <remarks>
            This is equivalent to <see cref="M:Eto.Drawing.Graphics.MeasureString(Eto.Drawing.Font,System.String)"/>.  When you have a Graphics object, it is recommended
            to use that to measure the string if available, as it may be more efficient and take into account the current graphics state.
            </remarks>
            <seealso cref="M:Eto.Drawing.Graphics.MeasureString(Eto.Drawing.Font,System.String)"/>
            <returns>The size of the text in logical pixels if drawn using Graphics.DrawText.</returns>
            <param name="text">Text string to measure.</param>
        </member>
        <member name="M:Eto.Drawing.Font.ToString">
            <summary>
            Gets a string representation of the font object
            </summary>
            <returns>String representation of the font object</returns>
        </member>
        <member name="M:Eto.Drawing.Font.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:Eto.Drawing.Font"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:Eto.Drawing.Font"/>.</param>
            <returns><c>true</c> if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:Eto.Drawing.Font"/>;
            otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Eto.Drawing.Font.GetHashCode">
            <summary>
            Serves as a hash function for a <see cref="T:Eto.Drawing.Font"/> object.
            </summary>
            <returns>A hash code for this instance that is suitable for use in hashing algorithms and data structures such as a hash table.</returns>
        </member>
        <member name="T:Eto.Drawing.Font.IHandler">
            <summary>
            Platform handler for the <see cref="T:Eto.Drawing.Font"/> class
            </summary>
        </member>
        <member name="M:Eto.Drawing.Font.IHandler.Create(Eto.Drawing.FontFamily,System.Single,Eto.Drawing.FontStyle,Eto.Drawing.FontDecoration)">
            <summary>
            Creates a new font object
            </summary>
            <param name="family">Type of font family</param>
            <param name="size">Size of the font (in points)</param>
            <param name="style">Style of the font</param>
            <param name="decoration">Decorations to apply to the font</param>
        </member>
        <member name="M:Eto.Drawing.Font.IHandler.Create(Eto.Drawing.SystemFont,System.Nullable{System.Single},Eto.Drawing.FontDecoration)">
            <summary>
            Creates a new font object with the specified <paramref name="systemFont"/> and optional size
            </summary>
            <param name="systemFont">System font to create</param>
            <param name="size">Size of font to use, or null to use the system font's default size</param>
            <param name="decoration">Decorations to apply to the font</param>
        </member>
        <member name="M:Eto.Drawing.Font.IHandler.Create(Eto.Drawing.FontTypeface,System.Single,Eto.Drawing.FontDecoration)">
            <summary>
            Creates a new font object with the specified <paramref name="typeface"/> and <paramref name="size"/>
            </summary>
            <param name="typeface">Typeface to specify the style (and family) of the font</param>
            <param name="size">Size of the font to create</param>
            <param name="decoration">Decorations to apply to the font</param>
        </member>
        <member name="P:Eto.Drawing.Font.IHandler.XHeight">
            <summary>
            Gets the height of the lower case 'x' character
            </summary>
            <value>The height of the x character</value>
        </member>
        <member name="P:Eto.Drawing.Font.IHandler.Ascent">
            <summary>
            Gets the top y co-ordinate from the baseline to the tallest character ascent
            </summary>
            <value>The tallest ascent of the font</value>
        </member>
        <member name="P:Eto.Drawing.Font.IHandler.Descent">
            <summary>
            Gets the bottom y co-ordinate from the baseline to the longest character descent
            </summary>
            <value>The longest descent of the font</value>
        </member>
        <member name="P:Eto.Drawing.Font.IHandler.LineHeight">
            <summary>
            Gets the height of a single line of the font
            </summary>
            <value>The height of a single line</value>
        </member>
        <member name="P:Eto.Drawing.Font.IHandler.Leading">
            <summary>
            Gets the leading space between each line
            </summary>
            <value>The leading.</value>
        </member>
        <member name="P:Eto.Drawing.Font.IHandler.Baseline">
            <summary>
            Gets the offset of the baseline from the drawing point
            </summary>
            <value>The baseline offset from the drawing point</value>
        </member>
        <member name="P:Eto.Drawing.Font.IHandler.Size">
            <summary>
            Gets the size of the font in points
            </summary>
        </member>
        <member name="P:Eto.Drawing.Font.IHandler.FamilyName">
            <summary>
            Gets the name of the family of this font
            </summary>
        </member>
        <member name="P:Eto.Drawing.Font.IHandler.FontStyle">
            <summary>
            Gets the style flags for this font
            </summary>
            <remarks>
            This does not necessarily represent all of the style properties of the font. 
            Each <see cref="P:Eto.Drawing.Font.IHandler.Typeface"/> has its own style relative to the font family.  This is meerely a
            convenience to get the common properties of a font's typeface style
            </remarks>
        </member>
        <member name="P:Eto.Drawing.Font.IHandler.FontDecoration">
            <summary>
            Gets the decorations applied to the font
            </summary>
            <remarks>
            Decorations can be applied to any typeface/style of font.
            </remarks>
            <value>The font decoration.</value>
        </member>
        <member name="P:Eto.Drawing.Font.IHandler.Family">
            <summary>
            Gets the family information for this font
            </summary>
            <remarks>
            This should always return an instance that represents the family of this font
            </remarks>
        </member>
        <member name="P:Eto.Drawing.Font.IHandler.Typeface">
            <summary>
            Gets the typeface information for this font
            </summary>
            <remarks>
            This should always return an instance that represents the typeface of this font
            </remarks>
        </member>
        <member name="M:Eto.Drawing.Font.IHandler.MeasureString(System.String)">
            <summary>
            Measures the specified string to get its size in logical pixels.
            </summary>
            <remarks>
            This is equivalent to <see cref="M:Eto.Drawing.Graphics.MeasureString(Eto.Drawing.Font,System.String)"/>.  When you have a Graphics object, it is recommended
            to use that to measure the string if available, as it may be more efficient and take into account the current graphics state.
            </remarks>
            <seealso cref="M:Eto.Drawing.Graphics.MeasureString(Eto.Drawing.Font,System.String)"/>
            <returns>The size of the text in logical pixels if drawn using Graphics.DrawText.</returns>
            <param name="text">Text string to measure.</param>
        </member>
        <member name="T:Eto.Drawing.FontConverter">
            <summary>
            Converter to convert a string to a <see cref="T:Eto.Drawing.Font"/>
            </summary>
            <copyright>(c) 2015 by Curtis Wensley</copyright>
            <license type="BSD-3">See LICENSE for full terms</license>
        </member>
        <member name="M:Eto.Drawing.FontConverter.CanConvertFrom(Eto.ITypeDescriptorContext,System.Type)">
            <summary>
            Gets a value indicating that this converter can convert from the source type to a Font
            </summary>
            <param name="context">Conversion context</param>
            <param name="sourceType">Type to convert from</param>
            <returns>True if this converter can handle converting from the specified <paramref name="sourceType"/> to an font</returns>
        </member>
        <member name="M:Eto.Drawing.FontConverter.CanConvertTo(Eto.ITypeDescriptorContext,System.Type)">
            <summary>
            Gets a value indicating that this converter can convert to the specified type.
            </summary>
            <param name="context">Conversion context</param>
            <param name="destinationType">Type to convert to</param>
            <returns>True if this converter can convert to the specified <paramref name="destinationType"/>, otherwise false.</returns>
        </member>
        <member name="M:Eto.Drawing.FontConverter.ConvertFrom(Eto.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Performs the conversion from the given <paramref name="value"/> to an <see cref="T:Eto.Drawing.Image"/> object
            </summary>
            <param name="context">Conversion context</param>
            <param name="culture">Culture to perform the conversion</param>
            <param name="value">Value to convert to an image</param>
            <returns>A new instance of an image, or null if it cannot be converted</returns>
        </member>
        <member name="T:Eto.Drawing.FontFamilies">
            <summary>
            Defines generic font families that can be used on all systems
            </summary>
            <remarks>
            The font families here may correspond to certain fonts on each system, depending on the platform.
            
            These font families are "guaranteed" to be available, mainly by using pre-installed fonts on each
            platform.
            </remarks>
            <copyright>(c) 2014 by Curtis Wensley</copyright>
            <license type="BSD-3">See LICENSE for full terms</license>
        </member>
        <member name="F:Eto.Drawing.FontFamilies.MonospaceFamilyName">
            <summary>
            Gets the name of the monospace system family name
            </summary>
            <remarks>
            Not intended to be used directly, use <see cref="P:Eto.Drawing.FontFamilies.Monospace"/>. Used by platform handlers
            to determine which system font family to get
            </remarks>
        </member>
        <member name="P:Eto.Drawing.FontFamilies.Monospace">
            <summary>
            Gets a monospace font family
            </summary>
            <returns>A font family instance for the monospace font</returns>
        </member>
        <member name="F:Eto.Drawing.FontFamilies.SansFamilyName">
            <summary>
            Gets the name of a sans-serif system family name
            </summary>
            <remarks>
            Not intended to be used directly, use <see cref="P:Eto.Drawing.FontFamilies.Sans"/>. Used by platform handlers
            to determine which system font family to get
            </remarks>
        </member>
        <member name="P:Eto.Drawing.FontFamilies.Sans">
            <summary>
            Gets a sans-serif font family
            </summary>
            <returns>A font family instance for the sans font</returns>
        </member>
        <member name="F:Eto.Drawing.FontFamilies.SerifFamilyName">
            <summary>
            Gets the name of a serif system family name
            </summary>
            <remarks>
            Not intended to be used directly, use <see cref="P:Eto.Drawing.FontFamilies.Serif"/>. Used by platform handlers
            to determine which system font family to get
            </remarks>
        </member>
        <member name="P:Eto.Drawing.FontFamilies.Serif">
            <summary>
            Gets a serif font family
            </summary>
            <returns>A font family instance for the serif font</returns>
        </member>
        <member name="P:Eto.Drawing.FontFamilies.Cursive">
            <summary>
            Gets a cursive font family
            </summary>
            <returns>A font family instance for the cursive font</returns>
        </member>
        <member name="F:Eto.Drawing.FontFamilies.CursiveFamilyName">
            <summary>
            Name of the cursive system family name
            </summary>
            <remarks>
            Not intended to be used directly, use <see cref="P:Eto.Drawing.FontFamilies.Cursive"/>. Used by platform handlers
            to determine which system font family to get
            </remarks>
        </member>
        <member name="P:Eto.Drawing.FontFamilies.Fantasy">
            <summary>
            Gets a fantasy font family
            </summary>
            <returns>A font family instance for the fantasy font</returns>
        </member>
        <member name="F:Eto.Drawing.FontFamilies.FantasyFamilyName">
            <summary>
            Name of the fantasy system family name
            </summary>
            <remarks>
            Not intended to be used directly, use <see cref="P:Eto.Drawing.FontFamilies.Fantasy"/>. Used by platform handlers
            to determine which system font family to get
            </remarks>
        </member>
        <member name="T:Eto.Drawing.FontFamily">
            <summary>
            Specifies a family for a <see cref="T:Eto.Drawing.Font"/> object
            </summary>
            <remarks>
            A font family defines the overall look of the font, such as "Times New Roman", "Helvetica", etc.
            
            Each family consists of one or more <see cref="P:Eto.Drawing.FontFamily.Typefaces"/>, which define the variations of each font family.
            The variations can include Light, Bold, Italic, Oblique, etc.  Only the styles in <see cref="T:Eto.Drawing.FontStyle"/> are 
            discoverable, other than looking at the <see cref="P:Eto.Drawing.FontTypeface.Name"/> for hints as to what the variation will look like.
            </remarks>
            <copyright>(c) 2014 by Curtis Wensley</copyright>
            <license type="BSD-3">See LICENSE for full terms</license>
        </member>
        <member name="P:Eto.Drawing.FontFamily.Name">
            <summary>
            Gets the name of this font family
            </summary>
            <remarks>
            This is a non-localized version of the name, suitable for internal use.
            </remarks>
            <seealso cref="P:Eto.Drawing.FontFamily.LocalizedName"/>
        </member>
        <member name="P:Eto.Drawing.FontFamily.LocalizedName">
            <summary>
            Gets the localized name of the font for the current UI language
            </summary>
            <remarks>
            This will return a name suitable to display to the user in their own language, if the font provides a specific name for their UI language.
            
            For platforms that do not support localized font names, or for fonts that do not have a specific name for the current language, the
            value of <see cref="P:Eto.Drawing.FontFamily.Name"/> will be returned.
            </remarks>
            <value>The localized name of this font.</value>
        </member>
        <member name="P:Eto.Drawing.FontFamily.Typefaces">
            <summary>
            Gets an enumeration of the one or more supported typefaces for this font family
            </summary>
        </member>
        <member name="M:Eto.Drawing.FontFamily.#ctor(Eto.Drawing.FontFamily.IHandler)">
            <summary>
            Initializes a new instance of the FontFamily class with the specified handler
            </summary>
            <remarks>
            Used by platform implementations to create instances of the FontFamily class directly
            </remarks>
            <param name="handler">Handler to use</param>
        </member>
        <member name="M:Eto.Drawing.FontFamily.#ctor(System.String)">
            <summary>
            Initializes a new instance of the FontFamily class with the given font <paramref name="familyName"/>
            </summary>
            <param name="familyName">Name of the font family to assign to this instance</param>
        </member>
        <member name="M:Eto.Drawing.FontFamily.Equals(Eto.Drawing.FontFamily)">
            <summary>
            Tests this instance for equality with another font family
            </summary>
            <remarks>
            Font families are considered equal if the names are the same
            </remarks>
            <param name="other">Other font to test</param>
            <returns>True if the families are equal, false otherwise</returns>
        </member>
        <member name="M:Eto.Drawing.FontFamily.op_Equality(Eto.Drawing.FontFamily,Eto.Drawing.FontFamily)">
            <summary>
            Tests two FontFamily objects for equality
            </summary>
            <remarks>
            Font families are considered equal if the names are the same
            </remarks>
            <param name="value1">First font family to test</param>
            <param name="value2">Second font family to test</param>
            <returns>True if the font families are equal, false otherwise</returns>
        </member>
        <member name="M:Eto.Drawing.FontFamily.op_Inequality(Eto.Drawing.FontFamily,Eto.Drawing.FontFamily)">
            <summary>
            Tests two FontFamily objects for inequality
            </summary>
            <param name="value1">First font family to test</param>
            <param name="value2">Second font family to test</param>
            <returns>True if the font families are not equal, false otherwise</returns>
        </member>
        <member name="M:Eto.Drawing.FontFamily.GetHashCode">
            <summary>
            Gets the hash code for this instance
            </summary>
            <returns>Hash code for this instance</returns>
        </member>
        <member name="M:Eto.Drawing.FontFamily.Equals(System.Object)">
            <summary>
            Tests if this instance is equal to the specified object
            </summary>
            <param name="obj">Object to test with</param>
            <returns>True if the specified object is a FontFamily and is equal to this instance</returns>
        </member>
        <member name="M:Eto.Drawing.FontFamily.ToString">
            <summary>
            Gets a string representation of this font family
            </summary>
            <returns>String representation of this font family</returns>
        </member>
        <member name="T:Eto.Drawing.FontFamily.IHandler">
            <summary>
            Interface for a <see cref="T:Eto.Drawing.FontFamily"/> handler
            </summary>
        </member>
        <member name="P:Eto.Drawing.FontFamily.IHandler.Name">
            <summary>
            Gets the name of the font family
            </summary>
            <remarks>
            This should be the same as what is used to create new instances of a font family using the <see cref="M:Eto.Drawing.FontFamily.IHandler.Create(System.String)"/> method
            </remarks>
        </member>
        <member name="P:Eto.Drawing.FontFamily.IHandler.LocalizedName">
            <summary>
            Gets the localized name of the font for the current UI language
            </summary>
            <remarks>
            This will return a name suitable to display to the user in their own language, if the font provides a specific name for their UI language.
            
            For platforms that do not support localized font names, or for fonts that do not have a specific name for the current language, the
            value of <see cref="P:Eto.Drawing.FontFamily.IHandler.Name"/> will be returned.
            </remarks>
            <value>The localized name of this font.</value>
        </member>
        <member name="P:Eto.Drawing.FontFamily.IHandler.Typefaces">
            <summary>
            Gets an enumeration of the typefaces supported by this font family
            </summary>
        </member>
        <member name="M:Eto.Drawing.FontFamily.IHandler.Create(System.String)">
            <summary>
            Creates a new instance of a font family with a given name
            </summary>
            <param name="familyName">Name of the font family to create this instance for</param>
        </member>
        <member name="T:Eto.Drawing.Fonts">
            <summary>
            Methods to get information about current fonts installed the running system
            </summary>
            <copyright>(c) 2014 by Curtis Wensley</copyright>
            <license type="BSD-3">See LICENSE for full terms</license>
        </member>
        <member name="M:Eto.Drawing.Fonts.Cached(System.String,System.Single,Eto.Drawing.FontStyle,Eto.Drawing.FontDecoration)">
            <summary>
            Gets a cached font
            </summary>
            <param name="familyName">Family name of the font</param>
            <param name="size">Size in points of the font</param>
            <param name="style">Style of the font</param>
            <param name="decoration">Decorations to apply to the font</param>
        </member>
        <member name="M:Eto.Drawing.Fonts.Cached(Eto.Drawing.FontFamily,System.Single,Eto.Drawing.FontStyle,Eto.Drawing.FontDecoration)">
            <summary>
            Gets a cached font
            </summary>
            <param name="family">Family of the font</param>
            <param name="size">Size in points of the font</param>
            <param name="style">Style of the font</param>
            <param name="decoration">Decorations to apply to the font</param>
        </member>
        <member name="M:Eto.Drawing.Fonts.ClearCache">
            <summary>
            Clears the font cache
            </summary>
            <remarks>
            This is useful if you are using the <see cref="M:Eto.Drawing.Fonts.Cached(Eto.Drawing.FontFamily,System.Single,Eto.Drawing.FontStyle,Eto.Drawing.FontDecoration)"/> method to cache fonts and want to clear it
            to conserve memory or resources.
            </remarks>
        </member>
        <member name="M:Eto.Drawing.Fonts.Monospace(System.Single,Eto.Drawing.FontStyle,Eto.Drawing.FontDecoration)">
            <summary>
            Gets a font with the <see cref="P:Eto.Drawing.FontFamilies.Monospace"/> family and the specified size and style
            </summary>
            <param name="size">Size of the font</param>
            <param name="style">Style of the font</param>
            <param name="decoration">Decorations to apply to the font</param>
        </member>
        <member name="M:Eto.Drawing.Fonts.Sans(System.Single,Eto.Drawing.FontStyle,Eto.Drawing.FontDecoration)">
            <summary>
            Gets a font with the <see cref="P:Eto.Drawing.FontFamilies.Sans"/> family and the specified size and style
            </summary>
            <param name="size">Size of the font</param>
            <param name="style">Style of the font</param>
            <param name="decoration">Decorations to apply to the font</param>
        </member>
        <member name="M:Eto.Drawing.Fonts.Serif(System.Single,Eto.Drawing.FontStyle,Eto.Drawing.FontDecoration)">
            <summary>
            Gets a font with the <see cref="P:Eto.Drawing.FontFamilies.Serif"/> family and the specified size and style
            </summary>
            <param name="size">Size of the font</param>
            <param name="style">Style of the font</param>
            <param name="decoration">Decorations to apply to the font</param>
        </member>
        <member name="M:Eto.Drawing.Fonts.Cursive(System.Single,Eto.Drawing.FontStyle,Eto.Drawing.FontDecoration)">
            <summary>
            Gets a font with the <see cref="P:Eto.Drawing.FontFamilies.Cursive"/> family and the specified size and style
            </summary>
            <param name="size">Size of the font</param>
            <param name="style">Style of the font</param>
            <param name="decoration">Decorations to apply to the font</param>
        </member>
        <member name="M:Eto.Drawing.Fonts.Fantasy(System.Single,Eto.Drawing.FontStyle,Eto.Drawing.FontDecoration)">
            <summary>
            Gets a font with the <see cref="P:Eto.Drawing.FontFamilies.Fantasy"/> family and the specified size and style
            </summary>
            <param name="size">Size of the font</param>
            <param name="style">Style of the font</param>
            <param name="decoration">Decorations to apply to the font</param>
        </member>
        <member name="P:Eto.Drawing.Fonts.AvailableFontFamilies">
            <summary>
            Gets an enumeration of available font families in the current system
            </summary>
            <returns>An enumeration of font family objects that this system supports</returns>
        </member>
        <member name="T:Eto.Drawing.Fonts.IHandler">
            <summary>
            Platform handler interface for the <see cref="T:Eto.Drawing.Fonts"/> class
            </summary>
        </member>
        <member name="P:Eto.Drawing.Fonts.IHandler.AvailableFontFamilies">
            <summary>
            Gets an enumeration of available font families in the current system
            </summary>
        </member>
        <member name="M:Eto.Drawing.Fonts.IHandler.FontFamilyAvailable(System.String)">
            <summary>
            Gets a value indicating whether the specified font family is available in the system
            </summary>
            <remarks>
            This is used to allow for (relatively) efficient lookup of a font name when the user
            specifies a comma-separated list of families when creating a <see cref="T:Eto.Drawing.FontFamily"/>
            or <see cref="T:Eto.Drawing.Font"/>.
            </remarks>
            <returns><c>true</c>, if family available was available, <c>false</c> otherwise.</returns>
            <param name="fontFamily">Font family to determine if it is available</param>
        </member>
        <member name="T:Eto.Drawing.FontTypeface">
            <summary>
            A font type that specifies the characteristics of a <see cref="T:Eto.Drawing.FontFamily"/> variation
            </summary>
            <remarks>
            Each FontFamily can have different variations, such as Bold, Italic, Bold and Italic, etc.
            
            This class represents each supported typeface of a particular font family, and can be used
            to create a <see cref="T:Eto.Drawing.Font"/> instance that uses this typeface, using the <see cref="M:Font(FontTypeface,float,FontDecoration,Generator)"/> constructor.
            </remarks>
            <copyright>(c) 2014 by Curtis Wensley</copyright>
            <license type="BSD-3">See LICENSE for full terms</license>
        </member>
        <member name="P:Eto.Drawing.FontTypeface.Family">
            <summary>
            Gets the family of this typeface
            </summary>
        </member>
        <member name="P:Eto.Drawing.FontTypeface.Name">
            <summary>
            Gets the name of this typeface
            </summary>
            <remarks>
            The name of the typeface typically includes hints to the style of the type
            </remarks>
        </member>
        <member name="P:Eto.Drawing.FontTypeface.FontStyle">
            <summary>
            Gets the style of this typeface
            </summary>
            <remarks>
            This style does not fully describe the characteristics of the typeface, just very broad characteristics.
            </remarks>
        </member>
        <member name="P:Eto.Drawing.FontTypeface.Bold">
            <summary>
            Gets a value indicating that this font typeface has a bold style
            </summary>
        </member>
        <member name="P:Eto.Drawing.FontTypeface.Italic">
            <summary>
            Gets a value indicating that this font typeface has an italic style
            </summary>
        </member>
        <member name="M:Eto.Drawing.FontTypeface.#ctor(Eto.Drawing.FontFamily,Eto.Drawing.FontTypeface.IHandler)">
            <summary>
            Initializes a new instance of a FontTypeface class with the specified handler
            </summary>
            <remarks>
            This allows the platform handlers to create instances of the FontTypeface class
            with a specific handler. It should not be called by user code.
            </remarks>
            <param name="family">Family this typeface is part of</param>
            <param name="handler">Handler to use for this typeface instance</param>
        </member>
        <member name="M:Eto.Drawing.FontTypeface.ToString">
            <summary>
            Gets a string representation of this typeface
            </summary>
            <returns>A string representation of this typeface</returns>
        </member>
        <member name="T:Eto.Drawing.FontTypeface.IHandler">
            <summary>
            Platform handler interface for the <see cref="T:Eto.Drawing.FontTypeface"/> class
            </summary>
        </member>
        <member name="P:Eto.Drawing.FontTypeface.IHandler.Name">
            <summary>
            Gets the name of this typeface
            </summary>
            <remarks>
            The name of the typeface typically includes hints to the style of the type
            </remarks>
        </member>
        <member name="P:Eto.Drawing.FontTypeface.IHandler.FontStyle">
            <summary>
            Gets the style of this typeface
            </summary>
            <remarks>
            This style does not fully describe the characteristics of the typeface, just very broad characteristics.
            </remarks>
        </member>
        <member name="T:Eto.Drawing.Graphics">
            <summary>
            Graphics context object for drawing operations
            </summary>
            <remarks>
            This class allows you to draw on either a <see cref="T:Eto.Drawing.Bitmap"/> or a <see cref="T:Eto.Forms.Drawable"/> control.
            </remarks>
            <copyright>(c) 2012-2014 by Curtis Wensley</copyright>
            <license type="BSD-3">See LICENSE for full terms</license>
        </member>
        <member name="M:Eto.Drawing.Graphics.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Eto.Drawing.Graphics"/> class.
            </summary>
        </member>
        <member name="M:Eto.Drawing.Graphics.#ctor(Eto.Drawing.Graphics.IHandler)">
            <summary>
            Initializes a new instance of the Graphics class with the specified platform <paramref name="handler"/>
            </summary>
            <param name="handler">Platform handler to use for this instance</param>
        </member>
        <member name="M:Eto.Drawing.Graphics.#ctor(Eto.Drawing.Bitmap)">
            <summary>
            Initializes a new instance of the Generator class to draw on the given <paramref name="image"/>
            </summary>
            <param name="image">Image to draw on using this graphics context</param>
        </member>
        <member name="M:Eto.Drawing.Graphics.DrawLine(Eto.Drawing.Color,Eto.Drawing.PointF,Eto.Drawing.PointF)">
            <summary>
            Draws a 1 pixel wide line with the specified <paramref name="color"/>
            </summary>
            <param name="color">Color of the line to draw</param>
            <param name="start">Starting location</param>
            <param name="end">Ending location</param>
        </member>
        <member name="M:Eto.Drawing.Graphics.DrawLine(Eto.Drawing.Pen,Eto.Drawing.PointF,Eto.Drawing.PointF)">
            <summary>
            Draws a line with the specified <paramref name="pen"/>
            </summary>
            <param name="pen">Pen to draw the line with</param>
            <param name="start">Starting location</param>
            <param name="end">Ending location</param>
        </member>
        <member name="M:Eto.Drawing.Graphics.DrawLine(Eto.Drawing.Color,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Draws a 1 pixel wide line with the specified <paramref name="color"/>
            </summary>
            <param name="color">Color of the line</param>
            <param name="startx">X co-ordinate of the starting point</param>
            <param name="starty">Y co-ordinate of the starting point</param>
            <param name="endx">X co-ordinate of the ending point</param>
            <param name="endy">Y co-ordinate of the ending point</param>
        </member>
        <member name="M:Eto.Drawing.Graphics.DrawLine(Eto.Drawing.Pen,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Draws a line with the specified <paramref name="pen"/>
            </summary>
            <param name="pen">Pen to draw the line with</param>
            <param name="startx">X co-ordinate of the starting point</param>
            <param name="starty">Y co-ordinate of the starting point</param>
            <param name="endx">X co-ordinate of the ending point</param>
            <param name="endy">Y co-ordinate of the ending point</param>
        </member>
        <member name="M:Eto.Drawing.Graphics.DrawRectangle(Eto.Drawing.Pen,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Draws a rectangle
            </summary>
            <param name="pen">Pen to outline the rectangle</param>
            <param name="x">X co-ordinate</param>
            <param name="y">Y co-ordinate</param>
            <param name="width">Width of the rectangle</param>
            <param name="height">Height of the rectangle</param>
        </member>
        <member name="M:Eto.Drawing.Graphics.DrawRectangle(Eto.Drawing.Color,Eto.Drawing.RectangleF)">
            <summary>
            Draws a 1 pixel wide outline of a rectangle with the specified <paramref name="color"/>
            </summary>
            <param name="color">Color for the outline</param>
            <param name="rectangle">Where to draw the rectangle</param>
        </member>
        <member name="M:Eto.Drawing.Graphics.DrawRectangle(Eto.Drawing.Color,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Draws a 1 pixel wide outline of a rectangle with the specified <paramref name="color"/>
            </summary>
            <param name="color">Color for the outline</param>
            <param name="x">X co-ordinate</param>
            <param name="y">Y co-ordinate</param>
            <param name="width">Width of the rectangle</param>
            <param name="height">Height of the rectangle</param>
        </member>
        <member name="M:Eto.Drawing.Graphics.DrawRectangle(Eto.Drawing.Pen,Eto.Drawing.RectangleF)">
            <summary>
            Draws a rectangle
            </summary>
            <param name="pen">Pen to outline the rectangle</param>
            <param name="rectangle">Where to draw the rectangle</param>
        </member>
        <member name="M:Eto.Drawing.Graphics.DrawInsetRectangle(Eto.Drawing.Color,Eto.Drawing.Color,Eto.Drawing.RectangleF,System.Int32)">
            <summary>
            Draws an rectangle with colors on the top/left and bottom/right with the given <paramref name="width"/>
            </summary>
            <param name="topLeftColor">Color for top/left edges</param>
            <param name="bottomRightColor">Color for bottom/right edges</param>
            <param name="rectangle">Outside of inset rectangle to draw</param>
            <param name="width">Width of the rectangle, in pixels</param>
        </member>
        <member name="M:Eto.Drawing.Graphics.FillRectangle(Eto.Drawing.Color,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Fills a rectangle with the specified <paramref name="color"/>
            </summary>
            <param name="color">Fill color</param>
            <param name="x">X co-ordinate</param>
            <param name="y">Y co-ordinate</param>
            <param name="width">Width of the rectangle</param>
            <param name="height">Height of the rectangle</param>
        </member>
        <member name="M:Eto.Drawing.Graphics.FillRectangle(Eto.Drawing.Brush,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Fills a rectangle with the specified <paramref name="brush"/>
            </summary>
            <param name="brush">Brush to fill the rectangle</param>
            <param name="x">X co-ordinate</param>
            <param name="y">Y co-ordinate</param>
            <param name="width">Width of the rectangle</param>
            <param name="height">Height of the rectangle</param>
        </member>
        <member name="M:Eto.Drawing.Graphics.FillRectangle(Eto.Drawing.Color,Eto.Drawing.RectangleF)">
            <summary>
            Fills a rectangle with the specified <paramref name="color"/>
            </summary>
            <param name="color">Fill color</param>
            <param name="rectangle">Location for the rectangle</param>
        </member>
        <member name="M:Eto.Drawing.Graphics.FillRectangle(Eto.Drawing.Brush,Eto.Drawing.RectangleF)">
            <summary>
            Fills a rectangle with the specified <paramref name="brush"/>
            </summary>
            <param name="brush">Brush to fill the rectangle</param>
            <param name="rectangle">Location for the rectangle</param>
        </member>
        <member name="M:Eto.Drawing.Graphics.FillRectangles(Eto.Drawing.Color,System.Collections.Generic.IEnumerable{Eto.Drawing.RectangleF})">
            <summary>
            Fills the specified <paramref name="rectangles"/>
            </summary>
            <param name="color">Color to fill the rectangles</param>
            <param name="rectangles">Enumeration of rectangles to fill</param>
        </member>
        <member name="M:Eto.Drawing.Graphics.FillRectangles(Eto.Drawing.Brush,System.Collections.Generic.IEnumerable{Eto.Drawing.RectangleF})">
            <summary>
            Fills the specified <paramref name="rectangles"/>
            </summary>
            <param name="brush">Brush to fill the rectangles</param>
            <param name="rectangles">Enumeration of rectangles to fill</param>
        </member>
        <member name="M:Eto.Drawing.Graphics.FillEllipse(Eto.Drawing.Color,Eto.Drawing.RectangleF)">
            <summary>
            Fills an ellipse with the specified <paramref name="color"/>
            </summary>
            <param name="color">Fill color</param>
            <param name="rectangle">Location for the ellipse</param>
        </member>
        <member name="M:Eto.Drawing.Graphics.FillEllipse(Eto.Drawing.Brush,Eto.Drawing.RectangleF)">
            <summary>
            Fills an ellipse with the specified <paramref name="brush"/>
            </summary>
            <param name="brush">Brush to fill the ellipse</param>
            <param name="rectangle">Location for the ellipse</param>
        </member>
        <member name="M:Eto.Drawing.Graphics.FillEllipse(Eto.Drawing.Color,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Fills an ellipse with the specified <paramref name="color"/>
            </summary>
            <param name="color">Fill color</param>
            <param name="x">X co-ordinate</param>
            <param name="y">Y co-ordinate</param>
            <param name="width">Width of the ellipse</param>
            <param name="height">Height of the ellipse</param>
        </member>
        <member name="M:Eto.Drawing.Graphics.FillEllipse(Eto.Drawing.Brush,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Fills an ellipse with the specified <paramref name="brush"/>
            </summary>
            <param name="brush">Brush to fill the ellipse</param>
            <param name="x">X co-ordinate</param>
            <param name="y">Y co-ordinate</param>
            <param name="width">Width of the ellipse</param>
            <param name="height">Height of the ellipse</param>
        </member>
        <member name="M:Eto.Drawing.Graphics.DrawEllipse(Eto.Drawing.Color,Eto.Drawing.RectangleF)">
            <summary>
            Draws a 1 pixel wide ellipse outline with the specified <paramref name="color"/>
            </summary>
            <param name="color">Color to outline the ellipse</param>
            <param name="rectangle">Location for the ellipse</param>
        </member>
        <member name="M:Eto.Drawing.Graphics.DrawEllipse(Eto.Drawing.Pen,Eto.Drawing.RectangleF)">
            <summary>
            Draws an ellipse outline with the specified <paramref name="pen"/>
            </summary>
            <param name="pen">Pen to outline the ellipse</param>
            <param name="rectangle">Location for the ellipse</param>
        </member>
        <member name="M:Eto.Drawing.Graphics.DrawEllipse(Eto.Drawing.Color,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Draws a 1 pixel wide ellipse outline with the specified <paramref name="color"/>
            </summary>
            <param name="color">Fill color</param>
            <param name="x">X co-ordinate</param>
            <param name="y">Y co-ordinate</param>
            <param name="width">Width of the ellipse</param>
            <param name="height">Height of the ellipse</param>
        </member>
        <member name="M:Eto.Drawing.Graphics.DrawEllipse(Eto.Drawing.Pen,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Draws an ellipse with the specified <paramref name="pen"/>
            </summary>
            <param name="pen">Pen to outline the ellipse</param>
            <param name="x">X co-ordinate</param>
            <param name="y">Y co-ordinate</param>
            <param name="width">Width of the ellipse</param>
            <param name="height">Height of the ellipse</param>
        </member>
        <member name="M:Eto.Drawing.Graphics.DrawArc(Eto.Drawing.Color,Eto.Drawing.RectangleF,System.Single,System.Single)">
            <summary>
            Draws a 1 pixel wide arc with the specified <paramref name="color"/>
            </summary>
            <param name="color">Color of the arc</param>
            <param name="rectangle">Location of the arc</param>
            <param name="startAngle">Elliptical (skewed) angle in degrees from the x-axis to the starting point of the arc</param>
            <param name="sweepAngle">Angle in degrees from the <paramref name="startAngle"/> to the ending point of the arc</param>
        </member>
        <member name="M:Eto.Drawing.Graphics.DrawArc(Eto.Drawing.Pen,Eto.Drawing.RectangleF,System.Single,System.Single)">
            <summary>
            Draws an arc with the specified <paramref name="pen"/>
            </summary>
            <param name="pen">Pen to draw the arc</param>
            <param name="rectangle">Location of the arc</param>
            <param name="startAngle">Elliptical (skewed) angle in degrees from the x-axis to the starting point of the arc</param>
            <param name="sweepAngle">Angle in degrees from the <paramref name="startAngle"/> to the ending point of the arc</param>
        </member>
        <member name="M:Eto.Drawing.Graphics.DrawArc(Eto.Drawing.Color,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Draws a 1 pixel wide arc with the specified <paramref name="color"/>
            </summary>
            <param name="color">Color of the arc</param>
            <param name="x">X co-ordinate of the upper left corner of the arc</param>
            <param name="y">Y co-ordinate of the upper left corner of the arc</param>
            <param name="width">Width of the arc</param>
            <param name="height">Height of the arc</param>
            <param name="startAngle">Elliptical (skewed) angle in degrees from the x-axis to the starting point of the arc</param>
            <param name="sweepAngle">Angle in degrees from the <paramref name="startAngle"/> to the ending point of the arc</param>
        </member>
        <member name="M:Eto.Drawing.Graphics.DrawArc(Eto.Drawing.Pen,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Draws an arc with the specified <paramref name="pen"/>
            </summary>
            <param name="pen">Pen to draw the arc</param>
            <param name="x">X co-ordinate of the upper left corner of the arc</param>
            <param name="y">Y co-ordinate of the upper left corner of the arc</param>
            <param name="width">Width of the arc</param>
            <param name="height">Height of the arc</param>
            <param name="startAngle">Elliptical (skewed) angle in degrees from the x-axis to the starting point of the arc</param>
            <param name="sweepAngle">Angle in degrees from the <paramref name="startAngle"/> to the ending point of the arc</param>
        </member>
        <member name="M:Eto.Drawing.Graphics.FillPie(Eto.Drawing.Color,Eto.Drawing.RectangleF,System.Single,System.Single)">
            <summary>
            Fills a pie with the specified <paramref name="color"/>
            </summary>
            <param name="color">Fill color</param>
            <param name="rectangle">Location of the pie</param>
            <param name="startAngle">Elliptical (skewed) angle in degrees from the x-axis to the starting point of the pie</param>
            <param name="sweepAngle">Angle in degrees from the <paramref name="startAngle"/> to the ending point of the pie</param>
        </member>
        <member name="M:Eto.Drawing.Graphics.FillPie(Eto.Drawing.Brush,Eto.Drawing.RectangleF,System.Single,System.Single)">
            <summary>
            Fills a pie with the specified <paramref name="brush"/>
            </summary>
            <param name="brush">Brush to fill the pie</param>
            <param name="rectangle">Location of the pie</param>
            <param name="startAngle">Elliptical (skewed) angle in degrees from the x-axis to the starting point of the pie</param>
            <param name="sweepAngle">Angle in degrees from the <paramref name="startAngle"/> to the ending point of the pie</param>
        </member>
        <member name="M:Eto.Drawing.Graphics.FillPie(Eto.Drawing.Color,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Fills a pie with the specified <paramref name="color"/>
            </summary>
            <param name="color">Fill color</param>
            <param name="x">X co-ordinate of the upper left corner of the pie</param>
            <param name="y">Y co-ordinate of the upper left corner of the pie</param>
            <param name="width">Width of the pie</param>
            <param name="height">Height of the pie</param>
            <param name="startAngle">Elliptical (skewed) angle in degrees from the x-axis to the starting point of the pie</param>
            <param name="sweepAngle">Angle in degrees from the <paramref name="startAngle"/> to the ending point of the pie</param>
        </member>
        <member name="M:Eto.Drawing.Graphics.FillPie(Eto.Drawing.Brush,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Fills a pie with the specified <paramref name="brush"/>
            </summary>
            <param name="brush">Brush to fill the pie</param>
            <param name="x">X co-ordinate of the upper left corner of the pie</param>
            <param name="y">Y co-ordinate of the upper left corner of the pie</param>
            <param name="width">Width of the pie</param>
            <param name="height">Height of the pie</param>
            <param name="startAngle">Elliptical (skewed) angle in degrees from the x-axis to the starting point of the pie</param>
            <param name="sweepAngle">Angle in degrees from the <paramref name="startAngle"/> to the ending point of the pie</param>
        </member>
        <member name="M:Eto.Drawing.Graphics.FillPolygon(Eto.Drawing.Color,Eto.Drawing.PointF[])">
            <summary>
            Fills a polygon defined by <paramref name="points"/> with the specified <paramref name="color"/>
            </summary>
            <param name="color">Fill color</param>
            <param name="points">Points of the polygon</param>
        </member>
        <member name="M:Eto.Drawing.Graphics.FillPolygon(Eto.Drawing.Brush,Eto.Drawing.PointF[])">
            <summary>
            Fills a polygon defined by <paramref name="points"/> with the specified <paramref name="brush"/>
            </summary>
            <param name="brush">Brush to fill the polygon</param>
            <param name="points">Points of the polygon</param>
        </member>
        <member name="M:Eto.Drawing.Graphics.DrawPolygon(Eto.Drawing.Color,Eto.Drawing.PointF[])">
            <summary>
            Draws a 1 pixel wide outline of a polygon with the specified <paramref name="points"/>
            </summary>
            <param name="color">Color to draw the polygon lines</param>
            <param name="points">Points of the polygon</param>
        </member>
        <member name="M:Eto.Drawing.Graphics.DrawPolygon(Eto.Drawing.Pen,Eto.Drawing.PointF[])">
            <summary>
            Draws an outline of a polygon with the specified <paramref name="points"/>
            </summary>
            <param name="pen">Pen to draw the polygon lines with</param>
            <param name="points">Points of the polygon</param>
        </member>
        <member name="M:Eto.Drawing.Graphics.DrawLines(Eto.Drawing.Color,Eto.Drawing.PointF[])">
            <summary>
            Draws a 1 pixel wide set of lines with the specified <paramref name="points"/>
            </summary>
            <param name="color">Color to draw the lines</param>
            <param name="points">Points for each of the lines</param>
        </member>
        <member name="M:Eto.Drawing.Graphics.DrawLines(Eto.Drawing.Color,System.Collections.Generic.IEnumerable{Eto.Drawing.PointF})">
            <summary>
            Draws a 1 pixel wide set of lines with the specified <paramref name="points"/>
            </summary>
            <param name="color">Color to draw the lines</param>
            <param name="points">Points for each of the lines</param>
        </member>
        <member name="M:Eto.Drawing.Graphics.DrawLines(Eto.Drawing.Pen,Eto.Drawing.PointF[])">
            <summary>
            Draws a set of lines with the specified <paramref name="points"/>
            </summary>
            <param name="pen">Pen to draw the lines with</param>
            <param name="points">Points for each of the lines</param>
        </member>
        <member name="M:Eto.Drawing.Graphics.DrawLines(Eto.Drawing.Pen,System.Collections.Generic.IEnumerable{Eto.Drawing.PointF})">
            <summary>
            Draws a set of lines with the specified <paramref name="points"/>
            </summary>
            <param name="pen">Pen to draw the lines with</param>
            <param name="points">Points for each of the lines</param>
        </member>
        <member name="M:Eto.Drawing.Graphics.DrawPath(Eto.Drawing.Color,Eto.Drawing.IGraphicsPath)">
            <summary>
            Draws a 1 pixel outline of the specified <paramref name="path"/>
            </summary>
            <param name="color">Draw color</param>
            <param name="path">Path to draw</param>
        </member>
        <member name="M:Eto.Drawing.Graphics.DrawPath(Eto.Drawing.Pen,Eto.Drawing.IGraphicsPath)">
            <summary>
            Draws the specified <paramref name="path"/>
            </summary>
            <param name="pen">Pen to outline the path</param>
            <param name="path">Path to draw</param>
        </member>
        <member name="M:Eto.Drawing.Graphics.FillPath(Eto.Drawing.Color,Eto.Drawing.IGraphicsPath)">
            <summary>
            Fills the specified <paramref name="path"/>
            </summary>
            <param name="color">Fill color</param>
            <param name="path">Path to fill</param>
        </member>
        <member name="M:Eto.Drawing.Graphics.FillPath(Eto.Drawing.Brush,Eto.Drawing.IGraphicsPath)">
            <summary>
            Fills the specified <paramref name="path"/>
            </summary>
            <param name="brush">Brush to fill the path</param>
            <param name="path">Path to fill</param>
        </member>
        <member name="M:Eto.Drawing.Graphics.DrawImage(Eto.Drawing.Image,Eto.Drawing.PointF)">
            <summary>
            Draws the specified <paramref name="image"/> at a location with no scaling
            </summary>
            <param name="image">Image to draw</param>
            <param name="location">Location to draw the image</param>
        </member>
        <member name="M:Eto.Drawing.Graphics.DrawImage(Eto.Drawing.Image,System.Single,System.Single)">
            <summary>
            Draws the specified <paramref name="image"/> at a location with no scaling
            </summary>
            <param name="image">Image to draw</param>
            <param name="x">X co-ordinate</param>
            <param name="y">Y co-ordinate</param>
        </member>
        <member name="M:Eto.Drawing.Graphics.DrawImage(Eto.Drawing.Image,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Draws the specified <paramref name="image"/> in a rectangle
            </summary>
            <remarks>
            This will scale the image to the specified width and height using the <see cref="P:Eto.Drawing.Graphics.ImageInterpolation"/> mode
            </remarks>
            <param name="image">Image to draw</param>
            <param name="x">X co-ordinate</param>
            <param name="y">Y co-ordinate</param>
            <param name="width">Destination width of the image to draw</param>
            <param name="height">Destination height of the image to draw</param>
        </member>
        <member name="M:Eto.Drawing.Graphics.DrawImage(Eto.Drawing.Image,Eto.Drawing.RectangleF)">
            <summary>
            Draws the specified <paramref name="image"/> in a rectangle
            </summary>
            <remarks>
            This will scale the image to the specified width and height using the <see cref="P:Eto.Drawing.Graphics.ImageInterpolation"/> mode
            </remarks>
            <param name="image">Image to draw</param>
            <param name="rectangle">Where to draw the image</param>
        </member>
        <member name="M:Eto.Drawing.Graphics.DrawImage(Eto.Drawing.Image,Eto.Drawing.RectangleF,Eto.Drawing.PointF)">
            <summary>
            Draws the <paramref name="source"/> portion of an <paramref name="image"/>, scaling to the specified <paramref name="destination"/>
            </summary>
            <param name="image">Image to draw</param>
            <param name="source">Source rectangle of the image portion to draw</param>
            <param name="destination">Destination rectangle of where to draw the portion</param>
        </member>
        <member name="M:Eto.Drawing.Graphics.DrawImage(Eto.Drawing.Image,Eto.Drawing.RectangleF,Eto.Drawing.RectangleF)">
            <summary>
            Draws the <paramref name="source"/> portion of an <paramref name="image"/>, scaling to the specified <paramref name="destination"/>
            </summary>
            <param name="image">Image to draw</param>
            <param name="source">Source rectangle of the image portion to draw</param>
            <param name="destination">Destination rectangle of where to draw the portion</param>
        </member>
        <member name="M:Eto.Drawing.Graphics.DrawText(Eto.Drawing.Font,Eto.Drawing.SolidBrush,System.Single,System.Single,System.String)">
            <summary>
            Draws text with the specified <paramref name="font"/>, <paramref name="brush"/> and location
            </summary>
            <param name="font">Font to draw the text with</param>
            <param name="brush">Brush to stroke the text</param>
            <param name="x">X co-ordinate of where to start drawing the text</param>
            <param name="y">Y co-ordinate of where to start drawing the text</param>
            <param name="text">Text string to draw</param>
        </member>
        <member name="M:Eto.Drawing.Graphics.DrawText(Eto.Drawing.Font,Eto.Drawing.Color,System.Single,System.Single,System.String)">
            <summary>
            Draws text with the specified <paramref name="font"/>, <paramref name="color"/> and location
            </summary>
            <param name="font">Font to draw the text with</param>
            <param name="color">Color of the text</param>
            <param name="x">X co-ordinate of where to start drawing the text</param>
            <param name="y">Y co-ordinate of where to start drawing the text</param>
            <param name="text">Text string to draw</param>
        </member>
        <member name="M:Eto.Drawing.Graphics.DrawText(Eto.Drawing.Font,Eto.Drawing.SolidBrush,Eto.Drawing.PointF,System.String)">
            <summary>
            Draws text with the specified <paramref name="font"/>, <paramref name="brush"/> and location
            </summary>
            <param name="font">Font to draw the text with</param>
            <param name="brush">Brush to stroke the text</param>
            <param name="location">Location of where to start drawing the text</param>
            <param name="text">Text string to draw</param>
        </member>
        <member name="M:Eto.Drawing.Graphics.DrawText(Eto.Drawing.Font,Eto.Drawing.Color,Eto.Drawing.PointF,System.String)">
            <summary>
            Draws text with the specified <paramref name="font"/>, <paramref name="color"/> and location
            </summary>
            <param name="font">Font to draw the text with</param>
            <param name="color">Color of the text</param>
            <param name="location">Location of where to start drawing the text</param>
            <param name="text">Text string to draw</param>
        </member>
        <member name="M:Eto.Drawing.Graphics.MeasureString(Eto.Drawing.Font,System.String)">
            <summary>
            Measures the string with the given <paramref name="font"/>
            </summary>
            <param name="font">Font to measure with</param>
            <param name="text">Text string to measure</param>
            <returns>Size representing the dimensions of the entire text would take to draw given the specified <paramref name="font"/></returns>
        </member>
        <member name="P:Eto.Drawing.Graphics.AntiAlias">
            <summary>
            Gets or sets a value indicating that drawing operations will use anti-aliasing
            </summary>
        </member>
        <member name="P:Eto.Drawing.Graphics.ImageInterpolation">
            <summary>
            Gets or sets the interpolation mode for drawing images
            </summary>
        </member>
        <member name="P:Eto.Drawing.Graphics.DPI">
            <summary>
            Gets the dots per inch of the current graphics context. Usually 96 for windows and 72 for other systems
            </summary>
        </member>
        <member name="P:Eto.Drawing.Graphics.PointsPerPixel">
            <summary>
            Gets the scale of points per pixel. Multiply by pixel size to get point value (e.g. to set font size in pixels).
            </summary>
            <remarks>
            A value of 1.0 indicates that one point equals one pixel.
            Windows is usually 0.75 (96 dpi) while other systems are usually 1.0 (e.g. linux, os x)
            </remarks>
        </member>
        <member name="P:Eto.Drawing.Graphics.PixelsPerPoint">
            <summary>
            Gets the scale of points to pixels. Multiply by point value to get pixel size
            </summary>
            <remarks>
            A value of 1.0 indicates that one pixel equals one point.
            Windows is usually 1 1/3 (96 dpi) while other systems are usually 1.0 (e.g. linux, os x)
            </remarks>
        </member>
        <member name="P:Eto.Drawing.Graphics.PixelOffsetMode">
            <summary>
            Gets or sets the pixel offset mode for draw operations
            </summary>
            <value>The pixel offset mode.</value>
        </member>
        <member name="P:Eto.Drawing.Graphics.IsRetained">
            <summary>
            Gets a value indicating the graphics sub-system is a retained system (e.g. WPF)
            </summary>
            <remarks>
            Retained mode systems may have different behaviour characteristics, which may impact how often the screen is updated
            or other code.
            </remarks>
        </member>
        <member name="M:Eto.Drawing.Graphics.Flush">
            <summary>
            Flushes the drawing (for some platforms)
            </summary>
            <remarks>
            Flushing the drawing will force any undrawn changes to be shown to the user.  Typically when you are doing
            a lot of drawing, you may want to flush the changed periodically so that the user does not think the UI is unresponsive.
            
            Some platforms may not have the concept of flushing the graphics, so this would do nothing
            </remarks>
        </member>
        <member name="M:Eto.Drawing.Graphics.TranslateTransform(System.Single,System.Single)">
            <summary>
            Translates the origin of the co-ordinate system by the given offset
            </summary>
            <param name="offsetX">Offset to translate the X co-ordinate</param>
            <param name="offsetY">Offset to translate the Y co-ordinate</param>
        </member>
        <member name="M:Eto.Drawing.Graphics.TranslateTransform(Eto.Drawing.PointF)">
            <summary>
            Translates the origin of the co-ordinate system by the given offset
            </summary>
            <param name="offset">Offset to translate the co-ordinate system by</param>
        </member>
        <member name="M:Eto.Drawing.Graphics.RotateTransform(System.Single)">
            <summary>
            Rotates the co-ordinate system by the given <paramref name="angle"/>
            </summary>
            <param name="angle">Angle in degrees to rotate the co-ordinates</param>
        </member>
        <member name="M:Eto.Drawing.Graphics.ScaleTransform(Eto.Drawing.SizeF)">
            <summary>
            Scales the co-ordinate system by a factor
            </summary>
            <param name="scale">Amount to scale in the horizontal and vertical axis</param>
        </member>
        <member name="M:Eto.Drawing.Graphics.ScaleTransform(System.Single,System.Single)">
            <summary>
            Scales the co-ordinate system by a factor
            </summary>
            <param name="scaleX">Amount to scale the horizontal axis</param>
            <param name="scaleY">Amount to scale the vertical axis</param>
        </member>
        <member name="M:Eto.Drawing.Graphics.ScaleTransform(System.Single)">
            <summary>
            Scales the co-ordinate system by a factor
            </summary>
            <param name="scale">Amount to scale in both the horizontal and vertical axis</param>
        </member>
        <member name="M:Eto.Drawing.Graphics.MultiplyTransform(Eto.Drawing.IMatrix)">
            <summary>
            Multiplies the co-ordinate system with the given <paramref name="matrix"/>
            </summary>
            <param name="matrix">Matrix to multiply the co-ordinate system with</param>
        </member>
        <member name="T:Eto.Drawing.Graphics.TransformState">
            <summary>
            Maintains the current state of the graphics object.
            </summary>
        </member>
        <member name="M:Eto.Drawing.Graphics.SaveTransformState">
            <summary>
            Gets an object that will restore to the current transform state when disposed.
            </summary>
            <remarks>
            This saves the current transform state that can be changed by any of the transform calls.
            
            This is useful when calling into untrusted code that can leave the transform unbalanced.
            It also ensures that RestoreTransform() requires a matching SaveTransform(), until the return value is disposed.
            Disposing the return value guarantees that the transform state is restored to when this method was called.  
            </remarks>
            <example>
            This example shows how you can reliably restore state in a code block:
            <code>
            using (graphics.SaveTransformState())
            {
            	// ...
            
            	graphics.SaveTransform();
            	graphics.MultiplyTransform(...);
            
            	// ... other messy drawing code that doesn't call RestoreTransform()
            }
            </code>
            </example>
        </member>
        <member name="M:Eto.Drawing.Graphics.SaveTransform">
            <summary>
            Saves the current transform state
            </summary>
            <remarks>
            This saves the current transform state that can be changed by any of the transform calls, which can
            then be restored using <see cref="M:Eto.Drawing.Graphics.RestoreTransform"/>
            </remarks>
        </member>
        <member name="M:Eto.Drawing.Graphics.RestoreTransform">
            <summary>
            Restores the transform state
            </summary>
            <remarks>
            This restores the transform state from a previous <see cref="M:Eto.Drawing.Graphics.SaveTransform"/> call.
            You must balance calls to SaveTransform() with calls to this method.
            </remarks>
        </member>
        <member name="P:Eto.Drawing.Graphics.CurrentTransform">
            <summary>
            Gets a copy of the current transform.
            </summary>
            <remarks>
            The current transform is initially an identity matrix.
            Any transform operations performed on this object will change this value.
            </remarks>
            <value>The current transform matrix.</value>
        </member>
        <member name="P:Eto.Drawing.Graphics.ClipBounds">
            <summary>
            Gets the bounds of the clipping region
            </summary>
            <remarks>
            This rectangle will encompass all parts of the clipping region, which may not be rectangular in shape
            </remarks>
            <value>The clip bounds applied to drawing operations</value>
        </member>
        <member name="M:Eto.Drawing.Graphics.SetClip(Eto.Drawing.RectangleF)">
            <summary>
            Sets the clip region to the specified <paramref name="rectangle"/>
            </summary>
            <remarks>
            The previous clipping region will be cleared after this call.
            The rectangle specified is translated by the current transform, but is not affected by subsequent transform operations.
            </remarks>
            <param name="rectangle">Rectangle for the clipping region</param>
        </member>
        <member name="M:Eto.Drawing.Graphics.SetClip(Eto.Drawing.IGraphicsPath)">
            <summary>
            Sets the clip region to the specified <paramref name="path"/>
            </summary>
            <remarks>
            The previous clipping region will be cleared after this call
            The path specified is translated by the current transform, but is not affected by subsequent transform operations.
            </remarks>
            <param name="path">Path to specify the clip region</param>
        </member>
        <member name="M:Eto.Drawing.Graphics.ResetClip">
            <summary>
            Resets the clip bounds to encompass the entire drawing area
            </summary>
        </member>
        <member name="M:Eto.Drawing.Graphics.IsVisible(Eto.Drawing.RectangleF)">
            <summary>
            Returns true if the clip region intersects
            the specified rectangle.
            </summary>
        </member>
        <member name="M:Eto.Drawing.Graphics.Clear(Eto.Drawing.SolidBrush)">
            <summary>
            Resets all pixels in the <see cref="P:Eto.Drawing.Graphics.ClipBounds"/> region with the specified <paramref name="brush"/>
            </summary>
            <param name="brush">Brush to clear the graphics context</param>
        </member>
        <member name="M:Eto.Drawing.Graphics.Clear(Eto.Drawing.Color)">
            <summary>
            Resets all pixels in the <see cref="P:Eto.Drawing.Graphics.ClipBounds"/> region with the specified <paramref name="color"/>
            </summary>
            <param name="color">Color to clear the graphics context</param>
        </member>
        <member name="T:Eto.Drawing.Graphics.IHandler">
            <summary>
            Platform handler interface for the <see cref="T:Eto.Drawing.Graphics"/> class
            </summary>
            <copyright>(c) 2012-2014 by Curtis Wensley</copyright>
            <license type="BSD-3">See LICENSE for full terms</license>
        </member>
        <member name="P:Eto.Drawing.Graphics.IHandler.PointsPerPixel">
            <summary>
            Gets the scale of points to pixels. Multiply by desired pixel size to get point value (e.g. for font sizes)
            </summary>
        </member>
        <member name="P:Eto.Drawing.Graphics.IHandler.PixelOffsetMode">
            <summary>
            Gets or sets the pixel offset mode for draw operations
            </summary>
            <value>The pixel offset mode.</value>
        </member>
        <member name="M:Eto.Drawing.Graphics.IHandler.CreateFromImage(Eto.Drawing.Bitmap)">
            <summary>
            Creates the graphics object for drawing on the specified <paramref name="image"/>
            </summary>
            <param name="image">Image to perform drawing operations on</param>
        </member>
        <member name="M:Eto.Drawing.Graphics.IHandler.DrawLine(Eto.Drawing.Pen,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Draws a line with the specified <paramref name="pen"/>
            </summary>
            <param name="pen">Pen to draw the line</param>
            <param name="startx">X co-ordinate of the starting point</param>
            <param name="starty">Y co-ordinate of the starting point</param>
            <param name="endx">X co-ordinate of the ending point</param>
            <param name="endy">Y co-ordinate of the ending point</param>
        </member>
        <member name="M:Eto.Drawing.Graphics.IHandler.DrawLines(Eto.Drawing.Pen,System.Collections.Generic.IEnumerable{Eto.Drawing.PointF})">
            <summary>
            Draws a set of lines with the specified <paramref name="points"/>
            </summary>
            <param name="pen">Pen to draw the lines with</param>
            <param name="points">Points for each of the lines</param>
        </member>
        <member name="M:Eto.Drawing.Graphics.IHandler.DrawPolygon(Eto.Drawing.Pen,System.Collections.Generic.IEnumerable{Eto.Drawing.PointF})">
            <summary>
            Draws an outline of a polygon with the specified <paramref name="points"/>
            </summary>
            <param name="pen">Pen to draw the polygon lines with</param>
            <param name="points">Points of the polygon</param>
        </member>
        <member name="M:Eto.Drawing.Graphics.IHandler.DrawRectangle(Eto.Drawing.Pen,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Draws a rectangle outline
            </summary>
            <param name="pen">Pen to draw the rectangle</param>
            <param name="x">X co-ordinate</param>
            <param name="y">Y co-ordinate</param>
            <param name="width">Width of the rectangle</param>
            <param name="height">Height of the rectangle</param>
        </member>
        <member name="M:Eto.Drawing.Graphics.IHandler.FillRectangle(Eto.Drawing.Brush,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Fills a rectangle with the specified <paramref name="brush"/>
            </summary>
            <param name="brush">Brush to fill with</param>
            <param name="x">X co-ordinate</param>
            <param name="y">Y co-ordinate</param>
            <param name="width">Width of the rectangle</param>
            <param name="height">Height of the rectangle</param>
        </member>
        <member name="M:Eto.Drawing.Graphics.IHandler.FillEllipse(Eto.Drawing.Brush,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Fills an ellipse with the specified <paramref name="brush"/>
            </summary>
            <param name="brush">Brush to fill the ellipse</param>
            <param name="x">X co-ordinate of the left side of the ellipse</param>
            <param name="y">Y co-ordinate of the top of the ellipse</param>
            <param name="width">Width of the ellipse</param>
            <param name="height">Height of the ellipse</param>
        </member>
        <member name="M:Eto.Drawing.Graphics.IHandler.DrawEllipse(Eto.Drawing.Pen,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Draws an outline of an ellipse with the specified <paramref name="pen"/>
            </summary>
            <param name="pen">Pen to outline the ellipse</param>
            <param name="x">X co-ordinate of the left side of the ellipse</param>
            <param name="y">Y co-ordinate of the top of the ellipse</param>
            <param name="width">Width of the ellipse</param>
            <param name="height">Height of the ellipse</param>
        </member>
        <member name="M:Eto.Drawing.Graphics.IHandler.DrawArc(Eto.Drawing.Pen,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Draws an arc with the specified <paramref name="pen"/>
            </summary>
            <param name="pen">Pen to outline the arc</param>
            <param name="x">X co-ordinate of the upper left corner of the arc</param>
            <param name="y">Y co-ordinate of the upper left corner of the arc</param>
            <param name="width">Width of the arc</param>
            <param name="height">Height of the arc</param>
            <param name="startAngle">Elliptical (skewed) angle in degrees from the x-axis to the starting point of the arc</param>
            <param name="sweepAngle">Angle in degrees from the <paramref name="startAngle"/> to the ending point of the arc</param>
        </member>
        <member name="M:Eto.Drawing.Graphics.IHandler.FillPie(Eto.Drawing.Brush,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Fills a pie with the specified <paramref name="brush"/>
            </summary>
            <param name="brush">Brush to fill the pie</param>
            <param name="x">X co-ordinate of the upper left corner of the pie</param>
            <param name="y">Y co-ordinate of the upper left corner of the pie</param>
            <param name="width">Width of the pie</param>
            <param name="height">Height of the pie</param>
            <param name="startAngle">Elliptical (skewed) angle in degrees from the x-axis to the starting point of the pie</param>
            <param name="sweepAngle">Angle in degrees from the <paramref name="startAngle"/> to the ending point of the pie</param>
        </member>
        <member name="M:Eto.Drawing.Graphics.IHandler.FillPath(Eto.Drawing.Brush,Eto.Drawing.IGraphicsPath)">
            <summary>
            Fills the specified <paramref name="path"/>
            </summary>
            <param name="brush">Brush to fill the path</param>
            <param name="path">Path to fill</param>
        </member>
        <member name="M:Eto.Drawing.Graphics.IHandler.DrawPath(Eto.Drawing.Pen,Eto.Drawing.IGraphicsPath)">
            <summary>
            Draws the specified <paramref name="path"/>
            </summary>
            <param name="pen">Pen to outline the path</param>
            <param name="path">Path to draw</param>
        </member>
        <member name="M:Eto.Drawing.Graphics.IHandler.DrawImage(Eto.Drawing.Image,System.Single,System.Single)">
            <summary>
            Draws the specified <paramref name="image"/> at a location with no scaling
            </summary>
            <param name="image">Image to draw</param>
            <param name="x">X co-ordinate</param>
            <param name="y">Y co-ordinate</param>
        </member>
        <member name="M:Eto.Drawing.Graphics.IHandler.DrawImage(Eto.Drawing.Image,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Draws the specified <paramref name="image"/> in a rectangle
            </summary>
            <remarks>
            This will scale the image to the specified width and height using the <see cref="P:Eto.Drawing.Graphics.IHandler.ImageInterpolation"/> mode
            </remarks>
            <param name="image">Image to draw</param>
            <param name="x">X co-ordinate</param>
            <param name="y">Y co-ordinate</param>
            <param name="width">Destination width of the image to draw</param>
            <param name="height">Destination height of the image to draw</param>
        </member>
        <member name="M:Eto.Drawing.Graphics.IHandler.DrawImage(Eto.Drawing.Image,Eto.Drawing.RectangleF,Eto.Drawing.RectangleF)">
            <summary>
            Draws the <paramref name="source"/> portion of an <paramref name="image"/>, scaling to the specified <paramref name="destination"/>
            </summary>
            <param name="image">Image to draw</param>
            <param name="source">Source rectangle of the image portion to draw</param>
            <param name="destination">Destination rectangle of where to draw the portion</param>
        </member>
        <member name="M:Eto.Drawing.Graphics.IHandler.DrawText(Eto.Drawing.Font,Eto.Drawing.SolidBrush,System.Single,System.Single,System.String)">
            <summary>
            Draws text with the specified <paramref name="font"/>, <paramref name="brush"/> and location
            </summary>
            <param name="font">Font to draw the text with</param>
            <param name="brush">A brush with the color of the text</param>
            <param name="x">X co-ordinate of where to start drawing the text</param>
            <param name="y">Y co-ordinate of where to start drawing the text</param>
            <param name="text">Text string to draw</param>
        </member>
        <member name="M:Eto.Drawing.Graphics.IHandler.MeasureString(Eto.Drawing.Font,System.String)">
            <summary>
            Measures the string with the given <paramref name="font"/>
            </summary>
            <param name="font">Font to measure with</param>
            <param name="text">Text string to measure</param>
            <returns>Size representing the dimensions of the entire text would take to draw given the specified <paramref name="font"/></returns>
        </member>
        <member name="M:Eto.Drawing.Graphics.IHandler.Flush">
            <summary>
            Flushes the drawing (for some platforms)
            </summary>
            <remarks>
            Flushing the drawing will force any undrawn changes to be shown to the user.  Typically when you are doing
            a lot of drawing, you may want to flush the changed periodically so that the user does not think the UI is unresponsive.
            </remarks>
        </member>
        <member name="P:Eto.Drawing.Graphics.IHandler.AntiAlias">
            <summary>
            Gets or sets a value indicating that drawing operations will use antialiasing
            </summary>
        </member>
        <member name="P:Eto.Drawing.Graphics.IHandler.ImageInterpolation">
            <summary>
            Gets or sets the interpolation mode for drawing images
            </summary>
        </member>
        <member name="P:Eto.Drawing.Graphics.IHandler.IsRetained">
            <summary>
            Gets a value indicating the graphics sub-system is a retained system (e.g. WPF)
            </summary>
            <remarks>
            Retained mode systems may have different behaviour characteristics, which may impact how often the screen is updated
            or other code.
            </remarks>
        </member>
        <member name="M:Eto.Drawing.Graphics.IHandler.TranslateTransform(System.Single,System.Single)">
            <summary>
            Translates the origin of the co-ordinate system by the given offset
            </summary>
            <param name="offsetX">Offset to translate the X co-ordinate</param>
            <param name="offsetY">Offset to translate the Y co-ordinate</param>
        </member>
        <member name="M:Eto.Drawing.Graphics.IHandler.RotateTransform(System.Single)">
            <summary>
            Rotates the co-ordinate system by the given <paramref name="angle"/>
            </summary>
            <param name="angle">Angle in degrees to rotate the co-ordinates</param>
        </member>
        <member name="M:Eto.Drawing.Graphics.IHandler.ScaleTransform(System.Single,System.Single)">
            <summary>
            Scales the co-ordinate system by a factor
            </summary>
            <param name="scaleX">Amount to scale the horizontal axis</param>
            <param name="scaleY">Amount to scale the vertical axis</param>
        </member>
        <member name="M:Eto.Drawing.Graphics.IHandler.MultiplyTransform(Eto.Drawing.IMatrix)">
            <summary>
            Multiplies the co-ordinate system with the given <paramref name="matrix"/>
            </summary>
            <param name="matrix">Matrix to multiply the co-ordinate system with</param>
        </member>
        <member name="M:Eto.Drawing.Graphics.IHandler.SaveTransform">
            <summary>
            Saves the current transform state
            </summary>
            <remarks>
            This saves the current transform state that can be changed by any of the transform calls, which can
            then be restored using <see cref="M:Eto.Drawing.Graphics.IHandler.RestoreTransform"/>
            </remarks>
        </member>
        <member name="M:Eto.Drawing.Graphics.IHandler.RestoreTransform">
            <summary>
            Restores the transform state
            </summary>
            <remarks>
            This restores the transform state from a previous <see cref="M:Eto.Drawing.Graphics.IHandler.SaveTransform"/> call.
            </remarks>
        </member>
        <member name="P:Eto.Drawing.Graphics.IHandler.CurrentTransform">
            <summary>
            Gets a copy of the current transform.
            </summary>
            <remarks>
            The current transform is initially an identity matrix.
            Any transform operations performed on this object will change this value.
            </remarks>
            <value>The current transform matrix.</value>
        </member>
        <member name="P:Eto.Drawing.Graphics.IHandler.ClipBounds">
            <summary>
            Gets the bounds of the clipping region
            </summary>
            <remarks>
            This rectangle will encompass all parts of the clipping region, which may not be rectangular in shape
            </remarks>
            <value>The clip bounds applied to drawing operations</value>
        </member>
        <member name="M:Eto.Drawing.Graphics.IHandler.SetClip(Eto.Drawing.RectangleF)">
            <summary>
            Sets the clip region to the specified <paramref name="rectangle"/>
            </summary>
            <remarks>
            The previous clipping region will be cleared after this call
            </remarks>
            <param name="rectangle">Rectangle for the clipping region</param>
        </member>
        <member name="M:Eto.Drawing.Graphics.IHandler.SetClip(Eto.Drawing.IGraphicsPath)">
            <summary>
            Sets the clip region to the specified <paramref name="path"/>
            </summary>
            <remarks>
            The previous clipping region will be cleared after this call
            </remarks>
            <param name="path">Path to specify the clip region</param>
        </member>
        <member name="M:Eto.Drawing.Graphics.IHandler.ResetClip">
            <summary>
            Resets the clip bounds to encompass the entire drawing area
            </summary>
        </member>
        <member name="M:Eto.Drawing.Graphics.IHandler.Clear(Eto.Drawing.SolidBrush)">
            <summary>
            Resets all pixels in the <see cref="P:Eto.Drawing.Graphics.IHandler.ClipBounds"/> region with the specified <paramref name="brush"/>
            </summary>
            <param name="brush">Brush to clear the graphics context</param>
        </member>
        <member name="T:Eto.Drawing.IGraphicsPath">
            <summary>
            Graphics path to be used for drawing or filling using a <see cref="T:Eto.Drawing.Graphics"/> object
            </summary>
            <remarks>
            A graphics path can contain multiple figures comprised of various components such as line, arc, curve, etc.
            </remarks>
            <copyright>(c) 2012-2014 by Curtis Wensley</copyright>
            <license type="BSD-3">See LICENSE for full terms</license>
        </member>
        <member name="P:Eto.Drawing.IGraphicsPath.Bounds">
            <summary>
            Gets the bounding rectangle for this path
            </summary>
        </member>
        <member name="P:Eto.Drawing.IGraphicsPath.FillMode">
            <summary>
            Gets or sets a value indicating how this graphics path should be filled.
            </summary>
        </member>
        <member name="P:Eto.Drawing.IGraphicsPath.IsEmpty">
            <summary>
            Gets a value indicating that this graphics path is empty and has no segments
            </summary>
            <value><c>true</c> if this path is empty; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Eto.Drawing.IGraphicsPath.CurrentPoint">
            <summary>
            Gets the current point
            </summary>
            <remarks>
            If the current figure in the path is not closed, and <see cref="M:Eto.Drawing.IGraphicsPath.StartFigure"/> is not called,
            the next segment will be connected from this point to its start point.
            </remarks>
            <value>The current point</value>
        </member>
        <member name="M:Eto.Drawing.IGraphicsPath.AddLine(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Adds a line to the path with the specified start and end points
            </summary>
            <remarks>
            If the current figure is not closed, it will connect with the start of this line.
            The current position will be moved to the specified end location.
            </remarks>
            <param name="startX">X co-ordinate of the starting point</param>
            <param name="startY">Y co-ordinate of the starting point</param>
            <param name="endX">X co-ordinate of the end point</param>
            <param name="endY">Y co-ordinate of the end point</param>
        </member>
        <member name="M:Eto.Drawing.IGraphicsPath.AddLines(System.Collections.Generic.IEnumerable{Eto.Drawing.PointF})">
            <summary>
            Adds lines to each of the specified <paramref name="points"/> to the path 
            </summary>
            <remarks>
            If the current figure is not closed, it will connect with the first point specified.
            The current position will be moved to the last point specified
            </remarks>
            <param name="points">Points for each part of the line</param>
        </member>
        <member name="M:Eto.Drawing.IGraphicsPath.LineTo(System.Single,System.Single)">
            <summary>
            Adds a line from the current position to the specified location
            </summary>
            <param name="x">X co-ordinate to draw the line to</param>
            <param name="y">Y co-ordinate to draw the line to</param>
        </member>
        <member name="M:Eto.Drawing.IGraphicsPath.MoveTo(System.Single,System.Single)">
            <summary>
            Moves the current position to the specified location without adding anything to the path
            </summary>
            <param name="x">X co-ordinate to move to</param>
            <param name="y">Y co-ordinate to move to</param>
        </member>
        <member name="M:Eto.Drawing.IGraphicsPath.AddArc(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Adds an arc into the specified rectangle
            </summary>
            <remarks>
            If the current figure is not closed, it will connect with the start of the arc.
            The current position will be moved to the ending point of the arc
            </remarks>
            <param name="x">The x coordinate of the upper left of the arc</param>
            <param name="y">The y coordinate of the upper left of the arc</param>
            <param name="width">Width of the rectangle containing the arc</param>
            <param name="height">Height of the rectangle containing the arc</param>
            <param name="startAngle">Start angle to begin the arc, in degrees</param>
            <param name="sweepAngle">Sweep angle (positive or negative) to specify how long the arc is, in degrees</param>
        </member>
        <member name="M:Eto.Drawing.IGraphicsPath.AddBezier(Eto.Drawing.PointF,Eto.Drawing.PointF,Eto.Drawing.PointF,Eto.Drawing.PointF)">
            <summary>
            Adds a bezier curve to the path with two control points
            </summary>
            <remarks>
            If the current figure is not closed, it will connect with the <paramref name="start"/> of the bezier curve.
            The current position will be moved to the <paramref name="end"/> point.
            </remarks>
            <param name="start">Starting point of the bezier curve</param>
            <param name="control1">First control point of the curve</param>
            <param name="control2">Second control point of the curve</param>
            <param name="end">Ending point of the bezier curve</param>
        </member>
        <member name="M:Eto.Drawing.IGraphicsPath.AddCurve(System.Collections.Generic.IEnumerable{Eto.Drawing.PointF},System.Single)">
            <summary>
            Adds a curve that intersects with the specified <paramref name="points"/> to the path
            </summary>
            <remarks>
            Each point in the list will fall on the line based on the <paramref name="tension"/> parameter
            </remarks>
            <param name="points">Points to calculate the curve</param>
            <param name="tension">Tension between points in the curve.  Should be between 0 (no curve) and 1 (more curve)</param>
        </member>
        <member name="M:Eto.Drawing.IGraphicsPath.AddEllipse(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Adds an ellipse to the path
            </summary>
            <remarks>
            Rectangles are separate figures and will not connect to the current or next figure in the path.
            The starting point of the path will no longer be set after this call.
            </remarks>
            <param name="x">X co-ordinate of the top left of the ellipse</param>
            <param name="y">Y co-ordinate of the top left of the ellipse's bounding rectangle</param>
            <param name="width">Width of the rectangle</param>
            <param name="height">Height of the rectangle</param>
        </member>
        <member name="M:Eto.Drawing.IGraphicsPath.AddRectangle(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Adds a rectangle to the path
            </summary>
            <remarks>
            Rectangles are separate figures and will not connect to the current or next figure in the path.
            The starting point of the path will no longer be set after this call.
            </remarks>
            <param name="x">X co-ordinate of the top left of the rectangle</param>
            <param name="y">Y co-ordinate of the top left of the rectangle</param>
            <param name="width">Width of the rectangle</param>
            <param name="height">Height of the rectangle</param>
        </member>
        <member name="M:Eto.Drawing.IGraphicsPath.AddPath(Eto.Drawing.IGraphicsPath,System.Boolean)">
            <summary>
            Adds the specified <paramref name="path"/> to the current path, optionally connecting the current figure to the start of the path
            </summary>
            <remarks>
            The <paramref name="connect"/> parameter only specifies that the path should be connected to the current path
            at the beginning. The end of the specified path will always be connected to the next segment added to this path,
            unlesss <see cref="M:Eto.Drawing.IGraphicsPath.CloseFigure"/> or <see cref="M:Eto.Drawing.IGraphicsPath.StartFigure"/> are called after this.
            </remarks>
            <param name="path">Child path to add to this instance</param>
            <param name="connect">True to connect the current figure to the first figure of the specified path, if it is not closed</param>
        </member>
        <member name="M:Eto.Drawing.IGraphicsPath.Transform(Eto.Drawing.IMatrix)">
            <summary>
            Transforms the points in the path with the specified matrix
            </summary>
            <param name="matrix">Matrix to transform the path</param>
        </member>
        <member name="M:Eto.Drawing.IGraphicsPath.StartFigure">
            <summary>
            Starts a new figure without closing the current figure
            </summary>
            <remarks>
            This will make the next segment added to the path independent (unconnected) to the last segment.
            </remarks>
        </member>
        <member name="M:Eto.Drawing.IGraphicsPath.CloseFigure">
            <summary>
            Closes the current figure by connecting a line to the beginning of the figure
            </summary>
            <remarks>
            This will also make the next segment added to the path start independently from the last figure.
            To start a new figure without closing the current one, use <see cref="M:Eto.Drawing.IGraphicsPath.StartFigure"/>
            </remarks>
        </member>
        <member name="M:Eto.Drawing.IGraphicsPath.Clone">
            <summary>
            Creates a clone of the graphics path
            </summary>
        </member>
        <member name="T:Eto.Drawing.GraphicsPathExtensions">
            <summary>
            Extensions for the <see cref="T:Eto.Drawing.IGraphicsPath"/>
            </summary>
            <copyright>(c) 2012-2014 by Curtis Wensley</copyright>
            <license type="BSD-3">See LICENSE for full terms</license>
        </member>
        <member name="M:Eto.Drawing.GraphicsPathExtensions.MoveTo(Eto.Drawing.IGraphicsPath,Eto.Drawing.PointF)">
            <summary>
            Moves the current position to the specified <paramref name="point"/> without adding anything to the path
            </summary>
            <param name="path">Path to move the current position</param>
            <param name="point">Point to move to</param>
        </member>
        <member name="M:Eto.Drawing.GraphicsPathExtensions.LineTo(Eto.Drawing.IGraphicsPath,Eto.Drawing.PointF)">
            <summary>
            Adds a line from the current position to the specified location
            </summary>
            <param name="path">Path to add the line to</param>
            <param name="point">Ending point for the line</param>
        </member>
        <member name="M:Eto.Drawing.GraphicsPathExtensions.AddLines(Eto.Drawing.IGraphicsPath,Eto.Drawing.PointF[])">
            <summary>
            Adds lines to each of the specified <paramref name="points"/>
            </summary>
            <param name="path">Path to add the lines to</param>
            <param name="points">Points for each line</param>
        </member>
        <member name="M:Eto.Drawing.GraphicsPathExtensions.AddLine(Eto.Drawing.IGraphicsPath,Eto.Drawing.PointF,Eto.Drawing.PointF)">
            <summary>
            Adds a line to the path
            </summary>
            <param name="path">Path to add the line to</param>
            <param name="start">Starting point for the line</param>
            <param name="end">Ending point for the line</param>
        </member>
        <member name="M:Eto.Drawing.GraphicsPathExtensions.AddArc(Eto.Drawing.IGraphicsPath,Eto.Drawing.RectangleF,System.Single,System.Single)">
            <summary>
            Adds an arc to the path at the specified <paramref name="location"/>
            </summary>
            <param name="path">Path to add the arc to</param>
            <param name="location">Location of the bounding rectangle of the arc</param>
            <param name="startAngle">Start angle in degrees</param>
            <param name="sweepAngle">Sweep angle (positive or negative) in degrees</param>
        </member>
        <member name="M:Eto.Drawing.GraphicsPathExtensions.AddCurve(Eto.Drawing.IGraphicsPath,Eto.Drawing.PointF[])">
            <summary>
            Adds a curve that intersects with the specified <paramref name="points"/> to the path
            </summary>
            <param name="path">Path to add the curve to</param>
            <param name="points">Points that define where the curve intersects</param>
        </member>
        <member name="M:Eto.Drawing.GraphicsPathExtensions.AddCurve(Eto.Drawing.IGraphicsPath,System.Single,Eto.Drawing.PointF[])">
            <summary>
            Adds a curve that intersects with the specified <paramref name="points"/> to the path with the given <paramref name="tension"/>
            </summary>
            <param name="path">Path to add the curve to</param>
            <param name="tension">Tension between points in the curve.  Should be between 0 (no curve) and 1 (more curve)</param>
            <param name="points">Points that intersect with the curve</param>
        </member>
        <member name="M:Eto.Drawing.GraphicsPathExtensions.AddEllipse(Eto.Drawing.IGraphicsPath,Eto.Drawing.RectangleF)">
            <summary>
            Adds an ellipse to the path at the specified <paramref name="location"/>
            </summary>
            <param name="path">Path to add the ellipse to</param>
            <param name="location">Location of the bounding rectangle of the ellipse</param>
        </member>
        <member name="M:Eto.Drawing.GraphicsPathExtensions.AddRectangle(Eto.Drawing.IGraphicsPath,Eto.Drawing.RectangleF)">
            <summary>
            Adds a rectangle to the path at the specified <paramref name="location"/>
            </summary>
            <param name="path">Path to add the rectangle to</param>
            <param name="location">Location of the rectangle</param>
        </member>
        <member name="T:Eto.Drawing.GraphicsPath">
            <summary>
            Defines primitives that can be used to draw or fill a path on a <see cref="T:Eto.Drawing.Graphics"/> object
            </summary>
            <remarks>
            This is a thin wrapper around the <see cref="T:Eto.Drawing.IGraphicsPath"/> interface, which is created via
            <see cref="M:Eto.Drawing.GraphicsPath.Create"/>.
            </remarks>
            <copyright>(c) 2012-2014 by Curtis Wensley</copyright>
            <license type="BSD-3">See LICENSE for full terms</license>
        </member>
        <member name="P:Eto.Drawing.GraphicsPath.Bounds">
            <summary>
            Gets the bounding rectangle for this path
            </summary>
        </member>
        <member name="P:Eto.Drawing.GraphicsPath.FillMode">
            <summary>
            Sets a value indicating how this graphics path should be filled.
            </summary>
        </member>
        <member name="P:Eto.Drawing.GraphicsPath.IsEmpty">
            <summary>
            Gets a value indicating that this graphics path is empty and has no segments
            </summary>
            <value><c>true</c> if this path is empty; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Eto.Drawing.GraphicsPath.CurrentPoint">
            <summary>
            Gets the current point
            </summary>
            <remarks>
            If the current figure in the path is not closed, and <see cref="M:Eto.Drawing.GraphicsPath.StartFigure"/> is not called,
            the next segment will be connected from this point to its start point.
            </remarks>
            <value>The current point</value>
        </member>
        <member name="P:Eto.Drawing.GraphicsPath.Instantiator">
            <summary>
            Creates a delegate that can be used to create instances of the <see cref="T:Eto.Drawing.IGraphicsPath"/> with little overhead
            </summary>
            <remarks>
            This is useful when creating a very large number of graphics path objects
            </remarks>
        </member>
        <member name="M:Eto.Drawing.GraphicsPath.Create">
            <summary>
            Creates a new instance of the IGraphicsPath for the specified generator
            </summary>
        </member>
        <member name="M:Eto.Drawing.GraphicsPath.#ctor">
            <summary>
            Initializes a new instance of the GraphicsPath class
            </summary>
        </member>
        <member name="M:Eto.Drawing.GraphicsPath.#ctor(Eto.Drawing.IGraphicsPath)">
            <summary>
            Initializes a new instance of the <see cref="T:Eto.Drawing.GraphicsPath"/> class.
            </summary>
            <param name="handler">Handler for the graphics path</param>
        </member>
        <member name="M:Eto.Drawing.GraphicsPath.AddLine(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Adds a line to the path with the specified start and end points
            </summary>
            <remarks>
            If the current figure is not closed, it will connect with the start of this line.
            The current position will be moved to the specified end location.
            </remarks>
            <param name="startX">X co-ordinate of the starting point</param>
            <param name="startY">Y co-ordinate of the starting point</param>
            <param name="endX">X co-ordinate of the end point</param>
            <param name="endY">Y co-ordinate of the end point</param>
        </member>
        <member name="M:Eto.Drawing.GraphicsPath.AddLines(System.Collections.Generic.IEnumerable{Eto.Drawing.PointF})">
            <summary>
            Adds lines to each of the specified <paramref name="points"/> to the path 
            </summary>
            <remarks>
            If the current figure is not closed, it will connect with the first point specified.
            The current position will be moved to the last point specified
            </remarks>
            <param name="points">Points for each part of the line</param>
        </member>
        <member name="M:Eto.Drawing.GraphicsPath.LineTo(System.Single,System.Single)">
            <summary>
            Adds a line from the current position to the specified location
            </summary>
            <param name="x">X co-ordinate to draw the line to</param>
            <param name="y">Y co-ordinate to draw the line to</param>
        </member>
        <member name="M:Eto.Drawing.GraphicsPath.MoveTo(System.Single,System.Single)">
            <summary>
            Moves the current position to the specified location without adding anything to the path
            </summary>
            <param name="x">X co-ordinate to move to</param>
            <param name="y">Y co-ordinate to move to</param>
        </member>
        <member name="M:Eto.Drawing.GraphicsPath.AddArc(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Adds an arc into the specified rectangle
            </summary>
            <remarks>
            If the current figure is not closed, it will connect with the start of the arc.
            The current position will be moved to the ending point of the arc
            </remarks>
            <param name="x">The x coordinate of the upper left of the arc</param>
            <param name="y">The y coordinate of the upper left of the arc</param>
            <param name="width">Width of the rectangle containing the arc</param>
            <param name="height">Height of the rectangle containing the arc</param>
            <param name="startAngle">Start angle to begin the arc, in degrees</param>
            <param name="sweepAngle">Sweep angle (positive or negative) to specify how long the arc is, in degrees</param>
        </member>
        <member name="M:Eto.Drawing.GraphicsPath.AddBezier(Eto.Drawing.PointF,Eto.Drawing.PointF,Eto.Drawing.PointF,Eto.Drawing.PointF)">
            <summary>
            Adds a bezier curve to the path with two control points
            </summary>
            <remarks>
            If the current figure is not closed, it will connect with the <paramref name="start"/> of the bezier curve.
            The current position will be moved to the <paramref name="end"/> point.
            </remarks>
            <param name="start">Starting point of the bezier curve</param>
            <param name="control1">First control point of the curve</param>
            <param name="control2">Second control point of the curve</param>
            <param name="end">Ending point of the bezier curve</param>
        </member>
        <member name="M:Eto.Drawing.GraphicsPath.AddCurve(System.Collections.Generic.IEnumerable{Eto.Drawing.PointF},System.Single)">
            <summary>
            Adds a curve that intersects with the specified <paramref name="points"/> to the path
            </summary>
            <remarks>
            Each point in the list will fall on the line based on the <paramref name="tension"/> parameter
            </remarks>
            <param name="points">Points to calculate the curve</param>
            <param name="tension">Tension between points in the curve.  Should be between 0 (no curve) and 1 (more curve)</param>
        </member>
        <member name="M:Eto.Drawing.GraphicsPath.AddEllipse(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Adds an ellipse to the path
            </summary>
            <remarks>
            Rectangles are separate figures and will not connect to the current or next figure in the path.
            The starting point of the path will no longer be set after this call.
            </remarks>
            <param name="x">X co-ordinate of the top left of the ellipse</param>
            <param name="y">Y co-ordinate of the top left of the ellipse's bounding rectangle</param>
            <param name="width">Width of the rectangle</param>
            <param name="height">Height of the rectangle</param>
        </member>
        <member name="M:Eto.Drawing.GraphicsPath.AddRectangle(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Adds a rectangle to the path
            </summary>
            <remarks>
            Rectangles are separate figures and will not connect to the current or next figure in the path.
            The starting point of the path will no longer be set after this call.
            </remarks>
            <param name="x">X co-ordinate of the top left of the rectangle</param>
            <param name="y">Y co-ordinate of the top left of the rectangle</param>
            <param name="width">Width of the rectangle</param>
            <param name="height">Height of the rectangle</param>
        </member>
        <member name="M:Eto.Drawing.GraphicsPath.AddPath(Eto.Drawing.IGraphicsPath,System.Boolean)">
            <summary>
            Adds the specified <paramref name="path"/> to the current path, optionally connecting the current figure to the start of the path
            </summary>
            <remarks>
            The <paramref name="connect"/> parameter only specifies that the path should be connected to the current path
            at the beginning. The end of the specified path will always be connected to the next segment added to this path,
            unlesss <see cref="M:Eto.Drawing.GraphicsPath.CloseFigure"/> or <see cref="M:Eto.Drawing.GraphicsPath.StartFigure"/> are called after this.
            </remarks>
            <param name="path">Child path to add to this instance</param>
            <param name="connect">True to connect the current figure to the first figure of the specified path, if it is not closed</param>
        </member>
        <member name="M:Eto.Drawing.GraphicsPath.Transform(Eto.Drawing.IMatrix)">
            <summary>
            Transforms the points in the path with the specified matrix
            </summary>
            <param name="matrix">Matrix to transform the path</param>
        </member>
        <member name="M:Eto.Drawing.GraphicsPath.StartFigure">
            <summary>
            Starts a new figure without closing the current figure
            </summary>
            <remarks>
            This will make the next segment added to the path independent (unconnected) to the last segment.
            </remarks>
        </member>
        <member name="M:Eto.Drawing.GraphicsPath.CloseFigure">
            <summary>
            Closes the current figure by connecting a line to the beginning of the figure
            </summary>
            <remarks>
            This will also make the next segment added to the path start independently from the last figure.
            To start a new figure without closing the current one, use <see cref="M:Eto.Drawing.GraphicsPath.StartFigure"/>
            </remarks>
        </member>
        <member name="M:Eto.Drawing.GraphicsPath.Dispose">
            <summary>
            Releases all resources used by the <see cref="T:Eto.Drawing.GraphicsPath"/> object
            </summary>
        </member>
        <member name="M:Eto.Drawing.GraphicsPath.Dispose(System.Boolean)">
            <summary>
            Disposes the graphics path
            </summary>
            <param name="disposing">If set to <c>true</c> dispose was called explicitly, otherwise specify false if calling from a finalizer</param>
        </member>
        <member name="M:Eto.Drawing.GraphicsPath.Clone">
            <summary>
            Creates a clone of the graphics path
            </summary>
        </member>
        <member name="P:Eto.Drawing.GraphicsPath.Eto#IControlObjectSource#ControlObject">
            <summary>
            Gets the platform-specific control object
            </summary>
        </member>
        <member name="M:Eto.Drawing.GraphicsPath.GetRoundRect(Eto.Drawing.RectangleF,System.Single)">
            <summary>
            Creates a rounded rectangle using the specified corner radius
            </summary>
            <returns>The round rect.</returns>
            <param name="rectangle">Rectangle to round</param>
            <param name="radius">Radius for all corners</param>
            <returns>GraphicsPath with the lines of the rounded rectangle ready to be painted</returns>
        </member>
        <member name="M:Eto.Drawing.GraphicsPath.GetRoundRect(Eto.Drawing.RectangleF,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a rounded rectangle using the specified corner radius
            </summary>
            <param name="rectangle">Rectangle to round</param>
            <param name="nwRadius">Radius of the north east corner</param>
            <param name="neRadius">Radius of the north west corner</param>
            <param name="seRadius">Radius of the south east corner</param>
            <param name="swRadius">Radius of the south west corner</param>
            <returns>GraphicsPath with the lines of the rounded rectangle ready to be painted</returns>
        </member>
        <member name="T:Eto.Drawing.GraphicsPath.IHandler">
            <summary>
            Handler interface for the <see cref="T:Eto.Drawing.IGraphicsPath"/>
            </summary>
            <copyright>(c) 2012-2014 by Curtis Wensley</copyright>
            <license type="BSD-3">See LICENSE for full terms</license>
        </member>
        <member name="T:Eto.Drawing.Icon">
            <summary>
            Represents an icon which allows for multiple sizes and resolutions of an image
            </summary>
            <remarks>
            The formats supported vary by platform, however all platforms do support loading windows .ico format.
            
            Using an icon for things like menus, toolbars, etc are preferred so that each platform can use the appropriate
            sized image.
            
            For High DPI/Retina displays (e.g. on OS X), this will allow using a higher resolution image automatically.
            </remarks>
            <copyright>(c) 2016 by Curtis Wensley</copyright>
            <license type="BSD-3">See LICENSE for full terms</license>
        </member>
        <member name="M:Eto.Drawing.Icon.#ctor(Eto.Drawing.Icon.IHandler)">
            <summary>
            Initializes a new instance of the Icon class with the specified handler
            </summary>
            <param name="handler">Handler for the icon backend</param>
        </member>
        <member name="M:Eto.Drawing.Icon.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the Icon class with the contents of the specified <paramref name="stream"/>
            </summary>
            <param name="stream">Stream to load the content from</param>
        </member>
        <member name="M:Eto.Drawing.Icon.#ctor(System.String)">
            <summary>
            Intitializes a new instanc of the Icon class with the contents of the specified <paramref name="fileName"/>
            </summary>
            <param name="fileName">Name of the file to loat the content from</param>
        </member>
        <member name="M:Eto.Drawing.Icon.#ctor(System.Collections.Generic.IEnumerable{Eto.Drawing.IconFrame})">
            <summary>
            Initializes a new instance of the <see cref="T:Eto.Drawing.Icon"/> class with the specified frames.
            </summary>
            <remarks>
            This is used when you want to create an icon with specific bitmap frames at different scales or sizes.
            </remarks>
            <param name="frames">Frames for the icon.</param>
        </member>
        <member name="M:Eto.Drawing.Icon.#ctor(Eto.Drawing.IconFrame[])">
            <summary>
            Initializes a new instance of the <see cref="T:Eto.Drawing.Icon"/> class with the specified frames.
            </summary>
            <remarks>
            This is used when you want to create an icon with specific bitmap frames at different scales or sizes.
            </remarks>
            <param name="frames">Frames for the icon.</param>
        </member>
        <member name="M:Eto.Drawing.Icon.#ctor(System.Single,Eto.Drawing.Bitmap)">
            <summary>
            Initializes a new instance of the <see cref="T:Eto.Drawing.Icon"/> class with the specified bitmap.
            </summary>
            <remarks>
            This is used when you want to create an icon with a single bitmap frame with the specified logical scale.
            </remarks>
            <param name="scale">Logical pixel scale of the specified bitmap.</param>
            <param name="bitmap">Bitmap for the frame.</param>
        </member>
        <member name="M:Eto.Drawing.Icon.FromResource(System.String,System.Reflection.Assembly)">
            <summary>
            Loads an icon from an embedded resource of the specified assembly
            </summary>
            <param name="assembly">Assembly to load the resource from</param>
            <param name="resourceName">Fully qualified name of the resource to load. E.g. "MyProject.SomeFolder.YourFile.extension"</param>
            <returns>A new instance of an Icon loaded with the contents of the specified resource</returns>
        </member>
        <member name="M:Eto.Drawing.Icon.FromResource(System.String,System.Type)">
            <summary>
            Loads an icon from a resource in the same assembly as the specified <paramref name="type"/>
            </summary>
            <returns>The icon instance.</returns>
            <param name="resourceName">Full name of the resource in the type's assembly E.g. "MyProject.SomeFolder.YourFile.extension"</param>
            <param name="type">Type of the assembly to get the resource.</param>
        </member>
        <member name="M:Eto.Drawing.Icon.FindBySize(System.Single,Eto.Drawing.Size)">
            <summary>
            Find based on the fitting pixel size
            </summary>
        </member>
        <member name="M:Eto.Drawing.Icon.FindByScale(System.Single)">
            <summary>
            find based on scale alone, we don't know the final render size
            </summary>
        </member>
        <member name="M:Eto.Drawing.Icon.GetFrame(System.Single,System.Nullable{Eto.Drawing.Size})">
            <summary>
            Gets the frame with the specified scale that can fit into the <paramref name="fittingSize"/> if specified.
            </summary>
            <remarks>
            This can be used to determine which frame should be used to draw to the screen, based on the desired logical pixel
            scale and final drawn size of the icon.
            </remarks>
            <returns>The frame that is the closest match for the specified scale and fitting size.</returns>
            <param name="scale">Logical scale to find for, 1 for normal size, 2 for retina, etc.</param>
            <param name="fittingSize">Fitting size that the icon will be drawn to, if known.</param>
        </member>
        <member name="M:Eto.Drawing.Icon.WithSize(Eto.Drawing.Size)">
            <summary>
            Gets a copy of this Icon with frames scaled to draw within the specified fitting size.
            </summary>
            <remarks>
            This is useful when you want to draw an Icon at a different size than the default size. 
            Note that the <paramref name="fittingSize"/> specifies the maxiumum drawing size of the Icon, but will not
            change the aspect of each frame's bitmap.  For example, if an existing frame is 128x128, and you specify 16x32,
            then the resulting frame will draw at 16x16.
            </remarks>
            <returns>A new icon that will draw within the fitting size.</returns>
            <param name="fittingSize">The maximum size to draw the Icon.</param>
        </member>
        <member name="M:Eto.Drawing.Icon.WithSize(System.Int32,System.Int32)">
            <summary>
            Gets a copy of this Icon with frames scaled to draw within the specified fitting size.
            </summary>
            <remarks>
            This is useful when you want to draw an Icon at a different size than the default size. 
            Note that the <paramref name="width"/> and <paramref name="height"/> specifies the maxiumum drawing size of the Icon, but will not
            change the aspect of each frame's bitmap.  For example, if an existing frame is 128x128, and you specify 16x32,
            then the resulting frame will draw at 16x16.
            </remarks>
            <returns>A new icon that will draw within the fitting size.</returns>
            <param name="width">Maxiumum drawing width for the new icon.</param>
            <param name="height">Maxiumum drawing height for the new icon.</param>
        </member>
        <member name="P:Eto.Drawing.Icon.Frames">
            <summary>
            Gets the definition for each frame in this icon.
            </summary>
            <value>The frames of the icon.</value>
        </member>
        <member name="T:Eto.Drawing.Icon.IHandler">
            <summary>
            Platform handler for the <see cref="T:Eto.Drawing.Icon"/> class
            </summary>
        </member>
        <member name="M:Eto.Drawing.Icon.IHandler.Create(System.IO.Stream)">
            <summary>
            Called when creating an instance from a stream
            </summary>
            <param name="stream">Stream to load the icon from</param>
        </member>
        <member name="M:Eto.Drawing.Icon.IHandler.Create(System.String)">
            <summary>
            Called when creating an instance from a file name
            </summary>
            <param name="fileName">File name to load the icon from</param>
        </member>
        <member name="M:Eto.Drawing.Icon.IHandler.Create(System.Collections.Generic.IEnumerable{Eto.Drawing.IconFrame})">
            <summary>
            Initializes a new instance of the <see cref="T:Eto.Drawing.Icon"/> class with the specified frames.
            </summary>
            <remarks>
            This is used when you want to create an icon with specific bitmap frames at different scales or sizes.
            </remarks>
            <param name="frames">Frames for the icon.</param>
        </member>
        <member name="P:Eto.Drawing.Icon.IHandler.Frames">
            <summary>
            Gets the definition for each frame in this icon.
            </summary>
            <value>The frames of the icon.</value>
        </member>
        <member name="T:Eto.Drawing.IconFrame">
            <summary>
            Represents a frame in an <see cref="T:Eto.Drawing.Icon"/>.
            </summary>
            <remarks>
            The IconFrame represents a single frame in an Icon.  
            Each IconFrame can have a specific pixel size and scale, which will automatically be chosen based on the display and
            draw size of the image in various Eto controls.  
            
            You can load an icon from an .ico, where all frames will have a 1.0 scale (pixel size equals logical size)
            </remarks>
        </member>
        <member name="P:Eto.Drawing.IconFrame.ControlObject">
            <summary>
            Gets the control object for this widget
            </summary>
            <value>The control object for the widget</value>
        </member>
        <member name="P:Eto.Drawing.IconFrame.PixelSize">
            <summary>
            Gets the pixel size of the frame's bitmap
            </summary>
            <value>The size in pixels of the frame.</value>
        </member>
        <member name="P:Eto.Drawing.IconFrame.Scale">
            <summary>
            Gets the scale of this frame. 1.0 means the <see cref="P:Eto.Drawing.IconFrame.Size"/> and <see cref="P:Eto.Drawing.IconFrame.PixelSize"/> will be equal.
            </summary>
            <remarks>
            When loading from an .ico, all frames will get a scale of 1.0.
            </remarks>
            <value>The scale of this frame.</value>
        </member>
        <member name="P:Eto.Drawing.IconFrame.Size">
            <summary>
            Gets the logical size of the frame.
            </summary>
            <seealso cref="P:Eto.Drawing.IconFrame.Scale"/>
            <value>The logical size of the frame.</value>
        </member>
        <member name="P:Eto.Drawing.IconFrame.Bitmap">
            <summary>
            Gets the bitmap for this frame.
            </summary>
            <value>The frame's bitmap.</value>
        </member>
        <member name="M:Eto.Drawing.IconFrame.#ctor(System.Single,System.Func{System.IO.Stream})">
            <summary>
            Initializes a new instance of the <see cref="T:Eto.Drawing.IconFrame"/> class.
            </summary>
            <param name="scale">Scale of logical to physical pixels.</param>
            <param name="load">Delegate to load the stream when the frame's data is required.</param>
        </member>
        <member name="M:Eto.Drawing.IconFrame.#ctor(System.Single,System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:Eto.Drawing.IconFrame"/> class.
            </summary>
            <param name="scale">Scale of logical to physical pixels.</param>
            <param name="stream">Stream for the bitmap data.</param>
        </member>
        <member name="M:Eto.Drawing.IconFrame.#ctor(System.Single,Eto.Drawing.Bitmap)">
            <summary>
            Initializes a new instance of the <see cref="T:Eto.Drawing.IconFrame"/> class.
            </summary>
            <param name="scale">Scale of logical to physical pixels.</param>
            <param name="bitmap">Bitmap for the frame</param>
        </member>
        <member name="M:Eto.Drawing.IconFrame.FromControlObject(System.Single,System.Object)">
            <summary>
            Creates an instance of the <see cref="T:Eto.Drawing.IconFrame"/> with the specified native control object.
            </summary>
            <remarks>
            This is used by platform implementations to create instances of this class with the appropriate control object.
            This is not intended to be called directly.
            </remarks>
            <returns>A new instance of the IconFrame with the native control object and scale.</returns>
            <param name="scale">Scale of logical to physical pixels.</param>
            <param name="controlObject">Native control object.</param>
        </member>
        <member name="M:Eto.Drawing.IconFrame.FromResource(System.Single,System.String,System.Reflection.Assembly)">
            <summary>
            Creates an instance of the <see cref="T:Eto.Drawing.IconFrame"/> from an embedded resource.
            </summary>
            <returns>A new instance.</returns>
            <param name="scale">Scale of logical to physical pixels.</param>
            <param name="resourceName">Name of the embedded resource to load.</param>
            <param name="assembly">Assembly to load the embedded resource from, or null to use the calling assembly.</param>
        </member>
        <member name="T:Eto.Drawing.IconFrame.IHandler">
            <summary>
            Handler interface for platform implementations of the <see cref="T:Eto.Drawing.IconFrame"/>
            </summary>
        </member>
        <member name="M:Eto.Drawing.IconFrame.IHandler.Create(Eto.Drawing.IconFrame,System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:Eto.Drawing.IconFrame"/> class.
            </summary>
            <param name="frame">Frame instance to create for.</param>
            <param name="stream">Stream for the bitmap data.</param>
        </member>
        <member name="M:Eto.Drawing.IconFrame.IHandler.Create(Eto.Drawing.IconFrame,System.Func{System.IO.Stream})">
            <summary>
            Initializes a new instance of the <see cref="T:Eto.Drawing.IconFrame"/> class.
            </summary>
            <param name="frame">Frame instance to create for.</param>
            <param name="load">Delegate to load the stream when the frame's data is required.</param>
        </member>
        <member name="M:Eto.Drawing.IconFrame.IHandler.Create(Eto.Drawing.IconFrame,Eto.Drawing.Bitmap)">
            <summary>
            Initializes a new instance of the <see cref="T:Eto.Drawing.IconFrame"/> class.
            </summary>
            <param name="frame">Frame instance to create for.</param>
            <param name="bitmap">Bitmap for the frame</param>
        </member>
        <member name="M:Eto.Drawing.IconFrame.IHandler.GetBitmap(Eto.Drawing.IconFrame)">
            <summary>
            Gets the bitmap for this frame.
            </summary>
            <param name="frame">Frame instance to get the bitmap for</param>
            <value>The frame's bitmap.</value>
        </member>
        <member name="M:Eto.Drawing.IconFrame.IHandler.GetPixelSize(Eto.Drawing.IconFrame)">
            <summary>
            Gets the pixel size of the frame's bitmap
            </summary>
            <param name="frame">Frame instance to get the pixel size for</param>
            <value>The size in pixels of the frame.</value>
        </member>
        <member name="T:Eto.Drawing.ILockableImage">
            <summary>
            Interface for an image that can have its data locked for direct access
            </summary>
            <copyright>(c) 2012-2014 by Curtis Wensley</copyright>
            <license type="BSD-3">See LICENSE for full terms</license>
        </member>
        <member name="M:Eto.Drawing.ILockableImage.Lock">
            <summary>
            Locks the data of the image to directly access the bytes of the image
            </summary>
            <remarks>
            This locks the data to read and write to directly using unsafe pointers. After reading or updating
            the data, you must call <see cref="M:Eto.Drawing.ILockableImage.Unlock(Eto.Drawing.BitmapData)"/> to unlock the data.
            </remarks>
            <returns>A <see cref="T:Eto.Drawing.BitmapData"/> object with information about the locked data</returns>
        </member>
        <member name="M:Eto.Drawing.ILockableImage.Unlock(Eto.Drawing.BitmapData)">
            <summary>
            Unlocks the previously locked data
            </summary>
            <remarks>
            This will unlock the data, and in some platforms write the data back to the image.  You must
            call this method before using the bitmap again.
            </remarks>
            <param name="bitmapData">The data previously locked via the <see cref="M:Eto.Drawing.ILockableImage.Lock"/> method</param>
        </member>
        <member name="T:Eto.Drawing.Image">
            <summary>
            Base class for images
            </summary>
            <remarks>
            This provides a base for image functionality so that drawing and widgets can 
            reference any type of image, if supported.
            For instance, <see cref="T:Eto.Drawing.Graphics"/> and <see cref="T:Eto.Forms.ImageView"/> can reference
            any Image-derived object.
            </remarks>
            <copyright>(c) 2012-2014 by Curtis Wensley</copyright>
            <license type="BSD-3">See LICENSE for full terms</license>
        </member>
        <member name="M:Eto.Drawing.Image.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Eto.Drawing.Image"/> class.
            </summary>
        </member>
        <member name="M:Eto.Drawing.Image.#ctor(Eto.Drawing.Image.IHandler)">
            <summary>
            Initializes a new instance of the <see cref="T:Eto.Drawing.Image"/> class with the specified handler.
            </summary>
            <param name="handler">Handler implementation to use for the image.</param>
        </member>
        <member name="P:Eto.Drawing.Image.Size">
            <summary>
            Gets the size of the image, in pixels
            </summary>
        </member>
        <member name="P:Eto.Drawing.Image.Width">
            <summary>
            Gets the width of the image, in pixels.
            </summary>
            <remarks>
            Use <see cref="P:Eto.Drawing.Image.Size"/> if you wish to get the width and height at the same time.
            </remarks>
            <value>The width of the image, in pixels</value>
            <seealso cref="P:Eto.Drawing.Image.Size"/>
        </member>
        <member name="P:Eto.Drawing.Image.Height">
            <summary>
            Gets the height of the image, in pixels.
            </summary>
            <remarks>
            Use <see cref="P:Eto.Drawing.Image.Size"/> if you wish to get the width and height at the same time.
            </remarks>
            <value>The height of the image, in pixels</value>
            <seealso cref="P:Eto.Drawing.Image.Size"/>
        </member>
        <member name="T:Eto.Drawing.Image.IHandler">
            <summary>
            Handler interface for the <see cref="T:Eto.Drawing.Image"/> class
            </summary>
            <copyright>(c) 2012-2014 by Curtis Wensley</copyright>
            <license type="BSD-3">See LICENSE for full terms</license>
        </member>
        <member name="P:Eto.Drawing.Image.IHandler.Size">
            <summary>
            Gets the size of the image, in pixels
            </summary>
        </member>
        <member name="T:Eto.Drawing.ImageConverter">
            <summary>
            Converter to convert a string to an <see cref="T:Eto.Drawing.Image"/>
            </summary>
            <copyright>(c) 2014 by Curtis Wensley</copyright>
            <license type="BSD-3">See LICENSE for full terms</license>
        </member>
        <member name="F:Eto.Drawing.ImageConverter.ResourcePrefix">
            <summary>
            Prefix to use to load an image from a resource of an assembly
            </summary>
        </member>
        <member name="F:Eto.Drawing.ImageConverter.FilePrefix">
            <summary>
            Prefix to use to load an image from a file path
            </summary>
        </member>
        <member name="M:Eto.Drawing.ImageConverter.IsIcon(System.String)">
            <summary>
            Determines whether the specified fileName is an icon (ends with .ico)
            </summary>
            <returns><c>true</c> if the fileName is an icon; otherwise, <c>false</c>.</returns>
            <param name="fileName">File name.</param>
        </member>
        <member name="M:Eto.Drawing.ImageConverter.CanConvertFrom(Eto.ITypeDescriptorContext,System.Type)">
            <summary>
            Gets a value indicating that this converter can convert from the source type to an image
            </summary>
            <param name="context">Conversion context</param>
            <param name="sourceType">Type to convert from</param>
            <returns>True if this converter can handle converting from the specified <paramref name="sourceType"/> to an image</returns>
        </member>
        <member name="M:Eto.Drawing.ImageConverter.CanConvertTo(Eto.ITypeDescriptorContext,System.Type)">
            <summary>
            Gets a value indicating that this converter can convert to the specified type.
            </summary>
            <param name="context">Conversion context</param>
            <param name="destinationType">Type to convert to</param>
            <returns>True if this converter can convert to the specified <paramref name="destinationType"/>, otherwise false.</returns>
        </member>
        <member name="M:Eto.Drawing.ImageConverter.ConvertFrom(Eto.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Performs the conversion from the given <paramref name="value"/> to an <see cref="T:Eto.Drawing.Image"/> object
            </summary>
            <param name="context">Conversion context</param>
            <param name="culture">Culture to perform the conversion</param>
            <param name="value">Value to convert to an image</param>
            <returns>A new instance of an image, or null if it cannot be converted</returns>
        </member>
        <member name="T:Eto.Drawing.ImageInterpolation">
            <summary>
            Interpolation modes when drawing images using the <see cref="T:Eto.Drawing.Graphics"/> object
            </summary>
            <seealso cref="P:Eto.Drawing.Graphics.ImageInterpolation"/>
            <copyright>(c) 2014 by Curtis Wensley</copyright>
            <license type="BSD-3">See LICENSE for full terms</license>
        </member>
        <member name="F:Eto.Drawing.ImageInterpolation.Default">
            <summary>
            Default interplation mode - usually a balance between quality vs. performance
            </summary>
        </member>
        <member name="F:Eto.Drawing.ImageInterpolation.None">
            <summary>
            No interpolation (also known as nearest neighbour)
            </summary>
        </member>
        <member name="F:Eto.Drawing.ImageInterpolation.Low">
            <summary>
            Low interpolation quality (usually fastest)
            </summary>
        </member>
        <member name="F:Eto.Drawing.ImageInterpolation.Medium">
            <summary>
            Medium interpolation quality slower than <see cref="F:Eto.Drawing.ImageInterpolation.Low"/>, but better quality
            </summary>
        </member>
        <member name="F:Eto.Drawing.ImageInterpolation.High">
            <summary>
            Highest interpolation quality - slowest but best quality
            </summary>
        </member>
        <member name="T:Eto.Drawing.IndexedBitmap">
            <summary>
            Represents a bitmap where each pixel is specified as an index in a <see cref="P:Eto.Drawing.IndexedBitmap.Palette"/>
            </summary>
            <copyright>(c) 2012-2014 by Curtis Wensley</copyright>
            <license type="BSD-3">See LICENSE for full terms</license>
        </member>
        <member name="P:Eto.Drawing.IndexedBitmap.BitsPerPixel">
            <summary>
            Gets the number of bits per pixel for this bitmap
            </summary>
        </member>
        <member name="M:Eto.Drawing.IndexedBitmap.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the IndexedBitmap class
            </summary>
            <param name="width">Width of the bitmap in pixels</param>
            <param name="height">Height of the bitmap in pixels</param>
            <param name="bitsPerPixel">Number of bits per pixel, usually 4 (16 colours), 8 (64 colours), or 8 (256 colours)</param>
        </member>
        <member name="M:Eto.Drawing.IndexedBitmap.Resize(System.Int32,System.Int32)">
            <summary>
            Resizes the bitmap to the specified size
            </summary>
            <param name="width">New width of the bitmap</param>
            <param name="height">New height of the bitmap</param>
        </member>
        <member name="M:Eto.Drawing.IndexedBitmap.Lock">
            <summary>
            Locks the data of the image to directly access the bytes of the image
            </summary>
            <remarks>
            This locks the data to read and write to directly using unsafe pointers. After reading or updating
            the data, you must call <see cref="M:Eto.Drawing.BitmapData.Dispose"/> to unlock the data before using the bitmap.
            e.g.:
            
            <code>
            using (var bd = bitmap.Lock ()) {
            	byte* pdata = bd.Data;
            	// access data
            }
            </code>
            </remarks>
            <returns>A BitmapData object that carries a pointer and functions for manipulating the data directly</returns>
        </member>
        <member name="P:Eto.Drawing.IndexedBitmap.Palette">
            <summary>
            Gets or sets the palette of the image
            </summary>
            <remarks>
            Note that the number of colors in the palette must match the number of colors specified by the bits per pixel of this bitmap
            </remarks>
        </member>
        <member name="T:Eto.Drawing.IndexedBitmap.IHandler">
            <summary>
            Handler for the <see cref="T:Eto.Drawing.IndexedBitmap"/> class
            </summary>
            <copyright>(c) 2012-2014 by Curtis Wensley</copyright>
            <license type="BSD-3">See LICENSE for full terms</license>
        </member>
        <member name="M:Eto.Drawing.IndexedBitmap.IHandler.Create(System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a new indexed bitmap with the specified size and bits per pixel
            </summary>
            <param name="width">Width in pixels of the bitmap</param>
            <param name="height">Height in pixels of the bitmap</param>
            <param name="bitsPerPixel">Number of bits per pixel, usually 4 (16 colours), 8 (64 colours), or 8 (256 colours)</param>
        </member>
        <member name="M:Eto.Drawing.IndexedBitmap.IHandler.Resize(System.Int32,System.Int32)">
            <summary>
            Resizes the bitmap to the specified size
            </summary>
            <param name="width">New width of the bitmap</param>
            <param name="height">New height of the bitmap</param>
        </member>
        <member name="P:Eto.Drawing.IndexedBitmap.IHandler.Palette">
            <summary>
            Gets or sets the palette of the image
            </summary>
        </member>
        <member name="T:Eto.Drawing.GradientWrapMode">
            <summary>
            Wrap mode for a gradient
            </summary>
            <copyright>(c) 2012-2014 by Curtis Wensley</copyright>
            <license type="BSD-3">See LICENSE for full terms</license>
        </member>
        <member name="F:Eto.Drawing.GradientWrapMode.Pad">
            <summary>
            The start and end colors fill beyond the gradient
            </summary>
        </member>
        <member name="F:Eto.Drawing.GradientWrapMode.Repeat">
            <summary>
            The gradient repeats to fill the area
            </summary>
        </member>
        <member name="F:Eto.Drawing.GradientWrapMode.Reflect">
            <summary>
            The gradient reflects (or reverses) each time it repeats to fill the area
            </summary>
        </member>
        <member name="T:Eto.Drawing.LinearGradientBrush">
            <summary>
            Brush with a linear gradient at an angle
            </summary>
            <copyright>(c) 2012-2014 by Curtis Wensley</copyright>
            <license type="BSD-3">See LICENSE for full terms</license>
        </member>
        <member name="P:Eto.Drawing.LinearGradientBrush.Handler">
            <summary>
            Gets the platform handler object for the widget
            </summary>
            <value>The handler for the widget</value>
        </member>
        <member name="P:Eto.Drawing.LinearGradientBrush.Instantiator">
            <summary>
            Gets a delegate to instantiate <see cref="T:Eto.Drawing.LinearGradientBrush"/> objects
            </summary>
            <remarks>
            Use this to instantiate many objects of this type
            </remarks>
        </member>
        <member name="M:Eto.Drawing.LinearGradientBrush.#ctor(Eto.Drawing.Color,Eto.Drawing.Color,Eto.Drawing.PointF,Eto.Drawing.PointF)">
            <summary>
            Initializes a new instance of the <see cref="T:Eto.Drawing.LinearGradientBrush"/> class between two points
            </summary>
            <param name="startColor">Start color for the gradient</param>
            <param name="endColor">End color for the gradient</param>
            <param name="startPoint">Start point for the gradient</param>
            <param name="endPoint">End point for the gradient</param>
        </member>
        <member name="M:Eto.Drawing.LinearGradientBrush.#ctor(Eto.Drawing.RectangleF,Eto.Drawing.Color,Eto.Drawing.Color,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Eto.Drawing.LinearGradientBrush"/> class with a given <paramref name="rectangle"/> and <paramref name="angle"/>
            </summary>
            <param name="rectangle">Rectangle to define the area of the gradient</param>
            <param name="startColor">Start color for the gradient</param>
            <param name="endColor">End color for the gradient</param>
            <param name="angle">Angle of the gradient</param>
        </member>
        <member name="P:Eto.Drawing.LinearGradientBrush.Transform">
            <summary>
            Gets or sets the transform to apply to the gradient
            </summary>
            <value>The transform to apply to the gradient</value>
        </member>
        <member name="P:Eto.Drawing.LinearGradientBrush.Wrap">
            <summary>
            Gets or sets the wrap mode for the gradient
            </summary>
            <value>The wrap mode for the gradient</value>
        </member>
        <member name="T:Eto.Drawing.LinearGradientBrush.IHandler">
            <summary>
            Handler interface for the <see cref="T:Eto.Drawing.LinearGradientBrush"/>
            </summary>
            <copyright>(c) 2012-2014 by Curtis Wensley</copyright>
            <license type="BSD-3">See LICENSE for full terms</license>
        </member>
        <member name="M:Eto.Drawing.LinearGradientBrush.IHandler.Create(Eto.Drawing.Color,Eto.Drawing.Color,Eto.Drawing.PointF,Eto.Drawing.PointF)">
            <summary>
            Creates a linear gradient brush
            </summary>
            <param name="startColor">Start color.</param>
            <param name="endColor">End color.</param>
            <param name="startPoint">Start point.</param>
            <param name="endPoint">End point.</param>
            <returns>ControlObject for the brush</returns>
        </member>
        <member name="M:Eto.Drawing.LinearGradientBrush.IHandler.Create(Eto.Drawing.RectangleF,Eto.Drawing.Color,Eto.Drawing.Color,System.Single)">
            <summary>
            Create the specified rectangle, startColor, endColor and angle.
            </summary>
            <param name="rectangle">Rectangle.</param>
            <param name="startColor">Start color.</param>
            <param name="endColor">End color.</param>
            <param name="angle">Angle.</param>
            <returns>ControlObject for the brush</returns>
        </member>
        <member name="M:Eto.Drawing.LinearGradientBrush.IHandler.GetTransform(Eto.Drawing.LinearGradientBrush)">
            <summary>
            Gets the transform for the specified brush
            </summary>
            <returns>The current transform for the specified brush</returns>
            <param name="widget">Brush to get the transform</param>
        </member>
        <member name="M:Eto.Drawing.LinearGradientBrush.IHandler.SetTransform(Eto.Drawing.LinearGradientBrush,Eto.Drawing.IMatrix)">
            <summary>
            Sets the transform for the specified brush
            </summary>
            <param name="widget">Brush to set the transform</param>
            <param name="transform">Transform to set to the brush</param>
        </member>
        <member name="M:Eto.Drawing.LinearGradientBrush.IHandler.GetGradientWrap(Eto.Drawing.LinearGradientBrush)">
            <summary>
            Gets the gradient wrap mode
            </summary>
            <returns>The gradient wrap mode for the brush</returns>
            <param name="widget">Brush to get the gradient wrap mode</param>
        </member>
        <member name="M:Eto.Drawing.LinearGradientBrush.IHandler.SetGradientWrap(Eto.Drawing.LinearGradientBrush,Eto.Drawing.GradientWrapMode)">
            <summary>
            Sets the gradient wrap mode
            </summary>
            <param name="widget">Brush to set the wrap mode</param>
            <param name="gradientWrap">Gradient wrap mode to set</param>
        </member>
        <member name="T:Eto.Drawing.IMatrix">
            <summary>
            Defines a matrix used for transforms in <see cref="T:Eto.Drawing.Graphics"/> and <see cref="T:Eto.Drawing.Brushes"/>
            </summary>
            <remarks>
            A matrix is defined by six elements that are used to transform a coordinate system. The elements
            of the matrix are defined as:
            <para>
            	| xx yx 0 |
            	| xy yy 0 |
            	| x0 y0 1 |
            </para>
            </remarks>
            <copyright>(c) 2012-2014 by Curtis Wensley</copyright>
            <license type="BSD-3">See LICENSE for full terms</license>
        </member>
        <member name="P:Eto.Drawing.IMatrix.Elements">
            <summary>
            Gets the elements of this matrix
            </summary>
            <value>The elements of the matrix</value>
        </member>
        <member name="P:Eto.Drawing.IMatrix.Xx">
            <summary>
            Gets or sets the value at position [1,1] in the matrix
            </summary>
        </member>
        <member name="P:Eto.Drawing.IMatrix.Yx">
            <summary>
            Gets or sets the value at position [1,2] in the matrix
            </summary>
        </member>
        <member name="P:Eto.Drawing.IMatrix.Xy">
            <summary>
            Gets or sets the value at position [2,1] in the matrix
            </summary>
        </member>
        <member name="P:Eto.Drawing.IMatrix.Yy">
            <summary>
            Gets or sets the value at position [2,2] in the matrix
            </summary>
        </member>
        <member name="P:Eto.Drawing.IMatrix.X0">
            <summary>
            Gets or sets the value at position [3,1] in the matrix
            </summary>
        </member>
        <member name="P:Eto.Drawing.IMatrix.Y0">
            <summary>
            Gets or sets the value at position [3,2] in the matrix
            </summary>
        </member>
        <member name="M:Eto.Drawing.IMatrix.Rotate(System.Single)">
            <summary>
            Prepend a rotation to the matrix around the origin (0,0)
            </summary>
            <param name="angle">Angle in degrees to rotate. A positive value indicates a clockwise rotation, whereas a negative value will rotate counter clockwise</param>
        </member>
        <member name="M:Eto.Drawing.IMatrix.RotateAt(System.Single,System.Single,System.Single)">
            <summary>
            Prepend a rotation around the specified point to the matrix
            </summary>
            <param name="angle">Angle in degrees to rotate. A positive value indicates a clockwise rotation, whereas a negative value will rotate counter clockwise</param>
            <param name="centerX">X co-ordinate of the point to rotate around</param>
            <param name="centerY">Y co-ordinate of the point to rotate around</param>
        </member>
        <member name="M:Eto.Drawing.IMatrix.Translate(System.Single,System.Single)">
            <summary>
            Prepend a translation to the matrix
            </summary>
            <param name="offsetX">The amount to offset along the x axis</param>
            <param name="offsetY">The amount to offset along the y axis</param>
        </member>
        <member name="M:Eto.Drawing.IMatrix.Scale(System.Single,System.Single)">
            <summary>
            Prepend a scale to the matrix from the origin (0, 0)
            </summary>
            <param name="scaleX">The amount to multiply coordinates along the x axis</param>
            <param name="scaleY">The amount to multiply coordinates along the y axis</param>
        </member>
        <member name="M:Eto.Drawing.IMatrix.ScaleAt(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Prepend a scale to the matrix from the specified point
            </summary>
            <param name="scaleX">The amount to multiply coordinates along the x axis</param>
            <param name="scaleY">The amount to multiply coordinates along the y axis</param>
            <param name="centerX">X co-ordinate of the point to scale from</param>
            <param name="centerY">Y co-ordinate of the point to scale from</param>
        </member>
        <member name="M:Eto.Drawing.IMatrix.Skew(System.Single,System.Single)">
            <summary>
            Prepend a skew to the matrix
            </summary>
            <param name="skewX">Amount to skew along the X axis, 1.0 does not skew</param>
            <param name="skewY">Amount to skew along the Y axis, 1.0 does not skew</param>
        </member>
        <member name="M:Eto.Drawing.IMatrix.Append(Eto.Drawing.IMatrix)">
            <summary>
            Append the specified <paramref name="matrix"/> to this matrix
            </summary>
            <param name="matrix">Matrix to append to this matrix</param>
        </member>
        <member name="M:Eto.Drawing.IMatrix.Prepend(Eto.Drawing.IMatrix)">
            <summary>
            Prepend the specified matrix to this matrix
            </summary>
            <param name="matrix">Matrix to prepend to this matrix</param>
        </member>
        <member name="M:Eto.Drawing.IMatrix.Invert">
            <summary>
            Inverts this matrix
            </summary>
        </member>
        <member name="M:Eto.Drawing.IMatrix.TransformPoint(Eto.Drawing.Point)">
            <summary>
            Transforms the specified point using this matrix transform
            </summary>
            <returns>The value of the point transformed by this matrix</returns>
            <param name="point">Point to transform</param>
        </member>
        <member name="M:Eto.Drawing.IMatrix.TransformPoint(Eto.Drawing.PointF)">
            <summary>
            Transforms the specified point using this matrix transform
            </summary>
            <returns>The value of the point transformed by this matrix</returns>
            <param name="point">Point to transform</param>
        </member>
        <member name="M:Eto.Drawing.IMatrix.Clone">
            <summary>
            Clone this instance
            </summary>
        </member>
        <member name="T:Eto.Drawing.Matrix">
            <summary>
            Methods to create and manage an <see cref="T:Eto.Drawing.IMatrix"/>
            </summary>
            <copyright>(c) 2012-2014 by Curtis Wensley</copyright>
            <license type="BSD-3">See LICENSE for full terms</license>
        </member>
        <member name="M:Eto.Drawing.Matrix.Multiply(Eto.Drawing.IMatrix,Eto.Drawing.IMatrix[])">
            <summary>
            Multiply the specified <paramref name="matrix"/> and <paramref name="matrices"/>.
            </summary>
            <returns>A new matrix with the product of multiplying each of the specified matrix and matrices</returns>
            <param name="matrix">Matrix to multiply with</param>
            <param name="matrices">Matrices to append</param>
        </member>
        <member name="M:Eto.Drawing.Matrix.FromScale(Eto.Drawing.SizeF)">
            <summary>
            Creates a new matrix with the specified <paramref name="scale"/>
            </summary>
            <returns>A new matrix with a scale transform</returns>
            <param name="scale">Scale size for the X and Y coordinates</param>
        </member>
        <member name="M:Eto.Drawing.Matrix.FromScale(System.Single,System.Single)">
            <summary>
            Creates a new matrix with the specified scale factor
            </summary>
            <returns>A new matrix with a scale transform</returns>
            <param name="scaleX">The amount to multiply coordinates along the x axis</param>
            <param name="scaleY">The amount to multiply coordinates along the y axis</param>
        </member>
        <member name="M:Eto.Drawing.Matrix.FromScaleAt(Eto.Drawing.SizeF,Eto.Drawing.PointF)">
            <summary>
            Creates a new matrix with a <paramref name="scale"/> at the specified <paramref name="center"/> point
            </summary>
            <returns>A new matrix with a scale transform</returns>
            <param name="scale">The amount to multiply coordinates by</param>
            <param name="center">Point to scale from</param>
        </member>
        <member name="M:Eto.Drawing.Matrix.FromScaleAt(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a new matrix with a scale at the specified point
            </summary>
            <returns>A new matrix with a scale transform</returns>
            <param name="scaleX">The amount to multiply coordinates along the x axis</param>
            <param name="scaleY">The amount to multiply coordinates along the y axis</param>
            <param name="centerX">X co-ordinate of the point to scale from</param>
            <param name="centerY">Y co-ordinate of the point to scale from</param>
        </member>
        <member name="M:Eto.Drawing.Matrix.FromTranslation(Eto.Drawing.SizeF)">
            <summary>
            Creates a new matrix with a translation
            </summary>
            <returns>A new translation matrix</returns>
            <param name="offset">Offset to translate by</param>
        </member>
        <member name="M:Eto.Drawing.Matrix.FromTranslation(Eto.Drawing.PointF)">
            <summary>
            Creates a new matrix with a translation
            </summary>
            <returns>A new translation matrix</returns>
            <param name="offset">Offset to translate by</param>
        </member>
        <member name="M:Eto.Drawing.Matrix.FromTranslation(System.Single,System.Single)">
            <summary>
            Creates a new matrix with a translation
            </summary>
            <returns>A new translation matrix</returns>
            <param name="distanceX">Distance to translate along the x axis</param>
            <param name="distanceY">Distance to translate along the y axis</param>
        </member>
        <member name="M:Eto.Drawing.Matrix.FromRotation(System.Single)">
            <summary>
            Creates a new rotation matrix
            </summary>
            <returns>A new rotation matrix</returns>
            <param name="angle">Angle in degrees to rotate. A positive value indicates a clockwise rotation, whereas a negative value will rotate counter clockwise</param>
        </member>
        <member name="M:Eto.Drawing.Matrix.FromRotationAt(System.Single,Eto.Drawing.PointF)">
            <summary>
            Creates a new rotation matrix around a center point with the specified <paramref name="angle"/>
            </summary>
            <returns>A new rotation matrix</returns>
            <param name="angle">Angle in degrees to rotate. A positive value indicates a clockwise rotation, whereas a negative value will rotate counter clockwise</param>
            <param name="center">the point to rotate around</param>
        </member>
        <member name="M:Eto.Drawing.Matrix.FromRotationAt(System.Single,System.Single,System.Single)">
            <summary>
            Creates a new rotation matrix around a (<paramref name="centerX"/>, <paramref name="centerY"/>) point with the specified <paramref name="angle"/>
            </summary>
            <returns>A new rotation matrix</returns>
            <param name="angle">Angle in degrees to rotate. A positive value indicates a clockwise rotation, whereas a negative value will rotate counter clockwise</param>
            <param name="centerX">X co-ordinate of the point to rotate around</param>
            <param name="centerY">Y co-ordinate of the point to rotate around</param>
        </member>
        <member name="M:Eto.Drawing.Matrix.FromSkew(System.Single,System.Single)">
            <summary>
            Creates a new matrix with a skew
            </summary>
            <returns>A new skew matrix</returns>
            <param name="skewX">Amount to skew along the X axis, 1.0 does not skew</param>
            <param name="skewY">Amount to skew along the Y axis, 1.0 does not skew</param>
        </member>
        <member name="P:Eto.Drawing.Matrix.Instantiator">
            <summary>
            Gets a delegate that can be used to create an identity matrix with little overhead
            </summary>
        </member>
        <member name="P:Eto.Drawing.Matrix.InstantiatorWithElements">
            <summary>
            Gets a delegate that can be used to create instances of a matrix with specified components with little overhead
            </summary>
            <returns>The with elements.</returns>
        </member>
        <member name="M:Eto.Drawing.Matrix.Create">
            <summary>
            Creates a new identity matrix
            </summary>
        </member>
        <member name="M:Eto.Drawing.Matrix.Create(System.Single[])">
            <summary>
            Creates a new matrix with the specified <paramref name="elements"/>
            </summary>
            <param name="elements">Elements of the matrix (six components)</param>
        </member>
        <member name="M:Eto.Drawing.Matrix.Create(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a new matrix with the specified components
            </summary>
            <param name="xx">Xx component of the matrix</param>
            <param name="yx">Yx component of the matrix</param>
            <param name="xy">Xy component of the matrix</param>
            <param name="yy">Yy component of the matrix</param>
            <param name="x0">X0 component of the matrix</param>
            <param name="y0">Y0 component of the matrix</param>
        </member>
        <member name="M:Eto.Drawing.Matrix.RotateAt(Eto.Drawing.IMatrix,System.Single,Eto.Drawing.PointF)">
            <summary>
            Prepend a rotation around the specified point to the matrix
            </summary>
            <param name="matrix">Matrix to rotate</param>
            <param name="angle">Angle in degrees to rotate. A positive value indicates a clockwise rotation, whereas a negative value will rotate counter clockwise</param>
            <param name="center">Point to rotate around</param>
        </member>
        <member name="M:Eto.Drawing.Matrix.Translate(Eto.Drawing.IMatrix,Eto.Drawing.SizeF)">
            <summary>
            Prepend a translation to the matrix
            </summary>
            <param name="matrix">Matrix to translate</param>
            <param name="offset">The amount to offset</param>
        </member>
        <member name="M:Eto.Drawing.Matrix.Translate(Eto.Drawing.IMatrix,Eto.Drawing.PointF)">
            <summary>
            Prepend a translation to the matrix
            </summary>
            <param name="matrix">Matrix to translate</param>
            <param name="offset">The amount to offset</param>
        </member>
        <member name="M:Eto.Drawing.Matrix.Scale(Eto.Drawing.IMatrix,Eto.Drawing.SizeF)">
            <summary>
            Prepend a scale to the matrix from the origin (0, 0)
            </summary>
            <param name="matrix">Matrix to scale</param>
            <param name="scale">The amount to multiply coordinates</param>
        </member>
        <member name="M:Eto.Drawing.Matrix.Scale(Eto.Drawing.IMatrix,System.Single)">
            <summary>
            Prepend a scale to the matrix from the origin (0, 0)
            </summary>
            <param name="matrix">Matrix to scale</param>
            <param name="scale">The amount to multiply coordinates along both the x and y axis</param>
        </member>
        <member name="M:Eto.Drawing.Matrix.ScaleAt(Eto.Drawing.IMatrix,Eto.Drawing.SizeF,Eto.Drawing.PointF)">
            <summary>
            Prepend a scale to the matrix from the specified point
            </summary>
            <param name="matrix">Matrix to scale</param>
            <param name="scale">The amount to multiply coordinates</param>
            <param name="center">Point to scale from</param>
        </member>
        <member name="M:Eto.Drawing.Matrix.ScaleAt(Eto.Drawing.IMatrix,System.Single,Eto.Drawing.PointF)">
            <summary>
            Prepend a scale to the matrix from the specified point
            </summary>
            <param name="matrix">Matrix to scale</param>
            <param name="scale">The amount to multiply coordinates along both the x and y axis</param>
            <param name="center">Point to scale from</param>
        </member>
        <member name="M:Eto.Drawing.Matrix.ScaleAt(Eto.Drawing.IMatrix,System.Single,System.Single,System.Single)">
            <summary>
            Prepend a scale to the matrix from the specified point
            </summary>
            <param name="matrix">Matrix to scale</param>
            <param name="scale">The amount to multiply coordinates along both the x and y axis</param>
            <param name="centerX">X co-ordinate of the point to scale from</param>
            <param name="centerY">Y co-ordinate of the point to scale from</param>
        </member>
        <member name="M:Eto.Drawing.Matrix.Append(Eto.Drawing.IMatrix,Eto.Drawing.IMatrix[])">
            <summary>
            Append the specified <paramref name="matrices"/> to the <paramref name="matrix"/>
            </summary>
            <param name="matrix">Matrix to append to</param>
            <param name="matrices">Matrices to append to the matrix</param>
        </member>
        <member name="M:Eto.Drawing.Matrix.Prepend(Eto.Drawing.IMatrix,Eto.Drawing.IMatrix[])">
            <summary>
            Prepends the specified <paramref name="matrices"/> to the <paramref name="matrix"/>
            </summary>
            <param name="matrix">Matrix to prepend to</param>
            <param name="matrices">Matrices to prepend to the matrix</param>
        </member>
        <member name="M:Eto.Drawing.Matrix.GetScale(Eto.Drawing.IMatrix)">
            <summary>
            Returns the scale coordinates Xx and Yy of the <paramref name="matrix"/> as a PointF.
            </summary>
        </member>
        <member name="M:Eto.Drawing.Matrix.TransformRectangle(Eto.Drawing.IMatrix,Eto.Drawing.RectangleF)">
            <summary>
            Transforms the rectangle with the current matrix.
            </summary>
            <remarks>
            This returns a rectangle that encompasses the specified <paramref name="rect"/> after it is translated.
            When rotating, this means that the new rectangle may be larger in size to encompass the translated rectangle.
            </remarks>
            <returns>A new rectangle that encompasses the translated <paramref name="rect"/>.</returns>
            <param name="matrix">Matrix to transform each point of the rectangle.</param>
            <param name="rect">Rectangle to transform.</param>
        </member>
        <member name="M:Eto.Drawing.Matrix.TransformSize(Eto.Drawing.IMatrix,Eto.Drawing.SizeF)">
            <summary>
            Transforms the size with the current matrix.
            </summary>
            <remarks>
            This will get the transformed size
            </remarks>
            <param name="matrix"></param>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:Eto.Drawing.Matrix.Inverse(Eto.Drawing.IMatrix)">
            <summary>
            Creates an inverted copy of the specified matrix.
            </summary>
            <param name="matrix">Matrix to invert.</param>
        </member>
        <member name="T:Eto.Drawing.Matrix.IHandler">
            <summary>
            Handler interface for the <see cref="T:Eto.Drawing.IMatrix"/>
            </summary>
            <copyright>(c) 2012-2014 by Curtis Wensley</copyright>
            <license type="BSD-3">See LICENSE for full terms</license>
        </member>
        <member name="M:Eto.Drawing.Matrix.IHandler.Create">
            <summary>
            Creates a new identiy matrix
            </summary>
            <remarks>
            An identity matrix is defined as:
            <para>
            	| 1  0  0 |
            	| 0  1  0 |
            	| 0  0  1 |
            </para>
            </remarks>
        </member>
        <member name="M:Eto.Drawing.Matrix.IHandler.Create(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a new matrix with the specified components
            </summary>
            <remarks>
            The components of the matrix are defined as:
            <para>
            	| xx xy 0 |
            	| yx yy 0 |
            	| x0 y0 1 |
            </para>
            </remarks>
            <param name="xx">Xx component of the matrix (scaleX)</param>
            <param name="yx">Yx component of the matrix</param>
            <param name="xy">Xy component of the matrix</param>
            <param name="yy">Yy component of the matrix (scaleY)</param>
            <param name="x0">X0 component of the matrix (translateX)</param>
            <param name="y0">Y0 component of the matrix (translateY)</param>
        </member>
        <member name="T:Eto.Drawing.Padding">
            <summary>
            Represents an amount of padding to apply to an object at the top, left, right, and bottom.
            </summary>
            <copyright>(c) 2014 by Curtis Wensley</copyright>
            <license type="BSD-3">See LICENSE for full terms</license>
        </member>
        <member name="P:Eto.Drawing.Padding.Top">
            <summary>
            Gets or sets the padding on the top
            </summary>
        </member>
        <member name="P:Eto.Drawing.Padding.Left">
            <summary>
            Gets or sets the padding on the left
            </summary>
        </member>
        <member name="P:Eto.Drawing.Padding.Right">
            <summary>
            Gets or sets the padding on the right
            </summary>
        </member>
        <member name="P:Eto.Drawing.Padding.Bottom">
            <summary>
            Gets or sets the padding on the bottom
            </summary>
        </member>
        <member name="F:Eto.Drawing.Padding.Empty">
            <summary>
            Gets an empty padding with zero for each side
            </summary>
        </member>
        <member name="M:Eto.Drawing.Padding.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the Padding class with the specified padding for all sides
            </summary>
            <param name="all">Amount of padding to apply to each side</param>
        </member>
        <member name="M:Eto.Drawing.Padding.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the Padding class with the specified padding for horizontal and vertical sides
            </summary>
            <param name="horizontal">Amount of padding to set the <see cref="P:Eto.Drawing.Padding.Left"/> and <see cref="P:Eto.Drawing.Padding.Right"/> sides</param>
            <param name="vertical">Amount of padding to set the <see cref="P:Eto.Drawing.Padding.Top"/> and <see cref="P:Eto.Drawing.Padding.Bottom"/> sides</param>
        </member>
        <member name="M:Eto.Drawing.Padding.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the Padding class
            </summary>
            <param name="left">Amount of padding to apply to the left</param>
            <param name="top">Amount of padding to apply to the top</param>
            <param name="right">Amount of padding to apply to the right</param>
            <param name="bottom">Amount of padding to apply to the bottom</param>
        </member>
        <member name="P:Eto.Drawing.Padding.Horizontal">
            <summary>
            Gets the total horizontal padding, which is the sum of <see cref="P:Eto.Drawing.Padding.Left"/> and <see cref="P:Eto.Drawing.Padding.Right"/>.
            </summary>
        </member>
        <member name="P:Eto.Drawing.Padding.Vertical">
            <summary>
            Gets the total vertical padding, which is the sum of <see cref="P:Eto.Drawing.Padding.Top"/> and <see cref="P:Eto.Drawing.Padding.Bottom"/>
            </summary>
        </member>
        <member name="P:Eto.Drawing.Padding.Size">
            <summary>
            Gets the padding as a size value with the <see cref="P:Eto.Drawing.Padding.Horizontal"/> and <see cref="P:Eto.Drawing.Padding.Vertical"/> values as 
            the <see cref="P:Eto.Drawing.Size.Width"/> and <see cref="P:Eto.Drawing.Size.Height"/>, respectively.
            </summary>
        </member>
        <member name="P:Eto.Drawing.Padding.IsZero">
            <summary>
            Gets a value indicating that all sides of the padding are zero
            </summary>
        </member>
        <member name="M:Eto.Drawing.Padding.op_Addition(Eto.Drawing.Padding,Eto.Drawing.Padding)">
            <summary>
            Adds two padding values together
            </summary>
            <param name="value1">First padding value to add</param>
            <param name="value2">Second padding value to add</param>
            <returns>The sum of both padding values</returns>
        </member>
        <member name="M:Eto.Drawing.Padding.op_Subtraction(Eto.Drawing.Padding,Eto.Drawing.Padding)">
            <summary>
            Subtracts a padding value from another value
            </summary>
            <param name="value1">Padding value to subtract from</param>
            <param name="value2">Padding value to subtract from the first value</param>
            <returns>The value of the first padding minus the second padding value</returns>
        </member>
        <member name="M:Eto.Drawing.Padding.op_Equality(Eto.Drawing.Padding,Eto.Drawing.Padding)">
            <summary>
            Determines the equality of two padding objects
            </summary>
            <param name="value1">First padding value to compare</param>
            <param name="value2">Second padding value to compare</param>
            <returns>True if the two padding values are equal, false otherwise</returns>
        </member>
        <member name="M:Eto.Drawing.Padding.op_Inequality(Eto.Drawing.Padding,Eto.Drawing.Padding)">
            <summary>
            Determines the inequality of two padding objects
            </summary>
            <param name="value1">First padding value to compare</param>
            <param name="value2">Second padding value to compare</param>
            <returns>True if the values are not equal, false if they are equal</returns>
        </member>
        <member name="M:Eto.Drawing.Padding.op_Implicit(System.Int32)~Eto.Drawing.Padding">
            <summary>
            Implicitly converts a single integer to a padding with all sides of equal value.
            </summary>
            <param name="all">Value for padding on all sides</param>
        </member>
        <member name="M:Eto.Drawing.Padding.Equals(System.Object)">
            <summary>
            Determines the equality between this instance and the specified object
            </summary>
            <param name="obj">Object to compare to</param>
            <returns>True if obj is a Padding object and is equal to this instance, false if not</returns>
        </member>
        <member name="M:Eto.Drawing.Padding.GetHashCode">
            <summary>
            Gets the hash code for this Padding instance
            </summary>
            <returns>Hash code for this instance</returns>
        </member>
        <member name="M:Eto.Drawing.Padding.ToString">
            <summary>
            Converts this object to a string
            </summary>
            <returns>String representation of this object</returns>
        </member>
        <member name="M:Eto.Drawing.Padding.Equals(Eto.Drawing.Padding)">
            <summary>
            Determines equality between this instance and the specified padding
            </summary>
            <param name="other">Other padding instance to compare with</param>
            <returns>True if the specified padding is equal to this instance, false if not</returns>
        </member>
        <member name="T:Eto.Drawing.PaddingConverter">
            <summary>
            Converter for the <see cref="T:Eto.Drawing.Padding"/> class
            </summary>
            <copyright>(c) 2014 by Curtis Wensley</copyright>
            <license type="BSD-3">See LICENSE for full terms</license>
        </member>
        <member name="F:Eto.Drawing.PaddingConverter.DimensionSplitter">
            <summary>
            The character to split up the string which will be converted
            </summary>
        </member>
        <member name="M:Eto.Drawing.PaddingConverter.CanConvertFrom(Eto.ITypeDescriptorContext,System.Type)">
            <summary>
            Determines if the specified <paramref name="sourceType"/> can be converted to a <see cref="T:Eto.Drawing.Padding"/> object
            </summary>
            <param name="context">Conversion context</param>
            <param name="sourceType">Type to convert from</param>
            <returns>True if this converter can convert from the specified type, false otherwise</returns>
        </member>
        <member name="M:Eto.Drawing.PaddingConverter.ConvertFrom(Eto.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts the specified value to a <see cref="T:Eto.Drawing.Padding"/> object
            </summary>
            <param name="context">Conversion context</param>
            <param name="culture">Culture to perform the conversion for</param>
            <param name="value">Value to convert</param>
            <returns>A new instance of the <see cref="T:Eto.Drawing.Padding"/> object with the value represented by <paramref name="value"/></returns>
        </member>
        <member name="T:Eto.Drawing.Palette">
            <summary>
            Represents a collection of <see cref="T:Eto.Drawing.Color"/> objects
            </summary>
            <remarks>
            Typically used for <see cref="T:Eto.Drawing.IndexedBitmap"/> or other purposes where a collection of colors is needed.
            
            This class keeps a cache of 32-bit ARGB values for each element in the collection for faster retrieval. These
            values are generated using <see cref="M:Eto.Drawing.Color.ToArgb"/>.
            </remarks>
            <copyright>(c) 2014 by Curtis Wensley</copyright>
            <license type="BSD-3">See LICENSE for full terms</license>
        </member>
        <member name="P:Eto.Drawing.Palette.EGAColors">
            <summary>
            Gets the index of standard EGA colors from a 64-color palette
            </summary>
        </member>
        <member name="M:Eto.Drawing.Palette.#ctor">
            <summary>
            Initializes a new instance of the Pallette class
            </summary>
        </member>
        <member name="M:Eto.Drawing.Palette.#ctor(System.Collections.Generic.IEnumerable{Eto.Drawing.Color})">
            <summary>
            Initializes a new instance of the Palette class with the specified colors
            </summary>
            <param name="colors">Initial colors to add to the palette</param>
        </member>
        <member name="M:Eto.Drawing.Palette.GetEgaPalette">
            <summary>
            Gets the standard 64-color EGA palette
            </summary>
            <remarks>
            To get the standard 16-colors of an EGA palette, use <see cref="M:Eto.Drawing.Palette.FromEGA(Eto.Drawing.Palette)"/>
            </remarks>
            <returns></returns>
        </member>
        <member name="M:Eto.Drawing.Palette.GetDosPalette">
            <summary>
            Gets the standard 16-color palette used in DOS
            </summary>
            <returns>A new instance of a Palette with the standard 16 DOS colors</returns>
        </member>
        <member name="M:Eto.Drawing.Palette.FromEGA(Eto.Drawing.Palette)">
            <summary>
            Gets the standard 16 colors of the specified EGA palette, at the indexes specified with <see cref="P:Eto.Drawing.Palette.EGAColors"/>
            </summary>
            <param name="palEGA">EGA palette to get the standard 16 colors from</param>
            <returns>A new instance of a palette with the 16 colors at the indexes specified with <see cref="P:Eto.Drawing.Palette.EGAColors"/></returns>
        </member>
        <member name="M:Eto.Drawing.Palette.Save(System.IO.BinaryWriter,System.Int32,System.Boolean)">
            <summary>
            Saves this palette to the specified binary writer in (A)RGB components
            </summary>
            <remarks>
            Each component is saved as a single byte (regardless of the value of <paramref name="shift"/>).
            It is saved in the order of Alpha (if <paramref name="includeAlpha"/> is true), Red, Green, then Blue.
            </remarks>
            <param name="writer">Writer to write the data to</param>
            <param name="shift">Shift amount for each component. 0 = 0-255, 1 = 0-128, 2 = 0-64, etc</param>
            <param name="includeAlpha">True to include alpha, false to only include RGB components</param>
        </member>
        <member name="M:Eto.Drawing.Palette.Load(System.IO.BinaryReader,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Loads the palette from the specified binary reader in (A)RGB components
            </summary>
            <remarks>
            Each component is read as a single byte (regardless of the value of <paramref name="shift"/>).
            It is read in the order of Alpha (if <paramref name="includeAlpha"/> is true), Red, Green, then Blue.
            </remarks>
            <param name="reader">Reader to read the data from</param>
            <param name="size">Number of palette entried to load</param>
            <param name="shift">Shift amount for each component. 0 = 0-255, 1 = 0-128, 2 = 0-64, etc</param>
            <param name="includeAlpha">True to include the alpha component, false to only read RGB components</param>
        </member>
        <member name="M:Eto.Drawing.Palette.GetRGBColor(System.Int32)">
            <summary>
            Gets the cached ARGB value of the color at the specified <paramref name="index"/>
            </summary>
            <param name="index">Index to get the ARGB color for</param>
            <returns>A 32-bit ARGB color value of the color at the specified index</returns>
        </member>
        <member name="M:Eto.Drawing.Palette.AddRange(System.Collections.Generic.IEnumerable{Eto.Drawing.Color})">
            <summary>
            Adds the specified <paramref name="colors"/> to this palette collection
            </summary>
            <param name="colors">Colors to add to this palette collection</param>
        </member>
        <member name="M:Eto.Drawing.Palette.InsertItem(System.Int32,Eto.Drawing.Color)">
            <summary>
            Called when inserting a color, to insert the cached argb value of the color
            </summary>
        </member>
        <member name="M:Eto.Drawing.Palette.SetItem(System.Int32,Eto.Drawing.Color)">
            <summary>
            Called when setting a color in the palette, to set the cached argb value of the color
            </summary>
        </member>
        <member name="M:Eto.Drawing.Palette.ClearItems">
            <summary>
            Called when clearing the items, to clear the cached argb values
            </summary>
        </member>
        <member name="M:Eto.Drawing.Palette.RemoveItem(System.Int32)">
            <summary>
            Called when removing an item, to remove the cached argb value of the color
            </summary>
        </member>
        <member name="M:Eto.Drawing.Palette.FindClosest(Eto.Drawing.Color)">
            <summary>
            Finds the closest color in this palette to the specified <paramref name="color"/>
            </summary>
            <param name="color">Color to use to find the closest color</param>
            <returns>Index of the closest entry of the specified <paramref name="color"/></returns>
        </member>
        <member name="M:Eto.Drawing.Palette.FindAddColour(Eto.Drawing.Color)">
            <summary>
            Finds the index of the specified color, or adds it if it does not exist
            </summary>
            <param name="color">Color to find/add</param>
            <returns>Index of the existing entry in this palette that matches the specified color, or the index of the newly added entry if not found</returns>
        </member>
        <member name="M:Eto.Drawing.Palette.GetHashCode">
            <summary>
            Gets the hash code for this palette
            </summary>
            <returns>Hash code of this palette</returns>
        </member>
        <member name="M:Eto.Drawing.Palette.Equals(System.Object)">
            <summary>
            Gets a value indicating that this object is equal to the specified <paramref name="obj"/>
            </summary>
            <param name="obj">Object to compare for equality</param>
            <returns>True if the specified obj is a Palette and contains the same colors as this instance, false otherwise</returns>
        </member>
        <member name="M:Eto.Drawing.Palette.Clone">
            <summary>
            Creates a clone of this palette
            </summary>
            <returns>A new instance of a palette with the same color entries as this instance</returns>
        </member>
        <member name="T:Eto.Drawing.Pen">
            <summary>
            Defines attributes for line drawing methods in <see cref="T:Eto.Drawing.Graphics"/>
            </summary>
            <copyright>(c) 2012-2014 by Curtis Wensley</copyright>
            <license type="BSD-3">See LICENSE for full terms</license>
        </member>
        <member name="P:Eto.Drawing.Pen.ControlObject">
            <summary>
            Gets the control object for this widget
            </summary>
            <value>The control object for the widget</value>
        </member>
        <member name="P:Eto.Drawing.Pen.Handler">
            <summary>
            Gets the platform handler object for the widget
            </summary>
            <value>The handler for the widget</value>
        </member>
        <member name="P:Eto.Drawing.Pen.Instantiator">
            <summary>
            Gets a delegate that can be used to create instances of the Pen with low overhead
            </summary>
        </member>
        <member name="M:Eto.Drawing.Pen.#ctor(Eto.Drawing.Color,System.Single)">
            <summary>
            Creates a new pen with the specified <paramref name="color"/> and <paramref name="thickness"/>
            </summary>
            <param name="color">Color for the new pen</param>
            <param name="thickness">Thickness of the new pen</param>
        </member>
        <member name="M:Eto.Drawing.Pen.#ctor(Eto.Drawing.Brush,System.Single)">
            <summary>
            Creates a new pen with the specified <paramref name="brush"/> and <paramref name="thickness"/>
            </summary>
            <param name="brush">Brush to stroke the pen with.</param>
            <param name="thickness">Thickness of the new pen</param>
        </member>
        <member name="P:Eto.Drawing.Pen.Color">
            <summary>
            Gets or sets the color of the pen
            </summary>
            <value>The color of the pen</value>
        </member>
        <member name="P:Eto.Drawing.Pen.Brush">
            <summary>
            Gets the brush associated with the pen.
            </summary>
            <value>The brush the pen will use to stroke the path.</value>
        </member>
        <member name="P:Eto.Drawing.Pen.Thickness">
            <summary>
            Gets or sets the thickness (width) of the pen
            </summary>
        </member>
        <member name="P:Eto.Drawing.Pen.LineJoin">
            <summary>
            Gets or sets the line join style of the pen
            </summary>
            <value>The line join style</value>
        </member>
        <member name="P:Eto.Drawing.Pen.LineCap">
            <summary>
            Gets or sets the line cap style of the pen
            </summary>
            <value>The line cap style</value>
        </member>
        <member name="P:Eto.Drawing.Pen.MiterLimit">
            <summary>
            Gets or sets the miter limit on the ratio of the length vs. the <see cref="P:Eto.Drawing.Pen.Thickness"/> of this pen
            </summary>
            <remarks>
            This is only used if the <see cref="P:Eto.Drawing.Pen.LineJoin"/> style is <see cref="F:Eto.Drawing.PenLineJoin.Miter"/>
            </remarks>
            <value>The miter limit of this pen</value>
        </member>
        <member name="P:Eto.Drawing.Pen.DashStyle">
            <summary>
            Gets or sets the dash style of the pen
            </summary>
            <remarks>
            The <see cref="P:Eto.Drawing.Pen.LineCap"/> specifies the dash cap used
            </remarks>
            <value>The dash style.</value>
        </member>
        <member name="M:Eto.Drawing.Pen.Dispose">
            <summary>
            Releases all resource used by the <see cref="T:Eto.Drawing.Pen"/> object.
            </summary>
            <remarks>Call <see cref="M:Eto.Drawing.Pen.Dispose"/> when you are finished using the <see cref="T:Eto.Drawing.Pen"/>. The
            <see cref="M:Eto.Drawing.Pen.Dispose"/> method leaves the <see cref="T:Eto.Drawing.Pen"/> in an unusable state. After calling
            <see cref="M:Eto.Drawing.Pen.Dispose"/>, you must release all references to the <see cref="T:Eto.Drawing.Pen"/> so the garbage
            collector can reclaim the memory that the <see cref="T:Eto.Drawing.Pen"/> was occupying.</remarks>
        </member>
        <member name="T:Eto.Drawing.Pen.IHandler">
            <summary>
            Defines a pen to be used with the <see cref="T:Eto.Drawing.Graphics"/> drawing methods
            </summary>
            <copyright>(c) 2012-2014 by Curtis Wensley</copyright>
            <license type="BSD-3">See LICENSE for full terms</license>
        </member>
        <member name="M:Eto.Drawing.Pen.IHandler.Create(Eto.Drawing.Brush,System.Single)">
            <summary>
            Creates a new pen with the specified <paramref name="brush"/> and <paramref name="thickness"/>
            </summary>
            <param name="brush">Brush for the new pen</param>
            <param name="thickness">Thickness of the new pen</param>
            <returns>ControlObject for the pen</returns>
        </member>
        <member name="M:Eto.Drawing.Pen.IHandler.GetBrush(Eto.Drawing.Pen)">
            <summary>
            Gets the brush of the pen
            </summary>
            <param name="widget">Pen to get the brush</param>
        </member>
        <member name="M:Eto.Drawing.Pen.IHandler.GetThickness(Eto.Drawing.Pen)">
            <summary>
            Gets or sets the thickness (width) of the pen
            </summary>
            <param name="widget">Pen to get the thickness</param>
        </member>
        <member name="M:Eto.Drawing.Pen.IHandler.SetThickness(Eto.Drawing.Pen,System.Single)">
            <summary>
            Sets the thickness (width) of the pen
            </summary>
            <param name="widget">Pen to set the thickness</param>
            <param name="thickness">Thickness for the pen</param>
        </member>
        <member name="M:Eto.Drawing.Pen.IHandler.GetLineJoin(Eto.Drawing.Pen)">
            <summary>
            Gets the style of line join for the pen
            </summary>
            <param name="widget">Pen to get the line join style</param>
        </member>
        <member name="M:Eto.Drawing.Pen.IHandler.SetLineJoin(Eto.Drawing.Pen,Eto.Drawing.PenLineJoin)">
            <summary>
            Sets the style of line join for the pen
            </summary>
            <param name="widget">Pen to set the line join style</param>
            <param name="lineJoin">Line join to set</param>
        </member>
        <member name="M:Eto.Drawing.Pen.IHandler.GetLineCap(Eto.Drawing.Pen)">
            <summary>
            Gets the line cap style
            </summary>
            <param name="widget">Pen to get the line cap style</param>
        </member>
        <member name="M:Eto.Drawing.Pen.IHandler.SetLineCap(Eto.Drawing.Pen,Eto.Drawing.PenLineCap)">
            <summary>
            Sets the line cap style
            </summary>
            <param name="widget">Pen to set the line cap</param>
            <param name="lineCap">Line cap to set</param>
        </member>
        <member name="M:Eto.Drawing.Pen.IHandler.GetMiterLimit(Eto.Drawing.Pen)">
            <summary>
            Gets the miter limit for the pen
            </summary>
            <remarks>
            The miter limit specifies the maximum allowed ratio of miter lenth to stroke length in which a 
            miter will be converted to a bevel.  The default miter limit is 10.
            </remarks>
            <param name="widget">Pen to get the miter limit</param>
        </member>
        <member name="M:Eto.Drawing.Pen.IHandler.SetMiterLimit(Eto.Drawing.Pen,System.Single)">
            <summary>
            Sets the miter limit of the pen
            </summary>
            <remarks>
            The miter limit specifies the maximum allowed ratio of miter lenth to stroke length in which a 
            miter will be converted to a bevel.  The default miter limit is 10.
            </remarks>
            <param name="widget">Pen to set the miter limit</param>
            <param name="miterLimit">Miter limit to set to the pen</param>
        </member>
        <member name="M:Eto.Drawing.Pen.IHandler.SetDashStyle(Eto.Drawing.Pen,Eto.Drawing.DashStyle)">
            <summary>
            Sets the dash style of the pen
            </summary>
            <param name="widget">Pen to set the dash style</param>
            <param name="dashStyle">Dash style to set to the pen</param>
        </member>
        <member name="T:Eto.Drawing.PenLineCap">
            <summary>
            Specifies the line cap for a <see cref="T:Eto.Drawing.Pen"/>
            </summary>
            <copyright>(c) 2012-2014 by Curtis Wensley</copyright>
            <license type="BSD-3">See LICENSE for full terms</license>
        </member>
        <member name="F:Eto.Drawing.PenLineCap.Square">
            <summary>
            Lines have a square cap, that is the same size as the width of the pen
            </summary>
        </member>
        <member name="F:Eto.Drawing.PenLineCap.Butt">
            <summary>
            Lines are capped exactly at the ending points of the line
            </summary>
        </member>
        <member name="F:Eto.Drawing.PenLineCap.Round">
            <summary>
            Lines have a rounded cap, which is equal to the width of the pen
            </summary>
        </member>
        <member name="T:Eto.Drawing.PenLineJoin">
            <summary>
            Specifies how lines are joined for a <see cref="T:Eto.Drawing.Pen"/>
            </summary>
            <copyright>(c) 2012-2014 by Curtis Wensley</copyright>
            <license type="BSD-3">See LICENSE for full terms</license>
        </member>
        <member name="F:Eto.Drawing.PenLineJoin.Miter">
            <summary>
            Uses a miter to join lines, usually within a certain limit specified by <see cref="P:Eto.Drawing.Pen.MiterLimit"/>
            </summary>
        </member>
        <member name="F:Eto.Drawing.PenLineJoin.Bevel">
            <summary>
            Uses a bevel along the angle of the join
            </summary>
        </member>
        <member name="F:Eto.Drawing.PenLineJoin.Round">
            <summary>
            Uses a rounded edge to join lines
            </summary>
        </member>
        <member name="T:Eto.Drawing.Pens">
            <summary>
            List of pens with common colors and pen cache for pens with a specified color/thickness
            </summary>
            <copyright>(c) 2012-2014 by Curtis Wensley</copyright>
            <license type="BSD-3">See LICENSE for full terms</license>
        </member>
        <member name="M:Eto.Drawing.Pens.Cached(Eto.Drawing.Color,System.Single,Eto.Drawing.DashStyle)">
            <summary>
            Gets a cached pen with the specified <paramref name="color"/> and <paramref name="thickness"/>
            </summary>
            <param name="color">Color of the cached pen to get</param>
            <param name="thickness">Thickness of the cached pen to get</param>
            <param name="dashStyle">Dash Style for the pen</param>
        </member>
        <member name="M:Eto.Drawing.Pens.ClearCache">
            <summary>
            Clears the pen cache
            </summary>
            <remarks>
            This is useful if you are using the <see cref="M:Eto.Drawing.Pens.Cached(Eto.Drawing.Color,System.Single,Eto.Drawing.DashStyle)"/> method to cache pens and want to clear it
            to conserve memory or resources.
            </remarks>
        </member>
        <member name="P:Eto.Drawing.Pens.Transparent">
            <summary>Gets a pen with a thickness of 1 and ARGB color value of #00000000</summary>
        </member>
        <member name="P:Eto.Drawing.Pens.IndianRed">
            <summary>Gets a pen with a thickness of 1 and ARGB color value of #FFCD5C5C</summary>
        </member>
        <member name="P:Eto.Drawing.Pens.LightCoral">
            <summary>Gets a pen with a thickness of 1 and ARGB color value of #FFF08080</summary>
        </member>
        <member name="P:Eto.Drawing.Pens.Salmon">
            <summary>Gets a pen with a thickness of 1 and ARGB color value of #FFFA8072</summary>
        </member>
        <member name="P:Eto.Drawing.Pens.DarkSalmon">
            <summary>Gets a pen with a thickness of 1 and ARGB color value of #FFE9967A</summary>
        </member>
        <member name="P:Eto.Drawing.Pens.LightSalmon">
            <summary>Gets a pen with a thickness of 1 and ARGB color value of #FFFFA07A</summary>
        </member>
        <member name="P:Eto.Drawing.Pens.Red">
            <summary>Gets a pen with a thickness of 1 and ARGB color value of #FFFF0000</summary>
        </member>
        <member name="P:Eto.Drawing.Pens.Crimson">
            <summary>Gets a pen with a thickness of 1 and ARGB color value of #FFDC143C</summary>
        </member>
        <member name="P:Eto.Drawing.Pens.Firebrick">
            <summary>Gets a pen with a thickness of 1 and ARGB color value of #FFB22222</summary>
        </member>
        <member name="P:Eto.Drawing.Pens.DarkRed">
            <summary>Gets a pen with a thickness of 1 and ARGB color value of #FF8B0000</summary>
        </member>
        <member name="P:Eto.Drawing.Pens.Pink">
            <summary>Gets a pen with a thickness of 1 and ARGB color value of #FFFFC0CB</summary>
        </member>
        <member name="P:Eto.Drawing.Pens.LightPink">
            <summary>Gets a pen with a thickness of 1 and ARGB color value of #FFFFB6C1</summary>
        </member>
        <member name="P:Eto.Drawing.Pens.HotPink">
            <summary>Gets a pen with a thickness of 1 and ARGB color value of #FFFF69B4</summary>
        </member>
        <member name="P:Eto.Drawing.Pens.DeepPink">
            <summary>Gets a pen with a thickness of 1 and ARGB color value of #FFFF1493</summary>
        </member>
        <member name="P:Eto.Drawing.Pens.MediumVioletRed">
            <summary>Gets a pen with a thickness of 1 and ARGB color value of #FFC71585</summary>
        </member>
        <member name="P:Eto.Drawing.Pens.PaleVioletRed">
            <summary>Gets a pen with a thickness of 1 and ARGB color value of #FFDB7093</summary>
        </member>
        <member name="P:Eto.Drawing.Pens.Coral">
            <summary>Gets a pen with a thickness of 1 and ARGB color value of #FFFF7F50</summary>
        </member>
        <member name="P:Eto.Drawing.Pens.Tomato">
            <summary>Gets a pen with a thickness of 1 and ARGB color value of #FFFF6347</summary>
        </member>
        <member name="P:Eto.Drawing.Pens.OrangeRed">
            <summary>Gets a pen with a thickness of 1 and ARGB color value of #FFFF4500</summary>
        </member>
        <member name="P:Eto.Drawing.Pens.DarkOrange">
            <summary>Gets a pen with a thickness of 1 and ARGB color value of #FFFF8C00</summary>
        </member>
        <member name="P:Eto.Drawing.Pens.Orange">
            <summary>Gets a pen with a thickness of 1 and ARGB color value of #FFFFA500</summary>
        </member>
        <member name="P:Eto.Drawing.Pens.Gold">
            <summary>Gets a pen with a thickness of 1 and ARGB color value of #FFFFD700</summary>
        </member>
        <member name="P:Eto.Drawing.Pens.Yellow">
            <summary>Gets a pen with a thickness of 1 and ARGB color value of #FFFFFF00</summary>
        </member>
        <member name="P:Eto.Drawing.Pens.LightYellow">
            <summary>Gets a pen with a thickness of 1 and ARGB color value of #FFFFFFE0</summary>
        </member>
        <member name="P:Eto.Drawing.Pens.LemonChiffon">
            <summary>Gets a pen with a thickness of 1 and ARGB color value of #FFFFFACD</summary>
        </member>
        <member name="P:Eto.Drawing.Pens.LightGoldenrodYellow">
            <summary>Gets a pen with a thickness of 1 and ARGB color value of #FFFAFAD2</summary>
        </member>
        <member name="P:Eto.Drawing.Pens.PapayaWhip">
            <summary>Gets a pen with a thickness of 1 and ARGB color value of #FFFFEFD5</summary>
        </member>
        <member name="P:Eto.Drawing.Pens.Moccasin">
            <summary>Gets a pen with a thickness of 1 and ARGB color value of #FFFFE4B5</summary>
        </member>
        <member name="P:Eto.Drawing.Pens.PeachPuff">
            <summary>Gets a pen with a thickness of 1 and ARGB color value of #FFFFDAB9</summary>
        </member>
        <member name="P:Eto.Drawing.Pens.PaleGoldenrod">
            <summary>Gets a pen with a thickness of 1 and ARGB color value of #FFEEE8AA</summary>
        </member>
        <member name="P:Eto.Drawing.Pens.Khaki">
            <summary>Gets a pen with a thickness of 1 and ARGB color value of #FFF0E68C</summary>
        </member>
        <member name="P:Eto.Drawing.Pens.DarkKhaki">
            <summary>Gets a pen with a thickness of 1 and ARGB color value of #FFBDB76B</summary>
        </member>
        <member name="P:Eto.Drawing.Pens.Lavender">
            <summary>Gets a pen with a thickness of 1 and ARGB color value of #FFE6E6FA</summary>
        </member>
        <member name="P:Eto.Drawing.Pens.Thistle">
            <summary>Gets a pen with a thickness of 1 and ARGB color value of #FFD8BFD8</summary>
        </member>
        <member name="P:Eto.Drawing.Pens.Plum">
            <summary>Gets a pen with a thickness of 1 and ARGB color value of #FFDDA0DD</summary>
        </member>
        <member name="P:Eto.Drawing.Pens.Violet">
            <summary>Gets a pen with a thickness of 1 and ARGB color value of #FFEE82EE</summary>
        </member>
        <member name="P:Eto.Drawing.Pens.Orchid">
            <summary>Gets a pen with a thickness of 1 and ARGB color value of #FFDA70D6</summary>
        </member>
        <member name="P:Eto.Drawing.Pens.Fuchsia">
            <summary>Gets a pen with a thickness of 1 and ARGB color value of #FFFF00FF</summary>
        </member>
        <member name="P:Eto.Drawing.Pens.Magenta">
            <summary>Gets a pen with a thickness of 1 and ARGB color value of #FFFF00FF</summary>
        </member>
        <member name="P:Eto.Drawing.Pens.MediumOrchid">
            <summary>Gets a pen with a thickness of 1 and ARGB color value of #FFBA55D3</summary>
        </member>
        <member name="P:Eto.Drawing.Pens.MediumPurple">
            <summary>Gets a pen with a thickness of 1 and ARGB color value of #FF9370DB</summary>
        </member>
        <member name="P:Eto.Drawing.Pens.BlueViolet">
            <summary>Gets a pen with a thickness of 1 and ARGB color value of #FF8A2BE2</summary>
        </member>
        <member name="P:Eto.Drawing.Pens.DarkViolet">
            <summary>Gets a pen with a thickness of 1 and ARGB color value of #FF9400D3</summary>
        </member>
        <member name="P:Eto.Drawing.Pens.DarkOrchid">
            <summary>Gets a pen with a thickness of 1 and ARGB color value of #FF9932CC</summary>
        </member>
        <member name="P:Eto.Drawing.Pens.DarkMagenta">
            <summary>Gets a pen with a thickness of 1 and ARGB color value of #FF8B008B</summary>
        </member>
        <member name="P:Eto.Drawing.Pens.Purple">
            <summary>Gets a pen with a thickness of 1 and ARGB color value of #FF800080</summary>
        </member>
        <member name="P:Eto.Drawing.Pens.Indigo">
            <summary>Gets a pen with a thickness of 1 and ARGB color value of #FF4B0082</summary>
        </member>
        <member name="P:Eto.Drawing.Pens.DarkSlateBlue">
            <summary>Gets a pen with a thickness of 1 and ARGB color value of #FF483D8B</summary>
        </member>
        <member name="P:Eto.Drawing.Pens.SlateBlue">
            <summary>Gets a pen with a thickness of 1 and ARGB color value of #FF6A5ACD</summary>
        </member>
        <member name="P:Eto.Drawing.Pens.MediumSlateBlue">
            <summary>Gets a pen with a thickness of 1 and ARGB color value of #FF7B68EE</summary>
        </member>
        <member name="P:Eto.Drawing.Pens.GreenYellow">
            <summary>Gets a pen with a thickness of 1 and ARGB color value of #FFADFF2F</summary>
        </member>
        <member name="P:Eto.Drawing.Pens.Chartreuse">
            <summary>Gets a pen with a thickness of 1 and ARGB color value of #FF7FFF00</summary>
        </member>
        <member name="P:Eto.Drawing.Pens.LawnGreen">
            <summary>Gets a pen with a thickness of 1 and ARGB color value of #FF7CFC00</summary>
        </member>
        <member name="P:Eto.Drawing.Pens.Lime">
            <summary>Gets a pen with a thickness of 1 and ARGB color value of #FF00FF00</summary>
        </member>
        <member name="P:Eto.Drawing.Pens.LimeGreen">
            <summary>Gets a pen with a thickness of 1 and ARGB color value of #FF32CD32</summary>
        </member>
        <member name="P:Eto.Drawing.Pens.PaleGreen">
            <summary>Gets a pen with a thickness of 1 and ARGB color value of #FF98FB98</summary>
        </member>
        <member name="P:Eto.Drawing.Pens.LightGreen">
            <summary>Gets a pen with a thickness of 1 and ARGB color value of #FF90EE90</summary>
        </member>
        <member name="P:Eto.Drawing.Pens.MediumSpringGreen">
            <summary>Gets a pen with a thickness of 1 and ARGB color value of #FF00FA9A</summary>
        </member>
        <member name="P:Eto.Drawing.Pens.SpringGreen">
            <summary>Gets a pen with a thickness of 1 and ARGB color value of #FF00FF7F</summary>
        </member>
        <member name="P:Eto.Drawing.Pens.MediumSeaGreen">
            <summary>Gets a pen with a thickness of 1 and ARGB color value of #FF3CB371</summary>
        </member>
        <member name="P:Eto.Drawing.Pens.SeaGreen">
            <summary>Gets a pen with a thickness of 1 and ARGB color value of #FF2E8B57</summary>
        </member>
        <member name="P:Eto.Drawing.Pens.ForestGreen">
            <summary>Gets a pen with a thickness of 1 and ARGB color value of #FF228B22</summary>
        </member>
        <member name="P:Eto.Drawing.Pens.Green">
            <summary>Gets a pen with a thickness of 1 and ARGB color value of #FF008000</summary>
        </member>
        <member name="P:Eto.Drawing.Pens.DarkGreen">
            <summary>Gets a pen with a thickness of 1 and ARGB color value of #FF006400</summary>
        </member>
        <member name="P:Eto.Drawing.Pens.YellowGreen">
            <summary>Gets a pen with a thickness of 1 and ARGB color value of #FF9ACD32</summary>
        </member>
        <member name="P:Eto.Drawing.Pens.OliveDrab">
            <summary>Gets a pen with a thickness of 1 and ARGB color value of #FF6B8E23</summary>
        </member>
        <member name="P:Eto.Drawing.Pens.Olive">
            <summary>Gets a pen with a thickness of 1 and ARGB color value of #FF808000</summary>
        </member>
        <member name="P:Eto.Drawing.Pens.DarkOliveGreen">
            <summary>Gets a pen with a thickness of 1 and ARGB color value of #FF556B2F</summary>
        </member>
        <member name="P:Eto.Drawing.Pens.MediumAquamarine">
            <summary>Gets a pen with a thickness of 1 and ARGB color value of #FF66CDAA</summary>
        </member>
        <member name="P:Eto.Drawing.Pens.DarkSeaGreen">
            <summary>Gets a pen with a thickness of 1 and ARGB color value of #FF8FBC8F</summary>
        </member>
        <member name="P:Eto.Drawing.Pens.LightSeaGreen">
            <summary>Gets a pen with a thickness of 1 and ARGB color value of #FF20B2AA</summary>
        </member>
        <member name="P:Eto.Drawing.Pens.DarkCyan">
            <summary>Gets a pen with a thickness of 1 and ARGB color value of #FF008B8B</summary>
        </member>
        <member name="P:Eto.Drawing.Pens.Teal">
            <summary>Gets a pen with a thickness of 1 and ARGB color value of #FF008080</summary>
        </member>
        <member name="P:Eto.Drawing.Pens.Aqua">
            <summary>Gets a pen with a thickness of 1 and ARGB color value of #FF00FFFF</summary>
        </member>
        <member name="P:Eto.Drawing.Pens.Cyan">
            <summary>Gets a pen with a thickness of 1 and ARGB color value of #FF00FFFF</summary>
        </member>
        <member name="P:Eto.Drawing.Pens.LightCyan">
            <summary>Gets a pen with a thickness of 1 and ARGB color value of #FFE0FFFF</summary>
        </member>
        <member name="P:Eto.Drawing.Pens.PaleTurquoise">
            <summary>Gets a pen with a thickness of 1 and ARGB color value of #FFAFEEEE</summary>
        </member>
        <member name="P:Eto.Drawing.Pens.Aquamarine">
            <summary>Gets a pen with a thickness of 1 and ARGB color value of #FF7FFFD4</summary>
        </member>
        <member name="P:Eto.Drawing.Pens.Turquoise">
            <summary>Gets a pen with a thickness of 1 and ARGB color value of #FF40E0D0</summary>
        </member>
        <member name="P:Eto.Drawing.Pens.MediumTurquoise">
            <summary>Gets a pen with a thickness of 1 and ARGB color value of #FF48D1CC</summary>
        </member>
        <member name="P:Eto.Drawing.Pens.DarkTurquoise">
            <summary>Gets a pen with a thickness of 1 and ARGB color value of #FF00CED1</summary>
        </member>
        <member name="P:Eto.Drawing.Pens.CadetBlue">
            <summary>Gets a pen with a thickness of 1 and ARGB color value of #FF5F9EA0</summary>
        </member>
        <member name="P:Eto.Drawing.Pens.SteelBlue">
            <summary>Gets a pen with a thickness of 1 and ARGB color value of #FF4682B4</summary>
        </member>
        <member name="P:Eto.Drawing.Pens.LightSteelBlue">
            <summary>Gets a pen with a thickness of 1 and ARGB color value of #FFB0C4DE</summary>
        </member>
        <member name="P:Eto.Drawing.Pens.PowderBlue">
            <summary>Gets a pen with a thickness of 1 and ARGB color value of #FFB0E0E6</summary>
        </member>
        <member name="P:Eto.Drawing.Pens.LightBlue">
            <summary>Gets a pen with a thickness of 1 and ARGB color value of #FFADD8E6</summary>
        </member>
        <member name="P:Eto.Drawing.Pens.SkyBlue">
            <summary>Gets a pen with a thickness of 1 and ARGB color value of #FF87CEEB</summary>
        </member>
        <member name="P:Eto.Drawing.Pens.LightSkyBlue">
            <summary>Gets a pen with a thickness of 1 and ARGB color value of #FF87CEFA</summary>
        </member>
        <member name="P:Eto.Drawing.Pens.DeepSkyBlue">
            <summary>Gets a pen with a thickness of 1 and ARGB color value of #FF00BFFF</summary>
        </member>
        <member name="P:Eto.Drawing.Pens.DodgerBlue">
            <summary>Gets a pen with a thickness of 1 and ARGB color value of #FF1E90FF</summary>
        </member>
        <member name="P:Eto.Drawing.Pens.CornflowerBlue">
            <summary>Gets a pen with a thickness of 1 and ARGB color value of #FF6495ED</summary>
        </member>
        <member name="P:Eto.Drawing.Pens.RoyalBlue">
            <summary>Gets a pen with a thickness of 1 and ARGB color value of #FF4169E1</summary>
        </member>
        <member name="P:Eto.Drawing.Pens.Blue">
            <summary>Gets a pen with a thickness of 1 and ARGB color value of #FF0000FF</summary>
        </member>
        <member name="P:Eto.Drawing.Pens.MediumBlue">
            <summary>Gets a pen with a thickness of 1 and ARGB color value of #FF0000CD</summary>
        </member>
        <member name="P:Eto.Drawing.Pens.DarkBlue">
            <summary>Gets a pen with a thickness of 1 and ARGB color value of #FF00008B</summary>
        </member>
        <member name="P:Eto.Drawing.Pens.Navy">
            <summary>Gets a pen with a thickness of 1 and ARGB color value of #FF000080</summary>
        </member>
        <member name="P:Eto.Drawing.Pens.MidnightBlue">
            <summary>Gets a pen with a thickness of 1 and ARGB color value of #FF191970</summary>
        </member>
        <member name="P:Eto.Drawing.Pens.Cornsilk">
            <summary>Gets a pen with a thickness of 1 and ARGB color value of #FFFFF8DC</summary>
        </member>
        <member name="P:Eto.Drawing.Pens.BlanchedAlmond">
            <summary>Gets a pen with a thickness of 1 and ARGB color value of #FFFFEBCD</summary>
        </member>
        <member name="P:Eto.Drawing.Pens.Bisque">
            <summary>Gets a pen with a thickness of 1 and ARGB color value of #FFFFE4C4</summary>
        </member>
        <member name="P:Eto.Drawing.Pens.NavajoWhite">
            <summary>Gets a pen with a thickness of 1 and ARGB color value of #FFFFDEAD</summary>
        </member>
        <member name="P:Eto.Drawing.Pens.Wheat">
            <summary>Gets a pen with a thickness of 1 and ARGB color value of #FFF5DEB3</summary>
        </member>
        <member name="P:Eto.Drawing.Pens.BurlyWood">
            <summary>Gets a pen with a thickness of 1 and ARGB color value of #FFDEB887</summary>
        </member>
        <member name="P:Eto.Drawing.Pens.Tan">
            <summary>Gets a pen with a thickness of 1 and ARGB color value of #FFD2B48C</summary>
        </member>
        <member name="P:Eto.Drawing.Pens.RosyBrown">
            <summary>Gets a pen with a thickness of 1 and ARGB color value of #FFBC8F8F</summary>
        </member>
        <member name="P:Eto.Drawing.Pens.SandyBrown">
            <summary>Gets a pen with a thickness of 1 and ARGB color value of #FFF4A460</summary>
        </member>
        <member name="P:Eto.Drawing.Pens.Goldenrod">
            <summary>Gets a pen with a thickness of 1 and ARGB color value of #FFDAA520</summary>
        </member>
        <member name="P:Eto.Drawing.Pens.DarkGoldenrod">
            <summary>Gets a pen with a thickness of 1 and ARGB color value of #FFB8860B</summary>
        </member>
        <member name="P:Eto.Drawing.Pens.Peru">
            <summary>Gets a pen with a thickness of 1 and ARGB color value of #FFCD853F</summary>
        </member>
        <member name="P:Eto.Drawing.Pens.Chocolate">
            <summary>Gets a pen with a thickness of 1 and ARGB color value of #FFD2691E</summary>
        </member>
        <member name="P:Eto.Drawing.Pens.SaddleBrown">
            <summary>Gets a pen with a thickness of 1 and ARGB color value of #FF8B4513</summary>
        </member>
        <member name="P:Eto.Drawing.Pens.Sienna">
            <summary>Gets a pen with a thickness of 1 and ARGB color value of #FFA0522D</summary>
        </member>
        <member name="P:Eto.Drawing.Pens.Brown">
            <summary>Gets a pen with a thickness of 1 and ARGB color value of #FFA52A2A</summary>
        </member>
        <member name="P:Eto.Drawing.Pens.Maroon">
            <summary>Gets a pen with a thickness of 1 and ARGB color value of #FF800000</summary>
        </member>
        <member name="P:Eto.Drawing.Pens.White">
            <summary>Gets a pen with a thickness of 1 and ARGB color value of #FFFFFFFF</summary>
        </member>
        <member name="P:Eto.Drawing.Pens.Snow">
            <summary>Gets a pen with a thickness of 1 and ARGB color value of #FFFFFAFA</summary>
        </member>
        <member name="P:Eto.Drawing.Pens.Honeydew">
            <summary>Gets a pen with a thickness of 1 and ARGB color value of #FFF0FFF0</summary>
        </member>
        <member name="P:Eto.Drawing.Pens.MintCream">
            <summary>Gets a pen with a thickness of 1 and ARGB color value of #FFF5FFFA</summary>
        </member>
        <member name="P:Eto.Drawing.Pens.Azure">
            <summary>Gets a pen with a thickness of 1 and ARGB color value of #FFF0FFFF</summary>
        </member>
        <member name="P:Eto.Drawing.Pens.AliceBlue">
            <summary>Gets a pen with a thickness of 1 and ARGB color value of #FFF0F8FF</summary>
        </member>
        <member name="P:Eto.Drawing.Pens.GhostWhite">
            <summary>Gets a pen with a thickness of 1 and ARGB color value of #FFF8F8FF</summary>
        </member>
        <member name="P:Eto.Drawing.Pens.WhiteSmoke">
            <summary>Gets a pen with a thickness of 1 and ARGB color value of #FFF5F5F5</summary>
        </member>
        <member name="P:Eto.Drawing.Pens.Seashell">
            <summary>Gets a pen with a thickness of 1 and ARGB color value of #FFFFF5EE</summary>
        </member>
        <member name="P:Eto.Drawing.Pens.Beige">
            <summary>Gets a pen with a thickness of 1 and ARGB color value of #FFF5F5DC</summary>
        </member>
        <member name="P:Eto.Drawing.Pens.OldLace">
            <summary>Gets a pen with a thickness of 1 and ARGB color value of #FFFDF5E6</summary>
        </member>
        <member name="P:Eto.Drawing.Pens.FloralWhite">
            <summary>Gets a pen with a thickness of 1 and ARGB color value of #FFFFFAF0</summary>
        </member>
        <member name="P:Eto.Drawing.Pens.Ivory">
            <summary>Gets a pen with a thickness of 1 and ARGB color value of #FFFFFFF0</summary>
        </member>
        <member name="P:Eto.Drawing.Pens.AntiqueWhite">
            <summary>Gets a pen with a thickness of 1 and ARGB color value of #FFFAEBD7</summary>
        </member>
        <member name="P:Eto.Drawing.Pens.Linen">
            <summary>Gets a pen with a thickness of 1 and ARGB color value of #FFFAF0E6</summary>
        </member>
        <member name="P:Eto.Drawing.Pens.LavenderBlush">
            <summary>Gets a pen with a thickness of 1 and ARGB color value of #FFFFF0F5</summary>
        </member>
        <member name="P:Eto.Drawing.Pens.MistyRose">
            <summary>Gets a pen with a thickness of 1 and ARGB color value of #FFFFE4E1</summary>
        </member>
        <member name="P:Eto.Drawing.Pens.Gainsboro">
            <summary>Gets a pen with a thickness of 1 and ARGB color value of #FFDCDCDC</summary>
        </member>
        <member name="P:Eto.Drawing.Pens.LightGrey">
            <summary>Gets a pen with a thickness of 1 and ARGB color value of #FFD3D3D3</summary>
        </member>
        <member name="P:Eto.Drawing.Pens.Silver">
            <summary>Gets a pen with a thickness of 1 and ARGB color value of #FFC0C0C0</summary>
        </member>
        <member name="P:Eto.Drawing.Pens.DarkGray">
            <summary>Gets a pen with a thickness of 1 and ARGB color value of #FFA9A9A9</summary>
        </member>
        <member name="P:Eto.Drawing.Pens.Gray">
            <summary>Gets a pen with a thickness of 1 and ARGB color value of #FF808080</summary>
        </member>
        <member name="P:Eto.Drawing.Pens.DimGray">
            <summary>Gets a pen with a thickness of 1 and ARGB color value of #FF696969</summary>
        </member>
        <member name="P:Eto.Drawing.Pens.LightSlateGray">
            <summary>Gets a pen with a thickness of 1 and ARGB color value of #FF778899</summary>
        </member>
        <member name="P:Eto.Drawing.Pens.SlateGray">
            <summary>Gets a pen with a thickness of 1 and ARGB color value of #FF708090</summary>
        </member>
        <member name="P:Eto.Drawing.Pens.DarkSlateGray">
            <summary>Gets a pen with a thickness of 1 and ARGB color value of #FF2F4F4F</summary>
        </member>
        <member name="P:Eto.Drawing.Pens.Black">
            <summary>Gets a pen with a thickness of 1 and ARGB color value of #FF000000</summary>
        </member>
        <member name="T:Eto.Drawing.PixelOffsetMode">
            <summary>
            Enumeration of the pixel offset modes of a <see cref="T:Eto.Drawing.Graphics"/>
            </summary>
            <remarks>
            The pixel offset mode applies to all Draw* graphics operations such as 
            <see cref="M:Eto.Drawing.Graphics.DrawLine(Eto.Drawing.Pen,Eto.Drawing.PointF,Eto.Drawing.PointF)"/>, <see cref="M:Eto.Drawing.Graphics.DrawRectangle(Eto.Drawing.Pen,Eto.Drawing.RectangleF)"/>, etc.
            </remarks>
            <copyright>(c) 2014 by Curtis Wensley</copyright>
            <license type="BSD-3">See LICENSE for full terms</license>
        </member>
        <member name="F:Eto.Drawing.PixelOffsetMode.None">
            <summary>
            Specifies that pixels will not be offset and be relative to the center of each pixel.
            </summary>
            <remarks>
            This simplifies drawing odd-width lines by aligning them to the pixel boundary.
            </remarks>
        </member>
        <member name="F:Eto.Drawing.PixelOffsetMode.Half">
            <summary>
            Specifies that pixels are offset by half a pixel (-0.5) in both the horizontal and vertical axes. Use for high speed.
            </summary>
            <remarks>
            In this mode, the center of lines will be at the point between logical pixels and can improve performance with some platforms. 
            Horizontal or vertical lines that are not a fraction will typically be antialiased.
            For example, to draw a 1px wide horizontal line without antialiasing, you would have to draw at a 0.5 offset in the vertical axis.
            
            Only Draw operations are offset with this mode, Fill operations will not be offset. (new in 2.1)
            For example, filling a rectangle from 10, 10 to 20, 20 will not be antialiased and fall on (logical) pixel boundaries.
            </remarks>
        </member>
        <member name="T:Eto.Drawing.Point">
            <summary>
            A struct representing X and Y co-ordinates as integer values
            </summary>
            <remarks>
            The point struct is used for drawing and positioning of elements and widgets
            </remarks>
            <copyright>(c) 2014 by Curtis Wensley</copyright>
            <license type="BSD-3">See LICENSE for full terms</license>
        </member>
        <member name="F:Eto.Drawing.Point.Empty">
            <summary>
            Gets an empty point with an X and Y value of zero
            </summary>
        </member>
        <member name="M:Eto.Drawing.Point.Truncate(Eto.Drawing.PointF)">
            <summary>
            Truncates the X and Y components of the specified <paramref name="point"/> to a <see cref="T:Eto.Drawing.Point"/>
            </summary>
            <param name="point">Floating point value to truncate</param>
            <returns>A new instance of a Point with truncated X and Y values of the specified <paramref name="point"/></returns>
        </member>
        <member name="M:Eto.Drawing.Point.Round(Eto.Drawing.PointF)">
            <summary>
            Rounds the X and Y components of the specified <paramref name="point"/> to a <see cref="T:Eto.Drawing.Point"/>
            </summary>
            <param name="point">Floating point value to round</param>
            <returns>A new instance of a Point with rounded X and Y values of the specified <paramref name="point"/></returns>
        </member>
        <member name="M:Eto.Drawing.Point.Min(Eto.Drawing.Point,Eto.Drawing.Point)">
            <summary>
            Returns the minimum X and Y components of two points
            </summary>
            <param name="point1">First point</param>
            <param name="point2">Second point</param>
            <returns>A new point with the minimum X and Y values of the two points</returns>
        </member>
        <member name="M:Eto.Drawing.Point.Max(Eto.Drawing.Point,Eto.Drawing.Point)">
            <summary>
            Returns the maximum X and Y components of two points
            </summary>
            <param name="point1">First point</param>
            <param name="point2">Second point</param>
            <returns>A new point with the maximum X and Y values of the two points</returns>
        </member>
        <member name="M:Eto.Drawing.Point.Abs(Eto.Drawing.Point)">
            <summary>
            Returns the absolute X and Y components of the specified <paramref name="point"/>
            </summary>
            <param name="point">Point with positive or negative X and/or Y values</param>
            <returns>A new point with absolute (positive) X and Y values of the specified <paramref name="point"/></returns>
        </member>
        <member name="M:Eto.Drawing.Point.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a Point class with specified <paramref name="x"/> and <paramref name="y"/> values
            </summary>
            <param name="x">Initial X value for the point</param>
            <param name="y">Initial Y value for the point</param>
        </member>
        <member name="M:Eto.Drawing.Point.#ctor(Eto.Drawing.Size)">
            <summary>
            Initializes a new instance of a Point class with <see cref="P:Eto.Drawing.Point.X"/> and <see cref="P:Eto.Drawing.Point.Y"/> values corresponding to the <see cref="P:Eto.Drawing.Size.Width"/> and <see cref="P:Eto.Drawing.Size.Height"/> values 
            of the specified <paramref name="size"/>, respecitively
            </summary>
            <param name="size">Size to initialize the X and Y values of the new instance with</param>
        </member>
        <member name="M:Eto.Drawing.Point.#ctor(Eto.Drawing.PointF)">
            <summary>
            Initializes a new instance of a Point class with truncated values of the specified floating-point <paramref name="point"/>
            </summary>
            <param name="point">PointF to initialize the X and Y values of the new instance with</param>
        </member>
        <member name="P:Eto.Drawing.Point.X">
            <summary>
            Gets or sets the X co-ordinate of this point
            </summary>
        </member>
        <member name="P:Eto.Drawing.Point.Y">
            <summary>
            Gets or sets the Y co-ordinate of this point
            </summary>
        </member>
        <member name="P:Eto.Drawing.Point.Normal">
            <summary>
            Gets the point as a normal vector (perpendicular) to the current point from the origin
            </summary>
            <value>The normal vector of this point</value>
        </member>
        <member name="M:Eto.Drawing.Point.UnitVectorAtAngle(System.Single)">
            <summary>
            Creates a unit vector PointF (a point with a <see cref="P:Eto.Drawing.Point.Length"/> of 1.0 from origin 0,0) with the specified angle, in degrees
            </summary>
            <returns>A new instance of a PointF with the x,y co-ordinates set at a distance of 1.0 from the origin</returns>
            <param name="angle">Angle in degrees of the unit vector</param>
        </member>
        <member name="P:Eto.Drawing.Point.UnitVector">
            <summary>
            Gets the current point as a unit vector (a point with a <see cref="P:Eto.Drawing.Point.Length"/> of 1.0 from origin 0,0)
            </summary>
            <value>The unit vector equivalent of this point's X and Y coordinates</value>
        </member>
        <member name="P:Eto.Drawing.Point.Length">
            <summary>
            Gets the length of the point as a vector from origin 0,0
            </summary>
            <value>The length of this point as a vector</value>
        </member>
        <member name="P:Eto.Drawing.Point.LengthSquared">
            <summary>
            Gets the squared length of the point as a vector from origin 0,0.
            </summary>
            <value>The length of the squared.</value>
        </member>
        <member name="P:Eto.Drawing.Point.IsZero">
            <summary>
            Gets a value indicating that both the X and Y co-ordinates of this point are zero
            </summary>
        </member>
        <member name="M:Eto.Drawing.Point.Distance(Eto.Drawing.Point)">
            <summary>
            Gets the distance between this point and the specified <paramref name="point"/>
            </summary>
            <param name="point">Point to calculate the distance from</param>
        </member>
        <member name="M:Eto.Drawing.Point.Distance(Eto.Drawing.Point,Eto.Drawing.Point)">
            <summary>
            Gets the distance between two points using pythagoras theorem
            </summary>
            <param name="point1">First point to calculate the distance from</param>
            <param name="point2">Second point to calculate the distance to</param>
            <returns>The distance between the two points</returns>
        </member>
        <member name="M:Eto.Drawing.Point.Restrict(Eto.Drawing.Rectangle)">
            <summary>
            Restricts the X and Y co-ordinates within the specified <paramref name="rectangle"/>
            </summary>
            <remarks>
            This will update the X and Y co-ordinates to be within the specified <paramref name="rectangle"/>'s bounds.
            The updated co-ordinates will be the closest to the original value as possible.
            E.g. if the X co-ordinate is greater than the <see cref="P:Eto.Drawing.Rectangle.Right"/> of the rectangle, it will be set
            to be <see cref="P:Eto.Drawing.Rectangle.Right"/> minus one, to be within the rectangle's bounds.
            </remarks>
            <param name="rectangle">Rectangle to restrict the X and Y co-ordinates in</param>
        </member>
        <member name="M:Eto.Drawing.Point.Restrict(Eto.Drawing.Point,Eto.Drawing.Rectangle)">
            <summary>
            Restricts the X and Y co-ordinates of the specified <paramref name="point"/> within the <paramref name="rectangle"/>
            </summary>
            <param name="point">Point to restrict</param>
            <param name="rectangle">Rectangle to restrict the point within</param>
            <returns>A new point that falls within the <paramref name="rectangle"/></returns>
        </member>
        <member name="M:Eto.Drawing.Point.Offset(System.Int32,System.Int32)">
            <summary>
            Offsets the X and Y co-ordinates of this point by the specified <paramref name="x"/> and <paramref name="y"/> values
            </summary>
            <param name="x">Value to add to the X co-ordinate of this point</param>
            <param name="y">Value to add to the Y co-ordinate of this point</param>
        </member>
        <member name="M:Eto.Drawing.Point.Offset(Eto.Drawing.Point)">
            <summary>
            Offsets the X and Y co-ordinates of this point by the values from the specified <paramref name="point"/>
            </summary>
            <param name="point">Point with X and Y values to add to this point</param>
        </member>
        <member name="M:Eto.Drawing.Point.Offset(Eto.Drawing.Point,System.Int32,System.Int32)">
            <summary>
            Offsets the X and Y co-ordinates of the <paramref name="point"/> by the specified <paramref name="x"/> and <paramref name="y"/> values
            </summary>
            <param name="point">Point to offset</param>
            <param name="x">Value to add to the X co-ordinate of this point</param>
            <param name="y">Value to add to the Y co-ordinate of this point</param>
            <returns>A new point with the offset X and Y values</returns>
        </member>
        <member name="M:Eto.Drawing.Point.Offset(Eto.Drawing.Point,Eto.Drawing.Point)">
            <summary>
            Offsets the X and Y co-ordinates of the <paramref name="point"/> by the values from the specified <paramref name="offset"/>
            </summary>
            <param name="point">Point to offset</param>
            <param name="offset">Point with X and Y values to add to this point</param>
            <returns>A new point offset by the specified value</returns>
        </member>
        <member name="M:Eto.Drawing.Point.DotProduct(Eto.Drawing.Point)">
            <summary>
            Gets the dot product of this instance and the specified <paramref name="point"/>
            </summary>
            <param name="point">Point to get the dot product for</param>
            <returns>The dot product (X * point.X + Y * point.Y) between this point and the specified point</returns>
        </member>
        <member name="M:Eto.Drawing.Point.DotProduct(Eto.Drawing.Point,Eto.Drawing.Point)">
            <summary>
            Gets the dot product between two points
            </summary>
            <param name="point1">First point to get the dot product</param>
            <param name="point2">Second point to get the dot product</param>
            <returns>The dot product (point1.X * point2.X + poin1.Y * point2.Y) between the two points</returns>
        </member>
        <member name="M:Eto.Drawing.Point.op_UnaryNegation(Eto.Drawing.Point)">
            <summary>
            Returns a new Point with negative x and y values of the specified <paramref name="point"/>
            </summary>
            <param name="point">Point to negate</param>
        </member>
        <member name="M:Eto.Drawing.Point.op_Subtraction(Eto.Drawing.Point,Eto.Drawing.Point)">
            <summary>
            Operator to return the difference between two points as a <see cref="T:Eto.Drawing.Size"/>
            </summary>
            <param name="point1">Base point value</param>
            <param name="point2">Point to subtract</param>
            <returns>A new instance of a Size with the X and Y equal to the difference of the X and Y co-ordinates, respectively</returns>
        </member>
        <member name="M:Eto.Drawing.Point.op_Addition(Eto.Drawing.Point,Eto.Drawing.Point)">
            <summary>
            Operator to return the addition of two points as a <see cref="T:Eto.Drawing.Point"/>
            </summary>
            <param name="point1">Base point value</param>
            <param name="point2">Point to add</param>
            <returns>A new instance of a Point with the X and Y equal to the sum of the two point's X and Y co-ordinates, respectively</returns>
        </member>
        <member name="M:Eto.Drawing.Point.op_Addition(Eto.Drawing.Point,Eto.Drawing.Size)">
            <summary>
            Operator to add a size to a point
            </summary>
            <param name="point">Base point value</param>
            <param name="size">Size to add to the point's X and Y co-ordinates</param>
            <returns>A new point with the sum of the specified <paramref name="point"/>'s X and Y components and the <paramref name="size"/></returns>
        </member>
        <member name="M:Eto.Drawing.Point.op_Subtraction(Eto.Drawing.Point,Eto.Drawing.Size)">
            <summary>
            Operator to subtract a size from a point
            </summary>
            <param name="point">Base point value</param>
            <param name="size">Size to subtract to the point's X and Y co-ordinates</param>
            <returns>A new point with the sum of the specified <paramref name="point"/>'s X and Y components and the <paramref name="size"/></returns>
        </member>
        <member name="M:Eto.Drawing.Point.op_Addition(Eto.Drawing.Point,System.Int32)">
            <summary>
            Operator to add a <paramref name="value"/> to both the X and Y co-ordinates of a point
            </summary>
            <param name="point">Base point value</param>
            <param name="value">Value to add to both the X and Y co-ordinates of the point</param>
            <returns>A new instance of a point with the sum of the <paramref name="point"/>'s X and Y co-ordinates and the specified <paramref name="value"/></returns>
        </member>
        <member name="M:Eto.Drawing.Point.op_Subtraction(Eto.Drawing.Point,System.Int32)">
            <summary>
            Operator to subtract a <paramref name="value"/> from both the X and Y co-ordinates of a point
            </summary>
            <param name="point">Base point value</param>
            <param name="value">Value to subtract to both the X and Y co-ordinates of the point</param>
            <returns>A new instance of a point with the value of the <paramref name="point"/>'s X and Y co-ordinates minus the specified <paramref name="value"/></returns>
        </member>
        <member name="M:Eto.Drawing.Point.op_Equality(Eto.Drawing.Point,Eto.Drawing.Point)">
            <summary>
            Determines equality between two points
            </summary>
            <remarks>
            Equality is when both the X and Y values of both points are equal
            </remarks>
            <param name="point1">First point to compare</param>
            <param name="point2">Second point to compare</param>
            <returns>True if both points are equal, false if not</returns>
        </member>
        <member name="M:Eto.Drawing.Point.op_Inequality(Eto.Drawing.Point,Eto.Drawing.Point)">
            <summary>
            Determines the inequality between two points
            </summary>
            <remarks>
            Inequality is when either the X and Y values of both points are different
            </remarks>
            <param name="point1">First point to compare</param>
            <param name="point2">Second point to compare</param>
            <returns>True if the two points are not equal, false if not</returns>
        </member>
        <member name="M:Eto.Drawing.Point.op_Multiply(Eto.Drawing.Point,Eto.Drawing.Size)">
            <summary>
            Multiplies the specified <paramref name="point"/> with a <paramref name="size"/>
            </summary>
            <param name="point">Base point value</param>
            <param name="size">Size to multiply the X and Y co-ordinates with the Width and Height of the <paramref name="size"/>, respectively</param>
            <returns>A new instance of a point with the product of the specified <paramref name="point"/> and <paramref name="size"/></returns>
        </member>
        <member name="M:Eto.Drawing.Point.op_Multiply(Eto.Drawing.Point,Eto.Drawing.Point)">
            <summary>Multiplies the X and Y co-ordinates of the two specified point values</summary>
            <param name="point1">First point to multiply</param>
            <param name="point2">Secont point to multiply</param>
        </member>
        <member name="M:Eto.Drawing.Point.op_Division(Eto.Drawing.Point,Eto.Drawing.Size)">
            <summary>
            Divides the specified <paramref name="point"/> with a <paramref name="size"/>
            </summary>
            <param name="point">Base point value</param>
            <param name="size">Size to divide the X and Y co-ordinates with the Width and Height of the <paramref name="size"/>, respectively</param>
            <returns>A new instance of a point with the division of the specified <paramref name="point"/> and <paramref name="size"/></returns>
        </member>
        <member name="M:Eto.Drawing.Point.op_Multiply(Eto.Drawing.Point,System.Int32)">
            <summary>
            Multiplies the X and Y co-ordinates of the specified <paramref name="point"/> with a given <paramref name="factor"/>
            </summary>
            <param name="point">Base point value</param>
            <param name="factor">Value to multiply the X and Y co-ordinates with</param>
            <returns>A new instance of a point with the product of the X and Y co-ordinates of the <paramref name="point"/> and specified <paramref name="factor"/></returns>
        </member>
        <member name="M:Eto.Drawing.Point.op_Multiply(System.Int32,Eto.Drawing.Point)">
            <summary>
            Multiplies the X and Y co-ordinates of the specified <paramref name="point"/> with a given <paramref name="factor"/>
            </summary>
            <param name="point">Base point value</param>
            <param name="factor">Value to multiply the X and Y co-ordinates with</param>
            <returns>A new instance of a point with the product of the X and Y co-ordinates of the <paramref name="point"/> and specified <paramref name="factor"/></returns>
        </member>
        <member name="M:Eto.Drawing.Point.op_Multiply(Eto.Drawing.Point,System.Single)">
            <summary>
            Multiplies the <see cref="P:Eto.Drawing.Point.X"/> and <see cref="P:Eto.Drawing.Point.Y"/> of a <paramref name="point"/> by the specified floating point <paramref name="factor"/>
            </summary>
            <param name="point">Point to multiply</param>
            <param name="factor">Factor to multiply both the X and Y coordinates by</param>
            <returns>A new instance of a PointF struct with the product of the <paramref name="point"/> and <paramref name="factor"/></returns>
        </member>
        <member name="M:Eto.Drawing.Point.op_Division(Eto.Drawing.Point,System.Int32)">
            <summary>
            Divides the X and Y co-ordinates of the specified <paramref name="point"/> with a given <paramref name="value"/>
            </summary>
            <param name="point">Base point value</param>
            <param name="value">Value to divide the X and Y co-ordinates with</param>
            <returns>A new instance of a point with the division of the X and Y co-ordinates of the <paramref name="point"/> and specified <paramref name="value"/></returns>
        </member>
        <member name="M:Eto.Drawing.Point.op_Explicit(Eto.Drawing.PointF)~Eto.Drawing.Point">
            <summary>
            Explicit conversion from a <see cref="T:Eto.Drawing.PointF"/> to a <see cref="T:Eto.Drawing.Point"/> by truncating values
            </summary>
            <param name="point">Point to convert</param>
            <returns>A new instance of a Point with the value of the specified <paramref name="point"/></returns>
        </member>
        <member name="M:Eto.Drawing.Point.op_Explicit(Eto.Drawing.Size)~Eto.Drawing.Point">
            <summary>
            Explicit conversion from a <paramref name="size"/> to a Point with a X and Y of the Width and Height values of the size, respectively
            </summary>
            <param name="size">Size to convert</param>
            <returns>A new size with the width and height of the X and Y values of the point, respectively</returns>
        </member>
        <member name="M:Eto.Drawing.Point.Equals(System.Object)">
            <summary>
            Returns a value indicating that the specified <paramref name="obj"/> is equal to this point
            </summary>
            <param name="obj">Object to compare</param>
            <returns>True if the specified <paramref name="obj"/> is a Point and is equal to this instance, false otherwise</returns>
        </member>
        <member name="M:Eto.Drawing.Point.GetHashCode">
            <summary>
            Gets the hash code of this point
            </summary>
            <returns>Hash code for this point</returns>
        </member>
        <member name="M:Eto.Drawing.Point.ToString">
            <summary>
            Converts this point to a string
            </summary>
            <returns>String representation of this point</returns>
        </member>
        <member name="M:Eto.Drawing.Point.Equals(Eto.Drawing.Point)">
            <summary>
            Returns a value indicating that the specified <paramref name="other"/> point is equal to this point
            </summary>
            <param name="other">Other point to compare</param>
            <returns>True if the other point is equal to this point, otherwise false</returns>
        </member>
        <member name="T:Eto.Drawing.PointConverter">
            <summary>
            Converter for the <see cref="T:Eto.Drawing.Point"/> class
            </summary>
            <remarks>
            Allows conversion from a string to a <see cref="T:Eto.Drawing.Point"/> via json/xaml or other sources.
            </remarks>
            <copyright>(c) 2014 by Curtis Wensley</copyright>
            <license type="BSD-3">See LICENSE for full terms</license>
        </member>
        <member name="F:Eto.Drawing.PointConverter.DimensionSplitter">
            <summary>
            The character to split up the string which will be converted
            </summary>
        </member>
        <member name="M:Eto.Drawing.PointConverter.CanConvertFrom(Eto.ITypeDescriptorContext,System.Type)">
            <summary>
            Determines if this converter can convert from the specified <paramref name="sourceType"/>
            </summary>
            <param name="context">Conversion context</param>
            <param name="sourceType">Type to convert from</param>
            <returns>True if this converter can convert from the specified type, false otherwise</returns>
        </member>
        <member name="M:Eto.Drawing.PointConverter.ConvertFrom(Eto.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts the specified value to a <see cref="T:Eto.Drawing.Point"/>
            </summary>
            <param name="context">Conversion context</param>
            <param name="culture">Culture to perform the conversion</param>
            <param name="value">Value to convert</param>
            <returns>A new instance of a <see cref="T:Eto.Drawing.Point"/> converted from the specified <paramref name="value"/></returns>
        </member>
        <member name="T:Eto.Drawing.PointF">
            <summary>
            A struct representing X and Y co-ordinates as floating point values
            </summary>
            <remarks>
            The point struct is used for drawing and positioning of elements and widgets
            </remarks>
            <copyright>(c) 2014 by Curtis Wensley</copyright>
            <license type="BSD-3">See LICENSE for full terms</license>
        </member>
        <member name="F:Eto.Drawing.PointF.Empty">
            <summary>
            Gets an empty point with an X and Y value of zero
            </summary>
        </member>
        <member name="M:Eto.Drawing.PointF.Min(Eto.Drawing.PointF,Eto.Drawing.PointF)">
            <summary>
            Returns the minimum X and Y components of two points
            </summary>
            <param name="point1">First point</param>
            <param name="point2">Second point</param>
            <returns>A new point with the minimum X and Y values of the two points</returns>
        </member>
        <member name="M:Eto.Drawing.PointF.Max(Eto.Drawing.PointF,Eto.Drawing.PointF)">
            <summary>
            Returns the maximum X and Y components of two points
            </summary>
            <param name="point1">First point</param>
            <param name="point2">Second point</param>
            <returns>A new point with the maximum X and Y values of the two points</returns>
        </member>
        <member name="M:Eto.Drawing.PointF.Abs(Eto.Drawing.PointF)">
            <summary>
            Returns the absolute X and Y components of the specified <paramref name="point"/>
            </summary>
            <param name="point">Point with positive or negative X and/or Y values</param>
            <returns>A new point with absolute (positive) X and Y values of the specified <paramref name="point"/></returns>
        </member>
        <member name="M:Eto.Drawing.PointF.#ctor(System.Single,System.Single)">
            <summary>
            Initializes a new instance of a Point class with specified <paramref name="x"/> and <paramref name="y"/> values
            </summary>
            <param name="x">Initial X value for the point</param>
            <param name="y">Initial Y value for the point</param>
        </member>
        <member name="M:Eto.Drawing.PointF.#ctor(Eto.Drawing.SizeF)">
            <summary>
            Initializes a new instance of a Point class with <see cref="P:Eto.Drawing.PointF.X"/> and <see cref="P:Eto.Drawing.PointF.Y"/> values corresponding to the <see cref="P:Eto.Drawing.Size.Width"/> and <see cref="P:Eto.Drawing.Size.Height"/> values 
            of the specified <paramref name="size"/>, respecitively
            </summary>
            <param name="size">Size to initialize the X and Y values of the new instance with</param>
        </member>
        <member name="M:Eto.Drawing.PointF.#ctor(Eto.Drawing.Point)">
            <summary>
            Initializes a new instance of a PointF class with values of the Point<paramref name="point"/>
            </summary>
            <param name="point">Point to initialize the X and Y values of the new instance with</param>
        </member>
        <member name="P:Eto.Drawing.PointF.X">
            <summary>
            Gets or sets the X co-ordinate of this point
            </summary>
        </member>
        <member name="P:Eto.Drawing.PointF.Y">
            <summary>
            Gets or sets the Y co-ordinate of this point
            </summary>
        </member>
        <member name="P:Eto.Drawing.PointF.Normal">
            <summary>
            Gets the point as a normal vector (perpendicular) to the current point from the origin
            </summary>
            <value>The normal vector of this point</value>
        </member>
        <member name="M:Eto.Drawing.PointF.UnitVectorAtAngle(System.Single)">
            <summary>
            Creates a unit vector PointF (a point with a <see cref="P:Eto.Drawing.PointF.Length"/> of 1.0 from origin 0,0) with the specified angle, in degrees
            </summary>
            <returns>A new instance of a PointF with the x,y co-ordinates set at a distance of 1.0 from the origin</returns>
            <param name="angle">Angle in degrees of the unit vector</param>
        </member>
        <member name="P:Eto.Drawing.PointF.UnitVector">
            <summary>
            Gets the current point as a unit vector (a point with a <see cref="P:Eto.Drawing.PointF.Length"/> of 1.0 from origin 0,0)
            </summary>
            <value>The unit vector equivalent of this point's X and Y coordinates</value>
        </member>
        <member name="M:Eto.Drawing.PointF.AngleTo(Eto.Drawing.PointF)">
            <summary>
            Gets the angle of the width/height as a vector from the specified <paramref name="destination"/>.
            </summary>
            <param name="destination">Destination point to determine the angle</param> 
            <value>The angle in degrees between this point and <paramref name="destination"/></value>
        </member>
        <member name="M:Eto.Drawing.PointF.LengthTo(Eto.Drawing.PointF)">
            <summary>
            Gets the length between this point and the <paramref name="destination"/> point.
            </summary>
            <returns>The length between this instance and the <paramref name="destination"/> .</returns>
            <param name="destination">Point to determine the length to.</param>
        </member>
        <member name="P:Eto.Drawing.PointF.Angle">
            <summary>
            Gets the angle of the point as a vector from origin 0,0.
            </summary>
            <value>The angle of this point as a vector.</value>
        </member>
        <member name="P:Eto.Drawing.PointF.Length">
            <summary>
            Gets the length of the point as a vector from origin 0,0
            </summary>
            <value>The length of this point as a vector</value>
        </member>
        <member name="P:Eto.Drawing.PointF.LengthSquared">
            <summary>
            Gets the squared length of the point as a vector from origin 0,0.
            </summary>
            <value>The length of the squared.</value>
        </member>
        <member name="P:Eto.Drawing.PointF.IsZero">
            <summary>
            Gets a value indicating that both the X and Y co-ordinates of this point are zero
            </summary>
        </member>
        <member name="M:Eto.Drawing.PointF.Distance(Eto.Drawing.PointF)">
            <summary>
            Gets the distance between this point and the specified <paramref name="point"/>
            </summary>
            <param name="point">Point to calculate the distance from</param>
        </member>
        <member name="M:Eto.Drawing.PointF.Distance(Eto.Drawing.PointF,Eto.Drawing.PointF)">
            <summary>
            Gets the distance between two points using pythagoras theorem
            </summary>
            <param name="point1">First point to calculate the distance from</param>
            <param name="point2">Second point to calculate the distance to</param>
            <returns>The distance between the two points</returns>
        </member>
        <member name="M:Eto.Drawing.PointF.Restrict(Eto.Drawing.RectangleF)">
            <summary>
            Restricts the X and Y co-ordinates within the specified <paramref name="rectangle"/>
            </summary>
            <remarks>
            This will update the X and Y co-ordinates to be within the specified <paramref name="rectangle"/>'s bounds.
            The updated co-ordinates will be the closest to the original value as possible.
            E.g. if the X co-ordinate is greater than the <see cref="P:Eto.Drawing.Rectangle.Right"/> of the rectangle, it will be set
            to be <see cref="P:Eto.Drawing.Rectangle.Right"/> minus one, to be within the rectangle's bounds.
            </remarks>
            <param name="rectangle">Rectangle to restrict the X and Y co-ordinates in</param>
        </member>
        <member name="M:Eto.Drawing.PointF.Restrict(Eto.Drawing.Point,Eto.Drawing.Rectangle)">
            <summary>
            Restricts the X and Y co-ordinates of the specified <paramref name="point"/> within the <paramref name="rectangle"/>
            </summary>
            <param name="point">Point to restrict</param>
            <param name="rectangle">Rectangle to restrict the point within</param>
            <returns>A new point that falls within the <paramref name="rectangle"/></returns>
        </member>
        <member name="M:Eto.Drawing.PointF.Offset(System.Single,System.Single)">
            <summary>
            Offsets the X and Y co-ordinates of this point by the specified <paramref name="x"/> and <paramref name="y"/> values
            </summary>
            <param name="x">Value to add to the X co-ordinate of this point</param>
            <param name="y">Value to add to the Y co-ordinate of this point</param>
        </member>
        <member name="M:Eto.Drawing.PointF.Offset(Eto.Drawing.PointF)">
            <summary>
            Offsets the X and Y co-ordinates of this point by the values from the specified <paramref name="offset"/>
            </summary>
            <param name="offset">Point with X and Y values to add to this point</param>
        </member>
        <member name="M:Eto.Drawing.PointF.Offset(Eto.Drawing.PointF,System.Single,System.Single)">
            <summary>
            Offsets the X and Y co-ordinates of the <paramref name="point"/> by the specified <paramref name="x"/> and <paramref name="y"/> values
            </summary>
            <param name="point">Point to offset</param>
            <param name="x">Value to add to the X co-ordinate of this point</param>
            <param name="y">Value to add to the Y co-ordinate of this point</param>
            <returns>A new point with the offset X and Y values</returns>
        </member>
        <member name="M:Eto.Drawing.PointF.Offset(Eto.Drawing.PointF,Eto.Drawing.PointF)">
            <summary>
            Offsets the X and Y co-ordinates of the <paramref name="point"/> by the values from the specified <paramref name="offset"/>
            </summary>
            <param name="point">Point to offset</param>
            <param name="offset">Point with X and Y values to add to this point</param>
            <returns>A new point offset by the specified value</returns>
        </member>
        <member name="M:Eto.Drawing.PointF.Rotate(System.Single)">
            <summary>
            Treats the point as a vector and rotates it around the origin (0,0) by the specified <paramref name="angle"/>.
            </summary>
            <param name="angle">Angle in degrees to rotate this point around the origin (0,0)</param>
        </member>
        <member name="M:Eto.Drawing.PointF.Rotate(Eto.Drawing.PointF,System.Single)">
            <summary>
            Treats the <paramref name="point"/> as a vector and rotates it around the origin (0,0) by the specified <paramref name="angle"/>.
            </summary>
            <param name="point">Point to rotate</param>
            <param name="angle">Angle in degrees to rotate the point around the origin (0,0)</param>
            <returns>A new point with the rotated X and Y coordinates</returns>
        </member>
        <member name="M:Eto.Drawing.PointF.DotProduct(Eto.Drawing.PointF)">
            <summary>
            Gets the dot product of this instance and the specified <paramref name="point"/>
            </summary>
            <param name="point">Point to get the dot product for</param>
            <returns>The dot product (X * point.X + Y * point.Y) between this point and the specified point</returns>
        </member>
        <member name="M:Eto.Drawing.PointF.DotProduct(Eto.Drawing.PointF,Eto.Drawing.PointF)">
            <summary>
            Gets the dot product between two points
            </summary>
            <param name="point1">First point to get the dot product</param>
            <param name="point2">Second point to get the dot product</param>
            <returns>The dot product (point1.X * point2.X + poin1.Y * point2.Y) between the two points</returns>
        </member>
        <member name="M:Eto.Drawing.PointF.op_UnaryNegation(Eto.Drawing.PointF)">
            <summary>
            Returns a new PointF with negative x and y values of the specified <paramref name="point"/>
            </summary>
            <param name="point">Point to negate</param>
        </member>
        <member name="M:Eto.Drawing.PointF.op_Subtraction(Eto.Drawing.PointF,Eto.Drawing.PointF)">
            <summary>
            Operator to return the difference between two points as a <see cref="T:Eto.Drawing.PointF"/>
            </summary>
            <param name="point1">Base point value</param>
            <param name="point2">Point to subtract</param>
            <returns>A new instance of a PointF with the X and Y equal to the difference of the X and Y co-ordinates, respectively</returns>
        </member>
        <member name="M:Eto.Drawing.PointF.op_Addition(Eto.Drawing.PointF,Eto.Drawing.PointF)">
            <summary>
            Operator to return the addition of two points as a <see cref="T:Eto.Drawing.PointF"/>
            </summary>
            <param name="point1">Base point value</param>
            <param name="point2">Point to add</param>
            <returns>A new instance of a PointF with the X and Y equal to the sum of the two point's X and Y co-ordinates, respectively</returns>
        </member>
        <member name="M:Eto.Drawing.PointF.op_Addition(Eto.Drawing.PointF,Eto.Drawing.SizeF)">
            <summary>
            Operator to add a size to a point
            </summary>
            <param name="point">Base point value</param>
            <param name="size">Size to add to the point's X and Y co-ordinates</param>
            <returns>A new point with the sum of the specified <paramref name="point"/>'s X and Y components and the <paramref name="size"/></returns>
        </member>
        <member name="M:Eto.Drawing.PointF.op_Subtraction(Eto.Drawing.PointF,Eto.Drawing.SizeF)">
            <summary>
            Operator to subtract a size from a point
            </summary>
            <param name="point">Base point value</param>
            <param name="size">Size to subtract to the point's X and Y co-ordinates</param>
            <returns>A new point with the sum of the specified <paramref name="point"/>'s X and Y components and the <paramref name="size"/></returns>
        </member>
        <member name="M:Eto.Drawing.PointF.op_Addition(Eto.Drawing.PointF,System.Single)">
            <summary>
            Operator to add a <paramref name="value"/> to both the X and Y co-ordinates of a point
            </summary>
            <param name="point">Base point value</param>
            <param name="value">Value to add to both the X and Y co-ordinates of the point</param>
            <returns>A new instance of a point with the sum of the <paramref name="point"/>'s X and Y co-ordinates and the specified <paramref name="value"/></returns>
        </member>
        <member name="M:Eto.Drawing.PointF.op_Subtraction(Eto.Drawing.PointF,System.Single)">
            <summary>
            Operator to subtract a <paramref name="value"/> from both the X and Y co-ordinates of a point
            </summary>
            <param name="point">Base point value</param>
            <param name="value">Value to subtract to both the X and Y co-ordinates of the point</param>
            <returns>A new instance of a point with the value of the <paramref name="point"/>'s X and Y co-ordinates minus the specified <paramref name="value"/></returns>
        </member>
        <member name="M:Eto.Drawing.PointF.op_Equality(Eto.Drawing.PointF,Eto.Drawing.PointF)">
            <summary>
            Determines equality between two points
            </summary>
            <remarks>
            Equality is when both the X and Y values of both points are equal
            </remarks>
            <param name="point1">First point to compare</param>
            <param name="point2">Second point to compare</param>
            <returns>True if both points are equal, false if not</returns>
        </member>
        <member name="M:Eto.Drawing.PointF.op_Inequality(Eto.Drawing.PointF,Eto.Drawing.PointF)">
            <summary>
            Determines the inequality between two points
            </summary>
            <remarks>
            Inequality is when either the X and Y values of both points are different
            </remarks>
            <param name="point1">First point to compare</param>
            <param name="point2">Second point to compare</param>
            <returns>True if the two points are not equal, false if not</returns>
        </member>
        <member name="M:Eto.Drawing.PointF.op_Multiply(Eto.Drawing.PointF,Eto.Drawing.SizeF)">
            <summary>
            Multiplies the specified <paramref name="point"/> with a <paramref name="size"/>
            </summary>
            <param name="point">Base point value</param>
            <param name="size">Size to multiply the X and Y co-ordinates with the Width and Height of the <paramref name="size"/>, respectively</param>
            <returns>A new instance of a point with the product of the specified <paramref name="point"/> and <paramref name="size"/></returns>
        </member>
        <member name="M:Eto.Drawing.PointF.op_Multiply(Eto.Drawing.PointF,Eto.Drawing.PointF)">
            <summary>Multiplies the X and Y co-ordinates of the two specified point values</summary>
            <param name="point1">First point to multiply</param>
            <param name="point2">Secont point to multiply</param>
        </member>
        <member name="M:Eto.Drawing.PointF.op_Division(Eto.Drawing.PointF,Eto.Drawing.SizeF)">
            <summary>
            Divides the specified <paramref name="point"/> with a <paramref name="size"/>
            </summary>
            <param name="point">Base point value</param>
            <param name="size">Size to divide the X and Y co-ordinates with the Width and Height of the <paramref name="size"/>, respectively</param>
            <returns>A new instance of a point with the division of the specified <paramref name="point"/> and <paramref name="size"/></returns>
        </member>
        <member name="M:Eto.Drawing.PointF.op_Multiply(Eto.Drawing.PointF,System.Single)">
            <summary>
            Multiplies the X and Y co-ordinates of the specified <paramref name="point"/> with a given <paramref name="factor"/>
            </summary>
            <param name="point">Base point value</param>
            <param name="factor">Value to multiply the X and Y co-ordinates with</param>
            <returns>A new instance of a point with the product of the X and Y co-ordinates of the <paramref name="point"/> and specified <paramref name="factor"/></returns>
        </member>
        <member name="M:Eto.Drawing.PointF.op_Multiply(System.Single,Eto.Drawing.PointF)">
            <summary>
            Multiplies the X and Y co-ordinates of the specified <paramref name="point"/> with a given <paramref name="factor"/>
            </summary>
            <param name="point">Base point value</param>
            <param name="factor">Value to multiply the X and Y co-ordinates with</param>
            <returns>A new instance of a point with the product of the X and Y co-ordinates of the <paramref name="point"/> and specified <paramref name="factor"/></returns>
        </member>
        <member name="M:Eto.Drawing.PointF.op_Division(Eto.Drawing.PointF,System.Single)">
            <summary>
            Divides the X and Y co-ordinates of the specified <paramref name="point"/> with a given <paramref name="value"/>
            </summary>
            <param name="point">Base point value</param>
            <param name="value">Value to divide the X and Y co-ordinates with</param>
            <returns>A new instance of a point with the division of the X and Y co-ordinates of the <paramref name="point"/> and specified <paramref name="value"/></returns>
        </member>
        <member name="M:Eto.Drawing.PointF.op_Implicit(Eto.Drawing.Point)~Eto.Drawing.PointF">
            <summary>
            Implicit conversion from a <see cref="T:Eto.Drawing.Point"/> to a <see cref="T:Eto.Drawing.PointF"/>
            </summary>
            <remarks>
            Since no precision is lost, this can be implicit.
            </remarks>
            <param name="point">Point to convert</param>
            <returns>A new instance of a PointF with the value of the specified <paramref name="point"/></returns>
        </member>
        <member name="M:Eto.Drawing.PointF.op_Explicit(Eto.Drawing.SizeF)~Eto.Drawing.PointF">
            <summary>
            Explicit conversion from a <paramref name="size"/> to a PointF with a X and Y of the Width and Height values of the size, respectively
            </summary>
            <param name="size">SizeF to convert</param>
            <returns>A new point with the X and Y of the width and height values of the size, respectively</returns>
        </member>
        <member name="M:Eto.Drawing.PointF.Equals(System.Object)">
            <summary>
            Returns a value indicating that the specified <paramref name="obj"/> is equal to this point
            </summary>
            <param name="obj">Object to compare</param>
            <returns>True if the specified <paramref name="obj"/> is a Point and is equal to this instance, false otherwise</returns>
        </member>
        <member name="M:Eto.Drawing.PointF.GetHashCode">
            <summary>
            Gets the hash code of this point
            </summary>
            <returns>Hash code for this point</returns>
        </member>
        <member name="M:Eto.Drawing.PointF.ToString">
            <summary>
            Converts this point to a string
            </summary>
            <returns>String representation of this point</returns>
        </member>
        <member name="M:Eto.Drawing.PointF.Equals(Eto.Drawing.PointF)">
            <summary>
            Returns a value indicating that the specified <paramref name="other"/> point is equal to this point
            </summary>
            <param name="other">Other point to compare</param>
            <returns>True if the other point is equal to this point, otherwise false</returns>
        </member>
        <member name="T:Eto.Drawing.PointFConverter">
            <summary>
            Converter for the <see cref="T:Eto.Drawing.PointF"/> class
            </summary>
            <remarks>
            Allows conversion from a string to a <see cref="T:Eto.Drawing.PointF"/> via json/xaml or other sources.
            </remarks>
            <copyright>(c) 2014 by Curtis Wensley</copyright>
            <license type="BSD-3">See LICENSE for full terms</license>
        </member>
        <member name="F:Eto.Drawing.PointFConverter.DimensionSplitter">
            <summary>
            The character to split up the string which will be converted
            </summary>
        </member>
        <member name="M:Eto.Drawing.PointFConverter.CanConvertFrom(Eto.ITypeDescriptorContext,System.Type)">
            <summary>
            Determines if this converter can convert from the specified <paramref name="sourceType"/>
            </summary>
            <param name="context">Conversion context</param>
            <param name="sourceType">Type to convert from</param>
            <returns>True if this converter can convert from the specified type, false otherwise</returns>
        </member>
        <member name="M:Eto.Drawing.PointFConverter.ConvertFrom(Eto.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts the specified value to a <see cref="T:Eto.Drawing.PointF"/>
            </summary>
            <param name="context">Conversion context</param>
            <param name="culture">Culture to perform the conversion</param>
            <param name="value">Value to convert</param>
            <returns>A new instance of a <see cref="T:Eto.Drawing.PointF"/> converted from the specified <paramref name="value"/></returns>
        </member>
        <member name="T:Eto.Drawing.RadialGradientBrush">
            <summary>
            Brush with an elliptical radial gradient from a specified origin.
            </summary>
            <remarks>
            The gradient origin must fall within the ellipse, otherwise the behavior is undefined.
            </remarks>
            <copyright>(c) 2012-2015 by Curtis Wensley</copyright>
            <license type="BSD-3">See LICENSE for full terms</license>
        </member>
        <member name="P:Eto.Drawing.RadialGradientBrush.Handler">
            <summary>
            Gets the platform handler object for the widget
            </summary>
            <value>The handler for the widget</value>
        </member>
        <member name="P:Eto.Drawing.RadialGradientBrush.Instantiator">
            <summary>
            Gets a delegate to instantiate <see cref="T:Eto.Drawing.RadialGradientBrush"/> objects
            </summary>
            <remarks>
            Use this to instantiate many objects of this type
            </remarks>
        </member>
        <member name="M:Eto.Drawing.RadialGradientBrush.#ctor(Eto.Drawing.Color,Eto.Drawing.Color,Eto.Drawing.PointF,Eto.Drawing.PointF,Eto.Drawing.SizeF)">
            <summary>
            Initializes a new instance of the <see cref="T:Eto.Drawing.RadialGradientBrush"/>.
            </summary>
            <param name="startColor">Start color from the <paramref name="gradientOrigin"/></param>
            <param name="endColor">End color at the outer edge of the ellipse</param>
            <param name="center">Center of the ellipse</param>
            <param name="gradientOrigin">Origin of the gradient.</param>
            <param name="radius">Radius of the ellipse.</param>
        </member>
        <member name="P:Eto.Drawing.RadialGradientBrush.Transform">
            <summary>
            Gets or sets the transform to apply to the gradient
            </summary>
            <value>The transform to apply to the gradient</value>
        </member>
        <member name="P:Eto.Drawing.RadialGradientBrush.Wrap">
            <summary>
            Gets or sets the wrap mode for the gradient
            </summary>
            <value>The wrap mode for the gradient</value>
        </member>
        <member name="T:Eto.Drawing.RadialGradientBrush.IHandler">
            <summary>
            Handler interface for the <see cref="T:Eto.Drawing.RadialGradientBrush"/>
            </summary>
        </member>
        <member name="M:Eto.Drawing.RadialGradientBrush.IHandler.Create(Eto.Drawing.Color,Eto.Drawing.Color,Eto.Drawing.PointF,Eto.Drawing.PointF,Eto.Drawing.SizeF)">
            <summary>
            Creates a new radial gradient brush object.
            </summary>
            <param name="startColor">Start color from the <paramref name="gradientOrigin"/></param>
            <param name="endColor">End color at the outer edge of the ellipse</param>
            <param name="center">Center of the ellipse</param>
            <param name="gradientOrigin">Origin of the gradient.</param>
            <param name="radius">Radius of the ellipse.</param>
        </member>
        <member name="M:Eto.Drawing.RadialGradientBrush.IHandler.GetTransform(Eto.Drawing.RadialGradientBrush)">
            <summary>
            Gets the transform for the specified brush
            </summary>
            <returns>The current transform for the specified brush</returns>
            <param name="widget">Brush to get the transform</param>
        </member>
        <member name="M:Eto.Drawing.RadialGradientBrush.IHandler.SetTransform(Eto.Drawing.RadialGradientBrush,Eto.Drawing.IMatrix)">
            <summary>
            Sets the transform for the specified brush
            </summary>
            <param name="widget">Brush to set the transform</param>
            <param name="transform">Transform to set to the brush</param>
        </member>
        <member name="M:Eto.Drawing.RadialGradientBrush.IHandler.GetGradientWrap(Eto.Drawing.RadialGradientBrush)">
            <summary>
            Gets the gradient wrap mode
            </summary>
            <returns>The gradient wrap mode for the brush</returns>
            <param name="widget">Brush to get the gradient wrap mode</param>
        </member>
        <member name="M:Eto.Drawing.RadialGradientBrush.IHandler.SetGradientWrap(Eto.Drawing.RadialGradientBrush,Eto.Drawing.GradientWrapMode)">
            <summary>
            Sets the gradient wrap mode
            </summary>
            <param name="widget">Brush to set the wrap mode</param>
            <param name="gradientWrap">Gradient wrap mode to set</param>
        </member>
        <member name="T:Eto.Drawing.Rectangle">
            <summary>
            Represents a rectangle with a location (X, Y) and size (Width, Height) components.
            </summary>
            <remarks>
            A rectangle is defined by a location (X, Y) and a size (Width, Height).
            The width and/or height can be negative.
            </remarks>
            <copyright>(c) 2014 by Curtis Wensley</copyright>
            <license type="BSD-3">See LICENSE for full terms</license>
        </member>
        <member name="M:Eto.Drawing.Rectangle.Round(Eto.Drawing.RectangleF)">
            <summary>
            Converts a floating point <paramref name="rectangle"/> to an integral <see cref="T:Eto.Drawing.Rectangle"/> by rounding the X, Y, Width, and Height.
            </summary>
            <param name="rectangle">Rectangle to round</param>
            <returns>A new instance of a Rectangle with rounded X, Y, Width, and Height values</returns>
        </member>
        <member name="M:Eto.Drawing.Rectangle.Ceiling(Eto.Drawing.RectangleF)">
            <summary>
            Converts a floating point <paramref name="rectangle"/> to an integral <see cref="T:Eto.Drawing.Rectangle"/> by getting the smallest integral value of X, Y, Width, and Height
            </summary>
            <remarks>
            This is used to get an integral rectangle that bounds the floating point rectangle completely.
            E.g. if a RectangleF has (X,Y,W,H) values of 0.2, 0.9, 1.1, 1.9, it would return a new integral rectangle
            with values 0, 0, 2, 2.
            </remarks>
            <param name="rectangle">Rectangle to get the ceiling</param>
            <returns>A new instance of a Rectangle with truncated X, Y and a ceiling Width and Height values</returns>
        </member>
        <member name="M:Eto.Drawing.Rectangle.Truncate(Eto.Drawing.RectangleF)">
            <summary>
            Converts a floating point <paramref name="rectangle"/> to an integral <see cref="T:Eto.Drawing.Rectangle"/> by truncating the X, Y, Width, and Height values
            </summary>
            <param name="rectangle">Rectangle to truncate</param>
            <returns>A new instance of a Rectangle with truncated X, Y, Width, and Height values</returns>
        </member>
        <member name="F:Eto.Drawing.Rectangle.Empty">
            <summary>
            Gets an empty rectangle with zero X, Y, Width, and Height components
            </summary>
            <remarks>
            Useful when you want a rectangle no size or location.
            </remarks>
        </member>
        <member name="M:Eto.Drawing.Rectangle.Normalize">
            <summary>
            Normalizes the rectangle so both the <see cref="P:Eto.Drawing.Rectangle.Width"/> and <see cref="P:Eto.Drawing.Rectangle.Height"/> are positive, without changing the location of the rectangle
            </summary>
            <remarks>
            Rectangles can have negative widths/heights, which means that the starting location will not always be at the top left
            corner.  Normalizing the rectangle will ensure that the <see cref="P:Eto.Drawing.Rectangle.X"/> and <see cref="P:Eto.Drawing.Rectangle.Y"/> co-ordinates of the rectangle
            are at the top left.
            </remarks>
        </member>
        <member name="M:Eto.Drawing.Rectangle.FromSides(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a new instance of a RectangleF from the values of the <paramref name="left"/>, <paramref name="top"/>, <paramref name="right"/> and <paramref name="bottom"/> sides
            </summary>
            <param name="left">Left side of the rectangle to create</param>
            <param name="top">Top of the rectangle to create</param>
            <param name="right">Right side of the rectangle to create</param>
            <param name="bottom">Bottom of the rectangle to create</param>
            <returns>A new instance of a RectangleF with values for the Left, Top, Right, and Bottom sides</returns>
        </member>
        <member name="M:Eto.Drawing.Rectangle.FromCenter(Eto.Drawing.Point,Eto.Drawing.Size)">
            <summary>
            Creates a new instance of a Rectangle with a specified <paramref name="center"/> and <paramref name="size"/>
            </summary>
            <param name="center">Center of the rectangle</param>
            <param name="size">Size of the rectangle</param>
            <returns>A new instance of a Rectangle with the specified center and size</returns>
        </member>
        <member name="M:Eto.Drawing.Rectangle.#ctor(Eto.Drawing.Point,Eto.Drawing.Point)">
            <summary>
            Initializes a new instance of the Rectangle class with two points
            </summary>
            <param name="start">Starting point of the rectangle</param>
            <param name="end">Ending point of the rectangle</param>
        </member>
        <member name="M:Eto.Drawing.Rectangle.#ctor(Eto.Drawing.Point,Eto.Drawing.Size)">
            <summary>
            Initializes a new instance of the Rectangle class with the specified <paramref name="location"/> and <paramref name="size"/>
            </summary>
            <param name="location">Location of the rectangle</param>
            <param name="size">Size of the rectangle</param>
        </member>
        <member name="M:Eto.Drawing.Rectangle.#ctor(Eto.Drawing.Size)">
            <summary>
            Initializes a new instance of the Rectangle class with X, Y co-ordinates at 0,0 and the specified <paramref name="size"/>
            </summary>
            <param name="size">Size to give the rectangle</param>
        </member>
        <member name="M:Eto.Drawing.Rectangle.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the Rectangle class with the specified <paramref name="x"/>, <paramref name="y"/>, <paramref name="width"/>, and <paramref name="height"/>
            </summary>
            <param name="x">X co-ordinate for the location of the rectangle</param>
            <param name="y">Y co-ordinate for the location of the rectangle</param>
            <param name="width">Width of the rectangle</param>
            <param name="height">Height of the rectangle</param>
        </member>
        <member name="M:Eto.Drawing.Rectangle.#ctor(Eto.Drawing.RectangleF)">
            <summary>
            Initializes a new instance of a Rectangle class with truncated values of the specified floating-point <paramref name="rectangle"/>
            </summary>
            <param name="rectangle">RectangleF to initialize the X and Y values of the new instance with</param>
        </member>
        <member name="M:Eto.Drawing.Rectangle.Contains(Eto.Drawing.Point)">
            <summary>
            Gets a value indicating that the specified <paramref name="point"/> is within the bounds of this rectangle
            </summary>
            <param name="point">Point to test</param>
            <returns>True if the point is within the bounds of this rectangle, false if it is outside the bounds</returns>
        </member>
        <member name="M:Eto.Drawing.Rectangle.Contains(System.Int32,System.Int32)">
            <summary>
            Gets a value indicating that the specified <paramref name="x"/> and <paramref name="y"/> co-ordinates are within the bounds of this rectangle
            </summary>
            <param name="x">X co-ordinate to test</param>
            <param name="y">Y co-ordinate to test</param>
            <returns>True if the rectangle contains the x and y co-ordinates, false otherwise</returns>
        </member>
        <member name="M:Eto.Drawing.Rectangle.Contains(Eto.Drawing.Rectangle)">
            <summary>
            Gets a value indicating that the specified <paramref name="rectangle"/> is entirely contained within the bounds of this rectangle
            </summary>
            <param name="rectangle">Rectangle to test if it is contained within this instance</param>
        </member>
        <member name="M:Eto.Drawing.Rectangle.Intersects(Eto.Drawing.Rectangle)">
            <summary>
            Gets a value indicating that the specified <paramref name="rectangle"/> overlaps this rectangle
            </summary>
            <param name="rectangle">Rectangle to test for intersection/overlap</param>
            <returns>True if the rectangle overlaps this instance, false otherwise</returns>
        </member>
        <member name="P:Eto.Drawing.Rectangle.IsZero">
            <summary>
            Gets a value indicating that both the <see name="Location"/> and <see cref="P:Eto.Drawing.Rectangle.Size"/> of this rectangle are zero
            </summary>
            <remarks>
            The X, Y, Width, and Height components of this rectangle must be zero for this to return true.
            </remarks>
        </member>
        <member name="P:Eto.Drawing.Rectangle.IsEmpty">
            <summary>
            Gets a value indicating that the <see cref="P:Eto.Drawing.Rectangle.Size"/> of this rectangle is empty (either the width or height are zero)
            </summary>
        </member>
        <member name="P:Eto.Drawing.Rectangle.Location">
            <summary>
            Gets the location of this rectangle
            </summary>
            <remarks>
            Same as getting the <see cref="P:Eto.Drawing.Rectangle.X"/> and <see cref="P:Eto.Drawing.Rectangle.Y"/> co-ordinates of this rectangle
            </remarks>
        </member>
        <member name="P:Eto.Drawing.Rectangle.EndLocation">
            <summary>
            Gets the ending location of this rectangle
            </summary>
            <remarks>
            This gets/sets the product of the <see cref="P:Eto.Drawing.Rectangle.Location"/> + <see cref="P:Eto.Drawing.Rectangle.Size"/>. If the Width or Height of this rectangle
            is positive, then the X/Y of the returned location will be minus 1 so as to be inside of the rectangle's bounds.
            </remarks>
        </member>
        <member name="P:Eto.Drawing.Rectangle.Size">
            <summary>
            Gets or sets the size of the rectangle
            </summary>
        </member>
        <member name="P:Eto.Drawing.Rectangle.X">
            <summary>
            Gets or sets the X co-ordinate of the <see cref="P:Eto.Drawing.Rectangle.Location"/> of this rectangle
            </summary>
        </member>
        <member name="P:Eto.Drawing.Rectangle.Y">
            <summary>
            Gets or sets the Y co-ordinate of the <see cref="P:Eto.Drawing.Rectangle.Location"/> of this rectangle
            </summary>
        </member>
        <member name="P:Eto.Drawing.Rectangle.Width">
            <summary>
            Gets or sets the Width of this rectangle
            </summary>
        </member>
        <member name="P:Eto.Drawing.Rectangle.Height">
            <summary>
            Gets or sets the Height of this rectangle
            </summary>
        </member>
        <member name="P:Eto.Drawing.Rectangle.Top">
            <summary>
            Gets or sets the logical top of this rectangle (Y co-ordinate if Height is positive, Y + Height if negative) 
            </summary>
            <remarks>
            This is always the logical top, where if the <see cref="P:Eto.Drawing.Rectangle.Height"/> is positive it will adjust the Y co-ordinate.
            If the Height of the rectangle is negative, then this will adjust the Height when setting the value.
            </remarks>
        </member>
        <member name="P:Eto.Drawing.Rectangle.Left">
            <summary>
            Gets or sets the logical left of this rectangle (X co-ordinate if Width is positive, X + Width if negative)
            </summary>
        </member>
        <member name="P:Eto.Drawing.Rectangle.Right">
            <summary>
            Gets or sets the logical right of this rectangle (X + Width if Width is positive, X + 1 if negative)
            </summary>
            <remarks>
            This differs from the <seealso cref="P:Eto.Drawing.Rectangle.InnerRight"/> in that this will return the co-ordinate adjacent to the right edge
            of the rectangle, whereas <seealso cref="P:Eto.Drawing.Rectangle.InnerRight"/> returns the co-ordinate that is inside the rectangle
            </remarks>
        </member>
        <member name="P:Eto.Drawing.Rectangle.Bottom">
            <summary>
            Gets or sets the logical bottom of this rectangle (Y + Height if Height is positive, Y + 1 if negative)
            </summary>
            <remarks>
            This differs from the <seealso cref="P:Eto.Drawing.Rectangle.InnerBottom"/> in that this will return the co-ordinate adjacent to the bottom edge
            of the rectangle, whereas <seealso cref="P:Eto.Drawing.Rectangle.InnerBottom"/> returns the co-ordinate that is inside the rectangle
            </remarks>
        </member>
        <member name="P:Eto.Drawing.Rectangle.TopLeft">
            <summary>
            Gets or sets the point at the <see cref="P:Eto.Drawing.Rectangle.Top"/> and <see cref="P:Eto.Drawing.Rectangle.Left"/> of the rectangle
            </summary>
        </member>
        <member name="P:Eto.Drawing.Rectangle.TopRight">
            <summary>
            Gets or sets the point at the <see cref="P:Eto.Drawing.Rectangle.Top"/> and <see cref="P:Eto.Drawing.Rectangle.Right"/> of the rectangle
            </summary>
        </member>
        <member name="P:Eto.Drawing.Rectangle.BottomRight">
            <summary>
            Gets or sets the point at the <see cref="P:Eto.Drawing.Rectangle.Bottom"/> and <see cref="P:Eto.Drawing.Rectangle.Right"/> of the rectangle
            </summary>
        </member>
        <member name="P:Eto.Drawing.Rectangle.BottomLeft">
            <summary>
            Gets or sets the point at the <see cref="P:Eto.Drawing.Rectangle.Bottom"/> and <see cref="P:Eto.Drawing.Rectangle.Left"/> of the rectangle
            </summary>
        </member>
        <member name="P:Eto.Drawing.Rectangle.MiddleLeft">
            <summary>
            Gets or sets the point at the <see cref="P:Eto.Drawing.Rectangle.Left"/> and <see cref="P:Eto.Drawing.Rectangle.MiddleY"/> of the rectangle
            </summary>
        </member>
        <member name="P:Eto.Drawing.Rectangle.MiddleRight">
            <summary>
            Gets or sets the point at the <see cref="P:Eto.Drawing.Rectangle.Right"/> and <see cref="P:Eto.Drawing.Rectangle.MiddleY"/> of the rectangle
            </summary>
        </member>
        <member name="P:Eto.Drawing.Rectangle.MiddleTop">
            <summary>
            Gets or sets the point at the <see cref="P:Eto.Drawing.Rectangle.MiddleX"/> and <see cref="P:Eto.Drawing.Rectangle.Top"/> of the rectangle
            </summary>
        </member>
        <member name="P:Eto.Drawing.Rectangle.MiddleBottom">
            <summary>
            Gets or sets the point at the <see cref="P:Eto.Drawing.Rectangle.MiddleX"/> and <see cref="P:Eto.Drawing.Rectangle.Bottom"/> of the rectangle
            </summary>
        </member>
        <member name="P:Eto.Drawing.Rectangle.InnerTopRight">
            <summary>
            Gets or sets the point at the <see cref="P:Eto.Drawing.Rectangle.Top"/> and <see cref="P:Eto.Drawing.Rectangle.InnerRight"/> of the rectangle
            </summary>
            <remarks>
            Similar to <seealso cref="P:Eto.Drawing.Rectangle.TopRight"/> but inside the rectangle's bounds instead of just to the right
            </remarks>
        </member>
        <member name="P:Eto.Drawing.Rectangle.InnerBottomRight">
            <summary>
            Gets or sets the point at the <see cref="P:Eto.Drawing.Rectangle.InnerBottom"/> and <see cref="P:Eto.Drawing.Rectangle.InnerRight"/> of the rectangle
            </summary>
            <remarks>
            Similar to <seealso cref="P:Eto.Drawing.Rectangle.BottomRight"/> but inside the rectangle's bounds instead of just to the right and bottom
            </remarks>
        </member>
        <member name="P:Eto.Drawing.Rectangle.InnerBottomLeft">
            <summary>
            Gets or sets the point at the <see cref="P:Eto.Drawing.Rectangle.InnerBottom"/> and <see cref="P:Eto.Drawing.Rectangle.Left"/> of the rectangle
            </summary>
            <remarks>
            Similar to <seealso cref="P:Eto.Drawing.Rectangle.BottomLeft"/> but inside the rectangle's bounds instead of just below the bottom
            </remarks>
        </member>
        <member name="P:Eto.Drawing.Rectangle.InnerBottom">
            <summary>
            Gets or sets the bottom of the rectangle that is inside the bounds
            </summary>
            <remarks>
            Similar to <seealso cref="P:Eto.Drawing.Rectangle.Bottom"/> but inside the rectangle's bounds instead of just below the bottom
            </remarks>
        </member>
        <member name="P:Eto.Drawing.Rectangle.InnerRight">
            <summary>
            Gets or sets the right of the rectangle that is inside the bounds
            </summary>
            <remarks>
            Similar to <seealso cref="P:Eto.Drawing.Rectangle.Right"/> but inside the rectangle's bounds instead of just to the right
            </remarks>
        </member>
        <member name="P:Eto.Drawing.Rectangle.Center">
            <summary>
            Gets or sets the rectangle's center position
            </summary>
            <remarks>
            This gets/sets the <see cref="P:Eto.Drawing.Rectangle.MiddleX"/> and <see cref="P:Eto.Drawing.Rectangle.MiddleY"/> as a point
            </remarks>
        </member>
        <member name="P:Eto.Drawing.Rectangle.MiddleX">
            <summary>
            Gets or sets the rectangle's middle horizontal position
            </summary>
        </member>
        <member name="P:Eto.Drawing.Rectangle.MiddleY">
            <summary>
            Gets or sets the rectangle's middle vertical position
            </summary>
        </member>
        <member name="M:Eto.Drawing.Rectangle.Offset(System.Int32,System.Int32)">
            <summary>
            Offsets the location of the rectangle by the specified <paramref name="x"/> and <paramref name="y"/> values
            </summary>
            <param name="x">Horizontal offset to move the rectangle</param>
            <param name="y">Vertical offset to move the rectangle</param>
        </member>
        <member name="M:Eto.Drawing.Rectangle.Offset(Eto.Drawing.Size)">
            <summary>
            Offsets the location of the rectangle by the specified <paramref name="size"/>
            </summary>
            <param name="size">Width and Height to move the rectangle</param>
        </member>
        <member name="M:Eto.Drawing.Rectangle.Offset(Eto.Drawing.Point)">
            <summary>
            Offsets the location of the rectangle by the X and Y values of the specified <paramref name="point"/>
            </summary>
            <param name="point">Point with values to offset the rectangle</param>
        </member>
        <member name="M:Eto.Drawing.Rectangle.Offset(Eto.Drawing.Rectangle,System.Int32,System.Int32)">
            <summary>
            Offsets the location of the <paramref name="rectangle"/> by the specified <paramref name="x"/> and <paramref name="y"/> values
            </summary>
            <param name="rectangle">Rectangle to offset</param>
            <param name="x">Horizontal offset to move the rectangle</param>
            <param name="y">Vertical offset to move the rectangle</param>
            <returns>A new Rectangle with the offset location</returns>
        </member>
        <member name="M:Eto.Drawing.Rectangle.Offset(Eto.Drawing.Rectangle,Eto.Drawing.Size)">
            <summary>
            Offsets the location of the <paramref name="rectangle"/> by the specified <paramref name="size"/>
            </summary>
            <param name="rectangle">Rectangle to inflate</param>
            <param name="size">Width and Height to move the rectangle</param>
            <returns>A new Rectangle with the offset location</returns>
        </member>
        <member name="M:Eto.Drawing.Rectangle.Offset(Eto.Drawing.Rectangle,Eto.Drawing.Point)">
            <summary>
            Offsets the location of the <paramref name="rectangle"/> by the X and Y values of the specified <paramref name="point"/>
            </summary>
            <param name="rectangle">Rectangle to offset</param>
            <param name="point">Point with values to offset the rectangle</param>
            <returns>A new Rectangle with the offset location</returns>
        </member>
        <member name="M:Eto.Drawing.Rectangle.Inflate(Eto.Drawing.Size)">
            <summary>
            Inflates all dimensions of this rectangle by the specified <paramref name="size"/>
            </summary>
            <remarks>
            This inflates the rectangle in all dimensions by the width and height specified by <paramref name="size"/>.
            The resulting rectangle will be increased in width and height twice that of the specified size, and the center
            will be in the same location.
            A negative width and/or height can be passed in to deflate the rectangle.
            </remarks>
            <param name="size">Size to inflate the rectangle by</param>
        </member>
        <member name="M:Eto.Drawing.Rectangle.Inflate(System.Int32,System.Int32)">
            <summary>
            Inflates all dimensions of this rectangle by the specified <paramref name="width"/> and <paramref name="height"/>
            </summary>
            <remarks>
            This inflates the rectangle in all dimensions by the specified <paramref name="width"/> and <paramref name="height"/>.
            The resulting rectangle will be increased in width and height twice that of the specified size, and the center
            will be in the same location.
            A negative width and/or height can be passed in to deflate the rectangle.
            </remarks>
            <param name="width">Width to inflate the left and right of the rectangle by</param>
            <param name="height">Height to inflate the top and bottom of the rectangle by</param>
        </member>
        <member name="M:Eto.Drawing.Rectangle.Inflate(Eto.Drawing.Rectangle,Eto.Drawing.Size)">
            <summary>
            Inflates all dimensions of the <paramref name="rectangle"/> by the specified <paramref name="size"/>
            </summary>
            <remarks>
            This inflates the <paramref name="rectangle"/> in all dimensions by the width and height specified by <paramref name="size"/>.
            The resulting rectangle will be increased in width and height twice that of the specified size, and the center
            will be in the same location.
            A negative width and/or height can be passed in to deflate the rectangle.
            </remarks>
            <param name="rectangle">Rectangle to inflate</param>
            <param name="size">Size to inflate the rectangle by</param>
            <returns>A new rectangle inflated by the specified width and height</returns>
        </member>
        <member name="M:Eto.Drawing.Rectangle.Inflate(Eto.Drawing.Rectangle,System.Int32,System.Int32)">
            <summary>
            Inflates all dimensions of this <paramref name="rectangle"/> by the specified <paramref name="width"/> and <paramref name="height"/>
            </summary>
            <remarks>
            This inflates the <paramref name="rectangle"/> in all dimensions by the specified <paramref name="width"/> and <paramref name="height"/>.
            The resulting rectangle will be increased in width and height twice that of the specified size, and the center
            will be in the same location.
            A negative width and/or height can be passed in to deflate the rectangle.
            </remarks>
            <param name="rectangle">Rectangle to inflate</param>
            <param name="width">Width to inflate the left and right of the rectangle by</param>
            <param name="height">Height to inflate the top and bottom of the rectangle by</param>
            <returns>A new rectangle inflated by the specified width and height</returns>
        </member>
        <member name="M:Eto.Drawing.Rectangle.Align(Eto.Drawing.Size)">
            <summary>
            Aligns the rectangle to a grid of the specified <paramref name="gridSize"/>
            </summary>
            <remarks>
            This will align the top, left, right, and bottom to a grid by inflating each edge to the next grid line.
            </remarks>
            <param name="gridSize">Size of the grid to align the rectangle to</param>
        </member>
        <member name="M:Eto.Drawing.Rectangle.Align(System.Int32,System.Int32)">
            <summary>
            Aligns the rectangle to a grid of the specified <paramref name="gridWidth"/> and <paramref name="gridHeight"/>
            </summary>
            <remarks>
            This will align the top, left, right, and bottom to a grid by inflating each edge to the next grid line.
            </remarks>
            <param name="gridWidth">Grid width</param>
            <param name="gridHeight">Grid height</param>
        </member>
        <member name="M:Eto.Drawing.Rectangle.Align(Eto.Drawing.Rectangle,Eto.Drawing.Size)">
            <summary>
            Aligns the <paramref name="rectangle"/> to a grid of the specified <paramref name="gridSize"/>
            </summary>
            <remarks>
            This will align the top, left, right, and bottom to a grid by inflating each edge to the next grid line.
            </remarks>
            <param name="rectangle">Rectangle to align</param>
            <param name="gridSize">Size of the grid to align the rectangle to</param>
            <returns>A new Rectangle aligned to the grid</returns>
        </member>
        <member name="M:Eto.Drawing.Rectangle.Align(Eto.Drawing.Rectangle,System.Int32,System.Int32)">
            <summary>
            Aligns the <paramref name="rectangle"/> to a grid of the specified <paramref name="gridWidth"/> and <paramref name="gridHeight"/>
            </summary>
            <remarks>
            This will align the top, left, right, and bottom to a grid by inflating each edge to the next grid line.
            </remarks>
            <param name="rectangle">Rectangle to align</param>
            <param name="gridWidth">Grid width</param>
            <param name="gridHeight">Grid height</param>
            <returns>A new Rectangle aligned to the grid</returns>
        </member>
        <member name="M:Eto.Drawing.Rectangle.Union(Eto.Drawing.Rectangle)">
            <summary>
            Union the <paramref name="rectangle"/> into this instance to encompass both rectangles
            </summary>
            <param name="rectangle">Rectangle to union with this instance</param>
        </member>
        <member name="M:Eto.Drawing.Rectangle.Union(Eto.Drawing.Rectangle,Eto.Drawing.Rectangle)">
            <summary>
            Combines two rectangles into one rectangle that encompasses both
            </summary>
            <param name="rect1">First rectangle to union</param>
            <param name="rect2">Second rectangle to union</param>
            <returns>A new Rectangle that encompasses both <paramref name="rect1"/> and <paramref name="rect2"/></returns>
        </member>
        <member name="M:Eto.Drawing.Rectangle.Intersect(Eto.Drawing.Rectangle)">
            <summary>
            Intersect the rectangle with the specified <paramref name="rectangle"/>
            </summary>
            <param name="rectangle">Rectangle to intersect with</param>
        </member>
        <member name="M:Eto.Drawing.Rectangle.Intersect(Eto.Drawing.Rectangle,Eto.Drawing.Rectangle)">
            <summary>
            Intersect the two specified rectangles
            </summary>
            <param name="rect1">First rectangle to intersect</param>
            <param name="rect2">Second rectangle to intersect</param>
            <returns>A new RectangleF with the intersection of the two rectangles</returns>
        </member>
        <member name="M:Eto.Drawing.Rectangle.Restrict(Eto.Drawing.Point,Eto.Drawing.Size)">
            <summary>
            Restricts the rectangle to be within the specified <paramref name="location"/> and <paramref name="size"/>
            </summary>
            <remarks>
            This is a shortcut for <seealso cref="M:Eto.Drawing.Rectangle.Restrict(Eto.Drawing.Rectangle)"/>
            </remarks>
            <param name="location">Minimum location for the rectangle</param>
            <param name="size">Maximum size for the rectangle</param>
        </member>
        <member name="M:Eto.Drawing.Rectangle.Restrict(Eto.Drawing.Size)">
            <summary>
            Restricts the rectangle to be within the specified <paramref name="size"/> at an X,Y location of 0, 0
            </summary>
            <remarks>
            This is a shortcut for <seealso cref="M:Eto.Drawing.Rectangle.Restrict(Eto.Drawing.Rectangle)"/>
            </remarks>
            <param name="size">Maxiumum size for the rectangle</param>
        </member>
        <member name="M:Eto.Drawing.Rectangle.Restrict(Eto.Drawing.Rectangle)">
            <summary>
            Restricts the rectangle to be within the specified <paramref name="rectangle"/>
            </summary>
            <remarks>
            This ensures that the current rectangle's bounds fall within the bounds of the specified <paramref name="rectangle"/>.
            It is useful to ensure that the rectangle does not exceed certain limits (e.g. for drawing)
            </remarks>
            <param name="rectangle">Rectangle to restrict this instance to</param>
        </member>
        <member name="M:Eto.Drawing.Rectangle.Restrict(Eto.Drawing.Rectangle,Eto.Drawing.Size)">
            <summary>
            Restricts the <paramref name="rectangle"/> to be within the specified <paramref name="size"/>
            </summary>
            <remarks>
            This ensures that <paramref name="rectangle"/>'s bounds fall within the bounds of the specified <paramref name="size"/>
            It is useful to ensure that the rectangle does not exceed certain limits (e.g. for drawing)
            </remarks>
            <param name="rectangle">Rectangle to restrict</param>
            <param name="size">Size to restrict to</param>
            <returns>A new rectangle restricted to the restrict bounds</returns>
        </member>
        <member name="M:Eto.Drawing.Rectangle.Restrict(Eto.Drawing.Rectangle,Eto.Drawing.Rectangle)">
            <summary>
            Restricts the <paramref name="rectangle"/> to be within the <paramref name="restrict"/> rectangle
            </summary>
            <remarks>
            This ensures that <paramref name="rectangle"/>'s bounds fall within the bounds of the specified <paramref name="restrict"/> rectangle
            It is useful to ensure that the rectangle does not exceed certain limits (e.g. for drawing)
            </remarks>
            <param name="rectangle">Rectangle to restrict</param>
            <param name="restrict">Rectangle to restrict to</param>
            <returns>A new rectangle restricted to the restrict bounds</returns>
        </member>
        <member name="M:Eto.Drawing.Rectangle.op_Multiply(Eto.Drawing.Rectangle,System.Int32)">
            <summary>
            Multiplies all X, Y, Width, Height components of the <paramref name="rectangle"/> by a <paramref name="factor"/>
            </summary>
            <param name="rectangle">Rectangle to multiply</param>
            <param name="factor">Factor to mulitply by</param>
            <returns>A new instance of a Rectangle with the product of the specified <paramref name="rectangle"/> and the <paramref name="factor"/></returns>
        </member>
        <member name="M:Eto.Drawing.Rectangle.op_Division(Eto.Drawing.Rectangle,System.Int32)">
            <summary>
            Divides all X, Y, Width, Height components of the <paramref name="rectangle"/> by a <paramref name="factor"/> factor
            </summary>
            <param name="rectangle">Rectangle to divide</param>
            <param name="factor">Factor to divide by</param>
            <returns>A new instance of a Rectangle with the value of <paramref name="rectangle"/> divided by a <paramref name="factor"/></returns>
        </member>
        <member name="M:Eto.Drawing.Rectangle.op_Multiply(Eto.Drawing.Rectangle,Eto.Drawing.Size)">
            <summary>
            Multiplies the specified <paramref name="rectangle"/> by the Width and Height of <paramref name="size"/>
            </summary>
            <remarks>
            The X and Width components will be multiplied by the Width of the specified <paramref name="size"/>, and
            the Y and Height components will be multiplied by the Height.
            </remarks>
            <param name="rectangle">Rectangle to multiply</param>
            <param name="size">Width and Height to multiply the rectangle by</param>
            <returns>A new instance of a Rectangle with the product of the <paramref name="rectangle"/> and <paramref name="size"/></returns>
        </member>
        <member name="M:Eto.Drawing.Rectangle.op_Division(Eto.Drawing.Rectangle,Eto.Drawing.Size)">
            <summary>
            Divides the specified <paramref name="rectangle"/> by the Width and Height of <paramref name="size"/>
            </summary>
            <remarks>
            The X and Width components will be divided by the Width of the specified <paramref name="size"/>, and
            the Y and Height components will be divided by the Height.
            </remarks>
            <param name="rectangle">Rectangle to divide</param>
            <param name="size">Width and Height to divide the rectangle by</param>
            <returns>A new instance of a Rectangle with the value of <paramref name="rectangle"/> divided by <paramref name="size"/></returns>
        </member>
        <member name="M:Eto.Drawing.Rectangle.op_Addition(Eto.Drawing.Rectangle,Eto.Drawing.Point)">
            <summary>
            Adds the <paramref name="offset"/> to the specified <paramref name="rectangle"/>, moving its location
            </summary>
            <param name="rectangle">Rectangle to offset</param>
            <param name="offset">Offset to move the location by</param>
        </member>
        <member name="M:Eto.Drawing.Rectangle.op_Subtraction(Eto.Drawing.Rectangle,Eto.Drawing.Point)">
            <summary>
            Subtracts the <paramref name="offset"/> from the specified <paramref name="rectangle"/>, moving its location
            </summary>
            <param name="rectangle">Rectangle to offset</param>
            <param name="offset">Offset to move the location by</param>
        </member>
        <member name="M:Eto.Drawing.Rectangle.op_Addition(Eto.Drawing.Rectangle,Eto.Drawing.Size)">
            <summary>
            Adds the <paramref name="offset"/> to the specified <paramref name="rectangle"/>, moving its location
            </summary>
            <param name="rectangle">Rectangle to offset</param>
            <param name="offset">Offset to move the location by</param>
        </member>
        <member name="M:Eto.Drawing.Rectangle.op_Subtraction(Eto.Drawing.Rectangle,Eto.Drawing.Size)">
            <summary>
            Subtracts the <paramref name="offset"/> from the specified <paramref name="rectangle"/>, moving its location
            </summary>
            <param name="rectangle">Rectangle to offset</param>
            <param name="offset">Offset to move the location by</param>
        </member>
        <member name="M:Eto.Drawing.Rectangle.op_Equality(Eto.Drawing.Rectangle,Eto.Drawing.Rectangle)">
            <summary>
            Compares two rectangles for equality
            </summary>
            <param name="rect1">First rectangle to compare</param>
            <param name="rect2">Second rectangle to compare</param>
            <returns>True if the two rectangles are equal, false otherwise</returns>
        </member>
        <member name="M:Eto.Drawing.Rectangle.op_Inequality(Eto.Drawing.Rectangle,Eto.Drawing.Rectangle)">
            <summary>
            Compares two rectangles for inequality
            </summary>
            <param name="rect1">First rectangle to compare</param>
            <param name="rect2">Second rectangle to compare</param>
            <returns>True if the two rectangles are not equal, false otherwise</returns>
        </member>
        <member name="M:Eto.Drawing.Rectangle.op_Explicit(Eto.Drawing.RectangleF)~Eto.Drawing.Rectangle">
            <summary>
            Implicit conversion from a <see cref="T:Eto.Drawing.RectangleF"/> to a <see cref="T:Eto.Drawing.Rectangle"/>
            </summary>
            <param name="rectangle">Point to convert</param>
            <returns>A new instance of a Rectangle with the value of the specified <paramref name="rectangle"/></returns>
        </member>
        <member name="M:Eto.Drawing.Rectangle.ToString">
            <summary>
            Converts this rectangle to a string
            </summary>
            <returns>String representation of this rectangle</returns>
        </member>
        <member name="M:Eto.Drawing.Rectangle.Equals(System.Object)">
            <summary>
            Compares this rectangle to an object for equality
            </summary>
            <param name="obj">Object to compare with</param>
            <returns>True if the <paramref name="obj"/> is a Rectangle and is equal to this instance, false otherwise</returns>
        </member>
        <member name="M:Eto.Drawing.Rectangle.GetHashCode">
            <summary>
            Gets the hash code for this rectangle
            </summary>
            <returns>Hash code value for this rectangle</returns>
        </member>
        <member name="M:Eto.Drawing.Rectangle.Equals(Eto.Drawing.Rectangle)">
            <summary>
            Compares this rectangle with the specified <paramref name="other"/> rectangle
            </summary>
            <param name="other">Other rectangle to compare with</param>
            <returns>True if the <paramref name="other"/> rectangle is equal to this instance, false otherwise</returns>
        </member>
        <member name="T:Eto.Drawing.RectangleConverter">
            <summary>
            Converter for the <see cref="T:Eto.Drawing.Rectangle"/> class
            </summary>
            <remarks>
            Allows for conversion from a string to a <see cref="T:Eto.Drawing.Rectangle"/>.
            </remarks>
            <copyright>(c) 2014 by Curtis Wensley</copyright>
            <license type="BSD-3">See LICENSE for full terms</license>
        </member>
        <member name="F:Eto.Drawing.RectangleConverter.DimensionSplitter">
            <summary>
            The character to split up the string which will be converted
            </summary>
        </member>
        <member name="M:Eto.Drawing.RectangleConverter.CanConvertFrom(Eto.ITypeDescriptorContext,System.Type)">
            <summary>
            Determines if this converter can convert from the specified <paramref name="sourceType"/>
            </summary>
            <param name="context">Conversion context</param>
            <param name="sourceType">Type to convert from</param>
            <returns>True if this converter can convert from the specified type, false otherwise</returns>
        </member>
        <member name="M:Eto.Drawing.RectangleConverter.ConvertFrom(Eto.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts the specified value to a <see cref="T:Eto.Drawing.Rectangle"/>
            </summary>
            <param name="context">Conversion context</param>
            <param name="culture">Culture to perform the conversion</param>
            <param name="value">Value to convert</param>
            <returns>A new instance of a <see cref="T:Eto.Drawing.Rectangle"/> converted from the specified <paramref name="value"/></returns>
        </member>
        <member name="T:Eto.Drawing.RectangleF">
            <summary>
            Represents a floating point rectangle with a location (X, Y) and size (Width, Height) components.
            </summary>
            <remarks>
            A rectangle is defined by a location (X, Y) and a size (Width, Height).
            The width and/or height can be negative.
            </remarks>
            <copyright>(c) 2014 by Curtis Wensley</copyright>
            <license type="BSD-3">See LICENSE for full terms</license>
        </member>
        <member name="F:Eto.Drawing.RectangleF.Empty">
            <summary>
            Gets an empty rectangle with zero X, Y, Width, and Height components
            </summary>
            <remarks>
            Useful when you want a rectangle no size or location.
            </remarks>
        </member>
        <member name="M:Eto.Drawing.RectangleF.Normalize">
            <summary>
            Normalizes the rectangle so both the <see cref="P:Eto.Drawing.RectangleF.Width"/> and <see cref="P:Eto.Drawing.RectangleF.Height"/> are positive, without changing the location of the rectangle
            </summary>
            <remarks>
            Rectangles can have negative widths/heights, which means that the starting location will not always be at the top left
            corner.  Normalizing the rectangle will ensure that the <see cref="P:Eto.Drawing.RectangleF.X"/> and <see cref="P:Eto.Drawing.RectangleF.Y"/> co-ordinates of the rectangle
            are at the top left.
            </remarks>
        </member>
        <member name="M:Eto.Drawing.RectangleF.FromSides(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a new instance of a RectangleF from the values of the <paramref name="left"/>, <paramref name="top"/>, <paramref name="right"/> and <paramref name="bottom"/> sides
            </summary>
            <param name="left">Left side of the rectangle to create</param>
            <param name="top">Top of the rectangle to create</param>
            <param name="right">Right side of the rectangle to create</param>
            <param name="bottom">Bottom of the rectangle to create</param>
            <returns>A new instance of a RectangleF with values for the Left, Top, Right, and Bottom sides</returns>
        </member>
        <member name="M:Eto.Drawing.RectangleF.FromCenter(Eto.Drawing.PointF,Eto.Drawing.SizeF)">
            <summary>
            Creates a new instance of a RectangleF with a specified <paramref name="center"/> and <paramref name="size"/>
            </summary>
            <param name="center">Center of the rectangle</param>
            <param name="size">Size of the rectangle</param>
            <returns>A new instance of a RectangleF with the specified center and size</returns>
        </member>
        <member name="M:Eto.Drawing.RectangleF.#ctor(Eto.Drawing.PointF,Eto.Drawing.PointF)">
            <summary>
            Initializes a new instance of the Rectangle class with two points
            </summary>
            <param name="start">Starting point of the rectangle</param>
            <param name="end">Ending point of the rectangle</param>
        </member>
        <member name="M:Eto.Drawing.RectangleF.#ctor(Eto.Drawing.PointF,Eto.Drawing.SizeF)">
            <summary>
            Initializes a new instance of the Rectangle class with the specified <paramref name="location"/> and <paramref name="size"/>
            </summary>
            <param name="location">Location of the rectangle</param>
            <param name="size">Size of the rectangle</param>
        </member>
        <member name="M:Eto.Drawing.RectangleF.#ctor(Eto.Drawing.Rectangle)">
            <summary>
            Initilizes a new instance of the RectangleF class with the specified <paramref name="rectangle"/>.
            </summary>
            <param name="rectangle"></param>
        </member>
        <member name="M:Eto.Drawing.RectangleF.#ctor(Eto.Drawing.SizeF)">
            <summary>
            Initializes a new instance of the Rectangle class with X, Y co-ordinates at 0,0 and the specified <paramref name="size"/>
            </summary>
            <param name="size">Size to give the rectangle</param>
        </member>
        <member name="M:Eto.Drawing.RectangleF.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the Rectangle class with the specified <paramref name="x"/>, <paramref name="y"/>, <paramref name="width"/>, and <paramref name="height"/>
            </summary>
            <param name="x">X co-ordinate for the location of the rectangle</param>
            <param name="y">Y co-ordinate for the location of the rectangle</param>
            <param name="width">Width of the rectangle</param>
            <param name="height">Height of the rectangle</param>
        </member>
        <member name="M:Eto.Drawing.RectangleF.Contains(Eto.Drawing.PointF)">
            <summary>
            Gets a value indicating that the specified <paramref name="point"/> is within the bounds of this rectangle
            </summary>
            <param name="point">Point to test</param>
            <returns>True if the point is within the bounds of this rectangle, false if it is outside the bounds</returns>
        </member>
        <member name="M:Eto.Drawing.RectangleF.Contains(System.Single,System.Single)">
            <summary>
            Gets a value indicating that the specified <paramref name="x"/> and <paramref name="y"/> co-ordinates are within the bounds of this rectangle
            </summary>
            <param name="x">X co-ordinate to test</param>
            <param name="y">Y co-ordinate to test</param>
            <returns>True if the rectangle contains the x and y co-ordinates, false otherwise</returns>
        </member>
        <member name="M:Eto.Drawing.RectangleF.Contains(Eto.Drawing.RectangleF)">
            <summary>
            Gets a value indicating that the specified <paramref name="rectangle"/> is entirely contained within the bounds of this rectangle
            </summary>
            <param name="rectangle">Rectangle to test if it is contained within this instance</param>
        </member>
        <member name="M:Eto.Drawing.RectangleF.Intersects(Eto.Drawing.RectangleF)">
            <summary>
            Gets a value indicating that the specified <paramref name="rectangle"/> overlaps this rectangle
            </summary>
            <param name="rectangle">Rectangle to test for intersection/overlap</param>
            <returns>True if the rectangle overlaps this instance, false otherwise</returns>
        </member>
        <member name="P:Eto.Drawing.RectangleF.IsZero">
            <summary>
            Gets a value indicating that both the <see name="Location"/> and <see cref="P:Eto.Drawing.RectangleF.Size"/> of this rectangle are zero
            </summary>
            <remarks>
            The X, Y, Width, and Height components of this rectangle must be zero for this to return true.
            </remarks>
        </member>
        <member name="P:Eto.Drawing.RectangleF.IsEmpty">
            <summary>
            Gets a value indicating that the <see cref="P:Eto.Drawing.RectangleF.Size"/> of this rectangle is empty (either the width or height are zero)
            </summary>
        </member>
        <member name="P:Eto.Drawing.RectangleF.Location">
            <summary>
            Gets the location of this rectangle
            </summary>
            <remarks>
            Same as getting the <see cref="P:Eto.Drawing.RectangleF.X"/> and <see cref="P:Eto.Drawing.RectangleF.Y"/> co-ordinates of this rectangle
            </remarks>
        </member>
        <member name="P:Eto.Drawing.RectangleF.EndLocation">
            <summary>
            Gets the ending location of this rectangle
            </summary>
            <remarks>
            This gets/sets the product of the <see cref="P:Eto.Drawing.RectangleF.Location"/> + <see cref="P:Eto.Drawing.RectangleF.Size"/>. If the Width or Height of this rectangle
            is positive, then the X/Y of the returned location will be minus 1 so as to be inside of the rectangle's bounds.
            </remarks>
        </member>
        <member name="P:Eto.Drawing.RectangleF.Size">
            <summary>
            Gets or sets the size of the rectangle
            </summary>
        </member>
        <member name="P:Eto.Drawing.RectangleF.X">
            <summary>
            Gets or sets the X co-ordinate of the <see cref="P:Eto.Drawing.RectangleF.Location"/> of this rectangle
            </summary>
        </member>
        <member name="P:Eto.Drawing.RectangleF.Y">
            <summary>
            Gets or sets the Y co-ordinate of the <see cref="P:Eto.Drawing.RectangleF.Location"/> of this rectangle
            </summary>
        </member>
        <member name="P:Eto.Drawing.RectangleF.Width">
            <summary>
            Gets or sets the Width of this rectangle
            </summary>
        </member>
        <member name="P:Eto.Drawing.RectangleF.Height">
            <summary>
            Gets or sets the Height of this rectangle
            </summary>
        </member>
        <member name="P:Eto.Drawing.RectangleF.Top">
            <summary>
            Gets or sets the logical top of this rectangle (Y co-ordinate if Height is positive, Y + Height if negative) 
            </summary>
            <remarks>
            This is always the logical top, where if the <see cref="P:Eto.Drawing.RectangleF.Height"/> is positive it will adjust the Y co-ordinate.
            If the Height of the rectangle is negative, then this will adjust the Height when setting the value.
            </remarks>
        </member>
        <member name="P:Eto.Drawing.RectangleF.Left">
            <summary>
            Gets or sets the logical left of this rectangle (X co-ordinate if Width is positive, X + Width if negative)
            </summary>
        </member>
        <member name="P:Eto.Drawing.RectangleF.Right">
            <summary>
            Gets or sets the logical right of this rectangle (X + Width if Width is positive, X + 1 if negative)
            </summary>
            <remarks>
            This differs from the <seealso cref="P:Eto.Drawing.RectangleF.InnerRight"/> in that this will return the co-ordinate adjacent to the right edge
            of the rectangle, whereas <seealso cref="P:Eto.Drawing.RectangleF.InnerRight"/> returns the co-ordinate that is inside the rectangle
            </remarks>
        </member>
        <member name="P:Eto.Drawing.RectangleF.Bottom">
            <summary>
            Gets or sets the logical bottom of this rectangle (Y + Height if Height is positive, Y + 1 if negative)
            </summary>
            <remarks>
            This differs from the <seealso cref="P:Eto.Drawing.RectangleF.InnerBottom"/> in that this will return the co-ordinate adjacent to the bottom edge
            of the rectangle, whereas <seealso cref="P:Eto.Drawing.RectangleF.InnerBottom"/> returns the co-ordinate that is inside the rectangle
            </remarks>
        </member>
        <member name="P:Eto.Drawing.RectangleF.TopLeft">
            <summary>
            Gets or sets the point at the <see cref="P:Eto.Drawing.RectangleF.Top"/> and <see cref="P:Eto.Drawing.RectangleF.Left"/> of the rectangle
            </summary>
        </member>
        <member name="P:Eto.Drawing.RectangleF.TopRight">
            <summary>
            Gets or sets the point at the <see cref="P:Eto.Drawing.RectangleF.Top"/> and <see cref="P:Eto.Drawing.RectangleF.Right"/> of the rectangle
            </summary>
        </member>
        <member name="P:Eto.Drawing.RectangleF.BottomRight">
            <summary>
            Gets or sets the point at the <see cref="P:Eto.Drawing.RectangleF.Bottom"/> and <see cref="P:Eto.Drawing.RectangleF.Right"/> of the rectangle
            </summary>
        </member>
        <member name="P:Eto.Drawing.RectangleF.BottomLeft">
            <summary>
            Gets or sets the point at the <see cref="P:Eto.Drawing.RectangleF.Bottom"/> and <see cref="P:Eto.Drawing.RectangleF.Left"/> of the rectangle
            </summary>
        </member>
        <member name="P:Eto.Drawing.RectangleF.MiddleLeft">
            <summary>
            Gets or sets the point at the <see cref="P:Eto.Drawing.RectangleF.Left"/> and <see cref="P:Eto.Drawing.RectangleF.MiddleY"/> of the rectangle
            </summary>
        </member>
        <member name="P:Eto.Drawing.RectangleF.MiddleRight">
            <summary>
            Gets or sets the point at the <see cref="P:Eto.Drawing.RectangleF.Right"/> and <see cref="P:Eto.Drawing.RectangleF.MiddleY"/> of the rectangle
            </summary>
        </member>
        <member name="P:Eto.Drawing.RectangleF.MiddleTop">
            <summary>
            Gets or sets the point at the <see cref="P:Eto.Drawing.RectangleF.MiddleX"/> and <see cref="P:Eto.Drawing.RectangleF.Top"/> of the rectangle
            </summary>
        </member>
        <member name="P:Eto.Drawing.RectangleF.MiddleBottom">
            <summary>
            Gets or sets the point at the <see cref="P:Eto.Drawing.RectangleF.MiddleX"/> and <see cref="P:Eto.Drawing.RectangleF.Bottom"/> of the rectangle
            </summary>
        </member>
        <member name="P:Eto.Drawing.RectangleF.InnerTopRight">
            <summary>
            Gets or sets the point at the <see cref="P:Eto.Drawing.RectangleF.Top"/> and <see cref="P:Eto.Drawing.RectangleF.InnerRight"/> of the rectangle
            </summary>
            <remarks>
            Similar to <seealso cref="P:Eto.Drawing.RectangleF.TopRight"/> but inside the rectangle's bounds instead of just to the right
            </remarks>
        </member>
        <member name="P:Eto.Drawing.RectangleF.InnerBottomRight">
            <summary>
            Gets or sets the point at the <see cref="P:Eto.Drawing.RectangleF.InnerBottom"/> and <see cref="P:Eto.Drawing.RectangleF.InnerRight"/> of the rectangle
            </summary>
            <remarks>
            Similar to <seealso cref="P:Eto.Drawing.RectangleF.BottomRight"/> but inside the rectangle's bounds instead of just to the right and bottom
            </remarks>
        </member>
        <member name="P:Eto.Drawing.RectangleF.InnerBottomLeft">
            <summary>
            Gets or sets the point at the <see cref="P:Eto.Drawing.RectangleF.InnerBottom"/> and <see cref="P:Eto.Drawing.RectangleF.Left"/> of the rectangle
            </summary>
            <remarks>
            Similar to <seealso cref="P:Eto.Drawing.RectangleF.BottomLeft"/> but inside the rectangle's bounds instead of just below the bottom
            </remarks>
        </member>
        <member name="P:Eto.Drawing.RectangleF.InnerBottom">
            <summary>
            Gets or sets the bottom of the rectangle that is inside the bounds
            </summary>
            <remarks>
            Similar to <seealso cref="P:Eto.Drawing.RectangleF.Bottom"/> but inside the rectangle's bounds instead of just below the bottom
            </remarks>
        </member>
        <member name="P:Eto.Drawing.RectangleF.InnerRight">
            <summary>
            Gets or sets the right of the rectangle that is inside the bounds
            </summary>
            <remarks>
            Similar to <seealso cref="P:Eto.Drawing.RectangleF.Right"/> but inside the rectangle's bounds instead of just to the right
            </remarks>
        </member>
        <member name="P:Eto.Drawing.RectangleF.Center">
            <summary>
            Gets or sets the rectangle's center position
            </summary>
            <remarks>
            This gets/sets the <see cref="P:Eto.Drawing.RectangleF.MiddleX"/> and <see cref="P:Eto.Drawing.RectangleF.MiddleY"/> as a point
            </remarks>
        </member>
        <member name="P:Eto.Drawing.RectangleF.MiddleX">
            <summary>
            Gets or sets the rectangle's middle horizontal position
            </summary>
        </member>
        <member name="P:Eto.Drawing.RectangleF.MiddleY">
            <summary>
            Gets or sets the rectangle's middle vertical position
            </summary>
        </member>
        <member name="M:Eto.Drawing.RectangleF.Offset(System.Single,System.Single)">
            <summary>
            Offsets the location of the rectangle by the specified <paramref name="x"/> and <paramref name="y"/> values
            </summary>
            <param name="x">Horizontal offset to move the rectangle</param>
            <param name="y">Vertical offset to move the rectangle</param>
        </member>
        <member name="M:Eto.Drawing.RectangleF.Offset(Eto.Drawing.SizeF)">
            <summary>
            Offsets the location of the rectangle by the specified <paramref name="size"/>
            </summary>
            <param name="size">Width and Height to move the rectangle</param>
        </member>
        <member name="M:Eto.Drawing.RectangleF.Offset(Eto.Drawing.PointF)">
            <summary>
            Offsets the location of the rectangle by the X and Y values of the specified <paramref name="point"/>
            </summary>
            <param name="point">Point with values to offset the rectangle</param>
        </member>
        <member name="M:Eto.Drawing.RectangleF.Offset(Eto.Drawing.RectangleF,System.Single,System.Single)">
            <summary>
            Offsets the location of the <paramref name="rectangle"/> by the specified <paramref name="x"/> and <paramref name="y"/> values
            </summary>
            <param name="rectangle">Rectangle to offset</param>
            <param name="x">Horizontal offset to move the rectangle</param>
            <param name="y">Vertical offset to move the rectangle</param>
            <returns>A new Rectangle with the offset location</returns>
        </member>
        <member name="M:Eto.Drawing.RectangleF.Offset(Eto.Drawing.RectangleF,Eto.Drawing.SizeF)">
            <summary>
            Offsets the location of the <paramref name="rectangle"/> by the specified <paramref name="size"/>
            </summary>
            <param name="rectangle">Rectangle to inflate</param>
            <param name="size">Width and Height to move the rectangle</param>
            <returns>A new Rectangle with the offset location</returns>
        </member>
        <member name="M:Eto.Drawing.RectangleF.Offset(Eto.Drawing.RectangleF,Eto.Drawing.PointF)">
            <summary>
            Offsets the location of the <paramref name="rectangle"/> by the X and Y values of the specified <paramref name="point"/>
            </summary>
            <param name="rectangle">Rectangle to offset</param>
            <param name="point">Point with values to offset the rectangle</param>
            <returns>A new Rectangle with the offset location</returns>
        </member>
        <member name="M:Eto.Drawing.RectangleF.Inflate(Eto.Drawing.SizeF)">
            <summary>
            Inflates all dimensions of this rectangle by the specified <paramref name="size"/>
            </summary>
            <remarks>
            This inflates the rectangle in all dimensions by the width and height specified by <paramref name="size"/>.
            The resulting rectangle will be increased in width and height twice that of the specified size, and the center
            will be in the same location.
            A negative width and/or height can be passed in to deflate the rectangle.
            </remarks>
            <param name="size">Size to inflate the rectangle by</param>
        </member>
        <member name="M:Eto.Drawing.RectangleF.Inflate(System.Single,System.Single)">
            <summary>
            Inflates all dimensions of this rectangle by the specified <paramref name="width"/> and <paramref name="height"/>
            </summary>
            <remarks>
            This inflates the rectangle in all dimensions by the specified <paramref name="width"/> and <paramref name="height"/>.
            The resulting rectangle will be increased in width and height twice that of the specified size, and the center
            will be in the same location.
            A negative width and/or height can be passed in to deflate the rectangle.
            </remarks>
            <param name="width">Width to inflate the left and right of the rectangle by</param>
            <param name="height">Height to inflate the top and bottom of the rectangle by</param>
        </member>
        <member name="M:Eto.Drawing.RectangleF.Inflate(Eto.Drawing.RectangleF,Eto.Drawing.SizeF)">
            <summary>
            Inflates all dimensions of the <paramref name="rectangle"/> by the specified <paramref name="size"/>
            </summary>
            <remarks>
            This inflates the <paramref name="rectangle"/> in all dimensions by the width and height specified by <paramref name="size"/>.
            The resulting rectangle will be increased in width and height twice that of the specified size, and the center
            will be in the same location.
            A negative width and/or height can be passed in to deflate the rectangle.
            </remarks>
            <param name="rectangle">Rectangle to inflate</param>
            <param name="size">Size to inflate the rectangle by</param>
            <returns>A new rectangle inflated by the specified width and height</returns>
        </member>
        <member name="M:Eto.Drawing.RectangleF.Inflate(Eto.Drawing.RectangleF,System.Single,System.Single)">
            <summary>
            Inflates all dimensions of this <paramref name="rectangle"/> by the specified <paramref name="width"/> and <paramref name="height"/>
            </summary>
            <remarks>
            This inflates the <paramref name="rectangle"/> in all dimensions by the specified <paramref name="width"/> and <paramref name="height"/>.
            The resulting rectangle will be increased in width and height twice that of the specified size, and the center
            will be in the same location.
            A negative width and/or height can be passed in to deflate the rectangle.
            </remarks>
            <param name="rectangle">Rectangle to inflate</param>
            <param name="width">Width to inflate the left and right of the rectangle by</param>
            <param name="height">Height to inflate the top and bottom of the rectangle by</param>
            <returns>A new rectangle inflated by the specified width and height</returns>
        </member>
        <member name="M:Eto.Drawing.RectangleF.Distance(Eto.Drawing.RectangleF,Eto.Drawing.PointF)">
            <summary>
            Calculates the distance between the specified <paramref name="point"/> and <paramref name="rect"/>.
            </summary>
            <remarks>
            This calculates the horizontal and vertical distance of any of the edges of the rectangle to the specified point.
            </remarks>
            <param name="rect">Rectangle for the source.</param>
            <param name="point">Point to determine the distance from the rectangle.</param>
        </member>
        <member name="M:Eto.Drawing.RectangleF.Distance(Eto.Drawing.RectangleF,Eto.Drawing.RectangleF)">
            <summary>
            Calculates the distance between two rectangles.
            </summary>
            <remarks>
            This calculates the horizontal and vertical distance of any of the edges of each rectangle.
            If the rectangles intersect, the distance will be empty.
            </remarks>
            <param name="rect1">First rectangle to compare</param>
            <param name="rect2">Second rectangle to compare</param>
        </member>
        <member name="M:Eto.Drawing.RectangleF.Align(Eto.Drawing.SizeF)">
            <summary>
            Aligns the rectangle to a grid of the specified <paramref name="gridSize"/>
            </summary>
            <remarks>
            This will align the top, left, right, and bottom to a grid by inflating each edge to the next grid line.
            </remarks>
            <param name="gridSize">Size of the grid to align the rectangle to</param>
        </member>
        <member name="M:Eto.Drawing.RectangleF.Align(System.Single,System.Single)">
            <summary>
            Aligns the rectangle to a grid of the specified <paramref name="gridWidth"/> and <paramref name="gridHeight"/>
            </summary>
            <remarks>
            This will align the top, left, right, and bottom to a grid by inflating each edge to the next grid line.
            </remarks>
            <param name="gridWidth">Grid width</param>
            <param name="gridHeight">Grid height</param>
        </member>
        <member name="M:Eto.Drawing.RectangleF.Align(Eto.Drawing.RectangleF,Eto.Drawing.SizeF)">
            <summary>
            Aligns the <paramref name="rectangle"/> to a grid of the specified <paramref name="gridSize"/>
            </summary>
            <remarks>
            This will align the top, left, right, and bottom to a grid by inflating each edge to the next grid line.
            </remarks>
            <param name="rectangle">Rectangle to align</param>
            <param name="gridSize">Size of the grid to align the rectangle to</param>
            <returns>A new Rectangle aligned to the grid</returns>
        </member>
        <member name="M:Eto.Drawing.RectangleF.Align(Eto.Drawing.RectangleF,System.Single,System.Single)">
            <summary>
            Aligns the <paramref name="rectangle"/> to a grid of the specified <paramref name="gridWidth"/> and <paramref name="gridHeight"/>
            </summary>
            <remarks>
            This will align the top, left, right, and bottom to a grid by inflating each edge to the next grid line.
            </remarks>
            <param name="rectangle">Rectangle to align</param>
            <param name="gridWidth">Grid width</param>
            <param name="gridHeight">Grid height</param>
            <returns>A new Rectangle aligned to the grid</returns>
        </member>
        <member name="M:Eto.Drawing.RectangleF.Union(Eto.Drawing.RectangleF)">
            <summary>
            Union the <paramref name="rectangle"/> into this instance to encompass both rectangles
            </summary>
            <param name="rectangle">Rectangle to union with this instance</param>
        </member>
        <member name="M:Eto.Drawing.RectangleF.Union(Eto.Drawing.RectangleF,Eto.Drawing.RectangleF)">
            <summary>
            Combines two rectangles into one rectangle that encompasses both
            </summary>
            <param name="rect1">First rectangle to union</param>
            <param name="rect2">Second rectangle to union</param>
            <returns>A new RectangleF that encompasses both <paramref name="rect1"/> and <paramref name="rect2"/></returns>
        </member>
        <member name="M:Eto.Drawing.RectangleF.Intersect(Eto.Drawing.RectangleF)">
            <summary>
            Intersect the rectangle with the specified <paramref name="rectangle"/>
            </summary>
            <param name="rectangle">Rectangle to intersect with</param>
        </member>
        <member name="M:Eto.Drawing.RectangleF.Intersect(Eto.Drawing.RectangleF,Eto.Drawing.RectangleF)">
            <summary>
            Intersect the two specified rectangles
            </summary>
            <param name="rect1">First rectangle to intersect</param>
            <param name="rect2">Second rectangle to intersect</param>
            <returns>A new RectangleF with the intersection of the two rectangles</returns>
        </member>
        <member name="M:Eto.Drawing.RectangleF.Restrict(Eto.Drawing.PointF,Eto.Drawing.SizeF)">
            <summary>
            Restricts the rectangle to be within the specified <paramref name="point"/> and <paramref name="size"/>
            </summary>
            <remarks>
            This is a shortcut for <seealso cref="M:Eto.Drawing.RectangleF.Restrict(Eto.Drawing.RectangleF)"/>
            </remarks>
            <param name="point">Minimum location for the rectangle</param>
            <param name="size">Maximum size for the rectangle</param>
        </member>
        <member name="M:Eto.Drawing.RectangleF.Restrict(Eto.Drawing.SizeF)">
            <summary>
            Restricts the rectangle to be within the specified <paramref name="size"/> at an X,Y location of 0, 0
            </summary>
            <remarks>
            This is a shortcut for <seealso cref="M:Eto.Drawing.RectangleF.Restrict(Eto.Drawing.RectangleF)"/>
            </remarks>
            <param name="size">Maxiumum size for the rectangle</param>
        </member>
        <member name="M:Eto.Drawing.RectangleF.Restrict(Eto.Drawing.RectangleF)">
            <summary>
            Restricts the rectangle to be within the specified <paramref name="rectangle"/>
            </summary>
            <remarks>
            This ensures that the current rectangle's bounds fall within the bounds of the specified <paramref name="rectangle"/>.
            It is useful to ensure that the rectangle does not exceed certain limits (e.g. for drawing)
            </remarks>
            <param name="rectangle">Rectangle to restrict this instance to</param>
        </member>
        <member name="M:Eto.Drawing.RectangleF.Restrict(Eto.Drawing.Rectangle,Eto.Drawing.Rectangle)">
            <summary>
            Restricts the <paramref name="rectangle"/> to be within the <paramref name="restrict"/> rectangle
            </summary>
            <remarks>
            This ensures that <paramref name="rectangle"/>'s bounds fall within the bounds of the specified <paramref name="restrict"/> rectangle
            It is useful to ensure that the rectangle does not exceed certain limits (e.g. for drawing)
            </remarks>
            <param name="rectangle">Rectangle to restrict</param>
            <param name="restrict">Rectangle to restrict to</param>
            <returns>A new rectangle restricted to the restrict bounds</returns>
        </member>
        <member name="M:Eto.Drawing.RectangleF.op_Multiply(Eto.Drawing.RectangleF,System.Single)">
            <summary>
            Multiplies all X, Y, Width, Height components of the <paramref name="rectangle"/> by a <paramref name="factor"/>
            </summary>
            <param name="rectangle">Rectangle to multiply</param>
            <param name="factor">Factor to mulitply by</param>
            <returns>A new instance of a Rectangle with the product of the specified <paramref name="rectangle"/> and the <paramref name="factor"/></returns>
        </member>
        <member name="M:Eto.Drawing.RectangleF.op_Division(Eto.Drawing.RectangleF,System.Single)">
            <summary>
            Divides all X, Y, Width, Height components of the <paramref name="rectangle"/> by a <paramref name="factor"/> factor
            </summary>
            <param name="rectangle">Rectangle to divide</param>
            <param name="factor">Factor to divide by</param>
            <returns>A new instance of a Rectangle with the value of <paramref name="rectangle"/> divided by a <paramref name="factor"/></returns>
        </member>
        <member name="M:Eto.Drawing.RectangleF.op_Multiply(Eto.Drawing.RectangleF,Eto.Drawing.SizeF)">
            <summary>
            Multiplies the specified <paramref name="rectangle"/> by the Width and Height of <paramref name="size"/>
            </summary>
            <remarks>
            The X and Width components will be multiplied by the Width of the specified <paramref name="size"/>, and
            the Y and Height components will be multiplied by the Height.
            </remarks>
            <param name="rectangle">Rectangle to multiply</param>
            <param name="size">Width and Height to multiply the rectangle by</param>
            <returns>A new instance of a Rectangle with the product of the <paramref name="rectangle"/> and <paramref name="size"/></returns>
        </member>
        <member name="M:Eto.Drawing.RectangleF.op_Division(Eto.Drawing.RectangleF,Eto.Drawing.SizeF)">
            <summary>
            Divides the specified <paramref name="rectangle"/> by the Width and Height of <paramref name="size"/>
            </summary>
            <remarks>
            The X and Width components will be divided by the Width of the specified <paramref name="size"/>, and
            the Y and Height components will be divided by the Height.
            </remarks>
            <param name="rectangle">Rectangle to divide</param>
            <param name="size">Width and Height to divide the rectangle by</param>
            <returns>A new instance of a Rectangle with the value of <paramref name="rectangle"/> divided by <paramref name="size"/></returns>
        </member>
        <member name="M:Eto.Drawing.RectangleF.op_Addition(Eto.Drawing.RectangleF,Eto.Drawing.PointF)">
            <summary>
            Adds the <paramref name="offset"/> to the specified <paramref name="rectangle"/>, moving its location
            </summary>
            <param name="rectangle">Rectangle to offset</param>
            <param name="offset">Offset to move the location by</param>
        </member>
        <member name="M:Eto.Drawing.RectangleF.op_Subtraction(Eto.Drawing.RectangleF,Eto.Drawing.PointF)">
            <summary>
            Subtracts the <paramref name="offset"/> from the specified <paramref name="rectangle"/>, moving its location
            </summary>
            <param name="rectangle">Rectangle to offset</param>
            <param name="offset">Offset to move the location by</param>
        </member>
        <member name="M:Eto.Drawing.RectangleF.op_Addition(Eto.Drawing.RectangleF,Eto.Drawing.SizeF)">
            <summary>
            Adds the <paramref name="offset"/> to the specified <paramref name="rectangle"/>, moving its location
            </summary>
            <param name="rectangle">Rectangle to offset</param>
            <param name="offset">Offset to move the location by</param>
        </member>
        <member name="M:Eto.Drawing.RectangleF.op_Subtraction(Eto.Drawing.RectangleF,Eto.Drawing.SizeF)">
            <summary>
            Subtracts the <paramref name="offset"/> from the specified <paramref name="rectangle"/>, moving its location
            </summary>
            <param name="rectangle">Rectangle to offset</param>
            <param name="offset">Offset to move the location by</param>
        </member>
        <member name="M:Eto.Drawing.RectangleF.op_Equality(Eto.Drawing.RectangleF,Eto.Drawing.RectangleF)">
            <summary>
            Compares two rectangles for equality
            </summary>
            <param name="rect1">First rectangle to compare</param>
            <param name="rect2">Second rectangle to compare</param>
            <returns>True if the two rectangles are equal, false otherwise</returns>
        </member>
        <member name="M:Eto.Drawing.RectangleF.op_Inequality(Eto.Drawing.RectangleF,Eto.Drawing.RectangleF)">
            <summary>
            Compares two rectangles for inequality
            </summary>
            <param name="rect1">First rectangle to compare</param>
            <param name="rect2">Second rectangle to compare</param>
            <returns>True if the two rectangles are not equal, false otherwise</returns>
        </member>
        <member name="M:Eto.Drawing.RectangleF.op_Implicit(Eto.Drawing.Rectangle)~Eto.Drawing.RectangleF">
            <summary>
            Implicit conversion from a <see cref="T:Eto.Drawing.Rectangle"/> to a <see cref="T:Eto.Drawing.RectangleF"/>
            </summary>
            <remarks>
            Since no precision is lost, this can be implicit.
            </remarks>
            <param name="rectangle">Point to convert</param>
            <returns>A new instance of a RectangleF with the value of the specified <paramref name="rectangle"/></returns>
        </member>
        <member name="M:Eto.Drawing.RectangleF.ToString">
            <summary>
            Converts this rectangle to a string
            </summary>
            <returns>String representation of this rectangle</returns>
        </member>
        <member name="M:Eto.Drawing.RectangleF.Equals(System.Object)">
            <summary>
            Compares this rectangle to an object for equality
            </summary>
            <param name="obj">Object to compare with</param>
            <returns>True if the <paramref name="obj"/> is a Rectangle and is equal to this instance, false otherwise</returns>
        </member>
        <member name="M:Eto.Drawing.RectangleF.GetHashCode">
            <summary>
            Gets the hash code for this rectangle
            </summary>
            <returns>Hash code value for this rectangle</returns>
        </member>
        <member name="M:Eto.Drawing.RectangleF.Equals(Eto.Drawing.RectangleF)">
            <summary>
            Compares this rectangle with the specified <paramref name="other"/> rectangle
            </summary>
            <param name="other">Other rectangle to compare with</param>
            <returns>True if the <paramref name="other"/> rectangle is equal to this instance, false otherwise</returns>
        </member>
        <member name="T:Eto.Drawing.RectangleFConverter">
            <summary>
            Converter for the <see cref="T:Eto.Drawing.RectangleF"/> class
            </summary>
            <remarks>
            Allows for conversion from a string to a <see cref="T:Eto.Drawing.RectangleF"/>.
            </remarks>
            <copyright>(c) 2014 by Curtis Wensley</copyright>
            <license type="BSD-3">See LICENSE for full terms</license>
        </member>
        <member name="F:Eto.Drawing.RectangleFConverter.DimensionSplitter">
            <summary>
            The character to split up the string which will be converted
            </summary>
        </member>
        <member name="M:Eto.Drawing.RectangleFConverter.CanConvertFrom(Eto.ITypeDescriptorContext,System.Type)">
            <summary>
            Determines if this converter can convert from the specified <paramref name="sourceType"/>
            </summary>
            <param name="context">Conversion context</param>
            <param name="sourceType">Type to convert from</param>
            <returns>True if this converter can convert from the specified type, false otherwise</returns>
        </member>
        <member name="M:Eto.Drawing.RectangleFConverter.ConvertFrom(Eto.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts the specified value to a <see cref="T:Eto.Drawing.RectangleF"/>
            </summary>
            <param name="context">Conversion context</param>
            <param name="culture">Culture to perform the conversion</param>
            <param name="value">Value to convert</param>
            <returns>A new instance of a <see cref="T:Eto.Drawing.RectangleF"/> converted from the specified <paramref name="value"/></returns>
        </member>
        <member name="T:Eto.Drawing.Region">
            <summary>
            Defines a region to use for clipping
            </summary>
            <copyright>(c) 2014 by Curtis Wensley</copyright>
            <license type="BSD-3">See LICENSE for full terms</license>
        </member>
        <member name="M:Eto.Drawing.Region.Exclude(Eto.Drawing.Rectangle)">
            <summary>
            Excludes the specified <paramref name="rectangle"/> from the region
            </summary>
            <param name="rectangle">Rectangle to exclude</param>
        </member>
        <member name="M:Eto.Drawing.Region.Reset">
            <summary>
            Resets the region
            </summary>
        </member>
        <member name="M:Eto.Drawing.Region.Set(Eto.Drawing.Rectangle)">
            <summary>
            Sets the specified <paramref name="rectangle"/> in the region
            </summary>
            <param name="rectangle">Rectangle to set the region to</param>
        </member>
        <member name="T:Eto.Drawing.Region.IHandler">
            <summary>
            Handler interface for the <see cref="T:Eto.Drawing.Region"/> class
            </summary>
        </member>
        <member name="M:Eto.Drawing.Region.IHandler.Exclude(Eto.Drawing.Rectangle)">
            <summary>
            Excludes the specified <paramref name="rectangle"/> from the region
            </summary>
            <param name="rectangle">Rectangle to exclude</param>
        </member>
        <member name="M:Eto.Drawing.Region.IHandler.Reset">
            <summary>
            Resets the region
            </summary>
        </member>
        <member name="M:Eto.Drawing.Region.IHandler.Set(Eto.Drawing.Rectangle)">
            <summary>
            Sets the specified <paramref name="rectangle"/> in the region
            </summary>
            <param name="rectangle">Rectangle to set the region to</param>
        </member>
        <member name="T:Eto.Drawing.Size">
            <summary>
            Represents a size with width and height components
            </summary>
            <copyright>(c) 2014 by Curtis Wensley</copyright>
            <license type="BSD-3">See LICENSE for full terms</license>
        </member>
        <member name="P:Eto.Drawing.Size.Width">
            <summary>
            Gets or sets the width
            </summary>
        </member>
        <member name="P:Eto.Drawing.Size.Height">
            <summary>
            Gets or sets the height
            </summary>
        </member>
        <member name="F:Eto.Drawing.Size.Empty">
            <summary>
            Gets an empty size with a zero width and height
            </summary>
        </member>
        <member name="M:Eto.Drawing.Size.Round(Eto.Drawing.SizeF)">
            <summary>
            Converts a floating point <paramref name="size"/> to an integral size by rounding the width and height
            </summary>
            <param name="size">Size to convert</param>
            <returns>A new instance of a Size class with rounded width and height values of the specified <paramref name="size"/></returns>
        </member>
        <member name="M:Eto.Drawing.Size.Truncate(Eto.Drawing.SizeF)">
            <summary>
            Converts a floating point <paramref name="size"/> to an integral size by truncating the width and height
            </summary>
            <param name="size">Size to convert</param>
            <returns>A new instance of a Size struct with truncated width and height values of the specified <paramref name="size"/></returns>
        </member>
        <member name="M:Eto.Drawing.Size.Min(Eto.Drawing.Size,Eto.Drawing.Size)">
            <summary>
            Returns the minimum width and height of two sizes
            </summary>
            <param name="size1">First size to get the minimum values</param>
            <param name="size2">Second size to get the minimum values</param>
            <returns>A new instance of a Size struct with the minimum width and height of either sizes</returns>
        </member>
        <member name="M:Eto.Drawing.Size.Max(Eto.Drawing.Size,Eto.Drawing.Size)">
            <summary>
            Returns the maximum width and height of two sizes
            </summary>
            <param name="size1">First size to get the maximum values</param>
            <param name="size2">Second size to get the maximum values</param>
            <returns>A new instance of a Size struct with the maximum width and height of either sizes</returns>
        </member>
        <member name="M:Eto.Drawing.Size.Abs(Eto.Drawing.Size)">
            <summary>
            Returns the absolute width and height of the specified <paramref name="size"/>
            </summary>
            <param name="size">Size to convert</param>
            <returns>A new instance of a Size struct with absolute (positive) width and height</returns>
        </member>
        <member name="M:Eto.Drawing.Size.Ceiling(Eto.Drawing.SizeF)">
            <summary>
            Converts a floating point <paramref name="size"/> to an integral size by rounding the width and height to the 
            next integral value.
            </summary>
            <remarks>
            This is useful to get a size struct that includes the floating point values completely.  As opposed to the 
            <see cref="M:Eto.Drawing.Size.Round(Eto.Drawing.SizeF)"/>, which will round down to the nearest integral number.
            
            For example, a Width or Height of 2.1 or 2.6 would be translated to 3.
            </remarks>
            <param name="size">Size.</param>
        </member>
        <member name="F:Eto.Drawing.Size.MaxValue">
            <summary>
            Size with width and height with a maximum int value
            </summary>
        </member>
        <member name="F:Eto.Drawing.Size.MinValue">
            <summary>
            Size with width and height with a minimum int value
            </summary>
        </member>
        <member name="M:Eto.Drawing.Size.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new Size class with the specified width and height
            </summary>
            <param name="width">Initial width of the size</param>
            <param name="height">Initial height of the size</param>
        </member>
        <member name="M:Eto.Drawing.Size.#ctor(Eto.Drawing.Point)">
            <summary>
            Initializes a new Size class with width and height corresponding to the <see cref="P:Eto.Drawing.Point.X"/> and <see cref="P:Eto.Drawing.Point.Y"/> of the specified <paramref name="point"/>
            </summary>
            <param name="point">Point to convert to a Size struct</param>
        </member>
        <member name="M:Eto.Drawing.Size.#ctor(Eto.Drawing.SizeF)">
            <summary>
            Initializes a new Size with the truncated width and height of size.
            </summary>
            <param name="size"></param>
        </member>
        <member name="M:Eto.Drawing.Size.FitTo(Eto.Drawing.Size)">
            <summary>
            Fits this size to the specified <paramref name="constraint"/>, keeping the aspect
            </summary>
            <returns>The new size with the same aspect ratio with the width/height equal or within the constraint</returns>
            <param name="constraint">Constraint to fit the new size into</param>
        </member>
        <member name="M:Eto.Drawing.Size.Contains(Eto.Drawing.Point)">
            <summary>
            Gets a value indicating that the specified <paramref name="point"/> is within the <see cref="P:Eto.Drawing.Size.Width"/> and <see cref="P:Eto.Drawing.Size.Height"/> of this size
            </summary>
            <param name="point">Point to test</param>
            <returns>True if the <paramref name="point"/> has an X and Y value between 0 and the Width and Height of this size, respectively. False otherwise</returns>
        </member>
        <member name="M:Eto.Drawing.Size.Contains(System.Int32,System.Int32)">
            <summary>
            Gets a value indicating that the specified <paramref name="x"/> and <paramref name="y"/> values are within the <see cref="P:Eto.Drawing.Size.Width"/> and <see cref="P:Eto.Drawing.Size.Height"/> of this size
            </summary>
            <param name="x">X value to test</param>
            <param name="y">Y value to test</param>
            <returns>True if the <paramref name="x"/> and <paramref name="y"/> values are greater than or equal to 0 and less than the Width and Height of this size, respectively. False otherwise</returns>
        </member>
        <member name="P:Eto.Drawing.Size.IsZero">
            <summary>
            Gets a value indicating that both the <see cref="P:Eto.Drawing.Size.Width"/> and <see cref="P:Eto.Drawing.Size.Height"/> are zero
            </summary>
        </member>
        <member name="P:Eto.Drawing.Size.IsEmpty">
            <summary>
            Gets a value indicating that either the <see cref="P:Eto.Drawing.Size.Width"/> or <see cref="P:Eto.Drawing.Size.Height"/> are zero
            </summary>
        </member>
        <member name="M:Eto.Drawing.Size.op_UnaryNegation(Eto.Drawing.Size)">
            <summary>
            Negates the Width and Height of the specified <paramref name="size"/> value
            </summary>		
            <param name="size">Size to negate</param>
            <returns>A new size that has a negative value of each of the Width and Height</returns>
        </member>
        <member name="M:Eto.Drawing.Size.op_Multiply(Eto.Drawing.Size,Eto.Drawing.Size)">
            <summary>
            Multiplies the <see cref="P:Eto.Drawing.Size.Width"/> and <see cref="P:Eto.Drawing.Size.Height"/> of two sizes
            </summary>
            <param name="size1">First size to multiply</param>
            <param name="size2">Second size to multiply</param>
            <returns>A new instance of a Size struct with the product of both sizes</returns>
        </member>
        <member name="M:Eto.Drawing.Size.op_Multiply(Eto.Drawing.Size,System.Int32)">
            <summary>
            Multiplies the <see cref="P:Eto.Drawing.Size.Width"/> and <see cref="P:Eto.Drawing.Size.Height"/> of a <paramref name="size"/> by the specified <paramref name="factor"/>
            </summary>
            <param name="size">Size to multiply</param>
            <param name="factor">Factor to multiply both the Width and Height by</param>
            <returns>A new instance of a Size struct with the product of the <paramref name="size"/> and <paramref name="factor"/></returns>
        </member>
        <member name="M:Eto.Drawing.Size.op_Multiply(System.Int32,Eto.Drawing.Size)">
            <summary>
            Multiplies the <see cref="P:Eto.Drawing.Size.Width"/> and <see cref="P:Eto.Drawing.Size.Height"/> of a <paramref name="size"/> by the specified <paramref name="factor"/>
            </summary>
            <param name="size">Size to multiply</param>
            <param name="factor">Factor to multiply both the Width and Height by</param>
            <returns>A new instance of a Size struct with the product of the <paramref name="size"/> and <paramref name="factor"/></returns>
        </member>
        <member name="M:Eto.Drawing.Size.op_Multiply(Eto.Drawing.Size,System.Single)">
            <summary>
            Multiplies the <see cref="P:Eto.Drawing.Size.Width"/> and <see cref="P:Eto.Drawing.Size.Height"/> of a <paramref name="size"/> by the specified floating point <paramref name="factor"/>
            </summary>
            <param name="size">Size to multiply</param>
            <param name="factor">Factor to multiply both the Width and Height by</param>
            <returns>A new instance of a SizeF struct with the product of the <paramref name="size"/> and <paramref name="factor"/></returns>
        </member>
        <member name="M:Eto.Drawing.Size.op_Division(Eto.Drawing.Size,Eto.Drawing.Size)">
            <summary>
            Divides the <see cref="P:Eto.Drawing.Size.Width"/> and <see cref="P:Eto.Drawing.Size.Height"/> of two sizes
            </summary>
            <param name="size1">Size to divide</param>
            <param name="size2">Size to divide by</param>
            <returns>A new instance of a Size struct with the division of <paramref name="size1"/> by <paramref name="size2"/></returns>
        </member>
        <member name="M:Eto.Drawing.Size.op_Division(Eto.Drawing.Size,System.Int32)">
            <summary>
            Divides the <see cref="P:Eto.Drawing.Size.Width"/> and <see cref="P:Eto.Drawing.Size.Height"/> of a <paramref name="size"/> by the specified <paramref name="factor"/>
            </summary>
            <param name="size">Size to divide</param>
            <param name="factor">Factor to divide both the Width and Height by</param>
            <returns>A new instance of a Size struct with the width and height of <paramref name="size"/> divided by <paramref name="factor"/></returns>
        </member>
        <member name="M:Eto.Drawing.Size.op_Addition(Eto.Drawing.Size,Eto.Drawing.Size)">
            <summary>
            Adds the <see cref="P:Eto.Drawing.Size.Width"/> and <see cref="P:Eto.Drawing.Size.Height"/> values of two sizes together
            </summary>
            <param name="size1">First size to add</param>
            <param name="size2">Second size to add</param>
            <returns>A new instance of a Size struct with the addition of the width and height of both sizes</returns>
        </member>
        <member name="M:Eto.Drawing.Size.op_Subtraction(Eto.Drawing.Size,Eto.Drawing.Size)">
            <summary>
            Subtracts the <see cref="P:Eto.Drawing.Size.Width"/> and <see cref="P:Eto.Drawing.Size.Height"/> value of one size from another
            </summary>
            <param name="size1">Size to subtract from</param>
            <param name="size2">Size to subtract</param>
            <returns>A new instance of a Size struct with the width and height of <paramref name="size1"/> minus <paramref name="size2"/></returns>
        </member>
        <member name="M:Eto.Drawing.Size.op_Addition(Eto.Drawing.Size,Eto.Drawing.Point)">
            <summary>
            Adds the <see cref="P:Eto.Drawing.Point.X"/> and <see cref="P:Eto.Drawing.Point.Y"/> value to the <see cref="P:Eto.Drawing.Size.Width"/> and <see cref="P:Eto.Drawing.Size.Height"/> of a size
            </summary>
            <param name="size">Size to add to</param>
            <param name="point">Point with values to add</param>
            <returns>A new instance of a Size struct with the width and height of <paramref name="size"/> plus <paramref name="point"/></returns>
        </member>
        <member name="M:Eto.Drawing.Size.op_Subtraction(Eto.Drawing.Size,Eto.Drawing.Point)">
            <summary>
            Subtracts the <see cref="P:Eto.Drawing.Point.X"/> and <see cref="P:Eto.Drawing.Point.Y"/> value from the <see cref="P:Eto.Drawing.Size.Width"/> and <see cref="P:Eto.Drawing.Size.Height"/> of a size
            </summary>
            <param name="size">Size to subtract from</param>
            <param name="point">Point with values to subtract</param>
            <returns>A new instance of a Size struct with the width and height of <paramref name="size"/> minus <paramref name="point"/></returns>
        </member>
        <member name="M:Eto.Drawing.Size.op_Subtraction(Eto.Drawing.Size,System.Int32)">
            <summary>
            Subtracts a <paramref name="value"/> from the <see cref="P:Eto.Drawing.Size.Width"/> and <see cref="P:Eto.Drawing.Size.Height"/> of the specified <paramref name="size"/>
            </summary>
            <param name="size">Size to subtract from</param>
            <param name="value">Value to subtract from the width and height</param>
            <returns>A new instance of a Size struct with the width and height of <paramref name="size"/> minus <paramref name="value"/></returns>
        </member>
        <member name="M:Eto.Drawing.Size.op_Addition(Eto.Drawing.Size,System.Int32)">
            <summary>
            Adds a <paramref name="value"/> to the <see cref="P:Eto.Drawing.Size.Width"/> and <see cref="P:Eto.Drawing.Size.Height"/> of the specified <paramref name="size"/>
            </summary>
            <param name="size">Size to add to</param>
            <param name="value">Value to add to the width and height</param>
            <returns>A new instance of a Size struct with the width and height of <paramref name="size"/> plus <paramref name="value"/></returns>
        </member>
        <member name="M:Eto.Drawing.Size.op_Equality(Eto.Drawing.Size,Eto.Drawing.Size)">
            <summary>
            Compares two sizes for equality
            </summary>
            <param name="size1">First size to compare</param>
            <param name="size2">Second size to compare</param>
            <returns>True if both the width and height of both sizes are equal, false otherwise</returns>
        </member>
        <member name="M:Eto.Drawing.Size.op_Inequality(Eto.Drawing.Size,Eto.Drawing.Size)">
            <summary>
            Compares two sizes for inequality
            </summary>
            <param name="size1">First size to compare</param>
            <param name="size2">Second size to compare</param>
            <returns>True if either the width and height of both sizes are not equal, false if they are both equal</returns>
        </member>
        <member name="M:Eto.Drawing.Size.op_Explicit(Eto.Drawing.SizeF)~Eto.Drawing.Size">
            <summary>
            Explicit conversion from a <see cref="T:Eto.Drawing.SizeF"/> to a <see cref="T:Eto.Drawing.Size"/> by truncating values
            </summary>
            <param name="size">Size to convert</param>
            <returns>A new instance of a Size with the value of the specified <paramref name="size"/></returns>
        </member>
        <member name="M:Eto.Drawing.Size.op_Explicit(Eto.Drawing.Point)~Eto.Drawing.Size">
            <summary>
            Explicit conversion from a <paramref name="point"/> to a Size with a Width and Height of the X and Y values of the point, respectively
            </summary>
            <param name="point">Point to convert</param>
            <returns>A new size with the width and height of the X and Y values of the point, respectively</returns>
        </member>
        <member name="M:Eto.Drawing.Size.Equals(System.Object)">
            <summary>
            Compares this size to the specified <paramref name="obj"/>
            </summary>
            <param name="obj">Object to compare with</param>
            <returns>True if the specified <paramref name="obj"/> is a Size and is equal to this instance</returns>
        </member>
        <member name="M:Eto.Drawing.Size.GetHashCode">
            <summary>
            Gets the hash code for this Size
            </summary>
            <returns>Hash code value for this size</returns>
        </member>
        <member name="M:Eto.Drawing.Size.ToString">
            <summary>
            Converts this Size struct to a string
            </summary>
            <returns>String representation of this Size</returns>
        </member>
        <member name="M:Eto.Drawing.Size.Equals(Eto.Drawing.Size)">
            <summary>
            Compares this size to the <paramref name="other"/> size
            </summary>
            <param name="other">Other size to compare with</param>
            <returns>True if the <paramref name="other"/> size is equal to this instance</returns>
        </member>
        <member name="T:Eto.Drawing.SizeConverter">
            <summary>
            Converter for the <see cref="T:Eto.Drawing.Size"/> class
            </summary>
            <remarks>
            Allows for conversion from a string to a <see cref="T:Eto.Drawing.Size"/>.
            </remarks>
            <copyright>(c) 2014 by Curtis Wensley</copyright>
            <license type="BSD-3">See LICENSE for full terms</license>
        </member>
        <member name="F:Eto.Drawing.SizeConverter.DimensionSplitter">
            <summary>
            The character to split up the string which will be converted
            </summary>
        </member>
        <member name="M:Eto.Drawing.SizeConverter.CanConvertFrom(Eto.ITypeDescriptorContext,System.Type)">
            <summary>
            Determines if this converter can convert from the specified <paramref name="sourceType"/>
            </summary>
            <param name="context">Conversion context</param>
            <param name="sourceType">Type to convert from</param>
            <returns>True if this converter can convert from the specified type, false otherwise</returns>
        </member>
        <member name="M:Eto.Drawing.SizeConverter.ConvertFrom(Eto.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts the specified value to a <see cref="T:Eto.Drawing.Size"/>
            </summary>
            <param name="context">Conversion context</param>
            <param name="culture">Culture to perform the conversion</param>
            <param name="value">Value to convert</param>
            <returns>A new instance of a <see cref="T:Eto.Drawing.Size"/> converted from the specified <paramref name="value"/></returns>
        </member>
        <member name="T:Eto.Drawing.SizeF">
            <summary>
            Represents a floating point size with width and height components
            </summary>
            <copyright>(c) 2014 by Curtis Wensley</copyright>
            <license type="BSD-3">See LICENSE for full terms</license>
        </member>
        <member name="P:Eto.Drawing.SizeF.Width">
            <summary>
            Gets or sets the width
            </summary>
        </member>
        <member name="P:Eto.Drawing.SizeF.Height">
            <summary>
            Gets or sets the height
            </summary>
        </member>
        <member name="F:Eto.Drawing.SizeF.Empty">
            <summary>
            Gets an empty size with a zero width and height
            </summary>
        </member>
        <member name="M:Eto.Drawing.SizeF.Min(Eto.Drawing.SizeF,Eto.Drawing.SizeF)">
            <summary>
            Returns the minimum width and height of two sizes
            </summary>
            <param name="size1">First size to get the minimum values</param>
            <param name="size2">Second size to get the minimum values</param>
            <returns>A new instance of a Size struct with the minimum width and height of either sizes</returns>
        </member>
        <member name="M:Eto.Drawing.SizeF.Max(Eto.Drawing.SizeF,Eto.Drawing.SizeF)">
            <summary>
            Returns the maximum width and height of two sizes
            </summary>
            <param name="size1">First size to get the maximum values</param>
            <param name="size2">Second size to get the maximum values</param>
            <returns>A new instance of a Size struct with the maximum width and height of either sizes</returns>
        </member>
        <member name="M:Eto.Drawing.SizeF.Abs(Eto.Drawing.SizeF)">
            <summary>
            Returns the absolute width and height of the specified <paramref name="size"/>
            </summary>
            <param name="size">Size to convert</param>
            <returns>A new instance of a Size struct with absolute (positive) width and height</returns>
        </member>
        <member name="F:Eto.Drawing.SizeF.MaxValue">
            <summary>
            SizeF with width and height with a maximum float value
            </summary>
        </member>
        <member name="F:Eto.Drawing.SizeF.MinValue">
            <summary>
            SizeF with width and height with a minimum float value
            </summary>
        </member>
        <member name="M:Eto.Drawing.SizeF.#ctor(System.Single,System.Single)">
            <summary>
            Initializes a new SizeF class with the specified width and height
            </summary>
            <param name="width">Initial width of the size</param>
            <param name="height">Initial height of the size</param>
        </member>
        <member name="M:Eto.Drawing.SizeF.#ctor(Eto.Drawing.PointF)">
            <summary>
            Initializes a new SizeF class with width and height corresponding to the <see cref="P:Eto.Drawing.PointF.X"/> and <see cref="P:Eto.Drawing.PointF.Y"/> of the specified <paramref name="point"/>
            </summary>
            <param name="point">Point to convert to a SizeF struct</param>
        </member>
        <member name="M:Eto.Drawing.SizeF.FitTo(Eto.Drawing.SizeF)">
            <summary>
            Fits this size to the specified <paramref name="constraint"/>, keeping the aspect
            </summary>
            <returns>The new size with the same aspect ratio with the width/height equal or within the constraint</returns>
            <param name="constraint">Constraint to fit the new size into</param>
        </member>
        <member name="M:Eto.Drawing.SizeF.Contains(Eto.Drawing.PointF)">
            <summary>
            Gets a value indicating that the specified <paramref name="point"/> is within the <see cref="P:Eto.Drawing.SizeF.Width"/> and <see cref="P:Eto.Drawing.SizeF.Height"/> of this size
            </summary>
            <param name="point">Point to test</param>
            <returns>True if the <paramref name="point"/> has an X and Y value between 0 and the Width and Height of this size, respectively. False otherwise</returns>
        </member>
        <member name="M:Eto.Drawing.SizeF.Contains(System.Single,System.Single)">
            <summary>
            Gets a value indicating that the specified <paramref name="x"/> and <paramref name="y"/> values are within the <see cref="P:Eto.Drawing.SizeF.Width"/> and <see cref="P:Eto.Drawing.SizeF.Height"/> of this size
            </summary>
            <param name="x">X value to test</param>
            <param name="y">Y value to test</param>
            <returns>True if the <paramref name="x"/> and <paramref name="y"/> values are between 0 and the Width and Height of this size, respectively. False otherwise</returns>
        </member>
        <member name="P:Eto.Drawing.SizeF.IsZero">
            <summary>
            Gets a value indicating that both the <see cref="P:Eto.Drawing.SizeF.Width"/> and <see cref="P:Eto.Drawing.SizeF.Height"/> are zero
            </summary>
        </member>
        <member name="P:Eto.Drawing.SizeF.IsEmpty">
            <summary>
            Gets a value indicating that either the <see cref="P:Eto.Drawing.SizeF.Width"/> or <see cref="P:Eto.Drawing.SizeF.Height"/> are zero
            </summary>
        </member>
        <member name="M:Eto.Drawing.SizeF.op_UnaryNegation(Eto.Drawing.SizeF)">
            <summary>
            Negates the Width and Height of the specified <paramref name="size"/> value
            </summary>		
            <param name="size">Size to negate</param>
            <returns>A new size that has a negative value of each of the Width and Height</returns>
        </member>
        <member name="M:Eto.Drawing.SizeF.op_Multiply(Eto.Drawing.SizeF,Eto.Drawing.SizeF)">
            <summary>
            Multiplies the <see cref="P:Eto.Drawing.SizeF.Width"/> and <see cref="P:Eto.Drawing.SizeF.Height"/> of two sizes
            </summary>
            <param name="size1">First size to multiply</param>
            <param name="size2">Second size to multiply</param>
            <returns>A new instance of a SizeF struct with the product of both sizes</returns>
        </member>
        <member name="M:Eto.Drawing.SizeF.op_Multiply(Eto.Drawing.SizeF,System.Single)">
            <summary>
            Multiplies the <see cref="P:Eto.Drawing.SizeF.Width"/> and <see cref="P:Eto.Drawing.SizeF.Height"/> of a <paramref name="size"/> by the specified <paramref name="factor"/>
            </summary>
            <param name="size">Size to multiply</param>
            <param name="factor">Factor to multiply both the Width and Height by</param>
            <returns>A new instance of a SizeF struct with the product of the <paramref name="size"/> and <paramref name="factor"/></returns>
        </member>
        <member name="M:Eto.Drawing.SizeF.op_Multiply(System.Single,Eto.Drawing.SizeF)">
            <summary>
            Multiplies the <see cref="P:Eto.Drawing.SizeF.Width"/> and <see cref="P:Eto.Drawing.SizeF.Height"/> of a <paramref name="size"/> by the specified <paramref name="factor"/>
            </summary>
            <param name="size">Size to multiply</param>
            <param name="factor">Factor to multiply both the Width and Height by</param>
            <returns>A new instance of a SizeF struct with the product of the <paramref name="size"/> and <paramref name="factor"/></returns>
        </member>
        <member name="M:Eto.Drawing.SizeF.op_Division(Eto.Drawing.SizeF,Eto.Drawing.SizeF)">
            <summary>
            Divides the <see cref="P:Eto.Drawing.SizeF.Width"/> and <see cref="P:Eto.Drawing.SizeF.Height"/> of two sizes
            </summary>
            <param name="size1">Size to divide</param>
            <param name="size2">Size to divide by</param>
            <returns>A new instance of a SizeF struct with the division of <paramref name="size1"/> by <paramref name="size2"/></returns>
        </member>
        <member name="M:Eto.Drawing.SizeF.op_Division(Eto.Drawing.SizeF,System.Single)">
            <summary>
            Divides the <see cref="P:Eto.Drawing.SizeF.Width"/> and <see cref="P:Eto.Drawing.SizeF.Height"/> of a <paramref name="size"/> by the specified <paramref name="factor"/>
            </summary>
            <param name="size">Size to divide</param>
            <param name="factor">Factor to divide both the Width and Height by</param>
            <returns>A new instance of a SizeF struct with the width and height of <paramref name="size"/> divided by <paramref name="factor"/></returns>
        </member>
        <member name="M:Eto.Drawing.SizeF.op_Addition(Eto.Drawing.SizeF,Eto.Drawing.SizeF)">
            <summary>
            Adds the <see cref="P:Eto.Drawing.SizeF.Width"/> and <see cref="P:Eto.Drawing.SizeF.Height"/> values of two sizes together
            </summary>
            <param name="size1">First size to add</param>
            <param name="size2">Second size to add</param>
            <returns>A new instance of a SizeF struct with the addition of the width and height of both sizes</returns>
        </member>
        <member name="M:Eto.Drawing.SizeF.op_Subtraction(Eto.Drawing.SizeF,Eto.Drawing.SizeF)">
            <summary>
            Subtracts the <see cref="P:Eto.Drawing.SizeF.Width"/> and <see cref="P:Eto.Drawing.SizeF.Height"/> value of one size from another
            </summary>
            <param name="size1">Size to subtract from</param>
            <param name="size2">Size to subtract</param>
            <returns>A new instance of a SizeF struct with the width and height of <paramref name="size1"/> minus <paramref name="size2"/></returns>
        </member>
        <member name="M:Eto.Drawing.SizeF.op_Subtraction(Eto.Drawing.SizeF,System.Single)">
            <summary>
            Subtracts a <paramref name="value"/> from the <see cref="P:Eto.Drawing.SizeF.Width"/> and <see cref="P:Eto.Drawing.SizeF.Height"/> of the specified <paramref name="size"/>
            </summary>
            <param name="size">Size to subtract from</param>
            <param name="value">Value to subtract from the width and height</param>
            <returns>A new instance of a SizeF struct with the width and height of <paramref name="size"/> minus <paramref name="value"/></returns>
        </member>
        <member name="M:Eto.Drawing.SizeF.op_Addition(Eto.Drawing.SizeF,System.Single)">
            <summary>
            Adds a <paramref name="value"/> to the <see cref="P:Eto.Drawing.SizeF.Width"/> and <see cref="P:Eto.Drawing.SizeF.Height"/> of the specified <paramref name="size"/>
            </summary>
            <param name="size">Size to add to</param>
            <param name="value">Value to add to the width and height</param>
            <returns>A new instance of a SizeF struct with the width and height of <paramref name="size"/> plus <paramref name="value"/></returns>
        </member>
        <member name="M:Eto.Drawing.SizeF.op_Equality(Eto.Drawing.SizeF,Eto.Drawing.SizeF)">
            <summary>
            Compares two sizes for equality
            </summary>
            <param name="size1">First size to compare</param>
            <param name="size2">Second size to compare</param>
            <returns>True if both the width and height of both sizes are equal, false otherwise</returns>
        </member>
        <member name="M:Eto.Drawing.SizeF.op_Inequality(Eto.Drawing.SizeF,Eto.Drawing.SizeF)">
            <summary>
            Compares two sizes for inequality
            </summary>
            <param name="size1">First size to compare</param>
            <param name="size2">Second size to compare</param>
            <returns>True if either the width and height of both sizes are not equal, false if they are both equal</returns>
        </member>
        <member name="M:Eto.Drawing.SizeF.op_Implicit(Eto.Drawing.Size)~Eto.Drawing.SizeF">
            <summary>
            Implicitly converts the specified integral <paramref name="size"/> to a floating point <see cref="T:Eto.Drawing.SizeF"/>
            </summary>
            <param name="size">Size to convert</param>
            <returns>A new instance of a floating point SizeF with the same value as the specified <paramref name="size"/></returns>
        </member>
        <member name="M:Eto.Drawing.SizeF.op_Explicit(Eto.Drawing.PointF)~Eto.Drawing.SizeF">
            <summary>
            Explicit conversion from a <paramref name="point"/> to a Size with a Width and Height of the X and Y values of the point, respectively
            </summary>
            <param name="point">Point to convert</param>
            <returns>A new size with the width and height of the X and Y values of the point, respectively</returns>
        </member>
        <member name="M:Eto.Drawing.SizeF.Equals(System.Object)">
            <summary>
            Compares this size to the specified <paramref name="obj"/>
            </summary>
            <param name="obj">Object to compare with</param>
            <returns>True if the specified <paramref name="obj"/> is a Size and is equal to this instance</returns>
        </member>
        <member name="M:Eto.Drawing.SizeF.GetHashCode">
            <summary>
            Gets the hash code for this Size
            </summary>
            <returns>Hash code value for this size</returns>
        </member>
        <member name="M:Eto.Drawing.SizeF.ToString">
            <summary>
            Converts this Size struct to a string
            </summary>
            <returns>String representation of this SizeF</returns>
        </member>
        <member name="M:Eto.Drawing.SizeF.Equals(Eto.Drawing.SizeF)">
            <summary>
            Compares this size to the <paramref name="other"/> size
            </summary>
            <param name="other">Other size to compare with</param>
            <returns>True if the <paramref name="other"/> size is equal to this instance</returns>
        </member>
        <member name="T:Eto.Drawing.SizeFConverter">
            <summary>
            Converter for the <see cref="T:Eto.Drawing.SizeF"/> class
            </summary>
            <remarks>
            Allows for conversion from a string to a <see cref="T:Eto.Drawing.SizeF"/>.
            </remarks>
            <copyright>(c) 2014 by Curtis Wensley</copyright>
            <license type="BSD-3">See LICENSE for full terms</license>
        </member>
        <member name="F:Eto.Drawing.SizeFConverter.DimensionSplitter">
            <summary>
            The character to split up the string which will be converted
            </summary>
        </member>
        <member name="M:Eto.Drawing.SizeFConverter.CanConvertFrom(Eto.ITypeDescriptorContext,System.Type)">
            <summary>
            Determines if this converter can convert from the specified <paramref name="sourceType"/>
            </summary>
            <param name="context">Conversion context</param>
            <param name="sourceType">Type to convert from</param>
            <returns>True if this converter can convert from the specified type, false otherwise</returns>
        </member>
        <member name="M:Eto.Drawing.SizeFConverter.ConvertFrom(Eto.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts the specified value to a <see cref="T:Eto.Drawing.SizeF"/>
            </summary>
            <param name="context">Conversion context</param>
            <param name="culture">Culture to perform the conversion</param>
            <param name="value">Value to convert</param>
            <returns>A new instance of a <see cref="T:Eto.Drawing.SizeF"/> converted from the specified <paramref name="value"/></returns>
        </member>
        <member name="T:Eto.Drawing.SolidBrush">
            <summary>
            Defines a brush with a solid color for use with <see cref="T:Eto.Drawing.Graphics"/> fill operations
            </summary>
            <copyright>(c) 2012-2014 by Curtis Wensley</copyright>
            <license type="BSD-3">See LICENSE for full terms</license>
        </member>
        <member name="P:Eto.Drawing.SolidBrush.Handler">
            <summary>
            Gets the platform handler object for the widget
            </summary>
            <value>The handler for the widget</value>
        </member>
        <member name="P:Eto.Drawing.SolidBrush.Instantiator">
            <summary>
            Gets a delegate to instantiate objects of this type with minimal overhead
            </summary>
        </member>
        <member name="M:Eto.Drawing.SolidBrush.#ctor(Eto.Drawing.Color)">
            <summary>
            Initializes a new instance of a SolidBrush with the specified <paramref name="color"/>
            </summary>
            <param name="color">Color for the brush</param>
        </member>
        <member name="P:Eto.Drawing.SolidBrush.Color">
            <summary>
            Gets or sets the fill color of this brush
            </summary>
        </member>
        <member name="T:Eto.Drawing.SolidBrush.IHandler">
            <summary>
            Platform handler interface for <see cref="T:Eto.Drawing.SolidBrush"/>
            </summary>
            <copyright>(c) 2012-2014 by Curtis Wensley</copyright>
            <license type="BSD-3">See LICENSE for full terms</license>
        </member>
        <member name="M:Eto.Drawing.SolidBrush.IHandler.GetColor(Eto.Drawing.SolidBrush)">
            <summary>
            Gets the current fill color of the specified brush
            </summary>
            <param name="widget">Widget to get the color for</param>
            <returns>Color of the specified brush</returns>
        </member>
        <member name="M:Eto.Drawing.SolidBrush.IHandler.SetColor(Eto.Drawing.SolidBrush,Eto.Drawing.Color)">
            <summary>
            Sets the fill color of the specified brush
            </summary>
            <param name="widget">Widget to set the color for</param>
            <param name="color">Color to fill</param>
        </member>
        <member name="M:Eto.Drawing.SolidBrush.IHandler.Create(Eto.Drawing.Color)">
            <summary>
            Creates a new solid brush with the specified color
            </summary>
            <param name="color">Color of the brush</param>
            <returns>ControlObject of the brush to store</returns>
        </member>
        <member name="T:Eto.Drawing.SystemColors">
            <summary>
            Methods to get colors of system elements
            </summary>
            <copyright>(c) 2015 by Curtis Wensley</copyright>
            <license type="BSD-3">See LICENSE for full terms</license>
        </member>
        <member name="P:Eto.Drawing.SystemColors.DisabledText">
            <summary>
            Gets the color of disabled text.
            </summary>
            <value>The color of disabled text.</value>
        </member>
        <member name="P:Eto.Drawing.SystemColors.ControlText">
            <summary>
            Gets the color of text in a control, such as a TextBox or GridView.
            </summary>
            <value>The color of control text.</value>
        </member>
        <member name="P:Eto.Drawing.SystemColors.HighlightText">
            <summary>
            Gets the color of highlighted text in controls such as a TextBox or GridView.
            </summary>
            <value>The color of highlighted text.</value>
        </member>
        <member name="P:Eto.Drawing.SystemColors.Control">
            <summary>
            Gets the color of a control.
            </summary>
            <value>The control color.</value>
        </member>
        <member name="P:Eto.Drawing.SystemColors.ControlBackground">
            <summary>
            Gets the color of a control's background, such as the entry area of a TextBox.
            </summary>
            <value>The control background color.</value>
        </member>
        <member name="P:Eto.Drawing.SystemColors.Highlight">
            <summary>
            Gets the highlight color.
            </summary>
            <value>The highlight.</value>
        </member>
        <member name="P:Eto.Drawing.SystemColors.WindowBackground">
            <summary>
            Gets the color of a window background.
            </summary>
            <value>The window background.</value>
        </member>
        <member name="T:Eto.Drawing.SystemColors.IHandler">
            <summary>
            Handler interface for <see cref="T:Eto.Drawing.SystemColors"/>
            </summary>
        </member>
        <member name="P:Eto.Drawing.SystemColors.IHandler.DisabledText">
            <summary>
            Gets the color of disabled text.
            </summary>
            <value>The color of disabled text.</value>
        </member>
        <member name="P:Eto.Drawing.SystemColors.IHandler.ControlText">
            <summary>
            Gets the color of text in a control, such as a TextBox or GridView.
            </summary>
            <value>The color of control text.</value>
        </member>
        <member name="P:Eto.Drawing.SystemColors.IHandler.HighlightText">
            <summary>
            Gets the color of highlighted text in controls such as a TextBox or GridView.
            </summary>
            <value>The color of highlighted text.</value>
        </member>
        <member name="P:Eto.Drawing.SystemColors.IHandler.Control">
            <summary>
            Gets the color of a control.
            </summary>
            <value>The control color.</value>
        </member>
        <member name="P:Eto.Drawing.SystemColors.IHandler.ControlBackground">
            <summary>
            Gets the color of a control's background, such as the entry area of a TextBox.
            </summary>
            <value>The control background color.</value>
        </member>
        <member name="P:Eto.Drawing.SystemColors.IHandler.Highlight">
            <summary>
            Gets the highlight color.
            </summary>
            <value>The highlight.</value>
        </member>
        <member name="P:Eto.Drawing.SystemColors.IHandler.WindowBackground">
            <summary>
            Gets the color of a window background.
            </summary>
            <value>The window background.</value>
        </member>
        <member name="T:Eto.Drawing.SystemFonts">
            <summary>
            Methods to get information about current fonts installed the running system
            </summary>
            <copyright>(c) 2014 by Curtis Wensley</copyright>
            <license type="BSD-3">See LICENSE for full terms</license>
        </member>
        <member name="M:Eto.Drawing.SystemFonts.Cached(Eto.Drawing.SystemFont,System.Nullable{System.Single},Eto.Drawing.FontDecoration)">
            <summary>
            Gets a cached font
            </summary>
            <param name="systemFont">System font to get</param>
            <param name="size">Size in points of the font</param>
            <param name="decoration">Decorations to apply to the font</param>
        </member>
        <member name="M:Eto.Drawing.SystemFonts.ClearCache">
            <summary>
            Clears the font cache
            </summary>
            <remarks>
            This is useful if you are using the <see cref="M:Eto.Drawing.SystemFonts.Cached(Eto.Drawing.SystemFont,System.Nullable{System.Single},Eto.Drawing.FontDecoration)"/> method to cache fonts and want to clear it
            to conserve memory or resources.
            </remarks>
        </member>
        <member name="M:Eto.Drawing.SystemFonts.Bold(System.Nullable{System.Single},Eto.Drawing.FontDecoration)">
            <summary>
            Gets the system bold font with optional specified <paramref name="size"/> and <paramref name="decoration"/>.
            </summary>
            <param name="size">Size for the font, or null for the default system font size.</param>
            <param name="decoration">Decorations to add to the font.</param>
        </member>
        <member name="M:Eto.Drawing.SystemFonts.Default(System.Nullable{System.Single},Eto.Drawing.FontDecoration)">
            <summary>
            Gets the system default font with optional specified <paramref name="size"/> and <paramref name="decoration"/>.
            </summary>
            <param name="size">Size for the font, or null for the default system font size.</param>
            <param name="decoration">Decorations to add to the font.</param>
        </member>
        <member name="M:Eto.Drawing.SystemFonts.Label(System.Nullable{System.Single},Eto.Drawing.FontDecoration)">
            <summary>
            Gets the system label font with optional specified <paramref name="size"/> and <paramref name="decoration"/>.
            </summary>
            <param name="size">Size for the font, or null for the default system font size.</param>
            <param name="decoration">Decorations to add to the font.</param>
        </member>
        <member name="M:Eto.Drawing.SystemFonts.Menu(System.Nullable{System.Single},Eto.Drawing.FontDecoration)">
            <summary>
            Gets the system menu font with optional specified <paramref name="size"/> and <paramref name="decoration"/>.
            </summary>
            <param name="size">Size for the font, or null for the default system font size.</param>
            <param name="decoration">Decorations to add to the font.</param>
        </member>
        <member name="M:Eto.Drawing.SystemFonts.MenuBar(System.Nullable{System.Single},Eto.Drawing.FontDecoration)">
            <summary>
            Gets the system menu bar font with optional specified <paramref name="size"/> and <paramref name="decoration"/>.
            </summary>
            <param name="size">Size for the font, or null for the default system font size.</param>
            <param name="decoration">Decorations to add to the font.</param>
        </member>
        <member name="M:Eto.Drawing.SystemFonts.Message(System.Nullable{System.Single},Eto.Drawing.FontDecoration)">
            <summary>
            Gets the system message box font with optional specified <paramref name="size"/> and <paramref name="decoration"/>.
            </summary>
            <param name="size">Size for the font, or null for the default system font size.</param>
            <param name="decoration">Decorations to add to the font.</param>
        </member>
        <member name="M:Eto.Drawing.SystemFonts.Palette(System.Nullable{System.Single},Eto.Drawing.FontDecoration)">
            <summary>
            Gets the system palette font with optional specified <paramref name="size"/> and <paramref name="decoration"/>.
            </summary>
            <param name="size">Size for the font, or null for the default system font size.</param>
            <param name="decoration">Decorations to add to the font.</param>
        </member>
        <member name="M:Eto.Drawing.SystemFonts.StatusBar(System.Nullable{System.Single},Eto.Drawing.FontDecoration)">
            <summary>
            Gets the system status bar font with optional specified <paramref name="size"/> and <paramref name="decoration"/>.
            </summary>
            <param name="size">Size for the font, or null for the default system font size.</param>
            <param name="decoration">Decorations to add to the font.</param>
        </member>
        <member name="M:Eto.Drawing.SystemFonts.TitleBar(System.Nullable{System.Single},Eto.Drawing.FontDecoration)">
            <summary>
            Gets the system title bar font with optional specified <paramref name="size"/> and <paramref name="decoration"/>.
            </summary>
            <param name="size">Size for the font, or null for the default system font size.</param>
            <param name="decoration">Decorations to add to the font.</param>
        </member>
        <member name="M:Eto.Drawing.SystemFonts.ToolTip(System.Nullable{System.Single},Eto.Drawing.FontDecoration)">
            <summary>
            Gets the system tooltip font with optional specified <paramref name="size"/> and <paramref name="decoration"/>.
            </summary>
            <param name="size">Size for the font, or null for the default system font size.</param>
            <param name="decoration">Decorations to add to the font.</param>
        </member>
        <member name="T:Eto.Drawing.ITransformBrush">
            <summary>
            Interface for brushes with a transform
            </summary>
            <remarks>
            The transform is used to specify how the brush will be applied to the drawing.
            </remarks>
            <copyright>(c) 2014 by Curtis Wensley</copyright>
            <license type="BSD-3">See LICENSE for full terms</license>
        </member>
        <member name="P:Eto.Drawing.ITransformBrush.Transform">
            <summary>
            Gets or sets the transform for this brush
            </summary>
            <value>The transform for the brush</value>
        </member>
        <member name="T:Eto.Drawing.TextureBrush">
            <summary>
            Defines a brush with an image texture for use with <see cref="T:Eto.Drawing.Graphics"/> fill operations
            </summary>
            <copyright>(c) 2012-2014 by Curtis Wensley</copyright>
            <license type="BSD-3">See LICENSE for full terms</license>
        </member>
        <member name="P:Eto.Drawing.TextureBrush.Image">
            <summary>
            Gets the texture's image to paint with
            </summary>
            <value>The image used to paint</value>
        </member>
        <member name="P:Eto.Drawing.TextureBrush.Handler">
            <summary>
            Gets the platform handler object for the widget
            </summary>
            <value>The handler for the widget</value>
        </member>
        <member name="P:Eto.Drawing.TextureBrush.Instantiator">
            <summary>
            Gets an instantiator for the texture brush to create instances
            </summary>
            <remarks>
            This can be used to instantiate texture brushes when creating many brushes to minimize overhead
            </remarks>
        </member>
        <member name="M:Eto.Drawing.TextureBrush.#ctor(Eto.Drawing.Image,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Eto.Drawing.TextureBrush"/> class.
            </summary>
            <param name="image">Image for the brush</param>
            <param name="opacity">Opacity of the texture to apply to the brush when painting</param>
        </member>
        <member name="P:Eto.Drawing.TextureBrush.Transform">
            <summary>
            Gets or sets the transform for this brush
            </summary>
            <value>The transform for the brush</value>
        </member>
        <member name="P:Eto.Drawing.TextureBrush.Opacity">
            <summary>
            Gets or sets the opacity of the brush texture
            </summary>
            <value>The opacity for the brush texture</value>
        </member>
        <member name="T:Eto.Drawing.TextureBrush.IHandler">
            <summary>
            Platform handler interface for <see cref="T:Eto.Drawing.TextureBrush"/>
            </summary>
            <copyright>(c) 2012-2014 by Curtis Wensley</copyright>
            <license type="BSD-3">See LICENSE for full terms</license>
        </member>
        <member name="M:Eto.Drawing.TextureBrush.IHandler.GetTransform(Eto.Drawing.TextureBrush)">
            <summary>
            Gets the transform for the specified brush
            </summary>
            <returns>The transform for the brush</returns>
            <param name="widget">Brush to get the transform</param>
        </member>
        <member name="M:Eto.Drawing.TextureBrush.IHandler.SetTransform(Eto.Drawing.TextureBrush,Eto.Drawing.IMatrix)">
            <summary>
            Sets the transform for the specified brush
            </summary>
            <param name="widget">Brush to set the transform</param>
            <param name="transform">Transform to set to the brush</param>
        </member>
        <member name="M:Eto.Drawing.TextureBrush.IHandler.SetOpacity(Eto.Drawing.TextureBrush,System.Single)">
            <summary>
            Sets the opacity of the texture brush
            </summary>
            <param name="widget">Brush to set the opacity</param>
            <param name="opacity">Opacity to set to the brush</param>
        </member>
        <member name="M:Eto.Drawing.TextureBrush.IHandler.Create(Eto.Drawing.Image,System.Single)">
            <summary>
            Creates a brush object with the specified image and opacity
            </summary>
            <param name="image">Image.</param>
            <param name="opacity">Opacity.</param>
            <returns>ControlObject for the brush</returns>
        </member>
        <member name="T:Eto.EtoSpecialFolder">
            <summary>
            Enumeration of the special folders that can be retrieved
            </summary>
        </member>
        <member name="F:Eto.EtoSpecialFolder.ApplicationSettings">
            <summary>
            Application settings folder to store settings or data
            </summary>
            <remarks>
            This will return a different folder, depending on the platform:
              OS X:    ~/Library/Application Settings/[Name Of Application]
              Windows: [User's Home]/AppSettings
              Linux:   ~/.config
            </remarks>
        </member>
        <member name="F:Eto.EtoSpecialFolder.ApplicationResources">
            <summary>
            The application resources.path
            </summary>
            <remarks>
            In OS X, this will be the .app bunldle's resource path.  Other platforms
            will typically return the same path as the current executable file
            </remarks>
        </member>
        <member name="F:Eto.EtoSpecialFolder.Documents">
            <summary>
            The user's documents folder
            </summary>
        </member>
        <member name="T:Eto.EtoEnvironment">
            <summary>
            Environment methods
            </summary>
        </member>
        <member name="P:Eto.EtoEnvironment.Platform">
            <summary>
            Gets the platform information for the currently running operating system
            </summary>
        </member>
        <member name="M:Eto.EtoEnvironment.GetFolderPath(Eto.EtoSpecialFolder)">
            <summary>
            Gets the folder path for the specified special folder
            </summary>
            <param name="folder">Special folder to retrieve the path for</param>
            <returns>Path of the specified folder</returns>
        </member>
        <member name="P:Eto.EtoEnvironment.Is64BitProcess">
            <summary>
            Gets a value indicating the runtime is a 64 bit process.
            </summary>
            <value><c>true</c> if running under 64 bit; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Eto.EtoEnvironment.IHandler">
            <summary>
            Handler interface for the <see cref="T:Eto.EtoEnvironment"/> class
            </summary>
        </member>
        <member name="M:Eto.EtoEnvironment.IHandler.GetFolderPath(Eto.EtoSpecialFolder)">
            <summary>
            Gets the folder path for the specified special folder
            </summary>
            <param name="folder">Special folder to retrieve the path for</param>
            <returns>Path of the specified folder</returns>
        </member>
        <member name="T:Eto.EtoMemberIdentifier">
            <summary>
            Member identifier for attached properties
            </summary>
        </member>
        <member name="M:Eto.EtoMemberIdentifier.#ctor(System.Type,System.String)">
            <summary>
            Initializes a new instance of the EtoMemberIdentifier class
            </summary>
            <param name="declaringType">Type that the property is attached to</param>
            <param name="memberName">Name of the member/property</param>
        </member>
        <member name="T:Eto.AttachableMemberIdentifier">
            <summary>
            Attachable member identifier for properties, when xaml is not present/available
            </summary>
            <remarks>
            This is used to provide an alternate implementation of the AttachableMemberIdentifier
            when compiling without XAML support.
            </remarks>
        </member>
        <member name="P:Eto.AttachableMemberIdentifier.DeclaringType">
            <summary>
            Gets the type that declared the member.
            </summary>
            <value>The type of the declaring class.</value>
        </member>
        <member name="P:Eto.AttachableMemberIdentifier.MemberName">
            <summary>
            Gets the name of the member.
            </summary>
            <value>The name of the member.</value>
        </member>
        <member name="M:Eto.AttachableMemberIdentifier.#ctor(System.Type,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Eto.AttachableMemberIdentifier"/> class.
            </summary>
            <param name="declaringType">Declaring type.</param>
            <param name="memberName">Name of the member.</param>
        </member>
        <member name="M:Eto.AttachableMemberIdentifier.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:Eto.AttachableMemberIdentifier"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:Eto.AttachableMemberIdentifier"/>.</param>
            <returns><c>true</c> if the specified <see cref="T:System.Object"/> is equal to the current
            <see cref="T:Eto.AttachableMemberIdentifier"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Eto.AttachableMemberIdentifier.Equals(Eto.AttachableMemberIdentifier)">
            <summary>
            Determines whether the specified <see cref="T:Eto.AttachableMemberIdentifier"/> is equal to the current <see cref="T:Eto.AttachableMemberIdentifier"/>.
            </summary>
            <param name="other">The <see cref="T:Eto.AttachableMemberIdentifier"/> to compare with the current <see cref="T:Eto.AttachableMemberIdentifier"/>.</param>
            <returns><c>true</c> if the specified <see cref="T:Eto.AttachableMemberIdentifier"/> is equal to the current
            <see cref="T:Eto.AttachableMemberIdentifier"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Eto.AttachableMemberIdentifier.GetHashCode">
            <summary>
            Serves as a hash function for a <see cref="T:Eto.AttachableMemberIdentifier"/> object.
            </summary>
            <returns>A hash code for this instance that is suitable for use in hashing algorithms and data structures such as a hash table.</returns>
        </member>
        <member name="M:Eto.AttachableMemberIdentifier.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:Eto.AttachableMemberIdentifier"/>.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents the current <see cref="T:Eto.AttachableMemberIdentifier"/>.</returns>
        </member>
        <member name="M:Eto.AttachableMemberIdentifier.op_Equality(Eto.AttachableMemberIdentifier,Eto.AttachableMemberIdentifier)">
            <summary>
            Compares two AttachableMemberIdentifier objects for equality
            </summary>
            <param name="left">First member identifier to compare</param>
            <param name="right">Second member identifier to compare</param>
        </member>
        <member name="M:Eto.AttachableMemberIdentifier.op_Inequality(Eto.AttachableMemberIdentifier,Eto.AttachableMemberIdentifier)">
            <summary>
            Compares two AttachableMemberIdentifier objects for inequality
            </summary>
            <param name="left">First member identifier to compare</param>
            <param name="right">Second member identifier to compare</param>
        </member>
        <member name="T:Eto.ExportHandlerAttribute">
            <summary>
            Exports a handler from a 3rd party assembly.
            </summary>
            <remarks>
            Use this to register a custom control from your custom assembly.
            
            Use <see cref="T:Eto.ExportInitializerAttribute"/> when registering a lot of controls or to perform additional logic.
            </remarks>
        </member>
        <member name="P:Eto.ExportHandlerAttribute.WidgetType">
            <summary>
            Gets the type of the widget or handler interface to map to
            </summary>
            <value>The type of the widget or handler.</value>
        </member>
        <member name="P:Eto.ExportHandlerAttribute.HandlerType">
            <summary>
            Gets the type of the handler to instantiate
            </summary>
            <value>The type of the handler for the widget.</value>
        </member>
        <member name="M:Eto.ExportHandlerAttribute.#ctor(System.Type,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Eto.ExportHandlerAttribute"/> class.
            </summary>
            <param name="widgetType">Widget or handler interface type.</param>
            <param name="handlerType">Handler that implements the widget's handler interface.</param>
        </member>
        <member name="M:Eto.ExportHandlerAttribute.Register(Eto.Platform)">
            <summary>
            Registers the extension with the specified platform
            </summary>
            <returns><c>true</c>, if the extension was applied, <c>false</c> otherwise.</returns>
            <param name="platform">Platform to register this extension with.</param>
        </member>
        <member name="T:Eto.ExtendedObservableCollection`1">
            <summary>
            Observable collection with extended functionality such as sorting and adding a range of items
            </summary>
        </member>
        <member name="M:Eto.ExtendedObservableCollection`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Eto.ExtendedObservableCollection`1"/> class.
            </summary>
        </member>
        <member name="M:Eto.ExtendedObservableCollection`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Eto.ExtendedObservableCollection`1"/> class with the specified items.
            </summary>
            <param name="items">Items to initialize the collection with.</param>
        </member>
        <member name="M:Eto.ExtendedObservableCollection`1.Sort(System.Collections.Generic.IComparer{`0})">
            <summary>
            Sorts the collection using the specified <paramref name="comparer"/>.
            </summary>
            <param name="comparer">Comparer for the sort.</param>
        </member>
        <member name="M:Eto.ExtendedObservableCollection`1.Sort(System.Comparison{`0})">
            <summary>
            Sorts the collection using the specified <paramref name="comparison"/>.
            </summary>
            <param name="comparison">Comparison for the sort.</param>
        </member>
        <member name="M:Eto.ExtendedObservableCollection`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Adds the specified <paramref name="items"/> to the collection.
            </summary>
            <param name="items">Items to add to the collection.</param>
        </member>
        <member name="T:Eto.FileAction">
            <summary>
            File action.
            </summary>
        </member>
        <member name="F:Eto.FileAction.OpenFile">
            <summary>
            The open file.
            </summary>
        </member>
        <member name="F:Eto.FileAction.SaveFile">
            <summary>
            The save file.
            </summary>
        </member>
        <member name="F:Eto.FileAction.SelectFolder">
            <summary>
            The select folder.
            </summary>
        </member>
        <member name="T:Eto.Forms.AboutDialog">
            <summary>
            Dialog for displaying information about the application.
            </summary>
        </member>
        <member name="M:Eto.Forms.AboutDialog.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Eto.Forms.AboutDialog"/> class.
            </summary>
        </member>
        <member name="M:Eto.Forms.AboutDialog.#ctor(System.Reflection.Assembly)">
            <summary>
            Initializes a new instance of the <see cref="T:Eto.Forms.AboutDialog"/> class.
            </summary>
            <param name="assembly">
            Assembly file from which it'll try to load <see cref="P:Eto.Forms.AboutDialog.ProgramName"/>, 
            <see cref="P:Eto.Forms.AboutDialog.ProgramDescription"/>, <see cref="P:Eto.Forms.AboutDialog.Version"/> and <see cref="P:Eto.Forms.AboutDialog.Copyright"/> properties.
            </param>
        </member>
        <member name="P:Eto.Forms.AboutDialog.Copyright">
            <summary>
            Gets or sets the copyright text.
            </summary>
            <value>The copyright text.</value>
        </member>
        <member name="P:Eto.Forms.AboutDialog.Designers">
            <summary>
            Gets or sets the list of graphical designers.
            </summary>
            <value>The list of graphical designers.</value>
            <seealso cref="P:Eto.Forms.AboutDialog.Developers"/>
            <seealso cref="P:Eto.Forms.AboutDialog.Documenters"/>
        </member>
        <member name="P:Eto.Forms.AboutDialog.Developers">
            <summary>
            Gets or sets the list of developers.
            </summary>
            <value>The list of developers.</value>
            <seealso cref="P:Eto.Forms.AboutDialog.Designers"/>
            <seealso cref="P:Eto.Forms.AboutDialog.Documenters"/>
        </member>
        <member name="P:Eto.Forms.AboutDialog.Documenters">
            <summary>
            Gets or sets the list of documenters.
            </summary>
            <value>The list of documenters.</value>
            <seealso cref="P:Eto.Forms.AboutDialog.Designers"/>
            <seealso cref="P:Eto.Forms.AboutDialog.Developers"/>
        </member>
        <member name="P:Eto.Forms.AboutDialog.License">
            <summary>
            Gets or sets the license.
            </summary>
            <value>The license.</value>
        </member>
        <member name="P:Eto.Forms.AboutDialog.Logo">
            <summary>
            Gets or sets the application logo.
            </summary>
            <value>The application logo.</value>
        </member>
        <member name="P:Eto.Forms.AboutDialog.ProgramDescription">
            <summary>
            Gets or sets the program description.
            </summary>
            <value>The program description.</value>
        </member>
        <member name="P:Eto.Forms.AboutDialog.ProgramName">
            <summary>
            Gets or sets the name of the program.
            </summary>
            <value>The name of the program.</value>
        </member>
        <member name="P:Eto.Forms.AboutDialog.Title">
            <summary>
            Gets or sets the window title.
            </summary>
            <value>The window title.</value>
        </member>
        <member name="P:Eto.Forms.AboutDialog.Version">
            <summary>
            Gets or sets the application version.
            </summary>
            <value>The application version.</value>
        </member>
        <member name="P:Eto.Forms.AboutDialog.Website">
            <summary>
            Gets or sets the application website.
            </summary>
            <value>The application website.</value>
        </member>
        <member name="P:Eto.Forms.AboutDialog.WebsiteLabel">
            <summary>
            Gets or sets the application website label.
            </summary>
            <value>The application website label.</value>
        </member>
        <member name="T:Eto.Forms.AboutDialog.IHandler">
            <summary>
            Handler interface for the <see cref="T:Eto.Forms.AboutDialog"/>
            </summary>
        </member>
        <member name="P:Eto.Forms.AboutDialog.IHandler.Copyright">
            <summary>
            Gets or sets the copyright text.
            </summary>
            <value>The copyright text.</value>
        </member>
        <member name="P:Eto.Forms.AboutDialog.IHandler.Designers">
            <summary>
            Gets or sets the list of graphical designers.
            </summary>
            <value>The list of graphical designers.</value>
            <seealso cref="P:Eto.Forms.AboutDialog.IHandler.Developers"/>
            <seealso cref="P:Eto.Forms.AboutDialog.IHandler.Documenters"/>
        </member>
        <member name="P:Eto.Forms.AboutDialog.IHandler.Developers">
            <summary>
            Gets or sets the list of developers.
            </summary>
            <value>The list of developers.</value>
            <seealso cref="P:Eto.Forms.AboutDialog.IHandler.Designers"/>
            <seealso cref="P:Eto.Forms.AboutDialog.IHandler.Documenters"/>
        </member>
        <member name="P:Eto.Forms.AboutDialog.IHandler.Documenters">
            <summary>
            Gets or sets the list of documenters.
            </summary>
            <value>The list of documenters.</value>
            <seealso cref="P:Eto.Forms.AboutDialog.IHandler.Designers"/>
            <seealso cref="P:Eto.Forms.AboutDialog.IHandler.Developers"/>
        </member>
        <member name="P:Eto.Forms.AboutDialog.IHandler.License">
            <summary>
            Gets or sets the license.
            </summary>
            <value>The license.</value>
        </member>
        <member name="P:Eto.Forms.AboutDialog.IHandler.Logo">
            <summary>
            Gets or sets the application logo.
            </summary>
            <value>The application logo.</value>
        </member>
        <member name="P:Eto.Forms.AboutDialog.IHandler.ProgramDescription">
            <summary>
            Gets or sets the program description.
            </summary>
            <value>The program description.</value>
        </member>
        <member name="P:Eto.Forms.AboutDialog.IHandler.ProgramName">
            <summary>
            Gets or sets the name of the program.
            </summary>
            <value>The name of the program.</value>
        </member>
        <member name="P:Eto.Forms.AboutDialog.IHandler.Title">
            <summary>
            Gets or sets the window title.
            </summary>
            <value>The window title.</value>
        </member>
        <member name="P:Eto.Forms.AboutDialog.IHandler.Version">
            <summary>
            Gets or sets the application version.
            </summary>
            <value>The application version.</value>
        </member>
        <member name="P:Eto.Forms.AboutDialog.IHandler.Website">
            <summary>
            Gets or sets the application website.
            </summary>
            <value>The application website.</value>
        </member>
        <member name="P:Eto.Forms.AboutDialog.IHandler.WebsiteLabel">
            <summary>
            Gets or sets the application website label.
            </summary>
            <value>The application website label.</value>
        </member>
        <member name="T:Eto.Forms.Application">
            <summary>
            Starting point for any UI application
            </summary>
            <remarks>
            This class is used to start an application.
            
            When you are using Eto.Forms within an existing application, you can use the <see cref="M:Eto.Forms.Application.Attach(System.Object)"/> method.
            </remarks>
        </member>
        <member name="P:Eto.Forms.Application.Instance">
            <summary>
            Gets the current application instance
            </summary>
            <value>The instance.</value>
        </member>
        <member name="E:Eto.Forms.Application.Initialized">
            <summary>
            Occurs when the application is initialized
            </summary>
            <remarks>
            This is where any of your startup code should be placed, such as creating the main form and showing it.
            If subclassing Application, you can override <see cref="M:Eto.Forms.Application.OnInitialized(System.EventArgs)"/> instead.
            </remarks>
        </member>
        <member name="M:Eto.Forms.Application.OnInitialized(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Eto.Forms.Application.Initialized"/> event.
            </summary>
            <remarks>
            This is where any of your startup code should be placed, such as creating the main form and showing it.
            If you are not subclassing Application, you can handle the <see cref="E:Eto.Forms.Application.Initialized"/> event instead.
            </remarks>
            <param name="e">Event arguments.</param>
        </member>
        <member name="F:Eto.Forms.Application.TerminatingEvent">
            <summary>
            Identifier for handlers when attaching the <see cref="E:Eto.Forms.Application.Terminating"/> event
            </summary>
        </member>
        <member name="E:Eto.Forms.Application.Terminating">
            <summary>
            Occurs when the application is terminating.
            </summary>
        </member>
        <member name="M:Eto.Forms.Application.OnTerminating(System.ComponentModel.CancelEventArgs)">
            <summary>
            Raises the <see cref="E:Eto.Forms.Application.Terminating"/> event.
            </summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="F:Eto.Forms.Application.UnhandledExceptionEvent">
            <summary>
            Identifier for handlers when attaching the <see cref="E:Eto.Forms.Application.UnhandledException"/> event
            </summary>
        </member>
        <member name="E:Eto.Forms.Application.UnhandledException">
            <summary>
            Occurs when an unhandled exception occcurs.
            </summary>
        </member>
        <member name="M:Eto.Forms.Application.OnUnhandledException(Eto.UnhandledExceptionEventArgs)">
            <summary>
            Raises the unhandled exception event.
            </summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="F:Eto.Forms.Application.NotificationActivatedEvent">
            <summary>
            Identifier for handlers when attaching the <see cref="E:Eto.Forms.Application.NotificationActivated"/> event
            </summary>
        </member>
        <member name="E:Eto.Forms.Application.NotificationActivated">
            <summary>
            Occurs when a notification is clicked by the user that was previously displayed.
            </summary>
            <remarks>
            To send a notification, use <see cref="T:Eto.Forms.Notification"/>.
            
            The <see cref="P:Eto.Forms.NotificationEventArgs.ID"/> and <see cref="P:Eto.Forms.NotificationEventArgs.UserData"/>
            should be used to determine what action to perform when the user clicks on the notification.
            These parameters are set when creating the <see cref="T:Eto.Forms.Notification"/>
            </remarks>
        </member>
        <member name="M:Eto.Forms.Application.OnNotificationActivated(Eto.Forms.NotificationEventArgs)">
            <summary>
            Raises the <see cref="E:Eto.Forms.Application.NotificationActivated"/> event
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="P:Eto.Forms.Application.MainForm">
            <summary>
            Gets or sets the main form for your application.
            </summary>
            <remarks>
            When you set this to your main application form, it will get standard platform behaviour applied, such as
            quitting the application when it is closed (on windows, linux), or showing the main form on OS X when clicking
            the application icon if it has been hidden/closed.
            
            Setting this is optional, however you must then manually call <see cref="M:Eto.Forms.Application.Quit"/> when you want your application
            to quit in that case.
            </remarks>
            <value>The main form for your application.</value>
        </member>
        <member name="P:Eto.Forms.Application.Windows">
            <summary>
            Gets an enumeration of windows currently open in the application.
            </summary>
            <value>The enumeration of open windows.</value>
        </member>
        <member name="P:Eto.Forms.Application.Name">
            <summary>
            Gets or sets the name of your application
            </summary>
            <value>The name.</value>
        </member>
        <member name="M:Eto.Forms.Application.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Eto.Forms.Application"/> class.
            </summary>
        </member>
        <member name="M:Eto.Forms.Application.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Eto.Forms.Application"/> class with the specified platform type
            </summary>
            <seealso cref="T:Eto.Platforms"/>
            <param name="platformType">Platform type to initialize this application with</param>
        </member>
        <member name="M:Eto.Forms.Application.#ctor(Eto.Platform)">
            <summary>
            Initializes a new instance of the <see cref="T:Eto.Forms.Application"/> class with the specified platform
            </summary>
            <param name="platform">Platform to run the application</param>
        </member>
        <member name="M:Eto.Forms.Application.InitializePlatform(Eto.Platform)">
            <summary>
            Helper to call proper constructor for initializing the platform before base class constructor is called
            </summary>
        </member>
        <member name="M:Eto.Forms.Application.Run">
            <summary>
            Runs the application and begins the main loop.
            </summary>
        </member>
        <member name="M:Eto.Forms.Application.Run(Eto.Forms.Form)">
            <summary>
            Runs the application with the specified <paramref name="mainForm"/> and begins the main loop.
            </summary>
            <seealso cref="P:Eto.Forms.Application.MainForm"/>
            <param name="mainForm">Main form for the application.</param>
        </member>
        <member name="M:Eto.Forms.Application.Run(Eto.Forms.Dialog)">
            <summary>
            Runs the application with the specified <paramref name="dialog"/> and begins the main loop.
            </summary>
            <remarks>
            When the dialog is closed, the application will exit.
            </remarks>
            <param name="dialog">Dialog to show for the application.</param>
        </member>
        <member name="M:Eto.Forms.Application.Attach(System.Object)">
            <summary>
            Attach the application to an already-running native application with the same platform.
            </summary>
            <param name="context">Context of the application</param>
        </member>
        <member name="M:Eto.Forms.Application.Invoke(System.Action)">
            <summary>
            Invoke the specified action on the UI thread, blocking the current execution until it is complete.
            </summary>
            <remarks>
            Use this method when you want to perform changes to the UI from a worker thread, and return when
            the changes are complete.
            </remarks>
            <param name="action">Action to invoke</param>
        </member>
        <member name="M:Eto.Forms.Application.Invoke``1(System.Func{``0})">
            <summary>
            Invoke the specified function on the UI thread returning its value after the execution is complete.
            </summary>
            <remarks>
            Use this method when you want to return values from the UI in a worker thread.
            </remarks>
            <param name="func">Function to execute and return the value on the UI thread.</param>
            <typeparam name="T">The type of the return value.</typeparam>
        </member>
        <member name="M:Eto.Forms.Application.AsyncInvoke(System.Action)">
            <summary>
            Invoke the action asynchronously on the UI thread
            </summary>
            <remarks>
            This will return immediately and queue the action to be executed on the UI thread, regardless on whether
            the current thread is the UI thread.
            </remarks>
            <param name="action">Action to queue on the UI thread.</param>
        </member>
        <member name="M:Eto.Forms.Application.Quit">
            <summary>
            Quits the application
            </summary>
            <remarks>
            This will call the <see cref="E:Eto.Forms.Application.Terminating"/> event before terminating the application.
            </remarks>
        </member>
        <member name="P:Eto.Forms.Application.QuitIsSupported">
            <summary>
            Gets a value indicating whether this <see cref="T:Eto.Forms.Application"/> supports the <see cref="M:Eto.Forms.Application.Quit"/> operation.
            </summary>
            <value><c>true</c> if quit is supported; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Eto.Forms.Application.Open(System.String)">
            <summary>
            Open the specified file or url with its associated application.
            </summary>
            <param name="url">url or file path to open</param>
        </member>
        <member name="P:Eto.Forms.Application.CommonModifier">
            <summary>
            Gets the common modifier for shortcuts.
            </summary>
            <remarks>
            On Windows/Linux, this will typically return <see cref="F:Eto.Forms.Keys.Control"/>, and on OS X this will be <see cref="F:Eto.Forms.Keys.Application"/> (the command key).
            </remarks>
            <value>The common modifier.</value>
        </member>
        <member name="P:Eto.Forms.Application.AlternateModifier">
            <summary>
            Gets the alternate modifier for shortcuts.
            </summary>
            <remarks>
            This is usually the <see cref="F:Eto.Forms.Keys.Alt"/> key.
            </remarks>
            <value>The alternate modifier.</value>
        </member>
        <member name="P:Eto.Forms.Application.BadgeLabel">
            <summary>
            Gets or sets the badge label on the application icon in the dock, taskbar, etc.
            </summary>
            <remarks>
            This allows you to specify the text to show as a label to notify the state of your application to the user.
            Note that some platforms (iOS) only support numeric badge labels.
            </remarks>
            <value>The badge label.</value>
        </member>
        <member name="M:Eto.Forms.Application.RunIteration">
            <summary>
            Advanced. Runs an iteration of the main UI loop when you are blocking the UI thread with logic.
            </summary>
            <remarks>
            This is not recommended to use and you should use asynchronous calls instead via Task.Run or threads.
            </remarks>
        </member>
        <member name="M:Eto.Forms.Application.Restart">
            <summary>
            Restarts the application
            </summary>
        </member>
        <member name="M:Eto.Forms.Application.GetCallback">
            <summary>
            Gets an instance of an object used to perform callbacks to the widget from handler implementations
            </summary>
            <returns>The callback instance to use for this widget</returns>
        </member>
        <member name="T:Eto.Forms.Application.ICallback">
            <summary>
            Interface for callbacks to the <see cref="T:Eto.Forms.Application"/> class
            </summary>
        </member>
        <member name="M:Eto.Forms.Application.ICallback.OnInitialized(Eto.Forms.Application,System.EventArgs)">
            <summary>
            Raises the initialized event.
            </summary>
        </member>
        <member name="M:Eto.Forms.Application.ICallback.OnTerminating(Eto.Forms.Application,System.ComponentModel.CancelEventArgs)">
            <summary>
            Raises the terminating event.
            </summary>
        </member>
        <member name="M:Eto.Forms.Application.ICallback.OnUnhandledException(Eto.Forms.Application,Eto.UnhandledExceptionEventArgs)">
            <summary>
            Raises the unhandled exception event.
            </summary>
        </member>
        <member name="M:Eto.Forms.Application.ICallback.OnNotificationActivated(Eto.Forms.Application,Eto.Forms.NotificationEventArgs)">
            <summary>
            Raises the notification activated event.
            </summary>
        </member>
        <member name="T:Eto.Forms.Application.Callback">
            <summary>
            Callback implementation for the <see cref="T:Eto.Forms.Application"/> class
            </summary>
        </member>
        <member name="M:Eto.Forms.Application.Callback.OnInitialized(Eto.Forms.Application,System.EventArgs)">
            <summary>
            Raises the initialized event.
            </summary>
        </member>
        <member name="M:Eto.Forms.Application.Callback.OnTerminating(Eto.Forms.Application,System.ComponentModel.CancelEventArgs)">
            <summary>
            Raises the terminating event.
            </summary>
        </member>
        <member name="M:Eto.Forms.Application.Callback.OnUnhandledException(Eto.Forms.Application,Eto.UnhandledExceptionEventArgs)">
            <summary>
            Raises the unhandled exception event.
            </summary>
        </member>
        <member name="M:Eto.Forms.Application.Callback.OnNotificationActivated(Eto.Forms.Application,Eto.Forms.NotificationEventArgs)">
            <summary>
            Raises the notification activated event.
            </summary>
        </member>
        <member name="T:Eto.Forms.Application.IHandler">
            <summary>
            Handler interface for the <see cref="T:Eto.Forms.Application"/> class
            </summary>
        </member>
        <member name="M:Eto.Forms.Application.IHandler.Attach(System.Object)">
            <summary>
            Attach the application to an already-running native application with the same platform.
            </summary>
            <param name="context">Context of the application</param>
        </member>
        <member name="M:Eto.Forms.Application.IHandler.Run">
            <summary>
            Runs the application and starts a main loop.
            </summary>
        </member>
        <member name="M:Eto.Forms.Application.IHandler.Quit">
            <summary>
            Quits the application
            </summary>
            <remarks>
            This should call the <see cref="M:Eto.Forms.Application.ICallback.OnTerminating(Eto.Forms.Application,System.ComponentModel.CancelEventArgs)"/> callback to allow user-defined code to cancel
            the operation.
            </remarks>
        </member>
        <member name="P:Eto.Forms.Application.IHandler.QuitIsSupported">
            <summary>
            Gets a value indicating whether the application supports the <see cref="M:Eto.Forms.Application.IHandler.Quit"/> operation.
            </summary>
            <value><c>true</c> if quit is supported; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Eto.Forms.Application.IHandler.CommonModifier">
            <summary>
            Gets the common modifier for shortcuts.
            </summary>
            <remarks>
            On Windows/Linux, this will typically return <see cref="F:Eto.Forms.Keys.Control"/>, and on OS X this will be <see cref="F:Eto.Forms.Keys.Application"/> (the command key).
            </remarks>
            <value>The common modifier.</value>
        </member>
        <member name="P:Eto.Forms.Application.IHandler.AlternateModifier">
            <summary>
            Gets the alternate modifier for shortcuts.
            </summary>
            <remarks>
            This is usually the <see cref="F:Eto.Forms.Keys.Alt"/> key.
            </remarks>
            <value>The alternate modifier.</value>
        </member>
        <member name="M:Eto.Forms.Application.IHandler.Open(System.String)">
            <summary>
            Open the specified file or url with its associated application.
            </summary>
            <param name="url">url or file path to open</param>
        </member>
        <member name="M:Eto.Forms.Application.IHandler.Invoke(System.Action)">
            <summary>
            Invoke the specified action on the UI thread, blocking the current execution until it is complete.
            </summary>
            <remarks>
            Implementors should be careful to execute the action directly if the current thread is the UI thread.
            </remarks>
            <param name="action">Action to invoke</param>
        </member>
        <member name="M:Eto.Forms.Application.IHandler.AsyncInvoke(System.Action)">
            <summary>
            Invoke the action asynchronously on the UI thread
            </summary>
            <remarks>
            This will return immediately and queue the action to be executed on the UI thread, regardless on whether
            the current thread is the UI thread.
            </remarks>
            <param name="action">Action to queue on the UI thread.</param>
        </member>
        <member name="P:Eto.Forms.Application.IHandler.BadgeLabel">
            <summary>
            Gets or sets the badge label on the application icon in the dock, taskbar, etc.
            </summary>
            <remarks>
            This allows you to specify the text to show as a label to notify the state of your application to the user.
            Note that some platforms (iOS) only support numeric badge labels.
            </remarks>
            <value>The badge label.</value>
        </member>
        <member name="M:Eto.Forms.Application.IHandler.OnMainFormChanged">
            <summary>
            Called by the widget when the <see cref="P:Eto.Forms.Application.MainForm"/> is changed
            </summary>
        </member>
        <member name="M:Eto.Forms.Application.IHandler.Restart">
            <summary>
            Restarts the application
            </summary>
        </member>
        <member name="M:Eto.Forms.Application.IHandler.RunIteration">
            <summary>
            Advanced. Runs an iteration of the main UI loop when you are blocking the UI thread with logic.
            </summary>
            <remarks>
            This is not recommended to use and you should use asynchronous calls instead via Task.Run or threads.
            </remarks>
        </member>
        <member name="T:Eto.Forms.BindingExtensions">
            <summary>
            Extensions for bindings
            </summary>
            <copyright>(c) 2014 by Curtis Wensley</copyright>
            <license type="BSD-3">See LICENSE for full terms</license>
        </member>
        <member name="M:Eto.Forms.BindingExtensions.WhenLostFocus``2(Eto.Forms.BindableBinding{``0,``1})">
            <summary>
            Causes the change event of the binding to occur only when the <see cref="E:Eto.Forms.Control.LostFocus"/> event is triggered.
            </summary>
            <remarks>
            This is useful for text-based input controls such as the <see cref="T:Eto.Forms.NumericStepper"/> when a partial input can be invalid.
            The binding will only be updated when the control has lost the input focus, where by default it will be updated for every
            change while the user is updating the control.
            </remarks>
            <returns>A control binding that updates only when the control's input focus is lost.</returns>
        </member>
        <member name="T:Eto.Forms.BindableBinding`2">
            <summary>
            Binding object to easily bind a property of a <see cref="T:Eto.Forms.IBindable"/> object, such as a <see cref="T:Eto.Forms.Control"/>.
            </summary>
            <remarks>
            This provides control-specific binding, such as binding to a <see cref="P:Eto.Forms.IBindable.DataContext"/>.
            Any bindings created using this will also add to the <see cref="P:Eto.Forms.IBindable.Bindings"/> collection to keep its
            reference.
            </remarks>
        </member>
        <member name="M:Eto.Forms.BindableBinding`2.#ctor(`0,System.Func{`0,`1},System.Action{`0,`1},System.Action{`0,System.EventHandler{System.EventArgs}},System.Action{`0,System.EventHandler{System.EventArgs}})">
            <summary>
            Initializes a new instance of the <see cref="T:Eto.Forms.ControlBinding`2"/> class.
            </summary>
            <param name="dataItem">Data item to get/set the values from/to.</param>
            <param name="getValue">Delegate to get the value from the object.</param>
            <param name="setValue">Delegate to set the value to the object.</param>
            <param name="addChangeEvent">Delegate to add the change event.</param>
            <param name="removeChangeEvent">Delegate to remove the chang event.</param>
        </member>
        <member name="M:Eto.Forms.BindableBinding`2.#ctor(`0,Eto.Forms.IndirectBinding{`1})">
            <summary>
            Initializes a new instance of the <see cref="T:Eto.Forms.ControlBinding`2"/> class.
            </summary>
            <param name="dataItem">Control the binding is attached to.</param>
            <param name="innerBinding">Inner binding.</param>
        </member>
        <member name="M:Eto.Forms.BindableBinding`2.Bind(Eto.Forms.DirectBinding{`1},Eto.Forms.DualBindingMode)">
            <summary>
            Binds the specified <paramref name="sourceBinding"/> to this binding.
            </summary>
            <remarks>
            This creates a <see cref="T:Eto.Forms.DualBinding`1"/> between the specified <paramref name="sourceBinding"/> and this binding.
            The binding is added to the <see cref="P:Eto.Forms.IBindable.Bindings"/> collection.
            </remarks>
            <param name="sourceBinding">Source binding to bind from.</param>
            <param name="mode">Dual binding mode.</param>
        </member>
        <member name="M:Eto.Forms.BindableBinding`2.BindDataContext(Eto.Forms.IndirectBinding{`1},Eto.Forms.DualBindingMode,`1,`1)">
            <summary>
            Binds to an object's <see cref="P:Eto.Forms.IBindable.DataContext"/> using the specified <paramref name="dataContextBinding"/>.
            </summary>
            <remarks>
            This creates a <see cref="T:Eto.Forms.DualBinding`1"/> between a binding to the specified <paramref name="dataContextBinding"/> and this binding.
            Since the data context changes, the binding passed for the data context binding is an indirect binding, in that it is reused.
            The binding is added to the <see cref="P:Eto.Forms.IBindable.Bindings"/> collection.
            </remarks>
            <returns>A new dual binding that binds the <paramref name="dataContextBinding"/> to this control binding.</returns>
            <param name="dataContextBinding">Binding to get/set values from/to the control's data context.</param>
            <param name="mode">Dual binding mode.</param>
            <param name="defaultControlValue">Default control value.</param>
            <param name="defaultContextValue">Default context value.</param>
        </member>
        <member name="M:Eto.Forms.BindableBinding`2.BindDataContext``1(System.Func{``0,`1},System.Action{``0,`1},System.Action{``0,System.EventHandler{System.EventArgs}},System.Action{``0,System.EventHandler{System.EventArgs}},Eto.Forms.DualBindingMode,`1,`1)">
            <summary>
            Binds to a control's <see cref="P:Eto.Forms.IBindable.DataContext"/> using delegates to get/set the value.
            </summary>
            <remarks>
            This is a shortcut to use the <see cref="T:Eto.Forms.DelegateBinding`2"/> to bind to a control's <see cref="P:Eto.Forms.IBindable.DataContext"/> property.
            When the data context type is <typeparamref name="TValue"/>, then the delegates will be called to get/set the value.
            Otherwise, if the data context is null or a different type, the <paramref name="defaultGetValue"/> will be used.
            </remarks>
            <returns>A new dual binding that binds the control to this object binding.</returns>
            <param name="getValue">Delegate to get the value from the data context.</param>
            <param name="setValue">Delegate to set the value to the data context when changed.</param>
            <param name="addChangeEvent">Delegate to add a change event on the data context.</param>
            <param name="removeChangeEvent">Delegate to remove the change event from the data context.</param>
            <param name="mode">Dual binding mode.</param>
            <param name="defaultGetValue">Default get value.</param>
            <param name="defaultSetValue">Default set value.</param>
            <typeparam name="TObject">Type of the data context object to bind with.</typeparam>
        </member>
        <member name="M:Eto.Forms.BindableBinding`2.BindDataContext(System.String,Eto.Forms.DualBindingMode)">
            <summary>
            Binds to the specified <paramref name="propertyName"/> of the current data context.
            </summary>
            <remarks>
            This is a shortcut to using the <see cref="T:Eto.Forms.PropertyBinding`1"/>.
            This has the advantage of registering automatically to <see cref="T:System.ComponentModel.INotifyPropertyChanged"/> 
            or to an event named after the property with a "Changed" suffix.
            </remarks>
            <returns>The binding between the data context and this binding.</returns>
            <param name="propertyName">Name of the property on the data context to bind to.</param>
            <param name="mode">Direction of the binding.</param>
        </member>
        <member name="M:Eto.Forms.BindableBinding`2.BindDataContext``1(System.Linq.Expressions.Expression{System.Func{``0,`1}},Eto.Forms.DualBindingMode)">
            <summary>
            Binds to a specified property of the control's current data context.
            </summary>
            <remarks>
            This has the advantage of registering automatically to <see cref="T:System.ComponentModel.INotifyPropertyChanged"/> 
            or to an event named after the property with a "Changed" suffix, if the expression is a property.
            When the expression does not evaluate to a property, it will not be able to bind to the changed events and will
            use the expression as a delegate directly.
            </remarks>
            <typeparam name="TObject">Type of the data context to bind to</typeparam>
            <param name="propertyExpression">Expression for a property of the data context, or a non-property expression with no change event binding.</param>
            <param name="mode">Direction of the binding</param>
            <returns>The binding between the data context and this binding</returns>
        </member>
        <member name="M:Eto.Forms.BindableBinding`2.Convert``1(System.Func{`1,``0},System.Func{``0,`1})">
            <summary>
            Converts this binding's value to another value using delegates.
            </summary>
            <remarks>This is useful when you want to cast one binding to another, perform logic when getting/setting a value from a particular
            binding, or get/set a preoperty of the value.</remarks>
            <typeparam name="TNewValue">Type of the value for the new binding</typeparam>
            <param name="toValue">Delegate to convert to the new value type.</param>
            <param name="fromValue">Delegate to convert from the value to the original binding's type.</param>
        </member>
        <member name="M:Eto.Forms.BindableBinding`2.Cast``1">
            <summary>
            Casts this binding value to another (compatible) type.
            </summary>
            <typeparam name="TNewValue">The type to cast the values of this binding to.</typeparam>
        </member>
        <member name="M:Eto.Forms.BindableBinding`2.Child``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Binds to the specified child <paramref name="property"/> expression.
            </summary>
            <remarks>
            This can be used to bind to properties of child objects of your view model, for example
            <code>model.SomeProperty.ChildProperty</code>.
            
            This will automatically look up the changed event either by a [Property]Changed event or INotifyPropertyChanged implementation
            for each object in the heirarchy.
            
            Note that you only really need to use this when you have an existing binding that you cannot change.
            See <see cref="M:Eto.Forms.Binding.Property``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})"/> for an example of how to bind to child property values
            more directly.
            </remarks>
            <example>
            Use this like so:
            <code>
            	public class MyChild { public SomeChildProperty { get; set; } }
            	public class MyModel { public ChildObject { get; set; } }
            
            	var model = new MyModel();
            	Binding.Property(model, (MyModel m) => m.ChildObject).Child(c => c.SomeChildProperty);
            </code>
            </example>
            <returns>The binding to the child property accessed through the current binding.</returns>
            <param name="property">Property to bind to.</param>
            <typeparam name="TNewValue">The type of the child property value.</typeparam>
        </member>
        <member name="M:Eto.Forms.BindableBinding`2.Child``1(Eto.Forms.IndirectBinding{``0})">
            <summary>
            Binds to the specified child <paramref name="binding"/> of this binding.
            </summary>
            <remarks>
            This can be used to bind to child objects of your view model, for example
            <code>model.SomeProperty.ChildProperty</code>.
            </remarks>
            <example>
            Use this like so:
            <code>
            	public class MyChild { public SomeChildProperty { get; set; } }
            	public class MyModel { public ChildObject { get; set; } }
            
            	var model = new MyModel();
            	Binding.Property(model, (MyModel m) => m.ChildObject).Child(Binding.Property("SomeChildProperty"));
            </code>
            </example>
            <returns>The binding to the child property accessed through the current binding.</returns>
            <param name="binding">Binding to get the child value from this binding.</param>
            <typeparam name="TNewValue">The type of the child property value.</typeparam>
        </member>
        <member name="M:Eto.Forms.BindableBinding`2.CatchException(System.Func{System.Exception,System.Boolean})">
            <summary>
            Catches any exceptions when setting the value of the binding
            </summary>
            <param name="exceptionHandler">Handler to call when setting the value, regardless of whether an exception occurs. Return true when the exception is handled, false to throw an exception.</param>
            <returns>The binding that catches any exception.</returns>
        </member>
        <member name="M:Eto.Forms.BindableBinding`2.CatchException``1(System.Func{``0,System.Boolean})">
            <summary>
            Catches any exceptions of the specified <typeparamref name="TException"/> when setting the value of the binding.
            </summary>
            <typeparam name="TException">Type of the exception to catch</typeparam>
            <param name="exceptionHandler">Handler to call when setting the value, regardless of whether an exception occurs. Return true when the exception is handled, false to throw an exception.</param>
            <returns>The binding that catches the specified exception.</returns>
        </member>
        <member name="T:Eto.Forms.BindableExtensions">
            <summary>
            Helper extensions for <see cref="T:Eto.Forms.IBindable"/> objects to set up object bindings.
            </summary>
        </member>
        <member name="M:Eto.Forms.BindableExtensions.Bind``1(Eto.Forms.IBindable,System.String,System.Object,System.String,Eto.Forms.DualBindingMode)">
            <summary>
            Adds a new dual binding between the control and the specified object
            </summary>
            <param name="bindable">Bindable object to add the binding to</param>
            <param name="propertyName">Property on the control to update</param>
            <param name="source">Object to bind to</param>
            <param name="sourcePropertyName">Property on the source object to retrieve/set the value of</param>
            <param name="mode">Mode of the binding</param>
            <returns>A new instance of the DualBinding class that is used to control the binding</returns>
        </member>
        <member name="M:Eto.Forms.BindableExtensions.Bind``1(Eto.Forms.IBindable,System.String,Eto.Forms.DirectBinding{``0},Eto.Forms.DualBindingMode)">
            <summary>
            Adds a new dual binding between the control and the specified source binding
            </summary>
            <param name="bindable">Bindable object to add the binding to</param>
            <param name="widgetPropertyName">Property on the control to update</param>
            <param name="sourceBinding">Binding to get/set the value to from the control</param>
            <param name="mode">Mode of the binding</param>
            <returns>A new instance of the DualBinding class that is used to control the binding</returns>
        </member>
        <member name="M:Eto.Forms.BindableExtensions.BindDataContext``1(Eto.Forms.IBindable,System.String,System.String,Eto.Forms.DualBindingMode,``0,``0)">
            <summary>
            Adds a new binding with the control and the the control's current data context 
            </summary>
            <remarks>
            This binds to a property of the <see cref="P:Eto.Forms.IBindable.DataContext"/>, which will return the topmost value
            up the control hierarchy.  For example, you can set the DataContext of your form or panel, and then bind to properties
            of that context on any of the child controls such as a text box, etc.
            </remarks>
            <param name="bindable">Bindable object to add the binding to</param>
            <param name="controlPropertyName">Property on the control to update</param>
            <param name="dataContextPropertyName">Property on the control's <see cref="P:Eto.Forms.IBindable.DataContext"/> to bind to the control</param>
            <param name="mode">Mode of the binding</param>
            <param name="defaultControlValue">Default value to set to the control when the value from the DataContext is null</param>
            <param name="defaultContextValue">Default value to set to the DataContext property when the control value is null</param>
            <returns>A new instance of the DualBinding class that is used to control the binding</returns>
        </member>
        <member name="M:Eto.Forms.BindableExtensions.Bind``1(Eto.Forms.IBindable,Eto.Forms.IndirectBinding{``0},Eto.Forms.DirectBinding{``0},Eto.Forms.DualBindingMode)">
            <summary>
            Adds a new binding to the control with a direct value binding
            </summary>
            <param name="bindable">Bindable object to add the binding to</param>
            <param name="controlBinding">Binding to get/set the value from the control.</param>
            <param name="valueBinding">Value binding to get/set the value from another source.</param>
            <param name="mode">Mode of the binding</param>
        </member>
        <member name="M:Eto.Forms.BindableExtensions.Bind``1(Eto.Forms.IBindable,Eto.Forms.IndirectBinding{``0},System.Object,Eto.Forms.IndirectBinding{``0},Eto.Forms.DualBindingMode,``0,``0)">
            <summary>
            Adds a new binding to the control with an indirect binding to the provided <paramref name="objectValue"/>
            </summary>
            <param name="bindable">Bindable object to add the binding to</param>
            <param name="controlBinding">Binding to get/set the value from the control.</param>
            <param name="objectValue">Object value to bind to.</param>
            <param name="objectBinding">Binding to get/set the value from the <paramref name="objectValue"/>.</param>
            <param name="mode">Mode of the binding.</param>
            <param name="defaultControlValue">Default control value to set to the objectValue, if the value of the control property is null.</param>
            <param name="defaultContextValue">Default context value to set to the control, if the objectValue or value of the objectBinding is null.</param>
        </member>
        <member name="M:Eto.Forms.BindableExtensions.BindDataContext``1(Eto.Forms.IBindable,Eto.Forms.IndirectBinding{``0},Eto.Forms.IndirectBinding{``0},Eto.Forms.DualBindingMode,``0,``0)">
            <summary>
            Adds a new binding from the control to its data context
            </summary>
            <param name="bindable">Bindable object to add the binding to</param>
            <param name="controlBinding">Binding to get/set the value from the control.</param>
            <param name="dataContextBinding">Binding to get/set the value from the <see cref="P:Eto.Forms.IBindable.DataContext"/>.</param>
            <param name="mode">Mode of the binding.</param>
            <param name="defaultControlValue">Default control value to set to the objectValue, if the value of the control property is null.</param>
            <param name="defaultContextValue">Default context value to set to the control, if the objectValue or value of the objectBinding is null.</param>
        </member>
        <member name="M:Eto.Forms.BindableExtensions.Bind``3(``0,System.Linq.Expressions.Expression{System.Func{``0,``2}},``1,System.Linq.Expressions.Expression{System.Func{``1,``2}},Eto.Forms.DualBindingMode)">
            <summary>
            Binds a control property to a <paramref name="source"/> property
            </summary>
            <param name="control">Control to bind to.</param>
            <param name="controlProperty">Control property.</param>
            <param name="source">Source object to get/set the value from.</param>
            <param name="sourceProperty">Source property from the data context.</param>
            <param name="mode">Mode of the binding.</param>
            <typeparam name="TWidget">The type of control.</typeparam>
            <typeparam name="TSource">The type of the source object.</typeparam>
            <typeparam name="TValue">The type of the property.</typeparam>
        </member>
        <member name="M:Eto.Forms.BindableExtensions.Bind``3(``0,System.Linq.Expressions.Expression{System.Func{``0,``2}},``1,Eto.Forms.IndirectBinding{``2},Eto.Forms.DualBindingMode)">
            <summary>
            Binds a control property to the <paramref name="source"/> object using the <paramref name="sourceBinding"/>.
            </summary>
            <param name="control">Control to bind to.</param>
            <param name="controlProperty">Control property expression.</param>
            <param name="source">Source object to bind to.</param>
            <param name="sourceBinding">Binding to get/set the value from the source.</param>
            <param name="mode">Mode of the binding.</param>
            <typeparam name="TWidget">The type of the control.</typeparam>
            <typeparam name="TSource">The type of the source object.</typeparam>
            <typeparam name="TValue">The type of the property.</typeparam>
        </member>
        <member name="M:Eto.Forms.BindableExtensions.Bind``2(``0,System.Linq.Expressions.Expression{System.Func{``0,``1}},Eto.Forms.DirectBinding{``1},Eto.Forms.DualBindingMode)">
            <summary>
            Bind a control property to the specified <paramref name="sourceBinding"/> direct binding.
            </summary>
            <param name="control">Control to bind to.</param>
            <param name="controlProperty">Control property expression.</param>
            <param name="sourceBinding">Source binding to get/set the values.</param>
            <param name="mode">Mode of the binding.</param>
            <typeparam name="TWidget">The type of the control.</typeparam>
            <typeparam name="TValue">The type of the property.</typeparam>
        </member>
        <member name="M:Eto.Forms.BindableExtensions.BindDataContext``3(``0,System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},Eto.Forms.DualBindingMode,``2,``2)">
            <summary>
            Binds a control property to a <see cref="P:Eto.Forms.BindableWidget.DataContext"/> property
            </summary>
            <param name="control">Control to bind to.</param>
            <param name="controlProperty">Control property.</param>
            <param name="sourceProperty">Source property from the data context.</param>
            <param name="mode">Mode of the binding.</param>
            <param name="defaultControlValue">Default control value, if the control value is null.</param>
            <param name="defaultContextValue">Default context value, if the context value is null.</param>
            <typeparam name="TWidget">The type of control.</typeparam>
            <typeparam name="TContext">The type of the data context object.</typeparam>
            <typeparam name="TValue">The type of the property.</typeparam>
        </member>
        <member name="M:Eto.Forms.BindableExtensions.BindDataContext``2(``0,System.Linq.Expressions.Expression{System.Func{``0,``1}},Eto.Forms.IndirectBinding{``1},Eto.Forms.DualBindingMode,``1,``1)">
            <summary>
            Binds a control property to a <see cref="P:Eto.Forms.BindableWidget.DataContext"/> property
            </summary>
            <param name="control">Control to bind to.</param>
            <param name="controlProperty">Control property.</param>
            <param name="sourceBinding">Source binding to get/set the value on the data context.</param>
            <param name="mode">Mode of the binding.</param>
            <param name="defaultControlValue">Default control value, if the control value is null.</param>
            <param name="defaultContextValue">Default context value, if the context value is null.</param>
            <typeparam name="TWidget">The type of control.</typeparam>
            <typeparam name="TValue">The type of the property.</typeparam>
        </member>
        <member name="T:Eto.Forms.BindableWidget">
            <summary>
            Base widget to support binding with the <see cref="T:Eto.Forms.IBindable"/> interface.
            </summary>
        </member>
        <member name="M:Eto.Forms.BindableWidget.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Eto.Forms.BindableWidget"/> class.
            </summary>
        </member>
        <member name="M:Eto.Forms.BindableWidget.#ctor(Eto.Widget.IHandler)">
            <summary>
            Initializes a new instance of the <see cref="T:Eto.Forms.BindableWidget"/> class with the specified platform handler.
            </summary>
            <param name="handler">Handler interface for the widget.</param>
        </member>
        <member name="E:Eto.Forms.BindableWidget.DataContextChanged">
            <summary>
            Event to handle when the <see cref="P:Eto.Forms.BindableWidget.DataContext"/> has changed
            </summary>
            <remarks>
            This may be fired in the event of a parent in the hierarchy setting the data context.
            For example, the <see cref="T:Eto.Forms.Container"/> widget fires this event when it's event is fired.
            </remarks>
        </member>
        <member name="M:Eto.Forms.BindableWidget.OnDataContextChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Eto.Forms.BindableWidget.DataContextChanged"/> event
            </summary>
            <remarks>
            Implementors may override this to fire this event on child widgets in a heirarchy. 
            This allows a control to be bound to its own <see cref="P:Eto.Forms.BindableWidget.DataContext"/>, which would be set
            on one of the parent control(s).
            </remarks>
            <param name="e">Event arguments</param>
        </member>
        <member name="P:Eto.Forms.BindableWidget.Parent">
            <summary>
            Gets the parent widget which this widget has been added to, if any
            </summary>
            <value>The parent widget, or null if there is no parent</value>
        </member>
        <member name="M:Eto.Forms.BindableWidget.FindParent``1(System.String)">
            <summary>
            Finds a control in the parent hierarchy with the specified type and <see cref="P:Eto.Widget.ID"/> if specified
            </summary>
            <returns>The parent if found, or null if not found</returns>
            <param name="id">Identifier of the parent control to find, or null to ignore</param>
            <typeparam name="T">The type of control to find</typeparam>
        </member>
        <member name="M:Eto.Forms.BindableWidget.FindParent(System.Type,System.String)">
            <summary>
            Finds a control in the parent hierarchy with the specified type and <see cref="P:Eto.Widget.ID"/> if specified
            </summary>
            <returns>The parent if found, or null if not found.</returns>
            <param name="type">The type of control to find.</param>
            <param name="id">Identifier of the parent control to find, or null to find by type only.</param>
        </member>
        <member name="M:Eto.Forms.BindableWidget.FindParent(System.String)">
            <summary>
            Finds a control in the parent hierarchy with the specified <paramref name="id"/>
            </summary>
            <returns>The parent if found, or null if not found.</returns>
            <param name="id">Identifier of the parent control to find.</param>
        </member>
        <member name="P:Eto.Forms.BindableWidget.Parents">
            <summary>
            Gets an enumeration of all parent widgets in the heirarchy by traversing the <see cref="P:Eto.Forms.BindableWidget.Parent"/> property.
            </summary>
        </member>
        <member name="P:Eto.Forms.BindableWidget.DataContext">
            <summary>
            Gets or sets the data context for this widget for binding
            </summary>
            <remarks>
            Subclasses may override the standard behaviour so that hierarchy of widgets can be taken into account.
            
            For example, a Control may return the data context of a parent, if it is not set explicitly.
            </remarks>
        </member>
        <member name="P:Eto.Forms.BindableWidget.Bindings">
            <summary>
            Gets the collection of bindings that are attached to this widget
            </summary>
        </member>
        <member name="M:Eto.Forms.BindableWidget.Unbind">
            <summary>
            Unbinds any bindings in the <see cref="P:Eto.Forms.BindableWidget.Bindings"/> collection and removes the bindings
            </summary>
        </member>
        <member name="M:Eto.Forms.BindableWidget.UpdateBindings(Eto.Forms.BindingUpdateMode)">
            <summary>
            Updates all bindings in this widget
            </summary>
        </member>
        <member name="T:Eto.Forms.BindingUpdateMode">
            <summary>
            Mode for updating the binding
            </summary>
        </member>
        <member name="F:Eto.Forms.BindingUpdateMode.Source">
            <summary>
            Update the binding source (usually the model)
            </summary>
        </member>
        <member name="F:Eto.Forms.BindingUpdateMode.Destination">
            <summary>
            Update the binding destination (usually the control)
            </summary>
        </member>
        <member name="T:Eto.Forms.IBinding">
            <summary>
            Base binding interface
            </summary>
            <remarks>
            Binding provides a way to bind your data objects to control properties and grid values.
            This base class adds the ability to unbind the binding, or update it manually.
            </remarks>
            <copyright>(c) 2014 by Curtis Wensley</copyright>
            <license type="BSD-3">See LICENSE for full terms</license>
        </member>
        <member name="M:Eto.Forms.IBinding.Unbind">
            <summary>
            Unbind this instance from its parent.
            </summary>
            <remarks>
            This typically will unregister any event handlers to properties so that the controls can be garbage collected.
            </remarks>
        </member>
        <member name="M:Eto.Forms.IBinding.Update(Eto.Forms.BindingUpdateMode)">
            <summary>
            Updates the binding from the source to the destination
            </summary>
            <remarks>
            Typically the source would be your custom class and the destination would be a UI control, but this is not
            always the case.
            </remarks>
            <param name="mode">Direction of the update</param>
        </member>
        <member name="T:Eto.Forms.Binding">
            <summary>
            Base class for binding between a value and another
            </summary>
            <remarks>
            This is the base of any type of binding.  Some bindings may only be used to get/set a single
            value (e.g. <see cref="T:Eto.Forms.IndirectBinding`1"/>), whereas the <see cref="T:Eto.Forms.DualBinding`1"/> can link
            two objects' values together
            </remarks>
            <copyright>(c) 2014 by Curtis Wensley</copyright>
            <license type="BSD-3">See LICENSE for full terms</license>
        </member>
        <member name="E:Eto.Forms.Binding.Changing">
            <summary>
            Event to handle when the value is being set using this binding
            </summary>
            <remarks>
            This can be used to stop a value being updated based on custom logic
            </remarks>
        </member>
        <member name="M:Eto.Forms.Binding.OnChanging(Eto.Forms.BindingChangingEventArgs)">
            <summary>
            Handles the <see cref="E:Eto.Forms.Binding.Changing"/> event
            </summary>
        </member>
        <member name="E:Eto.Forms.Binding.Changed">
            <summary>
            Event to handle after the value has been set using this binding
            </summary>
        </member>
        <member name="M:Eto.Forms.Binding.OnChanged(Eto.Forms.BindingChangedEventArgs)">
            <summary>
            Handles the <see cref="E:Eto.Forms.Binding.Changed"/> event
            </summary>
        </member>
        <member name="M:Eto.Forms.Binding.Unbind">
            <summary>
            Unbind this from the target object(s)
            </summary>
            <remarks>
            Typically a binding may handle an event for when the target object(s) property values
            are changed.  This is called to unbind the binding from the objects so that they can be
            garbage collected
            </remarks>
        </member>
        <member name="M:Eto.Forms.Binding.Update(Eto.Forms.BindingUpdateMode)">
            <summary>
            Updates the bound target object's value
            </summary>
            <remarks>
            Typically the source would be your custom class and the destination would be a UI control, but this is not
            always the case.
            </remarks>
            <param name="mode">Direction of the update</param>
        </member>
        <member name="M:Eto.Forms.Binding.HandleEvent(System.String)">
            <summary>
            Called to handle an event for this binding
            </summary>
            <param name="id"></param>
        </member>
        <member name="M:Eto.Forms.Binding.RemoveEvent(System.String)">
            <summary>
            Called to remove an event for this binding
            </summary>
            <param name="id"></param>
        </member>
        <member name="M:Eto.Forms.Binding.Delegate``2(System.Func{``0,``1},System.Action{``0,``1},System.Action{``0,System.EventHandler{System.EventArgs}},System.Action{``0,System.EventHandler{System.EventArgs}},``1,``1)">
            <summary>
            Creates a new indirect delegate binding.
            </summary>
            <param name="getValue">Delegate to get the value for the binding.</param>
            <param name="setValue">Delegate to set the value for the binding.</param>
            <param name="addChangeEvent">Delegate to register the change event, when needed by the consumer of this binding.</param>
            <param name="removeChangeEvent">Delegate to remove the change event.</param>
            <param name="defaultGetValue">Default get value, when the object instance is null.</param>
            <param name="defaultSetValue">Default set value, when the incoming value is null.</param>
        </member>
        <member name="M:Eto.Forms.Binding.Delegate``1(System.Func{``0},System.Action{``0},System.Action{System.EventHandler{System.EventArgs}},System.Action{System.EventHandler{System.EventArgs}})">
            <summary>
            Creates a new direct delegate binding.
            </summary>
            <param name="getValue">Delegate to get the value for the binding.</param>
            <param name="setValue">Delegate to set the value for the binding.</param>
            <param name="addChangeEvent">Delegate to register the change event, when needed by the consumer of this binding.</param>
            <param name="removeChangeEvent">Delegate to remove the change event.</param>
        </member>
        <member name="M:Eto.Forms.Binding.Property``2(``0,System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Creates a new direct property binding to the specified <paramref name="model"/> object.
            </summary>
            <param name="model">Model object to bind to.</param>
            <param name="propertyExpression">Expression to the property of the model object.</param>
            <typeparam name="T">The model type.</typeparam>
            <typeparam name="TValue">The property value type.</typeparam>
        </member>
        <member name="M:Eto.Forms.Binding.Property``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Creates a new indirect property binding using the specified <paramref name="propertyExpression"/>.
            </summary>
            <remarks>
            This supports single and multiple levels of property accessors in the model.
            </remarks>
            <example>
            Use this like so:
            <code>
            	public class MyChild { public SomeChildProperty { get; set; } }
            	public class MyModel { 
            		public ChildObject { get; set; } 
            		public int IntProperty { get; set; } 
            	}
            
            	// direct property binding
            	Binding.Property((MyModel m) => m.IntProperty);
            
            	// bind to a property of a child object of the view model
            	Binding.Property((MyModel m) => m.ChildObject.SomeChildProperty);
            </code>
            </example>
            <param name="propertyExpression">Expression of the property to bind to.</param>
            <typeparam name="T">The type of the model.</typeparam>
            <typeparam name="TValue">The property value type.</typeparam>
        </member>
        <member name="M:Eto.Forms.Binding.Property``1(System.String)">
            <summary>
            Creates a new indirect property binding using the specified <paramref name="propertyName"/>.
            </summary>
            <remarks>
            This supports single and multiple levels of property accessors in the model.
            </remarks>
            <example>
            Use this like so:
            <code>
            	public class MyChild { public SomeChildProperty { get; set; } }
            	public class MyModel { 
            		public ChildObject { get; set; } 
            		public int IntProperty { get; set; } 
            	}
            
            	// direct property binding
            	Binding.Property("IntProperty");
            
            	// bind to a property of a child object of the view model
            	Binding.Property("ChildObject.SomeChildProperty");
            </code>
            </example>
            <param name="propertyName">Name of the property to bind to.</param>
            <typeparam name="TValue">The type of the property.</typeparam>
        </member>
        <member name="M:Eto.Forms.Binding.Property``1(System.String,System.Boolean)">
            <summary>
            Creates a new indirect property binding using the specified <paramref name="propertyName"/>.
            </summary>
            <remarks>
            This supports single and multiple levels of property accessors in the model.
            </remarks>
            <example>
            Use this like so:
            <code>
            	public class MyChild { public SomeChildProperty { get; set; } }
            	public class MyModel { 
            		public ChildObject { get; set; } 
            		public int IntProperty { get; set; } 
            	}
            
            	// direct property binding
            	Binding.Property("IntProperty");
            
            	// bind to a property of a child object of the view model
            	Binding.Property("ChildObject.SomeChildProperty");
            </code>
            </example>
            <param name="propertyName">Name of the property to bind to.</param>
            <param name="ignoreCase">True to ignore case of the property name, false to match the property name exactly.</param>
            <typeparam name="TValue">The type of the property.</typeparam>
        </member>
        <member name="M:Eto.Forms.Binding.AddPropertyEvent(System.Object,System.String,System.EventHandler{System.EventArgs})">
            <summary>
            Adds an event handler for a specified <paramref name="propertyName"/> of a <see cref="T:System.ComponentModel.INotifyPropertyChanged"/> object.
            </summary>
            <remarks>
            This can be used to translate an INotifyPropertyChanged event for a particular property to a single event.
            Typically, this would be used when creating a <see cref="T:Eto.Forms.DelegateBinding`2"/> to attach to property notified
            events instead of singular events.
            </remarks>
            <param name="obj">INotifyPropertyChanged object to attach the event handler to</param>
            <param name="propertyName">Name of the property to trigger the changed event.</param>
            <param name="eh">Event handler delegate to trigger when the specified property changes</param>
            <seealso cref="M:Eto.Forms.Binding.RemovePropertyEvent(System.Object,System.EventHandler{System.EventArgs})"/>
        </member>
        <member name="M:Eto.Forms.Binding.AddPropertyEvent``2(``0,System.Linq.Expressions.Expression{System.Func{``0,``1}},System.EventHandler{System.EventArgs})">
            <summary>
            Adds an event handler for a specified <paramref name="propertyExpression"/> of a <see cref="T:System.ComponentModel.INotifyPropertyChanged"/> object.
            </summary>
            <remarks>
            This can be used to translate an INotifyPropertyChanged event for a particular property to a single event.
            Typically, this would be used when creating a <see cref="T:Eto.Forms.DelegateBinding`2"/> to attach to property notified
            events instead of singular events.
            </remarks>
            <param name="obj">INotifyPropertyChanged object to attach the event handler to</param>
            <param name="propertyExpression">Expression to the property to trigger the changed event.</param>
            <param name="eh">Event handler delegate to trigger when the specified property changes</param>
            <seealso cref="M:Eto.Forms.Binding.RemovePropertyEvent(System.Object,System.EventHandler{System.EventArgs})"/>
        </member>
        <member name="M:Eto.Forms.Binding.RemovePropertyEvent(System.Object,System.EventHandler{System.EventArgs})">
            <summary>
            Removes an event handler previously attached with the AddPropertyEvent method.
            </summary>
            <param name="obj">INotifyPropertyChanged object to remove the event handler from</param>
            <param name="eh">Event handler delegate to remove</param>
            <seealso cref="M:Eto.Forms.Binding.AddPropertyEvent(System.Object,System.String,System.EventHandler{System.EventArgs})"/>
        </member>
        <member name="M:Eto.Forms.Binding.ExecuteCommand(System.Object,Eto.Forms.IndirectBinding{System.Windows.Input.ICommand},System.Object)">
            <summary>
            Executes a command retrieved using the specified <paramref name="commandBinding"/> from the <paramref name="dataContext"/>.
            </summary>
            <remarks>
            This helper method is useful for binding general events to fire an <see cref="T:System.Windows.Input.ICommand"/> that is in your view model.
            The command will only be executed if its <see cref="M:System.Windows.Input.ICommand.CanExecute(System.Object)"/> returns <c>true</c>.
            
            Most controls (e.g. <see cref="T:Eto.Forms.Button"/>) have a special Command parameter that can be set instead, 
            which takes into account the enabled state of the command and will enable/disable the control automatically.
            </remarks>
            <example>
            This example will fire the MyModel.MyCommand when the mouse is down on the specified panel.
            The MyModel instance is based off the panel's current DataContext.
            <code>
            var panel = new Panel();
            panel.MouseDown += (sender, e) => Binding.ExecuteCommand(panel.DataContext, Binding.Property((MyModel m) => m.MyCommand));
            </code>
            </example>
            <param name="dataContext">Data context object to get the ICommand via the commandBinding.</param>
            <param name="commandBinding">Binding to get the ICommand from the data context</param>
            <param name="parameter">Parameter to pass to the command when executing or checking if it can execute.</param>
        </member>
        <member name="M:Eto.Forms.Binding.ExecuteCommand``1(System.Object,System.Linq.Expressions.Expression{System.Func{``0,System.Windows.Input.ICommand}},System.Object)">
            <summary>
            Executes a command retrieved using a property <paramref name="commandExpression"/> from the  <paramref name="dataContext"/>.
            </summary>
            <remarks>
            This helper method is useful for binding general events to fire an <see cref="T:System.Windows.Input.ICommand"/> that is in your view model.
            The command will only be executed if its <see cref="M:System.Windows.Input.ICommand.CanExecute(System.Object)"/> returns <c>true</c>.
            
            Most controls (e.g. <see cref="T:Eto.Forms.Button"/>) have a special Command parameter that can be set instead, 
            which takes into account the enabled state of the command and will enable/disable the control automatically.
            </remarks>
            <example>
            This example will fire the MyModel.MyCommand when the mouse is down on the specified panel.
            The MyModel instance is based off the panel's current DataContext.
            <code>
            var panel = new Panel();
            panel.MouseDown += (sender, e) => Binding.ExecuteCommand(panel.DataContext, (MyModel m) => m.MyCommand);
            </code>
            </example>
            <param name="dataContext">Data context object to get the ICommand via the commandBinding.</param>
            <param name="commandExpression">Property expression to get the ICommand from the data context</param>
            <param name="parameter">Parameter to pass to the command when executing or checking if it can execute.</param>
        </member>
        <member name="T:Eto.Forms.BindingChangedEventArgs">
            <summary>
            Arguments to handle when a binding value has changed
            </summary>
            <copyright>(c) 2014 by Curtis Wensley</copyright>
            <license type="BSD-3">See LICENSE for full terms</license>
        </member>
        <member name="P:Eto.Forms.BindingChangedEventArgs.Value">
            <summary>
            Gets the value that was set to the binding
            </summary>
        </member>
        <member name="M:Eto.Forms.BindingChangedEventArgs.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the BindingChangedEventArgs
            </summary>
            <param name="value">value that the binding was set to</param>
        </member>
        <member name="T:Eto.Forms.BindingChangingEventArgs">
            <summary>
            Arguments for when a binding's value is changing
            </summary>
            <remarks>
            When handling the event, one could cancel setting the new value by setting the <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/>
            property to false.
            </remarks>
            <copyright>(c) 2014 by Curtis Wensley</copyright>
            <license type="BSD-3">See LICENSE for full terms</license>
        </member>
        <member name="P:Eto.Forms.BindingChangingEventArgs.Value">
            <summary>
            Proposed value to set to the binding
            </summary>
        </member>
        <member name="M:Eto.Forms.BindingChangingEventArgs.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the BindingChangingEventArgs
            </summary>
            <param name="value"></param>
        </member>
        <member name="T:Eto.Forms.BindingCollection">
            <summary>
            Collection of bindings
            </summary>
            <copyright>(c) 2014 by Curtis Wensley</copyright>
            <license type="BSD-3">See LICENSE for full terms</license>
        </member>
        <member name="M:Eto.Forms.BindingCollection.Unbind">
            <summary>
            Unbinds all bindings in the collection
            </summary>
            <remarks>
            Unbinding is used to remove all event handlers on objects so they can be garbage collected.
            </remarks>
        </member>
        <member name="M:Eto.Forms.BindingCollection.Update(Eto.Forms.BindingUpdateMode)">
            <summary>
            Updates all bindings manually
            </summary>
            <remarks>
            Bindings can automatically update if enabled and there are sufficient property changed event(s),
            However in some cases you will want to update the bindings manually, for example if you want to save
            the data on the form, it would validate first, then update the bound object(s) with the updated values.
            </remarks>
        </member>
        <member name="T:Eto.Forms.IColumnItem">
            <summary>
            Interface to provide a source for the <see cref="T:Eto.Forms.ColumnBinding`1"/>
            </summary>
            <copyright>(c) 2014 by Curtis Wensley</copyright>
            <license type="BSD-3">See LICENSE for full terms</license>
        </member>
        <member name="M:Eto.Forms.IColumnItem.GetValue(System.Int32)">
            <summary>
            Gets the value from this item for the specified column/index
            </summary>
            <param name="column">column/index to get the value</param>
            <returns>value of the object with the specified column/index</returns>
        </member>
        <member name="M:Eto.Forms.IColumnItem.SetValue(System.Int32,System.Object)">
            <summary>
            Sets the value of this object for the specified column/index
            </summary>
            <param name="column">column/index to set the value</param>
            <param name="value">value to set at the specified column/index</param>
        </member>
        <member name="T:Eto.Forms.ColumnBinding`1">
            <summary>
            Column/Index binding for objects implementing <see cref="T:Eto.Forms.IColumnItem"/> or <see cref="T:System.Collections.IList"/>
            </summary>
            <remarks>
            This binding is an indirect binding on a particular column/index of each object.
            This is used to get/set values of a passed-in object to the <see cref="M:Eto.Forms.IndirectBinding`1.GetValue(System.Object)"/> and
            <see cref="M:Eto.Forms.IndirectBinding`1.SetValue(System.Object,`0)"/>.
            </remarks>
            <copyright>(c) 2014 by Curtis Wensley</copyright>
            <license type="BSD-3">See LICENSE for full terms</license>
        </member>
        <member name="P:Eto.Forms.ColumnBinding`1.Column">
            <summary>
            Gets or sets the column the binding will get/set the value
            </summary>
        </member>
        <member name="M:Eto.Forms.ColumnBinding`1.#ctor">
            <summary>
            Initializes a new instance of the ColumnBinding class
            </summary>
        </member>
        <member name="M:Eto.Forms.ColumnBinding`1.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the ColumnBinding class with the specified column
            </summary>
            <param name="column">column/index to get/set the value from each object</param>
        </member>
        <member name="M:Eto.Forms.ColumnBinding`1.InternalGetValue(System.Object)">
            <summary>
            Implements the logic to get the value from the specified object
            </summary>
            <param name="dataItem">object to get the value from</param>
            <returns>value at the <see cref="P:Eto.Forms.ColumnBinding`1.Column"/> of the specified object</returns>
        </member>
        <member name="M:Eto.Forms.ColumnBinding`1.InternalSetValue(System.Object,`0)">
            <summary>
            Implements the logic to set the value to the specified object
            </summary>
            <param name="dataItem">object to set the value</param>
            <param name="value">value to set at the <see cref="P:Eto.Forms.ColumnBinding`1.Column"/> of the specified object</param>
        </member>
        <member name="T:Eto.Forms.DelegateBinding`1">
            <summary>
            Direct delegate binding.
            </summary>
            <remarks>
            This is a direct binding, in that the get/set delegates can get/set the value directly without any associated object
            instance.
            This is used when binding directly to a property or when an object instance isn't needed to get/set a value.
            </remarks>
        </member>
        <member name="P:Eto.Forms.DelegateBinding`1.GetValue">
            <summary>
            Gets or sets the delegate to get the value for this binding.
            </summary>
            <value>The get value delegate.</value>
        </member>
        <member name="P:Eto.Forms.DelegateBinding`1.SetValue">
            <summary>
            Gets or sets the delegate to set the value for this binding.
            </summary>
            <value>The set value delegate.</value>
        </member>
        <member name="P:Eto.Forms.DelegateBinding`1.AddChangeEvent">
            <summary>
            Gets or sets the delegate to register the change event, when needed by the consumer of this binding.
            </summary>
            <value>The add change event delegate.</value>
        </member>
        <member name="P:Eto.Forms.DelegateBinding`1.RemoveChangeEvent">
            <summary>
            Gets or sets the delegate to remove the change event.
            </summary>
            <value>The remove change event delegate.</value>
        </member>
        <member name="P:Eto.Forms.DelegateBinding`1.DataValue">
            <summary>
            Gets or sets the value of this binding
            </summary>
            <value>The data value.</value>
        </member>
        <member name="M:Eto.Forms.DelegateBinding`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Eto.Forms.DelegateBinding`1"/> class.
            </summary>
        </member>
        <member name="M:Eto.Forms.DelegateBinding`1.#ctor(System.Func{`0},System.Action{`0},System.Action{System.EventHandler{System.EventArgs}},System.Action{System.EventHandler{System.EventArgs}})">
            <summary>
            Initializes a new instance of the <see cref="T:Eto.Forms.DelegateBinding`1"/> class with the specified delegates.
            </summary>
            <param name="getValue">Delegate to get the value for the binding.</param>
            <param name="setValue">Delegate to set the value for the binding.</param>
            <param name="addChangeEvent">Delegate to register the change event, when needed by the consumer of this binding.</param>
            <param name="removeChangeEvent">Delegate to remove the change event.</param>
        </member>
        <member name="M:Eto.Forms.DelegateBinding`1.HandleEvent(System.String)">
            <summary>
            Hooks up the late bound events for this object
            </summary>
        </member>
        <member name="M:Eto.Forms.DelegateBinding`1.RemoveEvent(System.String)">
            <summary>
            Removes the late bound events for this object
            </summary>
        </member>
        <member name="T:Eto.Forms.DelegateBinding`2">
            <summary>
            Indirect binding using delegate methods
            </summary>
            <remarks>
            This is an indirect binding, in that the object to get/set the values from/to is passed to each of the delegates
            to get/set the value.
            This is used for things like columns in a <see cref="T:Eto.Forms.Grid"/> control to bind to specific values of each item
            in the grid.
            </remarks>
            <typeparam name="T">Type of the object this binding will get/set the values from/to</typeparam>
            <typeparam name="TValue">Type of the value this binding will get/set</typeparam>
            <copyright>(c) 2014 by Curtis Wensley</copyright>
            <license type="BSD-3">See LICENSE for full terms</license>
        </member>
        <member name="P:Eto.Forms.DelegateBinding`2.GetValue">
            <summary>
            Gets or sets the delegate to get the value for this binding.
            </summary>
            <value>The get value delegate.</value>
        </member>
        <member name="P:Eto.Forms.DelegateBinding`2.SetValue">
            <summary>
            Gets or sets the delegate to set the value for this binding.
            </summary>
            <value>The set value delegate.</value>
        </member>
        <member name="P:Eto.Forms.DelegateBinding`2.AddChangeEvent">
            <summary>
            Gets or sets the delegate to register the change event, when needed by the consumer of this binding.
            </summary>
            <value>The add change event delegate.</value>
        </member>
        <member name="P:Eto.Forms.DelegateBinding`2.RemoveChangeEvent">
            <summary>
            Gets or sets the delegate to remove the change event.
            </summary>
            <value>The remove change event delegate.</value>
        </member>
        <member name="P:Eto.Forms.DelegateBinding`2.DefaultGetValue">
            <summary>
            Gets or sets the default get value, when the object instance is null.
            </summary>
            <value>The default get value.</value>
        </member>
        <member name="P:Eto.Forms.DelegateBinding`2.DefaultSetValue">
            <summary>
            Gets or sets the default set value, when the incoming value is null.
            </summary>
            <value>The default set value.</value>
        </member>
        <member name="M:Eto.Forms.DelegateBinding`2.#ctor(System.Func{`0,`1},System.Action{`0,`1},System.Action{`0,System.EventHandler{System.EventArgs}},System.Action{`0,System.EventHandler{System.EventArgs}},`1,`1)">
            <summary>
            Initializes a new instance of the <see cref="T:Eto.Forms.DelegateBinding`2"/> class.
            </summary>
            <param name="getValue">Delegate to get the value for the binding.</param>
            <param name="setValue">Delegate to set the value for the binding.</param>
            <param name="addChangeEvent">Delegate to register the change event, when needed by the consumer of this binding.</param>
            <param name="removeChangeEvent">Delegate to remove the change event.</param>
            <param name="defaultGetValue">Default get value, when the object instance is null.</param>
            <param name="defaultSetValue">Default set value, when the incoming value is null.</param>
        </member>
        <member name="M:Eto.Forms.DelegateBinding`2.#ctor(System.Func{`0,`1},System.Action{`0,`1},System.String,`1,`1)">
            <summary>
            Initializes a new instance of the <see cref="T:Eto.Forms.DelegateBinding`2"/> class.
            </summary>
            <param name="getValue">Delegate to get the value for the binding.</param>
            <param name="setValue">Delegate to set the value for the binding.</param>
            <param name="notifyProperty">Name of the property to listen for change events of this binding.</param>
            <param name="defaultGetValue">Default get value, when the object instance is null.</param>
            <param name="defaultSetValue">Default set value, when the incoming value is null.</param>
        </member>
        <member name="M:Eto.Forms.DelegateBinding`2.InternalGetValue(System.Object)">
            <summary>
            Implements the logic to get the value from the specified object
            </summary>
            <remarks>Implementors of this binding must implement this method to get the value from the specified object</remarks>
            <param name="dataItem">object to get the value from</param>
            <returns>value from this binding of the specified object</returns>
        </member>
        <member name="M:Eto.Forms.DelegateBinding`2.InternalSetValue(System.Object,`1)">
            <summary>
            Implements the logic to set the value to the specified object
            </summary>
            <param name="dataItem">object to set the value to</param>
            <param name="value">value to set on the dataItem for this binding</param>
        </member>
        <member name="M:Eto.Forms.DelegateBinding`2.AddValueChangedHandler(System.Object,System.EventHandler{System.EventArgs})">
            <summary>
            Wires an event handler to fire when the property of the dataItem is changed
            </summary>
            <param name="dataItem">object to detect changes on</param>
            <param name="handler">handler to fire when the property changes on the specified dataItem</param>
            <returns>binding reference used to track the event hookup, to pass to <see cref="M:Eto.Forms.DelegateBinding`2.RemoveValueChangedHandler(System.Object,System.EventHandler{System.EventArgs})"/> when removing the handler</returns>
        </member>
        <member name="M:Eto.Forms.DelegateBinding`2.RemoveValueChangedHandler(System.Object,System.EventHandler{System.EventArgs})">
            <summary>
            Removes the handler for the specified reference from <see cref="M:Eto.Forms.DelegateBinding`2.AddValueChangedHandler(System.Object,System.EventHandler{System.EventArgs})"/>
            </summary>
            <param name="bindingReference">Reference from the call to <see cref="M:Eto.Forms.DelegateBinding`2.AddValueChangedHandler(System.Object,System.EventHandler{System.EventArgs})"/></param>
            <param name="handler">Same handler that was set up during the <see cref="M:Eto.Forms.DelegateBinding`2.AddValueChangedHandler(System.Object,System.EventHandler{System.EventArgs})"/> call</param>
        </member>
        <member name="T:Eto.Forms.DirectBinding`1">
            <summary>
            Abstraction to get/set values from a provided object
            </summary>
            <remarks>
            This binding provides a way to get/set values of an object that is provided by the binding,
            and not passed in.
            
            This differs from the <see cref="T:Eto.Forms.IndirectBinding`1"/>, which requires that the caller pass in the
            object to get/set the value from/to.
            </remarks>
            <copyright>(c) 2014 by Curtis Wensley</copyright>
            <license type="BSD-3">See LICENSE for full terms</license>
        </member>
        <member name="F:Eto.Forms.DirectBinding`1.DataValueChangedEvent">
            <summary>
            Identifier for the <see cref="E:Eto.Forms.DirectBinding`1.DataValueChanged"/> event
            </summary>
        </member>
        <member name="E:Eto.Forms.DirectBinding`1.DataValueChanged">
            <summary>
            Event to handle when the value changes on the bound object
            </summary>
        </member>
        <member name="M:Eto.Forms.DirectBinding`1.OnDataValueChanged(System.EventArgs)">
            <summary>
            Handles the <see cref="E:Eto.Forms.DirectBinding`1.DataValueChanged"/> event
            </summary>
            <remarks>
            Implementors of this class should call this method when the value changes
            on the bound object. Make sure to also override the <see cref="M:Eto.Binding.HandleEvent"/> 
            and <see cref="M:Eto.Binding.RemoveEvent"/> methods to hook up/remove any event bindings 
            you need on the bound object.
            </remarks>
        </member>
        <member name="P:Eto.Forms.DirectBinding`1.DataValue">
            <summary>
            Gets or sets the value of this binding
            </summary>
        </member>
        <member name="M:Eto.Forms.DirectBinding`1.Convert``1(System.Func{`0,``0},System.Func{``0,`0})">
            <summary>
            Converts this binding's value to another value using delegates.
            </summary>
            <remarks>
            This is useful when you want to cast one binding to another, perform logic when getting/setting a value from a particular
            binding, or get/set a preoperty of the value.
            </remarks>
            <typeparam name="TValue">Type of the value for the new binding</typeparam>
            <param name="toValue">Delegate to convert to the new value type.</param>
            <param name="fromValue">Delegate to convert from the value to the original binding's type.</param>
            <returns>A new binding with the specified <typeparamref name="TValue"/> type.</returns>
        </member>
        <member name="M:Eto.Forms.DirectBinding`1.Cast``1">
            <summary>
            Casts this binding value to another (compatible) type.
            </summary>
            <typeparam name="TValue">The type to cast the values of this binding to.</typeparam>
        </member>
        <member name="M:Eto.Forms.DirectBinding`1.Child``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Binds to the specified child <paramref name="property"/> expression.
            </summary>
            <remarks>
            This can be used to bind to properties of child objects of your view model, for example
            <code>model.SomeProperty.ChildProperty</code>.
            
            This will automatically look up the changed event either by a [Property]Changed event or INotifyPropertyChanged implementation
            for each object in the heirarchy.
            
            Note that you only really need to use this when you have an existing binding that you cannot change.
            See <see cref="M:Eto.Forms.Binding.Property``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})"/> for an example of how to bind to child property values
            more directly.
            </remarks>
            <example>
            Use this like so:
            <code>
            	public class MyChild { public SomeChildProperty { get; set; } }
            	public class MyModel { public ChildObject { get; set; } }
            
            	var model = new MyModel();
            	Binding.Property(model, (MyModel m) => m.ChildObject).Child(c => c.SomeChildProperty);
            </code>
            </example>
            <returns>The binding to the child property accessed through the current binding.</returns>
            <param name="property">Property to bind to.</param>
            <typeparam name="TValue">The type of the child property value.</typeparam>
        </member>
        <member name="M:Eto.Forms.DirectBinding`1.Child``1(Eto.Forms.IndirectBinding{``0})">
            <summary>
            Binds to the specified child <paramref name="binding"/> of this binding.
            </summary>
            <remarks>
            This can be used to bind to child objects of your view model, for example
            <code>model.SomeProperty.ChildProperty</code>.
            </remarks>
            <example>
            Use this like so:
            <code>
            	public class MyChild { public SomeChildProperty { get; set; } }
            	public class MyModel { public ChildObject { get; set; } }
            
            	var model = new MyModel();
            	Binding.Property(model, (MyModel m) => m.ChildObject).Child(Binding.Property("SomeChildProperty"));
            </code>
            </example>
            <returns>The binding to the child property accessed through the current binding.</returns>
            <param name="binding">Binding to get the child value from this binding.</param>
            <typeparam name="TValue">The type of the child property value.</typeparam>
        </member>
        <member name="M:Eto.Forms.DirectBinding`1.ToBool(`0,`0,`0)">
            <summary>
            Converts this binding to return a nullable boolean binding
            </summary>
            <remarks>
            This is useful when converting a binding to be used for a checkbox's Checked binding for example.
            When the binding's value matches the <paramref name="trueValue"/>, it will return true.
            </remarks>
            <returns>Boolean binding.</returns>
            <param name="trueValue">Value when the binding is true.</param>
            <param name="falseValue">Value when the binding is false.</param>
            <param name="nullValue">Value when the binding is null.</param>
        </member>
        <member name="M:Eto.Forms.DirectBinding`1.ToBool(`0,`0)">
            <summary>
            Converts this binding to return a nullable boolean binding
            </summary>
            <remarks>
            This is useful when converting a binding to be used for a checkbox's Checked binding for example.
            When the binding's value matches the <paramref name="trueValue"/>, it will return true.
            </remarks>
            <returns>Boolean binding.</returns>
            <param name="trueValue">Value when the binding is true.</param>
            <param name="falseValue">Value when the binding is false or null.</param>
        </member>
        <member name="M:Eto.Forms.DirectBinding`1.ToBool(`0)">
            <summary>
            Converts this binding to return a nullable boolean binding
            </summary>
            <remarks>
            This is useful when converting a binding to be used for a checkbox's Checked binding for example.
            When the binding's value matches the <paramref name="trueValue"/>, it will return true.
            </remarks>
            <returns>Boolean binding.</returns>
            <param name="trueValue">Value when the binding is true, false, or null.</param>
        </member>
        <member name="M:Eto.Forms.DirectBinding`1.ToType``1(System.Func{`0,``0},System.Func{``0,`0})">
            <summary>
            Uses System.Convert.ChangeType to change the value of the binding to the specified type.
            </summary>
            <remarks>
            This has additional logic to deal with nullable types so they can be converted properly as well.
            </remarks>
            <param name="invalidGetValue">Delegate to get a value when it cannot be converted to the specified <typeparamref name="TType"/>. When null, an exception will be thrown when the value cannot be converted.</param>
            <param name="invalidSetValue">Delegate to set a value when it cannot be converted from the specified <typeparamref name="TType"/>. When null, an exception will be thrown when the value cannot be converted.</param>
            <typeparam name="TType">Type to convert the value to</typeparam>
            <returns>A binding of the new type that is a converted version of this binding</returns>
        </member>
        <member name="M:Eto.Forms.DirectBinding`1.CatchException(System.Func{System.Exception,System.Boolean})">
            <summary>
            Catches any exceptions when setting the value of the binding
            </summary>
            <param name="exceptionHandler">Handler to call when setting the value, regardless of whether an exception occurs. Return true when the exception is handled, false to throw an exception.</param>
            <returns>The binding that catches any exception.</returns>
        </member>
        <member name="M:Eto.Forms.DirectBinding`1.CatchException``1(System.Func{``0,System.Boolean})">
            <summary>
            Catches any exceptions of the specified <typeparamref name="TException"/> when setting the value of the binding.
            </summary>
            <typeparam name="TException">Type of the exception to catch</typeparam>
            <param name="exceptionHandler">Handler to call when setting the value, regardless of whether an exception occurs. Return true when the exception is handled, false to throw an exception.</param>
            <returns>The binding that catches the specified exception.</returns>
        </member>
        <member name="T:Eto.Forms.DualBindingMode">
            <summary>
            Mode of the <see cref="T:Eto.Forms.DualBinding`1"/>
            </summary>
            <remarks>
            This specifies what direction the updates of each of the properties are automatically handled.
            Only properties that have a Changed event, or objects that implement <see cref="T:System.ComponentModel.INotifyPropertyChanged"/>
            will handle automatically updating the binding.
            </remarks>
            <copyright>(c) 2014 by Curtis Wensley</copyright>
            <license type="BSD-3">See LICENSE for full terms</license>
        </member>
        <member name="F:Eto.Forms.DualBindingMode.OneWay">
            <summary>
            Binding will update the destination if the source property is changed
            </summary>
        </member>
        <member name="F:Eto.Forms.DualBindingMode.TwoWay">
            <summary>
            Binding will update both the destination or source if updated on either the source or destination, respectively
            </summary>
        </member>
        <member name="F:Eto.Forms.DualBindingMode.OneWayToSource">
            <summary>
            Binding will update the source if the destination property is changed
            </summary>
        </member>
        <member name="F:Eto.Forms.DualBindingMode.OneTime">
            <summary>
            Binding will only set the destination from the source when initially bound
            </summary>
            <remarks>
            This is ideal when you want to set the values of the destination, then only update the source
            at certain times using the <see cref="M:Eto.Forms.DualBinding`1.Update(Eto.Forms.BindingUpdateMode)"/> method.
            </remarks>
        </member>
        <member name="F:Eto.Forms.DualBindingMode.Manual">
            <summary>
            Binding will only update when the <see cref="M:Eto.Forms.Binding.Update(Eto.Forms.BindingUpdateMode)"/> method is called.
            </summary>
        </member>
        <member name="T:Eto.Forms.DualBinding`1">
            <summary>
            Binding for joining two object bindings together
            </summary>
            <remarks>
            The DualBinding is the most useful binding, as it allows you to bind two objects together.
            This differs from the <see cref="T:Eto.Forms.IndirectBinding`1"/> where it only specifies how to get/set the value from a single object.
            
            </remarks>
        </member>
        <member name="P:Eto.Forms.DualBinding`1.Source">
            <summary>
            Gets the source binding
            </summary>
        </member>
        <member name="P:Eto.Forms.DualBinding`1.Destination">
            <summary>
            Gets the destination binding
            </summary>
        </member>
        <member name="P:Eto.Forms.DualBinding`1.Mode">
            <summary>
            Gets the mode of the binding
            </summary>
        </member>
        <member name="M:Eto.Forms.DualBinding`1.#ctor(System.Object,System.String,System.Object,System.String,Eto.Forms.DualBindingMode)">
            <summary>
            Initializes a new instance of the DualBinding class with two object property bindings
            </summary>
            <param name="source">Object to retrieve the source value from</param>
            <param name="sourceProperty">Property to retrieve from the source</param>
            <param name="destination">Object to set the destination value to</param>
            <param name="destinationProperty">Property to set on the destination</param>
            <param name="mode">Mode of the binding</param>
        </member>
        <member name="M:Eto.Forms.DualBinding`1.#ctor(Eto.Forms.DirectBinding{`0},Eto.Forms.DirectBinding{`0},Eto.Forms.DualBindingMode)">
            <summary>
            Initializes a new instance of the DualBinding class with two specified bindings
            </summary>
            <param name="source">Binding for retrieving the source value from</param>
            <param name="destination">Binding for setting the destination value to</param>
            <param name="mode">Mode of the binding</param>
        </member>
        <member name="M:Eto.Forms.DualBinding`1.SetSource">
            <summary>
            Sets the source object's property with the value of the destination
            </summary>
        </member>
        <member name="M:Eto.Forms.DualBinding`1.SetDestination">
            <summary>
            Sets the destination object's property with the value of the source
            </summary>
        </member>
        <member name="M:Eto.Forms.DualBinding`1.Update(Eto.Forms.BindingUpdateMode)">
            <summary>
            Updates the binding value (sets the source with the value of the destination)
            </summary>
        </member>
        <member name="M:Eto.Forms.DualBinding`1.Unbind">
            <summary>
            Unbinds both the source and destination bindings
            </summary>
        </member>
        <member name="M:Eto.Forms.DualBinding`1.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:Eto.Forms.DualBinding`1"/>.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents the current <see cref="T:Eto.Forms.DualBinding`1"/>.</returns>
        </member>
        <member name="T:Eto.Forms.IBindable">
            <summary>
            Interface for objects that support binding
            </summary>
        </member>
        <member name="P:Eto.Forms.IBindable.DataContext">
            <summary>
            Gets or sets the data context for the widget for binding
            </summary>
            <remarks>
            Subclasses may override the standard behaviour so that hierarchy of widgets can be taken into account.
            
            For example, a Control may return the data context of a parent, if it is not set explicitly.
            </remarks>
        </member>
        <member name="E:Eto.Forms.IBindable.DataContextChanged">
            <summary>
            Event to handle when the <see cref="P:Eto.Forms.IBindable.DataContext"/> has changed
            </summary>
            <remarks>
            This may be fired in the event of a parent in the hierarchy setting the data context.
            For example, the <see cref="T:Eto.Forms.Container"/> widget fires this event when it's event is fired.
            </remarks>
        </member>
        <member name="P:Eto.Forms.IBindable.Bindings">
            <summary>
            Gets the collection of bindings that are attached to this widget
            </summary>
        </member>
        <member name="T:Eto.Forms.IIndirectBinding`1">
            <summary>
            Base interface for an indirect binding.
            </summary>
            <remarks>
            An indirect binding is passed the data item to get/set values on the object.
            This is used for things like the <see cref="T:Eto.Forms.Grid"/>, <see cref="T:Eto.Forms.ListBox"/>, etc when
            binding to values for each item in the data store.
            </remarks>
        </member>
        <member name="M:Eto.Forms.IIndirectBinding`1.GetValue(System.Object)">
            <summary>
            Gets the value from the specified object using this binding
            </summary>
            <remarks>
            When values are needed from this binding, this method will be called.
            </remarks>
            <param name="dataItem">object to retrieve the value from</param>
            <returns>value from the specified object</returns>
        </member>
        <member name="M:Eto.Forms.IIndirectBinding`1.SetValue(System.Object,`0)">
            <summary>
            Sets the specified value to an object using this binding
            </summary>
            <remarks>
            This is called to set the value to the object.
            </remarks>
            <param name="dataItem">object to set the value to</param>
            <param name="value">value to set to the object</param>
        </member>
        <member name="T:Eto.Forms.IndirectBinding`1">
            <summary>
            Provides an indirect binding to an indeterminate source/destination
            </summary>
            <remarks>
            This binding does not directly bind to an object - you must pass the
            object to get/set the value.  The <see cref="T:Eto.Forms.DirectBinding`1"/> differs in 
            that it binds directly to an object.
            
            The IndirectBinding is useful when you want to use the same binding on multiple
            objects, such as when binding cells in a <see cref="T:Eto.Forms.Grid"/>.
            
            Typically one would use <see cref="T:Eto.Forms.PropertyBinding`1"/> or <see cref="T:Eto.Forms.ColumnBinding`1"/>
            which are ways to retrieve either a property value or column/index-based value.
            </remarks>
            <copyright>(c) 2014 by Curtis Wensley</copyright>
            <license type="BSD-3">See LICENSE for full terms</license>
        </member>
        <member name="M:Eto.Forms.IndirectBinding`1.GetValue(System.Object)">
            <summary>
            Gets the value from the specified object using this binding
            </summary>
            <remarks>
            When values are needed from this binding, this method will be called.
            Implementors of this binding would implement logic in <see cref="M:Eto.Forms.IndirectBinding`1.InternalGetValue(System.Object)"/>
            </remarks>
            <param name="dataItem">object to retrieve the value from</param>
            <returns>value from the specified object</returns>
        </member>
        <member name="M:Eto.Forms.IndirectBinding`1.SetValue(System.Object,`0)">
            <summary>
            Sets the specified value to an object using this binding
            </summary>
            <remarks>
            This is called to set the value to the object. Implementors of this binding
            woulc implement logic in <see cref="M:Eto.Forms.IndirectBinding`1.InternalSetValue(System.Object,`0)"/>.
            </remarks>
            <param name="dataItem">object to set the value to</param>
            <param name="value">value to set to the object</param>
        </member>
        <member name="M:Eto.Forms.IndirectBinding`1.InternalGetValue(System.Object)">
            <summary>
            Implements the logic to get the value from the specified object
            </summary>
            <remarks>
            Implementors of this binding must implement this method to get the value from the specified object
            </remarks>
            <param name="dataItem">object to get the value from</param>
            <returns>value from this binding of the specified object</returns>
        </member>
        <member name="M:Eto.Forms.IndirectBinding`1.InternalSetValue(System.Object,`0)">
            <summary>
            Implements the logic to set the value to the specified object
            </summary>
            <param name="dataItem">object to set the value to</param>
            <param name="value">value to set on the dataItem for this binding</param>
        </member>
        <member name="M:Eto.Forms.IndirectBinding`1.AddValueChangedHandler(System.Object,System.EventHandler{System.EventArgs})">
            <summary>
            Adds a handler to trap when the value of this binding changes for the specified object
            </summary>
            <remarks>
            This is used to wire up events (or other mechanisms) to detect if the value is changed for a particular
            object.
            
            This is typically used to fire the <see cref="E:Eto.Forms.DirectBinding`1.DataValueChanged"/> event (which is wired up automatically)
            </remarks>
            <param name="dataItem">object to hook up the value changed event for</param>
            <param name="handler">handler for when the value of this binding changes for the specified object</param>
            <returns>object to track the changed handler (must be passed to <see cref="M:Eto.Forms.IndirectBinding`1.RemoveValueChangedHandler(System.Object,System.EventHandler{System.EventArgs})"/> to remove)</returns>
        </member>
        <member name="M:Eto.Forms.IndirectBinding`1.RemoveValueChangedHandler(System.Object,System.EventHandler{System.EventArgs})">
            <summary>
            Removes the handler for the specified reference from <see cref="M:Eto.Forms.IndirectBinding`1.AddValueChangedHandler(System.Object,System.EventHandler{System.EventArgs})"/>
            </summary>
            <param name="bindingReference">Reference from the call to <see cref="M:Eto.Forms.IndirectBinding`1.AddValueChangedHandler(System.Object,System.EventHandler{System.EventArgs})"/></param>
            <param name="handler">Same handler that was set up during the <see cref="M:Eto.Forms.IndirectBinding`1.AddValueChangedHandler(System.Object,System.EventHandler{System.EventArgs})"/> call</param>
        </member>
        <member name="M:Eto.Forms.IndirectBinding`1.Convert``1(System.Func{`0,``0},System.Func{``0,`0})">
            <summary>
            Converts this binding's value to another value using delegates.
            </summary>
            <remarks>
            This is useful when you want to cast one binding to another, perform logic when getting/setting a value from a particular
            binding, or get/set a preoperty of the value.
            </remarks>
            <param name="toValue">Delegate to convert to the new value type.</param>
            <param name="fromValue">Delegate to convert from the value to the original binding's type.</param>
            <typeparam name="TValue">The type to convert to.</typeparam>
        </member>
        <member name="M:Eto.Forms.IndirectBinding`1.Convert``1(Eto.Forms.IValueConverter,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts the binding using the specified <paramref name="converter"/> object.
            </summary>
            <returns>A new binding that will be converted using the specified IValueConverter.</returns>
            <param name="converter">Converter object to use when converting to/from the value</param>
            <param name="conveterParameter">Parameter to pass to the converter.</param>
            <param name="culture">Culture to use for conversion, null to use invariant culture.</param>
        </member>
        <member name="M:Eto.Forms.IndirectBinding`1.Convert(Eto.Forms.IValueConverter,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts the binding using the specified <paramref name="converter"/> object.
            </summary>
            <returns>A new binding that will be converted using the specified IValueConverter.</returns>
            <param name="converter">Converter object to use when converting to/from the value</param>
            <param name="propertyType">Type for the converter to convert to</param>
            <param name="conveterParameter">Parameter to pass to the converter.</param>
            <param name="culture">Culture to use for conversion, null to use invariant culture.</param>
        </member>
        <member name="M:Eto.Forms.IndirectBinding`1.Cast``1">
            <summary>
            Casts this binding value to another (compatible) type.
            </summary>
            <typeparam name="TValue">The type to cast the values of this binding to.</typeparam>
        </member>
        <member name="M:Eto.Forms.IndirectBinding`1.Child``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Binds to the specified child <paramref name="property"/> expression.
            </summary>
            <remarks>
            This can be used to bind to properties of child objects of your view model, for example
            <code>model.SomeProperty.ChildProperty</code>.
            
            This will automatically look up the changed event either by a [Property]Changed event or INotifyPropertyChanged implementation
            for each object in the heirarchy.
            
            Note that you only really need to use this when you have an existing binding that you cannot change.
            See <see cref="M:Eto.Forms.Binding.Property``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})"/> for an example of how to bind to child property values
            more directly.
            </remarks>
            <example>
            Use this like so:
            <code>
            	public class MyChild { public SomeChildProperty { get; set; } }
            	public class MyModel { public ChildObject { get; set; } }
            
            	Binding.Property((MyModel m) => m.ChildObject).Child(c => c.SomeChildProperty);
            </code>
            </example>
            <returns>The binding to the child property accessed through the current binding.</returns>
            <param name="property">Property to bind to.</param>
            <typeparam name="TNewValue">The type of the child property value.</typeparam>
        </member>
        <member name="M:Eto.Forms.IndirectBinding`1.Child``1(Eto.Forms.IndirectBinding{``0})">
            <summary>
            Binds to the specified child <paramref name="binding"/> of this binding.
            </summary>
            <remarks>
            This can be used to bind to child objects of your view model, for example
            <code>model.SomeProperty.ChildProperty</code>.
            </remarks>
            <example>
            Use this like so:
            <code>
            	public class MyChild { public SomeChildProperty { get; set; } }
            	public class MyModel { public ChildObject { get; set; } }
            
            	Binding.Property((MyModel m) => m.ChildObject).Child(Binding.Property("SomeChildProperty"));
            </code>
            </example>
            <returns>The binding to the child property accessed through the current binding.</returns>
            <param name="binding">Binding to get the child value from this binding.</param>
            <typeparam name="TNewValue">The type of the child property value.</typeparam>
        </member>
        <member name="M:Eto.Forms.IndirectBinding`1.OfType``1(``0,`0)">
            <summary>
            Casts this binding value to another (compatible) type, or returns the default if the types do not match.
            </summary>
            <typeparam name="TValue">The type to cast the values of this binding to.</typeparam>
        </member>
        <member name="M:Eto.Forms.IndirectBinding`1.ToBool(`0,`0,`0)">
            <summary>
            Converts this binding to return a nullable boolean binding
            </summary>
            <remarks>
            This is useful when converting a binding to be used for a checkbox's Checked binding for example.
            When the binding's value matches the <paramref name="trueValue"/>, it will return true.
            </remarks>
            <returns>Boolean binding.</returns>
            <param name="trueValue">Value when the binding is true.</param>
            <param name="falseValue">Value when the binding is false.</param>
            <param name="nullValue">Value when the binding is null.</param>
        </member>
        <member name="M:Eto.Forms.IndirectBinding`1.ToBool(`0,`0)">
            <summary>
            Converts this binding to return a nullable boolean binding
            </summary>
            <remarks>
            This is useful when converting a binding to be used for a checkbox's Checked binding for example.
            When the binding's value matches the <paramref name="trueValue"/>, it will return true.
            </remarks>
            <returns>Boolean binding.</returns>
            <param name="trueValue">Value when the binding is true.</param>
            <param name="falseValue">Value when the binding is false.</param>
        </member>
        <member name="M:Eto.Forms.IndirectBinding`1.ToBool(`0)">
            <summary>
            Converts this binding to return a nullable boolean binding
            </summary>
            <remarks>
            This is useful when converting a binding to be used for a checkbox's Checked binding for example.
            When the binding's value matches the <paramref name="trueValue"/>, it will return true.
            </remarks>
            <returns>Boolean binding.</returns>
            <param name="trueValue">Value when the binding is true.</param>
        </member>
        <member name="M:Eto.Forms.IndirectBinding`1.EnumToString(`0)">
            <summary>
            Converts the a binding to an enumeration to/from its string representation
            </summary>
            <returns>Binding to the string value of the enumeration.</returns>
            <param name="defaultValue">Default if the value is not valid or empty.</param>
        </member>
        <member name="M:Eto.Forms.IndirectBinding`1.ToType``1(System.Func{`0,``0},System.Func{``0,`0})">
            <summary>
            Uses System.Convert.ChangeType to change the value of the binding to the specified type.
            </summary>
            <remarks>
            This has additional logic to deal with nullable types so they can be converted properly as well.
            </remarks>
            <param name="invalidGetValue">Delegate to get a value when it cannot be converted to the specified <typeparamref name="TType"/>. When null, an exception will be thrown when the value cannot be converted.</param>
            <param name="invalidSetValue">Delegate to set a value when it cannot be converted from the specified <typeparamref name="TType"/>. When null, an exception will be thrown when the value cannot be converted.</param>
            <typeparam name="TType">Type to convert the value to</typeparam>
            <returns>A binding of the new type that is a converted version of this binding</returns>
        </member>
        <member name="M:Eto.Forms.IndirectBinding`1.AfterDelay(System.TimeSpan,System.Boolean)">
            <summary>
            Specifies that the binding should only respond to change events after a delay.
            </summary>
            <remarks>
            This is useful if the property/delegate that is bound is expensive to retrieve the new value,
            for example to dynamically generate a bitmap based on the state of the model, etc. 
            
            The <paramref name="reset"/> boolean allows you to ensure that the binding is updated periodically when <c>false</c> (default), 
            or <c>true</c> to wait for the delay period after the last change event.
            </remarks>
            <param name="delay">The delay time span to wait after the value has changed before updating the binding.</param>
            <param name="reset"><c>true</c> to reset the delay every time the event is fired, <c>false</c> to trigger the change at least by the delay interval since the last time it was triggered</param>
            <returns>A binding that will delay the change event</returns>
        </member>
        <member name="M:Eto.Forms.IndirectBinding`1.AfterDelay(System.Double,System.Boolean)">
            <summary>
            Specifies that the binding should only respond to change events after a delay.
            </summary>
            <remarks>
            This is useful if the property/delegate that is bound is expensive to retrieve the new value,
            for example to dynamically generate a bitmap based on the state of the model, etc. 
            
            The <paramref name="reset"/> boolean allows you to ensure that the binding is updated periodically when <c>false</c> (default), 
            or <c>true</c> to wait for the delay period after the last change event.
            </remarks>
            <param name="delay">The delay, in seconds to wait after the value has changed before updating the binding.</param>
            <param name="reset"><c>true</c> to reset the delay every time the event is fired, <c>false</c> to trigger the change at least by the delay interval since the last time it was triggered</param>
            <returns>A binding that will delay the change event</returns>
        </member>
        <member name="M:Eto.Forms.IndirectBinding`1.CatchException(System.Func{System.Exception,System.Boolean})">
            <summary>
            Catches any exceptions when setting the value of the binding
            </summary>
            <param name="exceptionHandler">Handler to call when setting the value, regardless of whether an exception occurs. Return true when the exception is handled, false to throw an exception.</param>
            <returns>The binding that catches any exception.</returns>
        </member>
        <member name="M:Eto.Forms.IndirectBinding`1.CatchException``1(System.Func{``0,System.Boolean})">
            <summary>
            Catches any exceptions of the specified <typeparamref name="TException"/> when setting the value of the binding.
            </summary>
            <typeparam name="TException">Type of the exception to catch</typeparam>
            <param name="exceptionHandler">Handler to call when setting the value, regardless of whether an exception occurs. Return true when the exception is handled, false to throw an exception.</param>
            <returns>The binding that catches the specified exception.</returns>
        </member>
        <member name="T:Eto.Forms.IValueConverter">
            <summary>
            Interface for providing a reusable converter for binding values
            </summary>
            <remarks>
            This can be used with the Convert() method for a binding.
            </remarks>
            <seealso cref="M:Eto.Forms.IndirectBinding`1.Convert(Eto.Forms.IValueConverter,System.Type,System.Object,System.Globalization.CultureInfo)"/>
            <seealso cref="M:Eto.Forms.IndirectBinding`1.Convert``1(Eto.Forms.IValueConverter,System.Object,System.Globalization.CultureInfo)"/>
        </member>
        <member name="M:Eto.Forms.IValueConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts the <paramref name="value"/> to the specified <paramref name="targetType"/>
            </summary>
            <remarks>
            This is called when translating the value from the source to the destination, usually from the 
            Control to the View Model.
            </remarks>
            <param name="value">Value to convert</param>
            <param name="targetType">Type to convert the value to</param>
            <param name="parameter">Context-specific parameter passed from the binding</param>
            <param name="culture">Culture to convert with</param>
            <returns>A converted value with the type of <paramref name="targetType"/>.</returns>
        </member>
        <member name="M:Eto.Forms.IValueConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts the <paramref name="value"/> to the specified <paramref name="targetType"/>.
            </summary>
            <remarks>
            This is called when translating the value back from the destination to the source, usually from the
            View Model to the Control.
            
            This should be the reverse implementation of the <see cref="M:Eto.Forms.IValueConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)"/> method.
            </remarks>
            <param name="value">Value to convert</param>
            <param name="targetType">Type to convert the value back to</param>
            <param name="parameter">Context-specific parameter passed from the binding</param>
            <param name="culture">Culture to convert with</param>
            <returns>A converted value with the type of <paramref name="targetType"/>.</returns>
        </member>
        <member name="T:Eto.Forms.ObjectBinding`1">
            <summary>
            Binding for a particular object to get/set values from/to
            </summary>
            <remarks>
            This binding provides a way to get/set values for a particular object.  This uses
            a <see cref="T:Eto.Forms.IndirectBinding`1"/> as its logic to actually retrieve/set the values.
            
            This acts as a bridge between the <see cref="T:Eto.Forms.IndirectBinding`1"/> and <see cref="T:Eto.Forms.DirectBinding`1"/>
            so that you can utilize the <see cref="E:Eto.Forms.DirectBinding`1.DataValueChanged"/> method.
            
            Typically, one would use the <see cref="T:Eto.Forms.PropertyBinding`1"/>, or the <see cref="C:ObjectBinding{T,TValue}(T, string)"/>
            constructor to hook up this binding to a particular property of the specified object
            </remarks>
            <typeparam name="TValue">The type of value for the binding.</typeparam>
        </member>
        <member name="M:Eto.Forms.ObjectBinding`1.#ctor(System.Object,Eto.Forms.IndirectBinding{`0})">
            <summary>
            Initializes a new instance of the ObjectBinding with the specified object and binding to get/set values with
            </summary>
            <param name="dataItem">object to get/set values from</param>
            <param name="innerBinding">binding to use to get/set the values from the dataItem</param>
        </member>
        <member name="M:Eto.Forms.ObjectBinding`1.#ctor(System.Object,System.String)">
            <summary>
            Initializes a new instance of the ObjectBinding with the specified object and property for a <see cref="T:Eto.Forms.PropertyBinding`1"/>
            </summary>
            <remarks>
            This is a shortcut to set up the binding to get/set values from a particular property of the specified object
            </remarks>
            <param name="dataItem">object to get/set values from</param>
            <param name="property">property of the dataItem to get/set values</param>
        </member>
        <member name="T:Eto.Forms.ObjectBinding`2">
            <summary>
            Binding for a particular object to get/set values from/to
            </summary>
            <remarks>
            This binding provides a way to get/set values for a particular object.  This uses
            a <see cref="T:Eto.Forms.IndirectBinding`1"/> as its logic to actually retrieve/set the values.
            
            This acts as a bridge between the <see cref="T:Eto.Forms.IndirectBinding`1"/> and <see cref="T:Eto.Forms.DirectBinding`1"/>
            so that you can utilize the <see cref="E:Eto.Forms.DirectBinding`1.DataValueChanged"/> method.
            
            Typically, one would use the <see cref="T:Eto.Forms.PropertyBinding`1"/>, or the <see cref="C:ObjectBinding{T,TValue}(T, string)"/>
            constructor to hook up this binding to a particular property of the specified object
            </remarks>
            <typeparam name="T">The type of object to bind to.</typeparam>
            <typeparam name="TValue">The type of value for the binding.</typeparam>
            <copyright>(c) 2014 by Curtis Wensley</copyright>
            <license type="BSD-3">See LICENSE for full terms</license>
        </member>
        <member name="P:Eto.Forms.ObjectBinding`2.InnerBinding">
            <summary>
            Gets the binding used to get/set the values from the <see cref="P:Eto.Forms.ObjectBinding`2.DataItem"/>
            </summary>
        </member>
        <member name="P:Eto.Forms.ObjectBinding`2.DataItem">
            <summary>
            Gets the object to get/set the values using the <see cref="P:Eto.Forms.ObjectBinding`2.InnerBinding"/>
            </summary>
        </member>
        <member name="P:Eto.Forms.ObjectBinding`2.SettingNullValue">
            <summary>
            Gets or sets the default value to use when setting the value for this binding when input value is null
            </summary>
        </member>
        <member name="P:Eto.Forms.ObjectBinding`2.GettingNullValue">
            <summary>
            Gets or sets the default value to use when getting the value for this binding when the <see cref="P:Eto.Forms.ObjectBinding`2.DataItem"/> or property value is null
            </summary>
        </member>
        <member name="M:Eto.Forms.ObjectBinding`2.#ctor(`0,System.Func{`0,`1},System.Action{`0,`1},System.Action{`0,System.EventHandler{System.EventArgs}},System.Action{`0,System.EventHandler{System.EventArgs}})">
            <summary>
            Initializes a new instance of the <see cref="T:Eto.Forms.ObjectBinding`2"/> class.
            </summary>
            <param name="dataItem">Data item to get/set the values from/to.</param>
            <param name="getValue">Delegate to get the value from the object.</param>
            <param name="setValue">Delegate to set the value to the object.</param>
            <param name="addChangeEvent">Delegate to add the change event.</param>
            <param name="removeChangeEvent">Delegate to remove the chang event.</param>
        </member>
        <member name="M:Eto.Forms.ObjectBinding`2.#ctor(`0,System.String)">
            <summary>
            Initializes a new instance of the ObjectBinding with the specified object and property for a <see cref="T:Eto.Forms.PropertyBinding`1"/>
            </summary>
            <remarks>
            This is a shortcut to set up the binding to get/set values from a particular property of the specified object
            </remarks>
            <param name="dataItem">object to get/set values from</param>
            <param name="property">property of the dataItem to get/set values</param>
        </member>
        <member name="M:Eto.Forms.ObjectBinding`2.#ctor(`0,Eto.Forms.IndirectBinding{`1})">
            <summary>
            Initializes a new instance of the ObjectBinding with the specified object and binding to get/set values with
            </summary>
            <param name="dataItem">object to get/set values from</param>
            <param name="innerBinding">binding to use to get/set the values from the dataItem</param>
        </member>
        <member name="P:Eto.Forms.ObjectBinding`2.DataValue">
            <summary>
            Gets or sets the value of this binding on the bound object
            </summary>
            <remarks>
            This uses the <see cref="P:Eto.Forms.ObjectBinding`2.InnerBinding"/> on the <see cref="P:Eto.Forms.ObjectBinding`2.DataItem"/> to get/set the value
            </remarks>
        </member>
        <member name="M:Eto.Forms.ObjectBinding`2.HandleEvent(System.String)">
            <summary>
            Hooks up the late bound events for this object
            </summary>
        </member>
        <member name="M:Eto.Forms.ObjectBinding`2.RemoveEvent(System.String)">
            <summary>
            Removes the late bound events for this object
            </summary>
        </member>
        <member name="M:Eto.Forms.ObjectBinding`2.Unbind">
            <summary>
            Unbinds this binding
            </summary>
        </member>
        <member name="M:Eto.Forms.ObjectBinding`2.Bind(Eto.Forms.DirectBinding{`1},Eto.Forms.DualBindingMode)">
            <summary>
            Creates a new dual binding between the specified <paramref name="sourceBinding"/> and this binding.
            </summary>
            <remarks>
            This creates a <see cref="T:Eto.Forms.DualBinding`1"/> between the specified <paramref name="sourceBinding"/> and this binding.
            You must keep a reference to the binding to unbind when finished.
            </remarks>
            <param name="sourceBinding">Source binding to bind from.</param>
            <param name="mode">Dual binding mode.</param>
        </member>
        <member name="M:Eto.Forms.ObjectBinding`2.Bind(System.Func{`1},System.Action{`1},System.Action{System.EventHandler{System.EventArgs}},System.Action{System.EventHandler{System.EventArgs}},Eto.Forms.DualBindingMode)">
            <summary>
            Creates a new dual binding using a <see cref="T:Eto.Forms.DelegateBinding`1"/> with the specified delegates and this binding.
            </summary>
            <remarks>
            This creates a <see cref="T:Eto.Forms.DualBinding`1"/> between a new <see cref="T:Eto.Forms.DelegateBinding`1"/> and this binding.
            This does not require an object instance for the delegates to get/set the value.
            You must keep a reference to the binding to unbind when finished.
            </remarks>
            <param name="getValue">Delegate to get the value.</param>
            <param name="setValue">Delegate to set the value when changed.</param>
            <param name="addChangeEvent">Delegate to add a change event when the value changes.</param>
            <param name="removeChangeEvent">Delegate to remove the change event.</param>
            <param name="mode">Dual binding mode.</param>
        </member>
        <member name="M:Eto.Forms.ObjectBinding`2.Bind``1(``0,Eto.Forms.IndirectBinding{`1},Eto.Forms.DualBindingMode)">
            <summary>
            Creates a new dual binding between the specified <paramref name="objectBinding"/> and this binding.
            </summary>
            <param name="objectValue">Object to get/set the values from/to.</param>
            <param name="objectBinding">Indirect binding to get/set the values from the <paramref name="objectValue"/>.</param>
            <param name="mode">Dual binding mode.</param>
            <typeparam name="TObject">The type of the object that is being bound to.</typeparam>
        </member>
        <member name="M:Eto.Forms.ObjectBinding`2.Bind(System.Object,System.String,Eto.Forms.DualBindingMode)">
            <summary>
            Creates a binding to the <paramref name="propertyName"/> of the specified <paramref name="objectValue"/>.
            </summary>
            <remarks>
            This is a shortcut to using the <see cref="T:Eto.Forms.PropertyBinding`1"/>.
            This has the advantage of registering automatically to <see cref="T:System.ComponentModel.INotifyPropertyChanged"/> 
            or to an event named after the property with a "Changed" suffix.
            </remarks>
            <param name="objectValue">Object to bind to.</param>
            <param name="propertyName">Name of the property to bind to on the <paramref name="objectValue"/>.</param>
            <param name="mode">Direction of the binding.</param>
        </member>
        <member name="M:Eto.Forms.ObjectBinding`2.Bind``1(``0,System.Linq.Expressions.Expression{System.Func{``0,`1}},Eto.Forms.DualBindingMode)">
            <summary>
            Creates a binding to the specified <paramref name="objectValue"/> with the specified <paramref name="propertyExpression"/>.
            </summary>
            <remarks>
            This has the advantage of registering automatically to <see cref="T:System.ComponentModel.INotifyPropertyChanged"/> 
            or to an event named after the property with a "Changed" suffix, if the expression is a property.
            When the expression does not evaluate to a property, it will not be able to bind to the changed events and will
            use the expression as a delegate directly.
            </remarks>
            <typeparam name="TObject">Type of the data context to bind to</typeparam>
            <param name="objectValue">Object to bind to.</param>
            <param name="propertyExpression">Expression for a property of the <paramref name="objectValue"/>, or a non-property expression with no change event binding.</param>
            <param name="mode">Direction of the binding</param>
            <returns>The binding between the data context and this binding</returns>
        </member>
        <member name="M:Eto.Forms.ObjectBinding`2.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:Eto.Forms.ObjectBinding`2"/>.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents the current <see cref="T:Eto.Forms.ObjectBinding`2"/>.</returns>
        </member>
        <member name="T:Eto.Forms.PropertyBinding`1">
            <summary>
            Indirect binding to get/set values using a property of a specified object
            </summary>
            <remarks>
            This is used when you are binding to a particular property of an object.
            
            This can be used to get/set values from any object.  If you want to bind to a particular object
            directly, use the <see cref="T:Eto.Forms.ObjectBinding`1"/> with this class as its inner binding.
            </remarks>
            <copyright>(c) 2014 by Curtis Wensley</copyright>
            <license type="BSD-3">See LICENSE for full terms</license>
        </member>
        <member name="P:Eto.Forms.PropertyBinding`1.Property">
            <summary>
            Gets or sets the property in which to get/set values from for this binding
            </summary>
        </member>
        <member name="P:Eto.Forms.PropertyBinding`1.IgnoreCase">
            <summary>
            Gets or sets whether the <see cref="P:Eto.Forms.PropertyBinding`1.Property"/> specified is case-sensitive or not
            </summary>
        </member>
        <member name="M:Eto.Forms.PropertyBinding`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Eto.Forms.PropertyBinding`1"/> class.
            </summary>
        </member>
        <member name="M:Eto.Forms.PropertyBinding`1.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the PropertyBinding with the specified property
            </summary>
            <param name="property">Property to use to get/set values for this binding</param>
            <param name="ignoreCase">True to ignore case for the property, false to be case sensitive</param>
        </member>
        <member name="M:Eto.Forms.PropertyBinding`1.HasProperty(System.Object)">
            <summary>
            Determines whether the dataItem contains the property this binding is bound to.
            </summary>
            <returns><c>true</c> if the dataItem instance has the correct property to bind to, otherwise, <c>false</c>.</returns>
            <param name="dataItem">Data item to find the property.</param>
        </member>
        <member name="M:Eto.Forms.PropertyBinding`1.InternalGetValue(System.Object)">
            <summary>
            Implements the logic to get the value from the specified object
            </summary>
            <param name="dataItem">object to get the value from</param>
            <returns>value of the property from the specified dataItem object</returns>
        </member>
        <member name="M:Eto.Forms.PropertyBinding`1.InternalSetValue(System.Object,`0)">
            <summary>
            Implements the logic to set the value on the specified object
            </summary>
            <param name="dataItem">object to set the value to</param>
            <param name="value">value to set to the property of the specified dataItem object</param>
        </member>
        <member name="M:Eto.Forms.PropertyBinding`1.AddValueChangedHandler(System.Object,System.EventHandler{System.EventArgs})">
            <summary>
            Wires an event handler to fire when the property of the dataItem is changed
            </summary>
            <param name="dataItem">object to detect changes on</param>
            <param name="handler">handler to fire when the property changes on the specified dataItem</param>
            <returns>binding reference used to track the event hookup, to pass to <see cref="M:Eto.Forms.PropertyBinding`1.RemoveValueChangedHandler(System.Object,System.EventHandler{System.EventArgs})"/> when removing the handler</returns>
        </member>
        <member name="M:Eto.Forms.PropertyBinding`1.RemoveValueChangedHandler(System.Object,System.EventHandler{System.EventArgs})">
            <summary>
            Removes the handler for the specified reference from <see cref="M:Eto.Forms.PropertyBinding`1.AddValueChangedHandler(System.Object,System.EventHandler{System.EventArgs})"/>
            </summary>
            <param name="bindingReference">Reference from the call to <see cref="M:Eto.Forms.PropertyBinding`1.AddValueChangedHandler(System.Object,System.EventHandler{System.EventArgs})"/></param>
            <param name="handler">Same handler that was set up during the <see cref="M:Eto.Forms.PropertyBinding`1.AddValueChangedHandler(System.Object,System.EventHandler{System.EventArgs})"/> call</param>
        </member>
        <member name="M:Eto.Forms.PropertyBinding`1.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:Eto.Forms.PropertyBinding`1"/>.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents the current <see cref="T:Eto.Forms.PropertyBinding`1"/>.</returns>
        </member>
        <member name="T:Eto.Forms.PropertyNotifyHelper">
            <summary>
            Helper to turn a property changed event to an EventHandler for binding
            </summary>
            <remarks>
            Use <see cref="M:Eto.Forms.Binding.AddPropertyEvent(System.Object,System.String,System.EventHandler{System.EventArgs})"/> and <see cref="M:Eto.Forms.Binding.RemovePropertyEvent(System.Object,System.EventHandler{System.EventArgs})"/> to access
            this functionality.
            </remarks>
        </member>
        <member name="T:Eto.Forms.Cell">
            <summary>
            Base class for cells in a <see cref="T:Eto.Forms.Grid"/>.
            </summary>
        </member>
        <member name="M:Eto.Forms.Cell.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Eto.Forms.Cell"/> class.
            </summary>
        </member>
        <member name="T:Eto.Forms.CheckBoxCell">
            <summary>
            Cell for <see cref="T:Eto.Forms.Grid"/> controls to show and bind a boolean value to a check box.
            </summary>
        </member>
        <member name="M:Eto.Forms.CheckBoxCell.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Eto.Forms.CheckBoxCell"/> class.
            </summary>
            <param name="column">Index of the column to bind to.</param>
        </member>
        <member name="M:Eto.Forms.CheckBoxCell.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Eto.Forms.CheckBoxCell"/> class with the specified property to bind to.
            </summary>
            <param name="property">Property to bind the value of the check box to.</param>
        </member>
        <member name="M:Eto.Forms.CheckBoxCell.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Eto.Forms.CheckBoxCell"/> class.
            </summary>
        </member>
        <member name="T:Eto.Forms.CheckBoxCell.IHandler">
            <summary>
            Handler interface for the <see cref="T:Eto.Forms.CheckBoxCell"/>.
            </summary>
        </member>
        <member name="T:Eto.Forms.ComboBoxCell">
            <summary>
            Cell to present a combo box in a <see cref="T:Eto.Forms.Grid"/>.
            </summary>
        </member>
        <member name="P:Eto.Forms.ComboBoxCell.ComboTextBinding">
            <summary>
            Binding to get the text value for the items in the combo box.
            </summary>
            <value>The combo text binding.</value>
        </member>
        <member name="P:Eto.Forms.ComboBoxCell.ComboKeyBinding">
            <summary>
            Binding to get the key value for the items in the combo box.
            </summary>
            <value>The combo key binding.</value>
        </member>
        <member name="M:Eto.Forms.ComboBoxCell.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Eto.Forms.ComboBoxCell"/> class with the column index to bind.
            </summary>
            <param name="column">Column index to bind to.</param>
        </member>
        <member name="M:Eto.Forms.ComboBoxCell.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Eto.Forms.ComboBoxCell"/> class with the specified property to bind to.
            </summary>
            <param name="property">Property to bind the value of the combo box to.</param>
        </member>
        <member name="M:Eto.Forms.ComboBoxCell.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Eto.Forms.ComboBoxCell"/> class.
            </summary>
        </member>
        <member name="P:Eto.Forms.ComboBoxCell.DataStore">
            <summary>
            Gets or sets the data store of the items in the combo box for this cell.
            </summary>
            <seealso cref="P:Eto.Forms.ComboBoxCell.ComboTextBinding"/>
            <seealso cref="P:Eto.Forms.ComboBoxCell.ComboKeyBinding"/>
            <value>The source data store for the items in the combo box.</value>
        </member>
        <member name="T:Eto.Forms.ComboBoxCell.IHandler">
            <summary>
            Handler interface for the <see cref="T:Eto.Forms.ComboBoxCell"/>.
            </summary>
        </member>
        <member name="P:Eto.Forms.ComboBoxCell.IHandler.DataStore">
            <summary>
            Gets or sets the data store of the items in the combo box for this cell.
            </summary>
            <seealso cref="P:Eto.Forms.ComboBoxCell.ComboTextBinding"/>
            <seealso cref="P:Eto.Forms.ComboBoxCell.ComboKeyBinding"/>
            <value>The source data store for the items in the combo box.</value>
        </member>
        <member name="T:Eto.Forms.CellStates">
            <summary>
            State for a <see cref="T:Eto.Forms.Cell"/>
            </summary>
        </member>
        <member name="F:Eto.Forms.CellStates.None">
            <summary>
            Normal state
            </summary>
        </member>
        <member name="F:Eto.Forms.CellStates.Selected">
            <summary>
            Row is selected
            </summary>
        </member>
        <member name="F:Eto.Forms.CellStates.Editing">
            <summary>
            Cell is in edit mode
            </summary>
        </member>
        <member name="T:Eto.Forms.CellEventArgs">
            <summary>
            Event arguments for events that refer to a <see cref="T:Eto.Forms.Cell"/>.
            </summary>
        </member>
        <member name="P:Eto.Forms.CellEventArgs.CellState">
            <summary>
            Gets the state of the cell.
            </summary>
            <value>The state of the cell.</value>
        </member>
        <member name="P:Eto.Forms.CellEventArgs.Item">
            <summary>
            Gets or sets the item for the cell.
            </summary>
            <value>The cell's item.</value>
        </member>
        <member name="P:Eto.Forms.CellEventArgs.Row">
            <summary>
            Gets or sets the row for the cell.
            </summary>
            <value>The cell's row.</value>
        </member>
        <member name="P:Eto.Forms.CellEventArgs.CellTextColor">
            <summary>
            Gets or sets the preferred color of the cell text given its state.
            </summary>
            <value>The preferred color of cell text.</value>
        </member>
        <member name="M:Eto.Forms.CellEventArgs.#ctor(System.Int32,System.Object,Eto.Forms.CellStates)">
            <summary>
            Initializes a new instance of the <see cref="T:Eto.Forms.CellEventArgs"/> class.
            </summary>
            <param name="row">Row for the cell.</param>
            <param name="item">Item the cell is displaying.</param>
            <param name="cellState">State of the cell.</param>
        </member>
        <member name="P:Eto.Forms.CellEventArgs.IsEditing">
            <summary>
            Gets or sets a value indicating whether the cell is in edit mode.
            </summary>
            <value><c>true</c> if the cell is in edit mode; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Eto.Forms.CellEventArgs.IsSelected">
            <summary>
            Gets or sets a value indicating whether the cell is selected.
            </summary>
            <value><c>true</c> if the cell is selected; otherwise, <c>false</c>.</value>
        </member>
        <member name="E:Eto.Forms.CellEventArgs.PropertyChanged">
            <summary>
            Occurs when a property is changed.
            </summary>
        </member>
        <member name="M:Eto.Forms.CellEventArgs.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Raises the <see cref="E:Eto.Forms.CellEventArgs.PropertyChanged"/> event
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="T:Eto.Forms.CustomCell">
            <summary>
            Cell for <see cref="T:Eto.Forms.Grid"/> controls to create custom content for the cell.
            </summary>
            <remarks>
            The CustomCell is useful when you want to provide a fully custom implementation of a cell, including editable
            controls.
            
            Note that some platforms bahave differently with a CustomCell, depending on the value of <see cref="P:Eto.Forms.CustomCell.SupportsControlView"/>.
            
            When <c>false</c>, the grid will use the <see cref="E:Eto.Forms.CustomCell.Paint"/> event to paint the contents of each cell, and
            only use <see cref="P:Eto.Forms.CustomCell.CreateCell"/> and <see cref="P:Eto.Forms.CustomCell.ConfigureCell"/> when the cell is in edit mode.
            
            When <c>true</c>, the <see cref="P:Eto.Forms.CustomCell.CreateCell"/> and <see cref="P:Eto.Forms.CustomCell.ConfigureCell"/> methods will be used
            for all cells, even when not in edit mode.
            
            </remarks>
        </member>
        <member name="P:Eto.Forms.CustomCell.SupportsControlView">
            <summary>
            Gets a value indicating that the CustomCell on the current platform supports using a Control for its view mode.
            Gtk and WinForms only support custom controls when editing a cell.
            </summary>
            <remarks>
            When <c>false</c>, you must handle the <see cref="E:Eto.Forms.CustomCell.Paint"/> event (or override <see cref="M:Eto.Forms.CustomCell.OnPaint(Eto.Forms.CellPaintEventArgs)"/>) to provide
            a view mode for the cell contents.
            </remarks>
            <value><c>true</c> if supports control view; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Eto.Forms.CustomCell.Create``1">
            <summary>
            Creates a new CustomCell with instances of the specified <typeparamref name="TControl"/> type.
            </summary>
            <typeparam name="TControl">The type of control to instantiate for the cell, which must have a default constructor.</typeparam>
        </member>
        <member name="P:Eto.Forms.CustomCell.CreateCell">
            <summary>
            Gets or sets a delegate to create the contents of the cell.
            </summary>
            <remarks>
            You can also override the <see cref="M:Eto.Forms.CustomCell.OnCreateCell(Eto.Forms.CellEventArgs)"/> method in subclasses.
            Note that you need to handle <see cref="P:Eto.Forms.CustomCell.ConfigureCell"/> to set up the cell for a particular row of data
            as the control may be reused when scrolling the view.
            </remarks>
            <value>The delegate to create the cell content.</value>
        </member>
        <member name="P:Eto.Forms.CustomCell.GetIdentifier">
            <summary>
            Gets or sets a delegate to get the identifier of the cell based on its content.
            </summary>
            <remarks>
            When you have different controls on a per-row level, each variation must have an identifier string
            to allow the framework to cache the different types of cells to provide good performance.
            
            This hooks into standard cell caching mechanisms in certain platforms, such as on the Mac.
            </remarks>
            <value>The delegate to get the identifier for the cell.</value>
        </member>
        <member name="P:Eto.Forms.CustomCell.GetPreferredWidth">
            <summary>
            Gets or sets a delegate to get the preferred width of the cell based on its content.
            </summary>
            <remarks>
            This may only be used when <see cref="P:Eto.Forms.CustomCell.SupportsControlView"/> is false.
            </remarks>
            <value>The delegate to get the preferred width of the cell.</value>
        </member>
        <member name="P:Eto.Forms.CustomCell.ConfigureCell">
            <summary>
            Gets or sets a delegate to configure an cell when it is reused for a different row or the data changes.
            </summary>
            <remarks>
            This should set up your control your cell content to be reused.  If null, the DataContext of your control will be set to the row model instance.
            
            Typically if you use MVVM data binding, you do not need to override the standard behaviour.
            </remarks>
            <value>The delegate to configure an existing cell's control for a new row/model instance.</value>
        </member>
        <member name="M:Eto.Forms.CustomCell.OnCreateCell(Eto.Forms.CellEventArgs)">
             <summary>
             Creates an instance of the control for a cell.
             </summary>
             <remarks>
             This is called multiple times usually for the number of visible and/or cached cells that are displayed.
             
             Note that you need to handle <see cref="M:Eto.Forms.CustomCell.OnConfigureCell(Eto.Forms.CellEventArgs,Eto.Forms.Control)"/> to set up the cell for a particular row of data
             as the control may be reused when scrolling the view.
            
             If you intend on creating a different type of cell control based on the item, you should also override
             <see cref="P:Eto.Forms.CustomCell.GetIdentifier"/>
             </remarks>
             <param name="args">Arguments when creating the cell to get the row, item and state.</param>
             <returns>The control to display in the cell.</returns>
        </member>
        <member name="M:Eto.Forms.CustomCell.OnGetIdentifier(Eto.Forms.CellEventArgs)">
            <summary>
            Gets the identifier of the cell based on its content.
            </summary>
            <remarks>
            When you have different controls on a per-row level, each variation must have an identifier string
            to allow the framework to cache the different types of cells to provide good performance.
            
            This hooks into standard cell caching mechanisms in certain platforms, such as on the Mac.
            </remarks>
            <seealso cref="P:Eto.Forms.CustomCell.GetIdentifier"/>
            <param name="args">Arguments for the cell</param>
            <value>The identifier for the cell.</value>
        </member>
        <member name="M:Eto.Forms.CustomCell.OnGetPreferredWidth(Eto.Forms.CellEventArgs)">
            <summary>
            Gets the preferred width of the cell based on its content.
            </summary>
            <remarks>
            This may only be used when <see cref="P:Eto.Forms.CustomCell.SupportsControlView"/> is false.
            </remarks>
            <param name="args">Arguments for the cell</param>
            <value>The preferred width of the cell.</value>
        </member>
        <member name="M:Eto.Forms.CustomCell.OnConfigureCell(Eto.Forms.CellEventArgs,Eto.Forms.Control)">
            <summary>
            Configures an existing cell when it is reused for a different row or the data changes.
            </summary>
            <remarks>
            This should set up your control your cell content to be reused.  If null, the DataContext of your control will be set to the row model instance.
            
            Typically if you use MVVM data binding, you do not need to override the standard behaviour.
            </remarks>
            <param name="args">Arguments for the cell</param>
            <param name="control">Existing control to configure for the new cell and/or data</param>
        </member>
        <member name="E:Eto.Forms.CustomCell.Paint">
            <summary>
            Event to handle painting the content of the cell when <see cref="P:Eto.Forms.CustomCell.SupportsControlView"/> is false.
            </summary>
        </member>
        <member name="M:Eto.Forms.CustomCell.OnPaint(Eto.Forms.CellPaintEventArgs)">
            <summary>
            Raises the <see cref="E:Eto.Forms.CustomCell.Paint"/> event.
            </summary>
            <param name="args">Cell paint arguments.</param>
        </member>
        <member name="T:Eto.Forms.CustomCell.IHandler">
            <summary>
            Handler interface for the <see cref="T:Eto.Forms.CustomCell"/>.
            </summary>
        </member>
        <member name="T:Eto.Forms.CustomCell.ICallback">
            <summary>
            Callback interface for the <see cref="T:Eto.Forms.CustomCell"/>
            </summary>
        </member>
        <member name="M:Eto.Forms.CustomCell.ICallback.OnGetPreferredWidth(Eto.Forms.CustomCell,Eto.Forms.CellEventArgs)">
            <summary>
            Gets the preferred width of the cell based on its content.
            </summary>
        </member>
        <member name="M:Eto.Forms.CustomCell.ICallback.OnGetIdentifier(Eto.Forms.CustomCell,Eto.Forms.CellEventArgs)">
            <summary>
            Raises the get identifier event.
            </summary>
        </member>
        <member name="M:Eto.Forms.CustomCell.ICallback.OnConfigureCell(Eto.Forms.CustomCell,Eto.Forms.CellEventArgs,Eto.Forms.Control)">
            <summary>
            Raises the configure cell event.
            </summary>
        </member>
        <member name="M:Eto.Forms.CustomCell.ICallback.OnCreateCell(Eto.Forms.CustomCell,Eto.Forms.CellEventArgs)">
            <summary>
            Raises the create cell event.
            </summary>
        </member>
        <member name="M:Eto.Forms.CustomCell.ICallback.OnPaint(Eto.Forms.CustomCell,Eto.Forms.CellPaintEventArgs)">
            <summary>
            Raises the paint event.
            </summary>
        </member>
        <member name="T:Eto.Forms.CustomCell.Callback">
            <summary>
            Callback implementation for the <see cref="T:Eto.Forms.CustomCell"/>
            </summary>
        </member>
        <member name="M:Eto.Forms.CustomCell.Callback.OnGetPreferredWidth(Eto.Forms.CustomCell,Eto.Forms.CellEventArgs)">
            <summary>
            Gets the preferred width of the cell based on its content.
            </summary>
        </member>
        <member name="M:Eto.Forms.CustomCell.Callback.OnGetIdentifier(Eto.Forms.CustomCell,Eto.Forms.CellEventArgs)">
            <summary>
            Raises the get identifier event.
            </summary>
        </member>
        <member name="M:Eto.Forms.CustomCell.Callback.OnConfigureCell(Eto.Forms.CustomCell,Eto.Forms.CellEventArgs,Eto.Forms.Control)">
            <summary>
            Raises the configure cell event.
            </summary>
        </member>
        <member name="M:Eto.Forms.CustomCell.Callback.OnCreateCell(Eto.Forms.CustomCell,Eto.Forms.CellEventArgs)">
            <summary>
            Raises the create cell event.
            </summary>
        </member>
        <member name="M:Eto.Forms.CustomCell.Callback.OnPaint(Eto.Forms.CustomCell,Eto.Forms.CellPaintEventArgs)">
            <summary>
            Raises the paint event.
            </summary>
        </member>
        <member name="M:Eto.Forms.CustomCell.GetCallback">
            <summary>
            Gets an instance of an object used to perform callbacks to the widget from handler implementations
            </summary>
            <returns>The callback.</returns>
        </member>
        <member name="T:Eto.Forms.CellPaintEventArgs">
            <summary>
            Event arguments for a <see cref="E:Eto.Forms.DrawableCell.Paint"/> or <see cref="E:Eto.Forms.CustomCell.Paint"/> event.
            </summary>
        </member>
        <member name="P:Eto.Forms.CellPaintEventArgs.CellState">
            <summary>
            The state of the cell to be painted.
            </summary>
        </member>
        <member name="P:Eto.Forms.CellPaintEventArgs.Item">
            <summary>
            The model data item for the row being painted.
            </summary>
        </member>
        <member name="M:Eto.Forms.CellPaintEventArgs.#ctor(Eto.Drawing.Graphics,Eto.Drawing.RectangleF,Eto.Forms.CellStates,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Eto.Forms.DrawableCellPaintEventArgs"/> class.
            </summary>
            <param name="graphics">Graphics context for drawing.</param>
            <param name="clipRectangle">Clip rectangle for the cell's region.</param>
            <param name="cellState">State of the cell.</param>
            <param name="item">Item from the data store for the row that is being painted.</param>
        </member>
        <member name="P:Eto.Forms.CellPaintEventArgs.IsEditing">
            <summary>
            Gets a value indicating whether the cell is in edit mode.
            </summary>
            <value><c>true</c> if this cell is in edit mode; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Eto.Forms.CellPaintEventArgs.IsSelected">
            <summary>
            Gets a value indicating whether the cell is currently selected.
            </summary>
            <value><c>true</c> if the cell is selected; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Eto.Forms.DrawableCellPaintEventArgs">
            <summary>
            Drawable cell paint event arguments.
            </summary>
        </member>
        <member name="M:Eto.Forms.DrawableCellPaintEventArgs.#ctor(Eto.Drawing.Graphics,Eto.Drawing.RectangleF,Eto.Forms.CellStates,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Eto.Forms.DrawableCellPaintEventArgs"/> class.
            </summary>
            <param name="graphics">Graphics.</param>
            <param name="clipRectangle">Clip rectangle.</param>
            <param name="cellState">Cell state.</param>
            <param name="item">Item.</param>
        </member>
        <member name="T:Eto.Forms.DrawableCell">
            <summary>
            A cell that is rendered by custom code.
            </summary>
        </member>
        <member name="E:Eto.Forms.DrawableCell.Paint">
            <summary>
            Occurs when the cell needs painting.
            </summary>
        </member>
        <member name="M:Eto.Forms.DrawableCell.OnPaint(Eto.Forms.DrawableCellPaintEventArgs)">
            <summary>
            Raises the <see cref="E:Eto.Forms.DrawableCell.Paint"/> event.
            </summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:Eto.Forms.DrawableCell.OnPaint(Eto.Forms.CellPaintEventArgs)">
            <summary>
            Raises the <see cref="E:Eto.Forms.DrawableCell.Paint"/> event.
            </summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:Eto.Forms.DrawableCell.GetCallback">
            <summary>
            Gets an instance of an object used to perform callbacks to the widget from handler implementations
            </summary>
            <returns>The callback.</returns>
        </member>
        <member name="T:Eto.Forms.DrawableCell.ICallback">
            <summary>
            Callback interface for handlers of the <see cref="T:Eto.Forms.DrawableCell"/> cell.
            </summary>
        </member>
        <member name="M:Eto.Forms.DrawableCell.ICallback.OnPaint(Eto.Forms.DrawableCell,Eto.Forms.DrawableCellPaintEventArgs)">
            <summary>
            Raises the paint event.
            </summary>
        </member>
        <member name="T:Eto.Forms.DrawableCell.Callback">
            <summary>
            Callback implementation for the <see cref="T:Eto.Forms.DrawableCell"/> cell.
            </summary>
        </member>
        <member name="M:Eto.Forms.DrawableCell.Callback.OnPaint(Eto.Forms.DrawableCell,Eto.Forms.DrawableCellPaintEventArgs)">
            <summary>
            Raises the paint event.
            </summary>
        </member>
        <member name="T:Eto.Forms.DrawableCell.IHandler">
            <summary>
            Handler interface for the <see cref="T:Eto.Forms.DrawableCell"/>.
            </summary>
        </member>
        <member name="T:Eto.Forms.DrawableCellStates">
            <summary>
            Orientation of a <see cref="T:Eto.Forms.Splitter"/> control.
            </summary>
        </member>
        <member name="P:Eto.Forms.DrawableCellStates.Selected">
            <summary>
            Row is selected
            </summary>
        </member>
        <member name="P:Eto.Forms.DrawableCellStates.None">
            <summary>
            Normal state
            </summary>
        </member>
        <member name="M:Eto.Forms.DrawableCellStates.op_Implicit(Eto.Forms.DrawableCellStates)~Eto.Forms.CellStates">
            <summary>Converts to an Orientation</summary>
        </member>
        <member name="M:Eto.Forms.DrawableCellStates.op_Implicit(Eto.Forms.CellStates)~Eto.Forms.DrawableCellStates">
            <summary>Converts an Orientation to a SplitterOrientation</summary>
        </member>
        <member name="M:Eto.Forms.DrawableCellStates.op_Equality(Eto.Forms.CellStates,Eto.Forms.DrawableCellStates)">
            <summary>Compares for equality</summary>
            <param name="value1">New enumeration.</param>
            <param name="value2">Old enumeration.</param>
        </member>
        <member name="M:Eto.Forms.DrawableCellStates.op_Inequality(Eto.Forms.CellStates,Eto.Forms.DrawableCellStates)">
            <summary>Compares for inequality</summary>
            <param name="value1">New enumeration.</param>
            <param name="value2">Old enumeration.</param>
        </member>
        <member name="M:Eto.Forms.DrawableCellStates.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:Eto.Forms.SplitterOrientation"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:Eto.Forms.SplitterOrientation"/>.</param>
            <returns><c>true</c> if the specified <see cref="T:System.Object"/> is equal to the current
            <see cref="T:Eto.Forms.SplitterOrientation"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Eto.Forms.DrawableCellStates.GetHashCode">
            <summary>
            Serves as a hash function for a <see cref="T:Eto.Forms.SplitterOrientation"/> object.
            </summary>
            <returns>A hash code for this instance that is suitable for use in hashing algorithms and data structures such as a hash table.</returns>
        </member>
        <member name="T:Eto.Forms.ImageTextCell">
            <summary>
            Cell for <see cref="T:Eto.Forms.Grid"/> controls to show image and text in one cell.
            </summary>
        </member>
        <member name="P:Eto.Forms.ImageTextCell.TextAlignment">
            <summary>
            Gets or sets the horizontal alignment of the text within the cell.
            </summary>
            <value>The text alignment.</value>
        </member>
        <member name="P:Eto.Forms.ImageTextCell.VerticalAlignment">
            <summary>
            Gets or sets the vertical alignment of the text within the cell.
            </summary>
            <value>The vertical text alignment.</value>
        </member>
        <member name="P:Eto.Forms.ImageTextCell.AutoSelectMode">
            <summary>
            Gets or sets the auto selection mode.
            </summary>
            <value>The auto selection mode.</value>
        </member>
        <member name="P:Eto.Forms.ImageTextCell.ImageBinding">
            <summary>
            Gets or sets the binding of the image to display for the cell.
            </summary>
            <value>The image binding.</value>
        </member>
        <member name="P:Eto.Forms.ImageTextCell.TextBinding">
            <summary>
            Gets or sets the binding of the text to display for the cell.
            </summary>
            <value>The text binding.</value>
        </member>
        <member name="M:Eto.Forms.ImageTextCell.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Eto.Forms.ImageTextCell"/> class when binding to an indexed-based data item.
            </summary>
            <param name="imageColumn">Index of the image column in the data item.</param>
            <param name="textColumn">Index of the text column in the data item.</param>
        </member>
        <member name="M:Eto.Forms.ImageTextCell.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Eto.Forms.ImageTextCell"/> class when binding to properties via reflection.
            </summary>
            <param name="imageProperty">Name of the image property in the data item.</param>
            <param name="textProperty">Name of the text property in the data item.</param>
        </member>
        <member name="M:Eto.Forms.ImageTextCell.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Eto.Forms.ImageTextCell"/> class.
            </summary>
        </member>
        <member name="P:Eto.Forms.ImageTextCell.ImageInterpolation">
            <summary>
            Gets or sets the interpolation mode when scaling images to fit into the cell.
            </summary>
            <value>The image interpolation.</value>
        </member>
        <member name="T:Eto.Forms.ImageTextCell.IHandler">
            <summary>
            Handler interface for the <see cref="T:Eto.Forms.ImageTextCell"/>.
            </summary>
        </member>
        <member name="P:Eto.Forms.ImageTextCell.IHandler.ImageInterpolation">
            <summary>
            Gets or sets the interpolation mode when scaling images to fit into the cell.
            </summary>
            <value>The image interpolation.</value>
        </member>
        <member name="P:Eto.Forms.ImageTextCell.IHandler.TextAlignment">
            <summary>
            Gets or sets the horizontal alignment of the text within the cell.
            </summary>
            <value>The text alignment.</value>
        </member>
        <member name="P:Eto.Forms.ImageTextCell.IHandler.VerticalAlignment">
            <summary>
            Gets or sets the vertical alignment of the text within the cell.
            </summary>
            <value>The vertical text alignment.</value>
        </member>
        <member name="P:Eto.Forms.ImageTextCell.IHandler.AutoSelectMode">
            <summary>
            Gets or sets the auto selection mode.
            </summary>
            <value>The auto selection mode.</value>
        </member>
        <member name="T:Eto.Forms.ImageViewCell">
            <summary>
            Cell for <see cref="T:Eto.Forms.Grid"/> controls to show a single <see cref="T:Eto.Drawing.Image"/>.
            </summary>
        </member>
        <member name="M:Eto.Forms.ImageViewCell.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Eto.Forms.ImageViewCell"/> class when binding to an indexed-based data item.
            </summary>
            <param name="column">Index of the column the image is in each data item.</param>
        </member>
        <member name="M:Eto.Forms.ImageViewCell.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Eto.Forms.ImageViewCell"/> class when binding to properties via reflection.
            </summary>
            <param name="property">Property to bind to in each data item.</param>
        </member>
        <member name="M:Eto.Forms.ImageViewCell.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Eto.Forms.ImageViewCell"/> class.
            </summary>
        </member>
        <member name="P:Eto.Forms.ImageViewCell.ImageInterpolation">
            <summary>
            Gets or sets the interpolation mode when scaling images to fit into the cell.
            </summary>
            <value>The image interpolation.</value>
        </member>
        <member name="T:Eto.Forms.ImageViewCell.IHandler">
            <summary>
            Handler interface for the <see cref="T:Eto.Forms.ImageViewCell"/>.
            </summary>
        </member>
        <member name="P:Eto.Forms.ImageViewCell.IHandler.ImageInterpolation">
            <summary>
            Gets or sets the interpolation mode when scaling images to fit into the cell.
            </summary>
            <value>The image interpolation.</value>
        </member>
        <member name="T:Eto.Forms.ProgressCell">
            <summary>
            Cell for <see cref="T:Eto.Forms.Grid"/> controls to show and bind a int value to a progress bar.
            </summary>
        </member>
        <member name="M:Eto.Forms.ProgressCell.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Eto.Forms.ProgressCell"/> class.
            </summary>
            <param name="column">Index of the column to bind to.</param>
        </member>
        <member name="M:Eto.Forms.ProgressCell.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Eto.Forms.ProgressCell"/> class with the specified property to bind to.
            </summary>
            <param name="property">Property to bind the value of the progress bar to.</param>
            <param name="ignoreCase">True to ignore case for the property, false to be case sensitive. Default is true.</param>
        </member>
        <member name="M:Eto.Forms.ProgressCell.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Eto.Forms.ProgressCell"/> class.
            </summary>
        </member>
        <member name="T:Eto.Forms.ProgressCell.IHandler">
            <summary>
            Handler interface for the <see cref="T:Eto.Forms.ProgressCell"/>.
            </summary>
        </member>
        <member name="T:Eto.Forms.PropertyCellType">
            <summary>
            Base type for a <see cref="T:Eto.Forms.PropertyCell"/> to display cell contents for a particular type.
            </summary>
        </member>
        <member name="P:Eto.Forms.PropertyCellType.Identifier">
            <summary>
            Gets the identifier of this type.
            </summary>
            <remarks>
            This is used to cache the cell content so it can be reused for performance reasons.
            You must ensure that all your cell types have unique identifiers, otherwise the incorrect content control
            will be used in the grid.
            </remarks>
            <value>The identifier for this type.</value>
        </member>
        <member name="M:Eto.Forms.PropertyCellType.CanDisplay(System.Object)">
            <summary>
            Determines whether this instance can be used to display the specified <paramref name="itemType"/>.
            </summary>
            <returns><c>true</c> if this instance can display the specified itemType; otherwise, <c>false</c>.</returns>
            <param name="itemType">Item type that is retrieved using <see cref="P:Eto.Forms.PropertyCell.TypeBinding"/>.</param>
        </member>
        <member name="M:Eto.Forms.PropertyCellType.OnCreate(Eto.Forms.CellEventArgs)">
            <summary>
            Creates the content control for the cell.
            </summary>
            <remarks>
            The control returned may be reused for other cells, so it is ideal to use MVVM data binding using BindDataContext() 
            methods of your controls.
            This should return the same control for each row, otherwise the incorrect control may be shown on certain cells.
            </remarks>
            <param name="args">Cell arguments.</param>
        </member>
        <member name="M:Eto.Forms.PropertyCellType.OnConfigure(Eto.Forms.CellEventArgs,Eto.Forms.Control)">
            <summary>
            Configures the content control for the given cell information.
            </summary>
            <remarks>
            When the DataContext changes on a cell, this will be called to configure the cell.
            
            You are only required to override this when you are not using MVVM data binding with your controls created by
            <see cref="M:Eto.Forms.PropertyCellType.OnCreate(Eto.Forms.CellEventArgs)"/>.
            </remarks>
            <param name="args">Cell arguments</param>
            <param name="control">Content control that was previously created with the OnCreate method.</param>
        </member>
        <member name="M:Eto.Forms.PropertyCellType.OnPaint(Eto.Forms.CellPaintEventArgs)">
            <summary>
            Paints the cell when <see cref="P:Eto.Forms.CustomCell.SupportsControlView"/> is false.
            </summary>
            <remarks>
            For platforms like GTK and WinForms which don't support using a custom control per cell, this will be called
            to paint the content of the cell when it is not in edit mode.
            </remarks>
            <param name="args">Cell paint arguments.</param>
        </member>
        <member name="T:Eto.Forms.PropertyCellType`1">
            <summary>
            Base property cell type for a given type
            </summary>
            <remarks>
            This is useful when displaying a cell with data of a particular type.  It will be used for any row that returns
            a type with <see cref="P:Eto.Forms.PropertyCell.TypeBinding"/> that is compatible with the specified <typeparamref name="T"/> type.
            </remarks>
            <typeparam name="T">Type of data that this cell type can show</typeparam>
        </member>
        <member name="P:Eto.Forms.PropertyCellType`1.Identifier">
            <summary>
            Gets the identifier of this type.
            </summary>
            <remarks>This is used to cache the cell content so it can be reused for performance reasons.
            You must ensure that all your cell types have unique identifiers, otherwise the incorrect content control
            will be used in the grid.</remarks>
            <value>The identifier for this type.</value>
        </member>
        <member name="P:Eto.Forms.PropertyCellType`1.ItemBinding">
            <summary>
            Gets or sets the item binding to get/set the value of the cell from the model.
            </summary>
            <value>The item binding.</value>
        </member>
        <member name="M:Eto.Forms.PropertyCellType`1.CanDisplay(System.Object)">
            <summary>
            Determines whether this instance can display the specified itemType.
            </summary>
            <returns><c>true</c> if this instance can display the specified itemType; otherwise, <c>false</c>.</returns>
            <param name="itemType">Item type.</param>
        </member>
        <member name="T:Eto.Forms.PropertyCellTypeBoolean">
            <summary>
            Property cell type to edit boolean values using a check box and a True/False label.
            </summary>
        </member>
        <member name="M:Eto.Forms.PropertyCellTypeBoolean.OnCreate(Eto.Forms.CellEventArgs)">
            <summary>
            Creates the content control for the cell.
            </summary>
            <remarks>
            The control returned may be reused for other cells, so it is ideal to use MVVM data binding using
            BindDataContext() 
            methods of your controls.
            This should return the same control for each row, otherwise the incorrect control may be shown on certain cells.
            </remarks>
            <param name="args">Cell arguments.</param>
        </member>
        <member name="M:Eto.Forms.PropertyCellTypeBoolean.OnPaint(Eto.Forms.CellPaintEventArgs)">
            <summary>
            Paints the cell when <see cref="P:Eto.Forms.CustomCell.SupportsControlView"/> is false.
            </summary>
            <remarks>
            For platforms like GTK and WinForms which don't support using a custom control per cell, this will be called
            to paint the content of the cell when it is not in edit mode.
            </remarks>
            <param name="args">Cell paint arguments.</param>
        </member>
        <member name="T:Eto.Forms.PropertyCellTypeString">
            <summary>
            Property cell type to edit string values.
            </summary>
        </member>
        <member name="M:Eto.Forms.PropertyCellTypeString.OnCreate(Eto.Forms.CellEventArgs)">
            <summary>
            Creates the content control for the cell.
            </summary>
            <remarks>The control returned may be reused for other cells, so it is ideal to use MVVM data binding using
            BindDataContext() 
            methods of your controls.
            This should return the same control for each row, otherwise the incorrect control may be shown on certain cells.</remarks>
            <param name="args">Cell arguments.</param>
        </member>
        <member name="M:Eto.Forms.PropertyCellTypeString.OnPaint(Eto.Forms.CellPaintEventArgs)">
            <summary>
            Paints the cell when <see cref="P:Eto.Forms.CustomCell.SupportsControlView"/> is false.
            </summary>
            <remarks>
            For platforms like GTK and WinForms which don't support using a custom control per cell, this will be called
            to paint the content of the cell when it is not in edit mode.
            </remarks>
            <param name="args">Cell paint arguments.</param>
        </member>
        <member name="T:Eto.Forms.PropertyCellTypeColor">
            <summary>
            Property cell type to edit a color value with a color picker and optional hex masked value.
            </summary>
        </member>
        <member name="P:Eto.Forms.PropertyCellTypeColor.ShowHex">
            <summary>
            Gets or sets a value indicating whether to show the hex value
            </summary>
            <value><c>true</c> if show hex; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Eto.Forms.PropertyCellTypeColor.ShowAlpha">
            <summary>
            Gets or sets a value indicating whether to show the alpha component of the color.
            </summary>
            <value><c>true</c> to show the alpha value; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Eto.Forms.PropertyCellTypeColor.HexEditable">
            <summary>
            Gets or sets a value indicating the hex value is editable by the user.
            </summary>
            <value><c>true</c> if the user can edit the hex value; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Eto.Forms.PropertyCellTypeColor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Eto.Forms.PropertyCellTypeColor"/> class.
            </summary>
        </member>
        <member name="M:Eto.Forms.PropertyCellTypeColor.OnCreate(Eto.Forms.CellEventArgs)">
            <summary>
            Creates the content control for the cell.
            </summary>
            <remarks>
            The control returned may be reused for other cells, so it is ideal to use MVVM data binding using
            BindDataContext() 
            methods of your controls.
            This should return the same control for each row, otherwise the incorrect control may be shown on certain cells.
            </remarks>
            <param name="args">Cell arguments.</param>
        </member>
        <member name="M:Eto.Forms.PropertyCellTypeColor.OnPaint(Eto.Forms.CellPaintEventArgs)">
            <summary>
            Paints the cell when <see cref="P:Eto.Forms.CustomCell.SupportsControlView"/> is false.
            </summary>
            <remarks>
            For platforms like GTK and WinForms which don't support using a custom control per cell, this will be called
            to paint the content of the cell when it is not in edit mode.
            </remarks>
            <param name="args">Cell paint arguments.</param>
        </member>
        <member name="T:Eto.Forms.PropertyCellTypeDateTime">
            <summary>
            Property cell type to edit a cell value using a date/time picker.
            </summary>
        </member>
        <member name="P:Eto.Forms.PropertyCellTypeDateTime.Mode">
            <summary>
            Gets or sets the mode to use for the picker.
            </summary>
            <value>The picker mode.</value>
        </member>
        <member name="M:Eto.Forms.PropertyCellTypeDateTime.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Eto.Forms.PropertyCellTypeDateTime"/> class.
            </summary>
        </member>
        <member name="M:Eto.Forms.PropertyCellTypeDateTime.OnCreate(Eto.Forms.CellEventArgs)">
            <summary>
            Creates the content control for the cell.
            </summary>
            <remarks>
            The control returned may be reused for other cells, so it is ideal to use MVVM data binding using
            BindDataContext() 
            methods of your controls.
            This should return the same control for each row, otherwise the incorrect control may be shown on certain cells.
            </remarks>
            <param name="args">Cell arguments.</param>
        </member>
        <member name="M:Eto.Forms.PropertyCellTypeDateTime.OnPaint(Eto.Forms.CellPaintEventArgs)">
            <summary>
            Paints the cell when <see cref="P:Eto.Forms.CustomCell.SupportsControlView"/> is false.
            </summary>
            <remarks>
            For platforms like GTK and WinForms which don't support using a custom control per cell, this will be called
            to paint the content of the cell when it is not in edit mode.
            </remarks>
            <param name="args">Cell paint arguments.</param>
        </member>
        <member name="T:Eto.Forms.PropertyCellTypeEnum`1">
            <summary>
            Property cell type to edit an enum value using an <see cref="T:Eto.Forms.EnumDropDown`1"/>.
            </summary>
        </member>
        <member name="M:Eto.Forms.PropertyCellTypeEnum`1.OnCreate(Eto.Forms.CellEventArgs)">
            <summary>
            Creates the content control for the cell.
            </summary>
            <remarks>
            The control returned may be reused for other cells, so it is ideal to use MVVM data binding using
            BindDataContext() 
            methods of your controls.
            This should return the same control for each row, otherwise the incorrect control may be shown on certain cells.
            </remarks>
            <param name="args">Cell arguments.</param>
        </member>
        <member name="M:Eto.Forms.PropertyCellTypeEnum`1.OnPaint(Eto.Forms.CellPaintEventArgs)">
            <summary>
            Paints the cell when <see cref="P:Eto.Forms.CustomCell.SupportsControlView"/> is false.
            </summary>
            <remarks>
            For platforms like GTK and WinForms which don't support using a custom control per cell, this will be called
            to paint the content of the cell when it is not in edit mode.
            </remarks>
            <param name="args">Cell paint arguments.</param>
        </member>
        <member name="T:Eto.Forms.PropertyCellTypeDropDown">
            <summary>
            Property cell type drop down.
            </summary>
        </member>
        <member name="P:Eto.Forms.PropertyCellTypeDropDown.ItemsBinding">
            <summary>
            Gets or sets the binding to get the items for the drop down.
            </summary>
            <remarks>
            If all rows have the same items, you can use a delegate binding to return a single instance of an items enumeration.
            </remarks>
            <value>The items binding.</value>
        </member>
        <member name="P:Eto.Forms.PropertyCellTypeDropDown.ItemTextBinding">
            <summary>
            Gets or sets the binding to get the text value for the drop down.
            </summary>
            <value>The binding to get the drop down item text.</value>
        </member>
        <member name="P:Eto.Forms.PropertyCellTypeDropDown.ItemKeyBinding">
            <summary>
            Gets or sets the binding to get the key value for the drop down.
            </summary>
            <value>The binding to get the drop down item key.</value>
        </member>
        <member name="M:Eto.Forms.PropertyCellTypeDropDown.OnCreate(Eto.Forms.CellEventArgs)">
            <summary>
            Creates the content control for the cell.
            </summary>
            <remarks>
            The control returned may be reused for other cells, so it is ideal to use MVVM data binding using
            BindDataContext() 
            methods of your controls.
            This should return the same control for each row, otherwise the incorrect control may be shown on certain cells.
            </remarks>
            <param name="args">Cell arguments.</param>
        </member>
        <member name="M:Eto.Forms.PropertyCellTypeDropDown.OnPaint(Eto.Forms.CellPaintEventArgs)">
            <summary>
            Paints the cell when <see cref="P:Eto.Forms.CustomCell.SupportsControlView"/> is false.
            </summary>
            <remarks>
            For platforms like GTK and WinForms which don't support using a custom control per cell, this will be called
            to paint the content of the cell when it is not in edit mode.
            </remarks>
            <param name="args">Cell paint arguments.</param>
        </member>
        <member name="T:Eto.Forms.PropertyCell">
            <summary>
            A custom cell implementation that implements a generic method of showing different types of controls on a per row basis.
            </summary>
            <remarks>
            This is ideal for things like showing a property grid to edit various properties of an object.
            
            The way this works is by using the <see cref="P:Eto.Forms.PropertyCell.TypeBinding"/> of each row to determine which <see cref="T:Eto.Forms.PropertyCellType"/>
            to use from the <see cref="P:Eto.Forms.PropertyCell.Types"/> collection.  It calls <see cref="M:Eto.Forms.PropertyCellType.CanDisplay(System.Object)"/> on each to find
            a type that can display based on the value returned.
            
            Each <see cref="T:Eto.Forms.PropertyCellType"/> added to the cell must have a unique value for <see cref="P:Eto.Forms.PropertyCellType.Identifier"/>
            to ensure the correct control is shown in the cell.  The identifier is used to cache the content controls generated by the
            PropertyCellType when displaying the same value for other rows while scrolling.
            
            Ideally, the content control generated from the <see cref="T:Eto.Forms.PropertyCellType"/> should use MVVM BindDataContext() methods
            for its children so that they are updated automatically when reused for different controls.  This is not a requirement, however
            you must then implement/override the <see cref="M:Eto.Forms.PropertyCellType.OnConfigure(Eto.Forms.CellEventArgs,Eto.Forms.Control)"/> to update your control when the item/row is changed.
            </remarks>
        </member>
        <member name="P:Eto.Forms.PropertyCell.TypeBinding">
            <summary>
            Gets or sets the binding to get the type for the 
            </summary>
            <value>The type binding.</value>
        </member>
        <member name="P:Eto.Forms.PropertyCell.Types">
            <summary>
            Gets the list of types to use for each cell, in order of preference.
            </summary>
            <remarks>
            When attempting to use a type for a cell, the types collection is scanned in order for the first PropertyCellType
            that returns true for <see cref="M:Eto.Forms.PropertyCellType.CanDisplay(System.Object)"/>.
            </remarks>
            <value>The list of types this property cell supports.</value>
        </member>
        <member name="M:Eto.Forms.PropertyCell.OnCreateCell(Eto.Forms.CellEventArgs)">
            <summary>
            Creates an instance of the control for a cell.
            </summary>
            <param name="args">Arguments when creating the cell to get the row, item and state.</param>
            <returns>The control to display in the cell.</returns>
        </member>
        <member name="M:Eto.Forms.PropertyCell.OnConfigureCell(Eto.Forms.CellEventArgs,Eto.Forms.Control)">
            <summary>
            Configures an existing cell when it is reused for a different row or the data changes.
            </summary>
            <remarks>This should set up your control your cell content to be reused. If null, the DataContext of your control will be
            set to the row model instance.
            
            Typically if you use MVVM data binding, you do not need to override the standard behaviour.</remarks>
            <param name="args">Arguments for the cell</param>
            <param name="control">Existing control to configure for the new cell and/or data</param>
        </member>
        <member name="M:Eto.Forms.PropertyCell.OnGetIdentifier(Eto.Forms.CellEventArgs)">
            <summary>
            Gets the identifier of the cell based on its content.
            </summary>
            <remarks>When you have different controls on a per-row level, each variation must have an identifier string
            to allow the framework to cache the different types of cells to provide good performance.
            
            This hooks into standard cell caching mechanisms in certain platforms, such as on the Mac.</remarks>
            <param name="args">Arguments for the cell</param>
            <value>The identifier for the cell.</value>
        </member>
        <member name="M:Eto.Forms.PropertyCell.OnPaint(Eto.Forms.CellPaintEventArgs)">
            <summary>
            Raises the <see cref="M:Eto.Forms.PropertyCellType.OnPaint(Eto.Forms.CellPaintEventArgs)"/> event.
            </summary>
            <param name="args">Cell paint arguments.</param>
        </member>
        <member name="T:Eto.Forms.SingleValueCell`1">
            <summary>
            Base class for cells that bind to a single value.
            </summary>
        </member>
        <member name="P:Eto.Forms.SingleValueCell`1.Binding">
            <summary>
            Gets or sets the binding to get/set the value of the cell.
            </summary>
            <value>The cell's binding.</value>
        </member>
        <member name="M:Eto.Forms.SingleValueCell`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Eto.Forms.SingleValueCell`1"/> class.
            </summary>
        </member>
        <member name="T:Eto.Forms.TextBoxCell">
            <summary>
            Cell for a text box in a <see cref="T:Eto.Forms.Grid"/>.
            </summary>
        </member>
        <member name="P:Eto.Forms.TextBoxCell.TextAlignment">
            <summary>
            Gets or sets the horizontal alignment of the text within the cell.
            </summary>
            <value>The text alignment.</value>
        </member>
        <member name="P:Eto.Forms.TextBoxCell.VerticalAlignment">
            <summary>
            Gets or sets the vertical alignment of the text within the cell.
            </summary>
            <value>The vertical text alignment.</value>
        </member>
        <member name="P:Eto.Forms.TextBoxCell.AutoSelectMode">
            <summary>
            Gets or sets the auto selection mode.
            </summary>
            <value>The auto selection mode.</value>
        </member>
        <member name="M:Eto.Forms.TextBoxCell.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Eto.Forms.TextBoxCell"/> class binding to the specified <paramref name="column"/>.
            </summary>
            <param name="column">Column in the data source to get/set the data.</param>
        </member>
        <member name="M:Eto.Forms.TextBoxCell.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Eto.Forms.TextBoxCell"/> class binding the text value to the specified <paramref name="property"/> of the data store.
            </summary>
            <param name="property">Name of the property to bind to in the data store.</param>
        </member>
        <member name="M:Eto.Forms.TextBoxCell.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Eto.Forms.TextBoxCell"/> class.
            </summary>
        </member>
        <member name="T:Eto.Forms.TextBoxCell.IHandler">
            <summary>
            Handler interface for the <see cref="T:Eto.Forms.TextBoxCell"/>.
            </summary>
        </member>
        <member name="P:Eto.Forms.TextBoxCell.IHandler.TextAlignment">
            <summary>
            Gets or sets the horizontal alignment of the text within the cell.
            </summary>
            <value>The text alignment.</value>
        </member>
        <member name="P:Eto.Forms.TextBoxCell.IHandler.VerticalAlignment">
            <summary>
            Gets or sets the vertical alignment of the text within the cell.
            </summary>
            <value>The vertical text alignment.</value>
        </member>
        <member name="P:Eto.Forms.TextBoxCell.IHandler.AutoSelectMode">
            <summary>
            Gets or sets the auto selection mode.
            </summary>
            <value>The auto selection mode.</value>
        </member>
        <member name="T:Eto.Forms.Clipboard">
            <summary>
            Object to handle the system clipboard. Use <see cref="P:Eto.Forms.Clipboard.Instance"/> to avoid creating multiple copies of this object.
            </summary>
            <copyright>(c) 2014 by Curtis Wensley</copyright>
            <license type="BSD-3">See LICENSE for full terms</license>
        </member>
        <member name="P:Eto.Forms.Clipboard.Instance">
            <summary>
            Gets the shared clipboard instance
            </summary>
            <value>The clipboard instance.</value>
        </member>
        <member name="P:Eto.Forms.Clipboard.Types">
            <summary>
            Gets the type id's for each type of data in the clipboard.
            </summary>
            <value>The content types in the clipboard.</value>
        </member>
        <member name="M:Eto.Forms.Clipboard.SetDataStream(System.IO.Stream,System.String)">
            <summary>
            Sets a data stream into the clipboard with the specified type identifier.
            </summary>
            <param name="stream">Stream to store in the clipboard.</param>
            <param name="type">Type identifier when retrieving the stream.</param>
        </member>
        <member name="M:Eto.Forms.Clipboard.SetData(System.Byte[],System.String)">
            <summary>
            sets a data array into the clipboard with the specified type identifier.
            </summary>
            <param name="value">Data to store in the clipboard.</param>
            <param name="type">Type identifier to store the data.</param>
        </member>
        <member name="M:Eto.Forms.Clipboard.GetData(System.String)">
            <summary>
            Gets a data array from the clipboard with the specified type identifier.
            </summary>
            <returns>The data array, or null if not found in the clipboard.</returns>
            <seealso cref="M:Eto.Forms.Clipboard.SetData(System.Byte[],System.String)"/>
            <param name="type">Type identifier that was used to store the data.</param>
        </member>
        <member name="M:Eto.Forms.Clipboard.GetDataStream(System.String)">
            <summary>
            Gets the data stream with the specified type identifier.
            </summary>
            <returns>The data stream if found, or null otherwise.</returns>
            <seealso cref="M:Eto.Forms.Clipboard.SetDataStream(System.IO.Stream,System.String)"/>
            <param name="type">Type identifier that was used to store the data.</param>
        </member>
        <member name="M:Eto.Forms.Clipboard.SetString(System.String,System.String)">
            <summary>
            Sets a string into the clipboard with the specified type identifier.
            </summary>
            <remarks>
            This is useful when setting alternate string values into the clipboard that are not plain text.
            If you are storing plain text, use the <see cref="P:Eto.Forms.Clipboard.Text"/> property instead.
            </remarks>
            <seealso cref="M:Eto.Forms.Clipboard.GetString(System.String)"/>
            <param name="value">Value to set in the clipboard.</param>
            <param name="type">Type identifier that was used to store the data.</param>
        </member>
        <member name="M:Eto.Forms.Clipboard.GetString(System.String)">
            <summary>
            Gets a string from the clipboard with the specified type identifier.
            </summary>
            <returns>The string.</returns>
            <seealso cref="M:Eto.Forms.Clipboard.SetString(System.String,System.String)"/>
            <param name="type">Type identifier that was used to store the data.</param>
        </member>
        <member name="P:Eto.Forms.Clipboard.Text">
            <summary>
            Gets or sets the plain text in the clipboard.
            </summary>
            <value>The plain text in the clipboard, or null if no plain text string in the clipboard.</value>
        </member>
        <member name="P:Eto.Forms.Clipboard.Html">
            <summary>
            Gets or sets html text in the clipboard.
            </summary>
            <value>The html value in the clipboard, or null if no html in the clipboard.</value>
        </member>
        <member name="P:Eto.Forms.Clipboard.Image">
            <summary>
            Gets or sets an image in the clipboard.
            </summary>
            <value>The image in the clipboard, or null if no image is in the clipboard.</value>
        </member>
        <member name="P:Eto.Forms.Clipboard.Uris">
            <summary>
            Gets or sets the Uri's of the files in the clipboard.
            </summary>
            <value>The uris of the files, or null if no files are in the clipboard.</value>
        </member>
        <member name="M:Eto.Forms.Clipboard.Clear">
            <summary>
            Clears the clipboard completely of all values
            </summary>
        </member>
        <member name="T:Eto.Forms.Clipboard.IHandler">
            <summary>
            Handler interface for the <see cref="T:Eto.Forms.Clipboard"/>.
            </summary>
        </member>
        <member name="T:Eto.Forms.ColorDialog">
            <summary>
            Dialog for choosing a color
            </summary>
            <remarks>
            The color dialog on some platforms may run asynchronously, and return immediately after
            the <see cref="M:Eto.Forms.CommonDialog.ShowDialog(Eto.Forms.Control)"/> call. For example, on OS X the color picker is a non-modal
            shared tool window that stays on the screen until the user dismisses it.
            
            You should always handle the <see cref="E:Eto.Forms.ColorDialog.ColorChanged"/> event to determine when the value has changed.
            </remarks>
        </member>
        <member name="E:Eto.Forms.ColorDialog.ColorChanged">
            <summary>
            Occurs when the <see cref="P:Eto.Forms.ColorDialog.Color"/> has changed.
            </summary>
        </member>
        <member name="M:Eto.Forms.ColorDialog.OnColorChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Eto.Forms.ColorDialog.ColorChanged"/> event.
            </summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="P:Eto.Forms.ColorDialog.Color">
            <summary>
            Gets or sets the selected color.
            </summary>
            <value>The selected color.</value>
        </member>
        <member name="P:Eto.Forms.ColorDialog.AllowAlpha">
            <summary>
            Gets or sets a value indicating whether the user can adjust the Alpha component of the Color.
            </summary>
            <remarks>
            This may or may not be supported in all platforms (e.g. WinForms).  
            Use <see cref="P:Eto.Forms.ColorDialog.SupportsAllowAlpha"/> to determine if the current platform supports this feature.
            </remarks>
            <value><c>true</c> to allow adjustment of alpha; otherwise, <c>false</c>.</value>
            <seealso cref="P:Eto.Forms.ColorDialog.SupportsAllowAlpha"/>
        </member>
        <member name="P:Eto.Forms.ColorDialog.SupportsAllowAlpha">
            <summary>
            Gets a value indicating that the current platform supports the <see cref="P:Eto.Forms.ColorDialog.AllowAlpha"/> property.
            </summary>
            <remarks>
            If not supported, the setting will be ignored.
            </remarks>
            <value><c>true</c> AllowAlpha is supported; otherwise, <c>false</c>.</value>
            <seealso cref="P:Eto.Forms.ColorDialog.AllowAlpha"/>
        </member>
        <member name="M:Eto.Forms.ColorDialog.GetCallback">
            <summary>
            Gets an instance of an object used to perform callbacks to the widget from handler implementations
            </summary>
            <returns>The callback instance to use for this widget</returns>
        </member>
        <member name="T:Eto.Forms.ColorDialog.ICallback">
            <summary>
            Callback interface for the <see cref="T:Eto.Forms.ColorDialog"/>
            </summary>
        </member>
        <member name="M:Eto.Forms.ColorDialog.ICallback.OnColorChanged(Eto.Forms.ColorDialog,System.EventArgs)">
            <summary>
            Raises the color changed event.
            </summary>
        </member>
        <member name="T:Eto.Forms.ColorDialog.Callback">
            <summary>
            Callback implementation for handlers of the <see cref="T:Eto.Forms.ColorDialog"/>
            </summary>
        </member>
        <member name="M:Eto.Forms.ColorDialog.Callback.OnColorChanged(Eto.Forms.ColorDialog,System.EventArgs)">
            <summary>
            Raises the color changed event.
            </summary>
        </member>
        <member name="T:Eto.Forms.ColorDialog.IHandler">
            <summary>
            Handler interface for the <see cref="T:Eto.Forms.ColorDialog"/>
            </summary>
        </member>
        <member name="P:Eto.Forms.ColorDialog.IHandler.Color">
            <summary>
            Gets or sets the selected color.
            </summary>
            <value>The selected color.</value>
        </member>
        <member name="P:Eto.Forms.ColorDialog.IHandler.AllowAlpha">
            <summary>
            Gets or sets a value indicating whether the user can adjust the Alpha component of the Color.
            </summary>
            <remarks>
            This may or may not be supported in all platforms (e.g. WinForms).  
            Use <see cref="P:Eto.Forms.ColorDialog.IHandler.SupportsAllowAlpha"/> to determine if the current platform supports this feature.
            </remarks>
            <value><c>true</c> to allow adjustment of alpha; otherwise, <c>false</c>.</value>
            <seealso cref="P:Eto.Forms.ColorDialog.IHandler.SupportsAllowAlpha"/>
        </member>
        <member name="P:Eto.Forms.ColorDialog.IHandler.SupportsAllowAlpha">
            <summary>
            Gets a value indicating that the current platform supports the <see cref="P:Eto.Forms.ColorDialog.IHandler.AllowAlpha"/> property.
            </summary>
            <remarks>
            If not supported, the setting will be ignored.
            </remarks>
            <value><c>true</c> AllowAlpha is supported; otherwise, <c>false</c>.</value>
            <seealso cref="P:Eto.Forms.ColorDialog.IHandler.AllowAlpha"/>
        </member>
        <member name="T:Eto.Forms.CheckCommand">
            <summary>
            Command for a menu/tool item that can be checked on or off.
            </summary>
        </member>
        <member name="E:Eto.Forms.CheckCommand.CheckedChanged">
            <summary>
            Occurs when the <see cref="P:Eto.Forms.CheckCommand.Checked"/> value has changed.
            </summary>
        </member>
        <member name="M:Eto.Forms.CheckCommand.OnCheckedChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Eto.Forms.CheckCommand.CheckedChanged"/> event.
            </summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="P:Eto.Forms.CheckCommand.Checked">
            <summary>
            Gets or sets a value indicating whether this command is checked.
            </summary>
            <value><c>true</c> if checked; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Eto.Forms.CheckCommand.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Eto.Forms.CheckCommand"/> class.
            </summary>
        </member>
        <member name="M:Eto.Forms.CheckCommand.#ctor(System.EventHandler{System.EventArgs})">
            <summary>
            Initializes a new instance of the <see cref="T:Eto.Forms.CheckCommand"/> class with the specified <paramref name="execute"/> handler.
            </summary>
            <param name="execute">Execute delegate.</param>
        </member>
        <member name="M:Eto.Forms.CheckCommand.CreateMenuItem">
            <summary>
            Creates a new menu item attached to this command.
            </summary>
            <returns>The menu item for the command.</returns>
        </member>
        <member name="M:Eto.Forms.CheckCommand.CreateToolItem">
            <summary>
            Creates a new tool item attached to this command.
            </summary>
            <returns>The tool item for the command.</returns>
        </member>
        <member name="T:Eto.Forms.RadioCommand">
            <summary>
            Command for a radio button for a tool or menu item.
            </summary>
            <remarks>
            A radio command works by using a <see cref="P:Eto.Forms.RadioCommand.Controller"/> which allows you to group the radio buttons
            together.
            </remarks>
        </member>
        <member name="P:Eto.Forms.RadioCommand.Controller">
            <summary>
            Gets or sets the controller of the radio button group.
            </summary>
            <value>The radio button controller.</value>
        </member>
        <member name="M:Eto.Forms.RadioCommand.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Eto.Forms.RadioCommand"/> class.
            </summary>
        </member>
        <member name="M:Eto.Forms.RadioCommand.#ctor(System.EventHandler{System.EventArgs})">
            <summary>
            Initializes a new instance of the <see cref="T:Eto.Forms.RadioCommand"/> class with the specified <paramref name="execute"/> handler.
            </summary>
            <param name="execute">Delegate to execute when the command triggers.</param>
        </member>
        <member name="M:Eto.Forms.RadioCommand.CreateMenuItem">
            <summary>
            Creates a new menu item attached to this command.
            </summary>
            <returns>The menu item for the command.</returns>
        </member>
        <member name="M:Eto.Forms.RadioCommand.CreateToolItem">
            <summary>
            Creates a new tool item attached to this command.
            </summary>
            <returns>The tool item for the command.</returns>
        </member>
        <member name="T:Eto.Forms.Command">
            <summary>
            Base command for use on either <see cref="T:Eto.Forms.ToolBar"/> or <see cref="T:Eto.Forms.MenuBar"/>
            </summary>
            <remarks>
            Commands allow you to create a single class that can be used for both menu and tool items.
            </remarks>
        </member>
        <member name="E:Eto.Forms.Command.EnabledChanged">
            <summary>
            Occurs when the <see cref="P:Eto.Forms.Command.Enabled"/> property is changed.
            </summary>
        </member>
        <member name="M:Eto.Forms.Command.OnEnabledChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Eto.Forms.Command.EnabledChanged"/> event.
            </summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="E:Eto.Forms.Command.Executed">
            <summary>
            Occurs when the command is executed from either the menu or toolbar.
            </summary>
        </member>
        <member name="M:Eto.Forms.Command.OnExecuted(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Eto.Forms.Command.Executed"/> event.
            </summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="P:Eto.Forms.Command.ID">
            <summary>
            Gets or sets the ID of the command
            </summary>
            <remarks>
            This can be used to identify a command.
            </remarks>
            <value>The command ID.</value>
        </member>
        <member name="P:Eto.Forms.Command.Enabled">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Eto.Forms.Command"/> is enabled.
            </summary>
            <value><c>true</c> if enabled; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Eto.Forms.Command.Tag">
            <summary>
            Gets or sets a user-defined tag value for this instance.
            </summary>
            <value>The tag.</value>
        </member>
        <member name="P:Eto.Forms.Command.MenuText">
            <summary>
            Gets or sets the text when shown on the menu.
            </summary>
            <value>The menu text.</value>
        </member>
        <member name="P:Eto.Forms.Command.ToolBarText">
            <summary>
            Gets or sets the tool bar text.
            </summary>
            <value>The tool bar text.</value>
        </member>
        <member name="P:Eto.Forms.Command.ToolTip">
            <summary>
            Gets or sets the tool tip on both the menu and toolbar.
            </summary>
            <value>The tool tip.</value>
        </member>
        <member name="P:Eto.Forms.Command.Image">
            <summary>
            Gets or sets the image for the menu or tool item.
            </summary>
            <remarks>
            On some platforms, the menu bar does not show the image by default (e.g. OS X). You can override this behaviour
            using a style on the handler.
            </remarks>
            <value>The image for menu or tool items.</value>
        </member>
        <member name="P:Eto.Forms.Command.Shortcut">
            <summary>
            Gets or sets the shortcut to trigger this command.
            </summary>
            <value>The command shortcut.</value>
        </member>
        <member name="M:Eto.Forms.Command.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Eto.Forms.Command"/> class.
            </summary>
        </member>
        <member name="M:Eto.Forms.Command.#ctor(System.EventHandler{System.EventArgs})">
            <summary>
            Initializes a new instance of the <see cref="T:Eto.Forms.Command"/> class with the specified <paramref name="execute"/> handler.
            </summary>
            <param name="execute">Delegate to execute when the command is triggered.</param>
        </member>
        <member name="M:Eto.Forms.Command.Execute">
            <summary>
            Execute the command programatically.
            </summary>
        </member>
        <member name="M:Eto.Forms.Command.CreateToolItem">
            <summary>
            Creates a new tool item attached to this command.
            </summary>
            <returns>The tool item for the command.</returns>
        </member>
        <member name="M:Eto.Forms.Command.CreateMenuItem">
            <summary>
            Creates a new menu item attached to this command.
            </summary>
            <returns>The menu item for the command.</returns>
        </member>
        <member name="M:Eto.Forms.Command.op_Implicit(Eto.Forms.Command)~Eto.Forms.MenuItem">
            <summary>
            Implicitly converts the command to a menu item
            </summary>
            <param name="command">Command to convert.</param>
        </member>
        <member name="M:Eto.Forms.Command.op_Implicit(Eto.Forms.Command)~Eto.Forms.ToolItem">
            <summary>
            Implicitly converts the command to a tool item
            </summary>
            <param name="command">Command to convert.</param>
        </member>
        <member name="P:Eto.Forms.Command.Properties">
            <summary>
            Gets the dictionary of properties for this widget
            </summary>
        </member>
        <member name="P:Eto.Forms.Command.DelegatedCommand">
            <summary>
            Gets or sets a command to delegate to when the command is invoked.
            </summary>
            <remarks>
            This allows you to use a command to define menu/toolbar items or other functionality, and use
            a delegated command to chain to when invoked.
            This is especially useful when binding to a view model, you can do something like the following:
            <code>
            var myCommand = new Command { MenuText = "My Command", Parent = myForm };
            myCommand.BindDataContext(c => c.DelegatedCommand, (MyModel m) => m.MyModelCommand);
            
            //...
            
            myForm.DataContext = new MyModel { MyModelCommand = ... };
            </code>
            The <see cref="M:System.Windows.Input.ICommand.CanExecute(System.Object)"/> will also used to set the enabled/disabled state of the current command.
            </remarks>
            <value>The command to invoke.</value>
        </member>
        <member name="P:Eto.Forms.Command.CommandParameter">
            <summary>
            Gets or sets the parameter to pass to the <see cref="T:Eto.Forms.Command"/> when executing or determining its CanExecute state.
            </summary>
            <value>The command parameter.</value>
        </member>
        <member name="E:Eto.Forms.Command.DataContextChanged">
            <summary>
            Event to handle when the <see cref="P:Eto.Forms.Command.DataContext"/> has changed
            </summary>
            <remarks>
            This may be fired in the event of a parent in the hierarchy setting the data context.
            For example, the <see cref="T:Eto.Forms.Container"/> widget fires this event when it's event is fired.
            </remarks>
        </member>
        <member name="M:Eto.Forms.Command.OnDataContextChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Eto.Forms.Command.DataContextChanged"/> event
            </summary>
            <remarks>
            Implementors may override this to fire this event on child widgets in a heirarchy. 
            This allows a control to be bound to its own <see cref="P:Eto.Forms.Command.DataContext"/>, which would be set
            on one of the parent control(s).
            </remarks>
            <param name="e">Event arguments</param>
        </member>
        <member name="P:Eto.Forms.Command.Parent">
            <summary>
            Gets the parent widget which this widget has been added to, if any
            </summary>
            <value>The parent widget, or null if there is no parent</value>
        </member>
        <member name="P:Eto.Forms.Command.DataContext">
            <summary>
            Gets or sets the data context for this widget for binding
            </summary>
            <remarks>
            Subclasses may override the standard behaviour so that hierarchy of widgets can be taken into account.
            
            For example, a Control may return the data context of a parent, if it is not set explicitly.
            </remarks>
        </member>
        <member name="P:Eto.Forms.Command.Bindings">
            <summary>
            Gets the collection of bindings that are attached to this widget
            </summary>
        </member>
        <member name="T:Eto.Forms.DialogResult">
            <summary>
            Result codes for <see cref="T:Eto.Forms.CommonDialog"/> or <see cref="T:Eto.Forms.MessageBox"/> dialogs
            </summary>
            <copyright>(c) 2014 by Curtis Wensley</copyright>
            <license type="BSD-3">See LICENSE for full terms</license>
        </member>
        <member name="F:Eto.Forms.DialogResult.None">
            <summary>
            No specific result
            </summary>
        </member>
        <member name="F:Eto.Forms.DialogResult.Ok">
            <summary>
            User clicked 'OK'
            </summary>
        </member>
        <member name="F:Eto.Forms.DialogResult.Cancel">
            <summary>
            User clicked 'Cancel' or pressed escape to cancel
            </summary>
        </member>
        <member name="F:Eto.Forms.DialogResult.Yes">
            <summary>
            User clicked 'Yes'
            </summary>
        </member>
        <member name="F:Eto.Forms.DialogResult.No">
            <summary>
            User clicked 'No'
            </summary>
        </member>
        <member name="F:Eto.Forms.DialogResult.Abort">
            <summary>
            User clicked 'Abort'
            </summary>
        </member>
        <member name="F:Eto.Forms.DialogResult.Ignore">
            <summary>
            User clicked 'Ignore'
            </summary>
        </member>
        <member name="F:Eto.Forms.DialogResult.Retry">
            <summary>
            User clicked 'Retry'
            </summary>
        </member>
        <member name="T:Eto.Forms.CommonDialog">
            <summary>
            Base class for common dialogs
            </summary>
        </member>
        <member name="M:Eto.Forms.CommonDialog.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Eto.Forms.CommonDialog"/> class.
            </summary>
        </member>
        <member name="M:Eto.Forms.CommonDialog.ShowDialog(Eto.Forms.Control)">
            <summary>
            Shows the dialog with the specified parent, blocking until a result is returned.
            </summary>
            <returns>The dialog result.</returns>
            <param name="parent">Parent control</param>
        </member>
        <member name="M:Eto.Forms.CommonDialog.ShowDialog(Eto.Forms.Window)">
            <summary>
            Shows the dialog with the specified parent window, blocking until a result is returned.
            </summary>
            <returns>The dialog result.</returns>
            <param name="parent">Parent window.</param>
        </member>
        <member name="T:Eto.Forms.CommonDialog.IHandler">
            <summary>
            Handler interface for the <see cref="T:Eto.Forms.CommonDialog"/>
            </summary>
        </member>
        <member name="M:Eto.Forms.CommonDialog.IHandler.ShowDialog(Eto.Forms.Window)">
            <summary>
            Shows the dialog with the specified parent window, blocking until a result is returned.
            </summary>
            <returns>The dialog result.</returns>
            <param name="parent">Parent window.</param>
        </member>
        <member name="T:Eto.Forms.Container">
            <summary>
            Base class for controls that contain children controls
            </summary>
        </member>
        <member name="P:Eto.Forms.Container.ClientSize">
            <summary>
            Gets or sets the size for the client area of the control
            </summary>
            <remarks>
            The client size differs from the <see cref="P:Eto.Forms.Control.Size"/> in that it excludes the decorations of
            the container, such as the title bar and border around a <see cref="T:Eto.Forms.Window"/>, or the title and line 
            around a <see cref="T:Eto.Forms.GroupBox"/>.
            </remarks>
            <value>The size of the client area</value>
        </member>
        <member name="P:Eto.Forms.Container.Controls">
            <summary>
            Gets an enumeration of logical controls that are directly contained by this container
            </summary>
            <remarks>
            These controls are directly contained by the container, but do not include controls that are used to form
            the visual appearance, if any.  Controls like the <see cref="T:Eto.Forms.StackLayout"/>, <see cref="T:Eto.Forms.DynamicLayout"/> or a 
            customized container using the <see cref="T:Eto.Forms.ThemedContainerHandler`3"/> should not 
            include any intermediate controls.
            </remarks>
            <value>The contained controls.</value>
        </member>
        <member name="P:Eto.Forms.Container.LogicalControls">
            <summary>
            Gets the logical controls, so we don't chain binding events from the visual tree to the logical tree
            </summary>
            <value>The logical controls.</value>
        </member>
        <member name="P:Eto.Forms.Container.Children">
            <summary>
            Gets an enumeration of all contained child controls, including controls within child containers
            </summary>
            <value>The children.</value>
        </member>
        <member name="P:Eto.Forms.Container.VisualChildren">
            <summary>
            Gets an enumeration of all contained child controls in the visual tree, including controls within child containers.
            </summary>
            <value>The visual children.</value>
        </member>
        <member name="M:Eto.Forms.Container.OnDataContextChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Eto.Forms.BindableWidget.DataContextChanged"/> event
            </summary>
            <remarks>
            Implementors may override this to fire this event on child widgets in a heirarchy. 
            This allows a control to be bound to its own <see cref="P:Eto.Forms.BindableWidget.DataContext"/>, which would be set
            on one of the parent control(s).
            </remarks>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:Eto.Forms.Container.OnPreLoad(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Eto.Forms.Control.PreLoad"/> event, and recurses to this container's children
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:Eto.Forms.Container.OnLoad(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Eto.Forms.Control.Load"/> event, and recurses to this container's children
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:Eto.Forms.Container.OnLoadComplete(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Eto.Forms.Control.LoadComplete"/> event, and recurses to this container's children
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:Eto.Forms.Container.OnUnLoad(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Eto.Forms.Control.UnLoad"/> event, and recurses to this container's children
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:Eto.Forms.Container.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Eto.Forms.Container"/> class.
            </summary>
        </member>
        <member name="M:Eto.Forms.Container.#ctor(Eto.Forms.Container.IHandler)">
            <summary>
            Initializes a new instance of the Container with the specified handler
            </summary>
            <param name="handler">Pre-created handler to attach to this instance</param>
        </member>
        <member name="M:Eto.Forms.Container.Unbind">
            <summary>
            Unbinds any bindings in the <see cref="P:Eto.Forms.BindableWidget.Bindings"/> collection and removes the bindings, and recurses to this container's children
            </summary>
        </member>
        <member name="M:Eto.Forms.Container.UpdateBindings(Eto.Forms.BindingUpdateMode)">
            <summary>
            Updates all bindings in this widget, and recurses to this container's children
            </summary>
        </member>
        <member name="M:Eto.Forms.Container.Remove(System.Collections.Generic.IEnumerable{Eto.Forms.Control})">
            <summary>
            Remove the specified <paramref name="controls"/> from this container
            </summary>
            <param name="controls">Controls to remove</param>
        </member>
        <member name="M:Eto.Forms.Container.RemoveAll">
            <summary>
            Removes all controls from this container
            </summary>
        </member>
        <member name="M:Eto.Forms.Container.Remove(Eto.Forms.Control)">
            <summary>
            Removes the specified <paramref name="child"/> control
            </summary>
            <param name="child">Child to remove</param>
        </member>
        <member name="M:Eto.Forms.Container.RemoveParent(Eto.Forms.Control)">
            <summary>
            Removes the specified control from the container.
            </summary>
            <remarks>
            This should only be called on controls that the container owns. Otherwise, call <see cref="M:Eto.Forms.Control.Detach"/>
            </remarks>
            <param name="child">Child to remove from this container</param>
        </member>
        <member name="M:Eto.Forms.Container.SetLogicalParent(Eto.Forms.Control)">
            <summary>
            Sets the logical (non-visual) parent of the specified child control.
            </summary>
            <remarks>
            This is used by layout containers that may use other Eto controls to layout its children that shouldn't be 
            necessary for users to be concerned about.
            
            For example, the <see cref="T:Eto.Forms.StackLayout"/> uses a TableLayout internally (for now), but the TableLayout
            should not be part of the logical tree of controls.
            
            If this is not set, then the logical parent of a child is the same as the visual parent.
            </remarks>
            <param name="child">Child to set the logical parent to this container.</param>
        </member>
        <member name="M:Eto.Forms.Container.RemoveLogicalParent(Eto.Forms.Control)">
            <summary>
            Removes the child control from the logical parent of this container.
            </summary>
            <remarks>
            This should be used from containers that use other Eto controls to layout its children but should not be part
            of the logical heirarchy.
            </remarks>
            <seealso cref="M:Eto.Forms.Container.SetLogicalParent(Eto.Forms.Control)"/>
            <param name="child">Child to remove from this container as the logical parent.</param>
        </member>
        <member name="M:Eto.Forms.Container.SetParent(Eto.Forms.Control,System.Action,Eto.Forms.Control)">
            <summary>
            Sets the parent of the specified <paramref name="child"/> to this container
            </summary>
            <remarks>
            This is used by container authors to set the parent of a child before it is added to the underlying platform control.
            
            The <paramref name="assign"/> parameter should call the handler method to add the child to the parent.
            </remarks>
            <returns><c>true</c>, if parent was set, <c>false</c> otherwise.</returns>
            <param name="child">Child to set the parent</param>
            <param name="assign">Method to assign the child to the handler</param>
            <param name="previousChild">Previous child that the new child is replacing.</param>
        </member>
        <member name="M:Eto.Forms.Container.FindChild``1(System.String)">
            <summary>
            Finds a child control in this container or any of its child containers with the specified <paramref name="id"/>
            </summary>
            <returns>The child control if found, or null if not.</returns>
            <param name="id">Optional identifier of the control to find that matches the <see cref="P:Eto.Widget.ID"/>.</param>
            <typeparam name="T">The type of control to find.</typeparam>
        </member>
        <member name="M:Eto.Forms.Container.FindChild(System.Type,System.String)">
            <summary>
            Finds a child control in this container or any of its child containers with the specified <paramref name="type"/>
            </summary>
            <returns>The child control if found, or null if not.</returns>
            <param name="type">The type of control to find.</param>
            <param name="id">Optional identifier of the control to find that matches the <see cref="P:Eto.Widget.ID"/>.</param>
        </member>
        <member name="M:Eto.Forms.Container.FindChild(System.String)">
            <summary>
            Finds a child control in this container or any of its child containers with the specified <paramref name="id"/>.
            </summary>
            <returns>The child control if found, or null if not.</returns>
            <param name="id">Identifier of the control to find that matches the <see cref="P:Eto.Widget.ID"/>.</param>
        </member>
        <member name="T:Eto.Forms.Container.IHandler">
            <summary>
            Handler interface for the <see cref="T:Eto.Forms.Container"/> control
            </summary>
        </member>
        <member name="P:Eto.Forms.Container.IHandler.ClientSize">
            <summary>
            Gets or sets the size for the client area of the control
            </summary>
            <remarks>
            The client size differs from the <see cref="P:Eto.Forms.Control.IHandler.Size"/> in that it excludes the decorations of
            the container, such as the title bar and border around a <see cref="T:Eto.Forms.Window"/>, or the title and line 
            around a <see cref="T:Eto.Forms.GroupBox"/>.
            </remarks>
            <value>The size of the client area</value>
        </member>
        <member name="P:Eto.Forms.Container.IHandler.RecurseToChildren">
            <summary>
            Gets a value indicating whether PreLoad/Load/LoadComplete/Unload events are propegated to the children controls
            </summary>
            <remarks>
            This is mainly used when you want to use Eto controls in your handler, such as with the <see cref="T:Eto.Forms.ThemedContainerHandler`3"/>
            </remarks>
            <value><c>true</c> to recurse events to children; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Eto.Forms.ControlBinding`2">
            <summary>
            Binding object to easily bind a property of a <see cref="T:Eto.Forms.Control"/>.
            </summary>
            <remarks>
            This provides control-specific binding, such as binding to a <see cref="P:Eto.Forms.BindableWidget.DataContext"/>.
            Any bindings created using this will also add to the <see cref="P:Eto.Forms.BindableWidget.Bindings"/> collection to keep its
            reference.
            </remarks>
        </member>
        <member name="M:Eto.Forms.ControlBinding`2.#ctor(`0,System.Func{`0,`1},System.Action{`0,`1},System.Action{`0,System.EventHandler{System.EventArgs}},System.Action{`0,System.EventHandler{System.EventArgs}})">
            <summary>
            Initializes a new instance of the <see cref="T:Eto.Forms.ControlBinding`2"/> class.
            </summary>
            <param name="dataItem">Data item to get/set the values from/to.</param>
            <param name="getValue">Delegate to get the value from the object.</param>
            <param name="setValue">Delegate to set the value to the object.</param>
            <param name="addChangeEvent">Delegate to add the change event.</param>
            <param name="removeChangeEvent">Delegate to remove the chang event.</param>
        </member>
        <member name="M:Eto.Forms.ControlBinding`2.#ctor(`0,Eto.Forms.IndirectBinding{`1})">
            <summary>
            Initializes a new instance of the <see cref="T:Eto.Forms.ControlBinding`2"/> class.
            </summary>
            <param name="dataItem">Control the binding is attached to.</param>
            <param name="innerBinding">Inner binding.</param>
        </member>
        <member name="T:Eto.Forms.ButtonImagePosition">
            <summary>
            Button image position
            </summary>
            <copyright>(c) 2012-2014 by Curtis Wensley</copyright>
            <license type="BSD-3">See LICENSE for full terms</license>
        </member>
        <member name="F:Eto.Forms.ButtonImagePosition.Left">
            <summary>
            Positions the image to the left of the text
            </summary>
        </member>
        <member name="F:Eto.Forms.ButtonImagePosition.Right">
            <summary>
            Positions the image to the right of the text
            </summary>
        </member>
        <member name="F:Eto.Forms.ButtonImagePosition.Above">
            <summary>
            Positions the image on top of the text
            </summary>
        </member>
        <member name="F:Eto.Forms.ButtonImagePosition.Below">
            <summary>
            Positions the image below the text
            </summary>
        </member>
        <member name="F:Eto.Forms.ButtonImagePosition.Overlay">
            <summary>
            Positions the image behind the text
            </summary>
        </member>
        <member name="T:Eto.Forms.Button">
            <summary>
            Button control
            </summary>
            <copyright>(c) 2012-2014 by Curtis Wensley</copyright>
            <license type="BSD-3">See LICENSE for full terms</license>
        </member>
        <member name="E:Eto.Forms.Button.Click">
            <summary>
            Event to handle when the user clicks the button
            </summary>
        </member>
        <member name="M:Eto.Forms.Button.OnClick(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Eto.Forms.Button.Click"/> event
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="P:Eto.Forms.Button.Command">
            <summary>
            Gets or sets the command to invoke when the button is pressed.
            </summary>
            <remarks>
            This will invoke the specified command when the button is pressed.
            The <see cref="M:System.Windows.Input.ICommand.CanExecute(System.Object)"/> will also used to set the enabled/disabled state of the button.
            </remarks>
            <value>The command to invoke.</value>
        </member>
        <member name="P:Eto.Forms.Button.CommandParameter">
            <summary>
            Gets or sets the parameter to pass to the <see cref="P:Eto.Forms.Button.Command"/> when executing or determining its CanExecute state.
            </summary>
            <value>The command parameter.</value>
        </member>
        <member name="P:Eto.Forms.Button.Image">
            <summary>
            Gets or sets the image to display on the button
            </summary>
            <value>The image to display</value>
        </member>
        <member name="P:Eto.Forms.Button.ImagePosition">
            <summary>
            Gets or sets the position of the image relative to the text
            </summary>
            <value>The image position</value>
        </member>
        <member name="P:Eto.Forms.Button.MinimumSize">
            <summary>
            Gets or sets the minimum size for the button.
            </summary>
            <remarks>
            Each platform may have a different initial minimum size set for buttons to match their standard sizes.
            
            Setting this to <see cref="F:Eto.Drawing.Size.Empty"/> is useful when you want the button to shrink to fit the size
            of the specified <see cref="P:Eto.Forms.Button.Image"/> and/or <see cref="P:Eto.Forms.TextControl.Text"/>.
            </remarks>
        </member>
        <member name="P:Eto.Forms.Button.Size">
            <summary>
            Gets or sets the size of the control. Use -1 to specify auto sizing for either the width and/or height.
            </summary>
            <value>The size of the control.</value>
        </member>
        <member name="M:Eto.Forms.Button.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Eto.Forms.Button"/> class.
            </summary>
        </member>
        <member name="M:Eto.Forms.Button.#ctor(System.EventHandler{System.EventArgs})">
            <summary>
            Initializes a new instance of the <see cref="T:Eto.Forms.Button"/> class with the specified <paramref name="click"/> handler.
            </summary>
            <remarks>
            This is a convenience constructor to set up the click event.
            </remarks>
            <param name="click">Delegate to handle when the button is clicked.</param>
        </member>
        <member name="M:Eto.Forms.Button.PerformClick">
            <summary>
            Triggers the <see cref="E:Eto.Forms.Button.Click"/> event for the button, if the button is visable and enabled.
            </summary>
        </member>
        <member name="M:Eto.Forms.Button.GetCallback">
            <summary>
            Gets an instance of an object used to perform callbacks to the widget from handler implementations
            </summary>
            <returns>The callback instance to use for this widget</returns>
        </member>
        <member name="T:Eto.Forms.Button.ICallback">
            <summary>
            Callback interface for <see cref="T:Eto.Forms.Button"/>
            </summary>
        </member>
        <member name="M:Eto.Forms.Button.ICallback.OnClick(Eto.Forms.Button,System.EventArgs)">
            <summary>
            Raises the click event.
            </summary>
        </member>
        <member name="T:Eto.Forms.Button.Callback">
            <summary>
            Callback implementation for handlers of <see cref="T:Eto.Forms.Button"/>
            </summary>
        </member>
        <member name="M:Eto.Forms.Button.Callback.OnClick(Eto.Forms.Button,System.EventArgs)">
            <summary>
            Raises the click event.
            </summary>
        </member>
        <member name="T:Eto.Forms.Button.IHandler">
            <summary>
            Handler interface for the <see cref="T:Eto.Forms.Button"/> control
            </summary>
            <copyright>(c) 2012-2014 by Curtis Wensley</copyright>
            <license type="BSD-3">See LICENSE for full terms</license>
        </member>
        <member name="P:Eto.Forms.Button.IHandler.Image">
            <summary>
            Gets or sets the image to display on the button
            </summary>
            <value>The image to display</value>
        </member>
        <member name="P:Eto.Forms.Button.IHandler.ImagePosition">
            <summary>
            Gets or sets the image position
            </summary>
            <value>The image position</value>
        </member>
        <member name="P:Eto.Forms.Button.IHandler.MinimumSize">
            <summary>
            Gets or sets the minimum size for the button.
            </summary>
            <remarks>
            Each platform may have a different initial minimum size set for buttons to match their standard sizes.
            
            Setting this to <see cref="F:Eto.Drawing.Size.Empty"/> is useful when you want the button to shrink to fit the size
            of the specified <see cref="P:Eto.Forms.Button.IHandler.Image"/> and/or <see cref="P:Eto.Forms.TextControl.Text"/>.
            </remarks>
        </member>
        <member name="T:Eto.Forms.CalendarMode">
            <summary>
            Mode for the <see cref="T:Eto.Forms.Calendar"/> control
            </summary>
        </member>
        <member name="F:Eto.Forms.CalendarMode.Single">
            <summary>
            Calendar allows only a single date to be selected
            </summary>
        </member>
        <member name="F:Eto.Forms.CalendarMode.Range">
            <summary>
            Can select a range of dates. In some cases two calendars will be shown to select the start and end dates of the range.
            </summary>
        </member>
        <member name="T:Eto.Forms.Calendar">
            <summary>
            Control to show a calendar that the user can select either a single date or range of dates.
            </summary>
        </member>
        <member name="F:Eto.Forms.Calendar.SelectedDateChangedEvent">
            <summary>
            Event identifier for handlers when attaching the <see cref="E:Eto.Forms.Calendar.SelectedDateChanged"/> event.
            </summary>
        </member>
        <member name="E:Eto.Forms.Calendar.SelectedDateChanged">
            <summary>
            Occurs when the <see cref="P:Eto.Forms.Calendar.SelectedDate"/> is changed.
            </summary>
        </member>
        <member name="M:Eto.Forms.Calendar.OnSelectedDateChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Eto.Forms.Calendar.SelectedDateChanged"/> event.
            </summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="F:Eto.Forms.Calendar.SelectedRangeChangedEvent">
            <summary>
            Event identifier for handlers when attaching the <see cref="E:Eto.Forms.Calendar.SelectedRangeChanged"/> event.
            </summary>
        </member>
        <member name="E:Eto.Forms.Calendar.SelectedRangeChanged">
            <summary>
            Occurs when the <see cref="P:Eto.Forms.Calendar.SelectedRange"/> is changed.
            </summary>
        </member>
        <member name="M:Eto.Forms.Calendar.OnSelectedRangeChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Eto.Forms.Calendar.SelectedRangeChanged"/> event.
            </summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="P:Eto.Forms.Calendar.MinDate">
            <summary>
            Gets or sets the minimum date entered
            </summary>
            <value>The minimum date.</value>
        </member>
        <member name="P:Eto.Forms.Calendar.MaxDate">
            <summary>
            Gets or sets the maximum date entered
            </summary>
            <value>The maximum date.</value>
        </member>
        <member name="P:Eto.Forms.Calendar.SelectedDate">
            <summary>
            Gets or sets the selected date.
            </summary>
            <value>The selected date.</value>
        </member>
        <member name="P:Eto.Forms.Calendar.SelectedRange">
            <summary>
            Gets or sets the selected range.
            </summary>
            <remarks>
            The SelectedRange will have the same start/end dates when <see cref="P:Eto.Forms.Calendar.Mode"/> is <see cref="F:Eto.Forms.CalendarMode.Single"/>.
            </remarks>
            <value>The selected range.</value>
        </member>
        <member name="P:Eto.Forms.Calendar.Mode">
            <summary>
            Gets or sets the mode of the calendar.
            </summary>
            <value>The calendar mode.</value>
        </member>
        <member name="M:Eto.Forms.Calendar.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Eto.Forms.Calendar"/> class.
            </summary>
        </member>
        <member name="M:Eto.Forms.Calendar.#ctor(Eto.Forms.Calendar.IHandler)">
            <summary>
            Initializes a new instance of the <see cref="T:Eto.Forms.Calendar"/> class.
            </summary>
            <param name="handler">Handler implementation to wrap.</param>
        </member>
        <member name="M:Eto.Forms.Calendar.GetCallback">
            <summary>
            Gets an instance of an object used to perform callbacks to the widget from handler implementations
            </summary>
            <returns>The callback.</returns>
        </member>
        <member name="T:Eto.Forms.Calendar.ICallback">
            <summary>
            Callback interface for handlers of the <see cref="T:Eto.Forms.Calendar"/>.
            </summary>
        </member>
        <member name="M:Eto.Forms.Calendar.ICallback.OnSelectedDateChanged(Eto.Forms.Calendar,System.EventArgs)">
            <summary>
            Raises the selected date changed event.
            </summary>
        </member>
        <member name="M:Eto.Forms.Calendar.ICallback.OnSelectedRangeChanged(Eto.Forms.Calendar,System.EventArgs)">
            <summary>
            Raises the selected range changed event.
            </summary>
        </member>
        <member name="T:Eto.Forms.Calendar.Callback">
            <summary>
            Callback implementation for handlers of the <see cref="T:Eto.Forms.Calendar"/>.
            </summary>
        </member>
        <member name="M:Eto.Forms.Calendar.Callback.OnSelectedDateChanged(Eto.Forms.Calendar,System.EventArgs)">
            <summary>
            Raises the selected date changed event.
            </summary>
        </member>
        <member name="M:Eto.Forms.Calendar.Callback.OnSelectedRangeChanged(Eto.Forms.Calendar,System.EventArgs)">
            <summary>
            Raises the selected range changed event.
            </summary>
        </member>
        <member name="T:Eto.Forms.Calendar.IHandler">
            <summary>
            Handler interface for the <see cref="T:Eto.Forms.Calendar"/>.
            </summary>
        </member>
        <member name="P:Eto.Forms.Calendar.IHandler.MinDate">
            <summary>
            Gets or sets the minimum date entered
            </summary>
            <value>The minimum date.</value>
        </member>
        <member name="P:Eto.Forms.Calendar.IHandler.MaxDate">
            <summary>
            Gets or sets the maximum date entered
            </summary>
            <value>The maximum date.</value>
        </member>
        <member name="P:Eto.Forms.Calendar.IHandler.SelectedRange">
            <summary>
            Gets or sets the selected range.
            </summary>
            <remarks>
            The SelectedRange will have the same start/end dates when <see cref="P:Eto.Forms.Calendar.IHandler.Mode"/> is <see cref="F:Eto.Forms.CalendarMode.Single"/>.
            </remarks>
            <value>The selected range.</value>
        </member>
        <member name="P:Eto.Forms.Calendar.IHandler.SelectedDate">
            <summary>
            Gets or sets the selected date.
            </summary>
            <value>The selected date.</value>
        </member>
        <member name="P:Eto.Forms.Calendar.IHandler.Mode">
            <summary>
            Gets or sets the mode of the calendar.
            </summary>
            <value>The calendar mode.</value>
        </member>
        <member name="T:Eto.Forms.CheckBox">
            <summary>
            Control to show a two or three state check box
            </summary>
            <remarks>
            Two state is either checked (true) or unchecked (false).
            
            Three state check box can also have a null value.
            </remarks>
        </member>
        <member name="E:Eto.Forms.CheckBox.CheckedChanged">
            <summary>
            Occurs when <see cref="P:Eto.Forms.CheckBox.Checked"/> property is changed by the user
            </summary>
        </member>
        <member name="M:Eto.Forms.CheckBox.OnCheckedChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Eto.Forms.CheckBox.CheckedChanged"/> event.
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="P:Eto.Forms.CheckBox.Checked">
            <summary>
            Gets or sets the checked state
            </summary>
            <remarks>
            When <see cref="P:Eto.Forms.CheckBox.ThreeState"/> is true, null signifies an indeterminate value.
            </remarks>
            <value>The checked value</value>
        </member>
        <member name="P:Eto.Forms.CheckBox.ThreeState">
            <summary>
            Gets or sets a value indicating whether this CheckBox allows three states: true, false, or null
            </summary>
            <value><c>true</c> if three state; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Eto.Forms.CheckBox.CheckedBinding">
            <summary>
            Gets a binding for the <see cref="P:Eto.Forms.CheckBox.Checked"/> property
            </summary>
            <value>The binding for the checked property.</value>
        </member>
        <member name="M:Eto.Forms.CheckBox.GetCallback">
            <summary>
            Gets an instance of an object used to perform callbacks to the widget from handler implementations
            </summary>
            <returns>The callback instance to use for this widget</returns>
        </member>
        <member name="T:Eto.Forms.CheckBox.ICallback">
            <summary>
            Callback interface for the <see cref="T:Eto.Forms.CheckBox"/>
            </summary>
        </member>
        <member name="M:Eto.Forms.CheckBox.ICallback.OnCheckedChanged(Eto.Forms.CheckBox,System.EventArgs)">
            <summary>
            Raises the checked changed event.
            </summary>
        </member>
        <member name="T:Eto.Forms.CheckBox.Callback">
            <summary>
            Callback implementation for handlers of <see cref="T:Eto.Forms.CheckBox"/>
            </summary>
        </member>
        <member name="M:Eto.Forms.CheckBox.Callback.OnCheckedChanged(Eto.Forms.CheckBox,System.EventArgs)">
            <summary>
            Raises the checked changed event.
            </summary>
        </member>
        <member name="T:Eto.Forms.CheckBox.IHandler">
            <summary>
            Handler interface for the <see cref="T:Eto.Forms.CheckBox"/> control
            </summary>
        </member>
        <member name="P:Eto.Forms.CheckBox.IHandler.Checked">
            <summary>
            Gets or sets the checked state
            </summary>
            <remarks>
            When <see cref="P:Eto.Forms.CheckBox.IHandler.ThreeState"/> is true, null signifies an indeterminate value.
            </remarks>
            <value>The checked value</value>
        </member>
        <member name="P:Eto.Forms.CheckBox.IHandler.ThreeState">
            <summary>
            Gets or sets a value indicating whether this CheckBox allows three states: true, false, or null
            </summary>
            <value><c>true</c> if three state; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Eto.Forms.ColorPicker">
            <summary>
            Control to show and pick a color.
            </summary>
        </member>
        <member name="F:Eto.Forms.ColorPicker.ColorChangedEvent">
            <summary>
            Identifier for handlers when attaching the <see cref="E:Eto.Forms.ColorPicker.ValueChanged"/> event.
            </summary>
        </member>
        <member name="E:Eto.Forms.ColorPicker.ValueChanged">
            <summary>
            Occurs when the <see cref="P:Eto.Forms.ColorPicker.Value"/> is changed.
            </summary>
        </member>
        <member name="M:Eto.Forms.ColorPicker.OnColorChanged(System.EventArgs)">
            <summary>
            Raises the <see name="ValueChanged"/> event.
            </summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="P:Eto.Forms.ColorPicker.Value">
            <summary>
            Gets or sets the selected color value.
            </summary>
            <value>The currently selected color value.</value>
        </member>
        <member name="P:Eto.Forms.ColorPicker.AllowAlpha">
            <summary>
            Gets or sets a value indicating whether the user can adjust the Alpha component of the Color.
            </summary>
            <remarks>
            This may or may not be supported in all platforms (e.g. WinForms).  
            Use <see cref="P:Eto.Forms.ColorPicker.SupportsAllowAlpha"/> to determine if the current platform supports this feature.
            </remarks>
            <value><c>true</c> to allow adjustment of alpha; otherwise, <c>false</c>.</value>
            <seealso cref="P:Eto.Forms.ColorPicker.SupportsAllowAlpha"/>
        </member>
        <member name="P:Eto.Forms.ColorPicker.SupportsAllowAlpha">
            <summary>
            Gets a value indicating that the current platform supports the <see cref="P:Eto.Forms.ColorPicker.AllowAlpha"/> property.
            </summary>
            <remarks>
            If not supported, the setting will be ignored.
            </remarks>
            <value><c>true</c> AllowAlpha is supported; otherwise, <c>false</c>.</value>
            <seealso cref="P:Eto.Forms.ColorPicker.AllowAlpha"/>
        </member>
        <member name="P:Eto.Forms.ColorPicker.ValueBinding">
            <summary>
            Gets a binding to the <see cref="P:Eto.Forms.ColorPicker.Value"/> property.
            </summary>
            <value>The value binding.</value>
        </member>
        <member name="M:Eto.Forms.ColorPicker.GetCallback">
            <summary>
            Gets an instance of an object used to perform callbacks to the widget from handler implementations
            </summary>
            <returns>The callback instance to use for this widget</returns>
        </member>
        <member name="T:Eto.Forms.ColorPicker.ICallback">
            <summary>
            Callback interface for <see cref="T:Eto.Forms.ColorPicker"/>
            </summary>
        </member>
        <member name="M:Eto.Forms.ColorPicker.ICallback.OnColorChanged(Eto.Forms.ColorPicker,System.EventArgs)">
            <summary>
            Raises the color changed event.
            </summary>
        </member>
        <member name="T:Eto.Forms.ColorPicker.Callback">
            <summary>
            Callback implementation for handlers of <see cref="T:Eto.Forms.ColorPicker"/>
            </summary>
        </member>
        <member name="M:Eto.Forms.ColorPicker.Callback.OnColorChanged(Eto.Forms.ColorPicker,System.EventArgs)">
            <summary>
            Raises the color changed event.
            </summary>
        </member>
        <member name="T:Eto.Forms.ColorPicker.IHandler">
            <summary>
            Handler interface for the <see cref="T:Eto.Forms.ColorPicker"/> control
            </summary>
            <copyright>(c) 2012-2014 by Curtis Wensley</copyright>
            <license type="BSD-3">See LICENSE for full terms</license>
        </member>
        <member name="P:Eto.Forms.ColorPicker.IHandler.Color">
            <summary>
            Gets or sets the selected color.
            </summary>
            <value>The selected color.</value>
        </member>
        <member name="P:Eto.Forms.ColorPicker.IHandler.AllowAlpha">
            <summary>
            Gets or sets a value indicating whether the user can adjust the Alpha component of the Color.
            </summary>
            <remarks>
            This may or may not be supported in all platforms (e.g. WinForms).  
            Use <see cref="P:Eto.Forms.ColorPicker.IHandler.SupportsAllowAlpha"/> to determine if the current platform supports this feature.
            </remarks>
            <value><c>true</c> to allow adjustment of alpha; otherwise, <c>false</c>.</value>
            <seealso cref="P:Eto.Forms.ColorPicker.IHandler.SupportsAllowAlpha"/>
        </member>
        <member name="P:Eto.Forms.ColorPicker.IHandler.SupportsAllowAlpha">
            <summary>
            Gets a value indicating that the current platform supports the <see cref="P:Eto.Forms.ColorPicker.IHandler.AllowAlpha"/> property.
            </summary>
            <remarks>
            If not supported, the setting will be ignored.
            </remarks>
            <value><c>true</c> AllowAlpha is supported; otherwise, <c>false</c>.</value>
            <seealso cref="P:Eto.Forms.ColorPicker.IHandler.AllowAlpha"/>
        </member>
        <member name="T:Eto.Forms.ComboBox">
            <summary>
            Presents a combination of an editable text box and drop down to select from a list of items and enter text.
            </summary>
        </member>
        <member name="F:Eto.Forms.ComboBox.TextChangedEvent">
            <summary>
            Event identifier for handlers when attaching the <see cref="E:Eto.Forms.ComboBox.TextChanged"/> event.
            </summary>
        </member>
        <member name="E:Eto.Forms.ComboBox.TextChanged">
            <summary>
            Occurs when the Text property is changed either by the user or programatically.
            </summary>
        </member>
        <member name="M:Eto.Forms.ComboBox.OnTextChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Eto.Forms.ComboBox.TextChanged"/> event.
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:Eto.Forms.ComboBox.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Eto.Forms.ComboBox"/> class.
            </summary>
        </member>
        <member name="P:Eto.Forms.ComboBox.Text">
            <summary>
            Gets or sets the text of the ComboBox.
            </summary>
            <value>The text content.</value>
        </member>
        <member name="P:Eto.Forms.ComboBox.ReadOnly">
            <summary>
            Gets or sets whether the user can change the text in the combo box.
            </summary>
            <remarks>
            When <c>true</c>, the user will still be able to select/copy the text, select items from the drop down, etc.
            To disable the control, use the <see cref="P:Eto.Forms.Control.Enabled"/> property.
            </remarks>
        </member>
        <member name="P:Eto.Forms.ComboBox.AutoComplete">
            <summary>
            Gets or sets a value indicating that the text should autocomplete when the user types in a value.
            </summary>
            <remarks>
            The autocomplete will be based off of the items in the combo box.
            </remarks>
            <value><c>true</c> to auto complete the text; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Eto.Forms.ComboBox.GetCallback">
            <summary>
            Gets an instance of an object used to perform callbacks to the widget from handler implementations
            </summary>
            <returns>The callback instance to use for this widget</returns>
        </member>
        <member name="T:Eto.Forms.ComboBox.ICallback">
            <summary>
            Callback interface for the <see cref="T:Eto.Forms.ComboBox"/>
            </summary>
        </member>
        <member name="M:Eto.Forms.ComboBox.ICallback.OnTextChanged(Eto.Forms.ComboBox,System.EventArgs)">
            <summary>
            Raises the text changed event.
            </summary>
        </member>
        <member name="T:Eto.Forms.ComboBox.Callback">
            <summary>
            Callback implementation for handlers of <see cref="T:Eto.Forms.ListControl"/>
            </summary>
        </member>
        <member name="M:Eto.Forms.ComboBox.Callback.OnTextChanged(Eto.Forms.ComboBox,System.EventArgs)">
            <summary>
            Raises the text changed event.
            </summary>
        </member>
        <member name="T:Eto.Forms.ComboBox.IHandler">
            <summary>
            Handler interface for the <see cref="T:Eto.Forms.ComboBox"/>
            </summary>
        </member>
        <member name="P:Eto.Forms.ComboBox.IHandler.Text">
            <summary>
            Gets or sets the text of the ComboBox.
            </summary>
            <value>The text content.</value>
        </member>
        <member name="P:Eto.Forms.ComboBox.IHandler.ReadOnly">
            <summary>
            Gets or sets the editable of ComboBox.
            </summary>
        </member>
        <member name="P:Eto.Forms.ComboBox.IHandler.AutoComplete">
            <summary>
            Gets or sets a value indicating that the text should autocomplete when the user types in a value.
            </summary>
            <remarks>
            The autocomplete will be based off of the items in the combo box.
            </remarks>
            <value><c>true</c> to auto complete the text; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Eto.Forms.CommonControl">
            <summary>
            Base class for controls with common functionality
            </summary>
            <remarks>
            Currently provides a way to change the font for controls.
            
            Any control with textual input or display should derive from this class.
            Any container or specialized control where there are multiple fonts, etc should define their own properties.
            </remarks>
        </member>
        <member name="M:Eto.Forms.CommonControl.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Eto.Forms.CommonControl"/> class.
            </summary>
        </member>
        <member name="P:Eto.Forms.CommonControl.Font">
            <summary>
            Gets or sets the font for the text of the control
            </summary>
            <value>The text font.</value>
        </member>
        <member name="T:Eto.Forms.CommonControl.IHandler">
            <summary>
            Handler interface for the <see cref="T:Eto.Forms.CommonControl"/>.
            </summary>
        </member>
        <member name="P:Eto.Forms.CommonControl.IHandler.Font">
            <summary>
            Gets or sets the font for the text of the control
            </summary>
            <value>The text font.</value>
        </member>
        <member name="T:Eto.Forms.Control">
            <summary>
            Base for all visual UI elements
            </summary>
            <remarks>
            All visual user interface elements should inherit from this class to provide common functionality like binding,
            load/unload, and common events.
            </remarks>
        </member>
        <member name="P:Eto.Forms.Control.Loaded">
            <summary>
            Gets a value indicating that the control is loaded onto a form, that is it has been created, added to a parent, and shown
            </summary>
            <remarks>
            The <see cref="M:Eto.Forms.Control.OnLoad(System.EventArgs)"/> method sets this value to <c>true</c> after cascading to all children (for a <see cref="T:Eto.Forms.Container"/>)
            and calling the platform handler's implementation.  It is called after adding to a loaded form, or when showing a new form.
            
            The <see cref="M:Eto.Forms.Control.OnUnLoad(System.EventArgs)"/> method will set this value to <c>false</c> when the control is removed from its parent
            </remarks>
        </member>
        <member name="P:Eto.Forms.Control.VisualControls">
            <summary>
            Gets an enumeration of controls that are in the visual tree.
            </summary>
            <remarks>
            This is used to specify which controls are contained by this instance that are part of the visual tree.
            This should include all controls including non-logical Eto controls used for layout. 
            </remarks>
            <value>The visual controls.</value>
        </member>
        <member name="P:Eto.Forms.Control.Tag">
            <summary>
            Gets or sets a user-defined object that contains data about the control
            </summary>
            <remarks>
            A common use of the tag property is to store data that is associated with the control that you can later
            retrieve.
            </remarks>
        </member>
        <member name="P:Eto.Forms.Control.LogicalParent">
            <summary>
            Gets the logical parent control.
            </summary>
            <remarks>
            When the control is part of the visual tree (<see cref="P:Eto.Forms.Control.IsVisualControl"/> is true), this returns the logical parent that contains this control.
            Otherwise this is the same as <see cref="P:Eto.Forms.Control.Parent"/>.
            </remarks>
            <value>The logical parent.</value>
        </member>
        <member name="P:Eto.Forms.Control.IsVisualControl">
            <summary>
            Gets a value indicating this <see cref="T:Eto.Forms.Control"/> is part of the visual tree.
            </summary>
            <value><c>true</c> if is visual control; otherwise, <c>false</c>.</value>
        </member>
        <member name="F:Eto.Forms.Control.SizeChangedEvent">
            <summary>
            Event identifier for handlers when attaching the <see cref="E:Eto.Forms.Control.SizeChanged"/> event
            </summary>
        </member>
        <member name="E:Eto.Forms.Control.SizeChanged">
            <summary>
            Occurs when the size of the control is changed.
            </summary>
        </member>
        <member name="M:Eto.Forms.Control.OnSizeChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Eto.Forms.Control.SizeChanged"/> event.
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="F:Eto.Forms.Control.KeyDownEvent">
            <summary>
            Event identifier for handlers when attaching the <see cref="E:Eto.Forms.Control.KeyDown"/> event.
            </summary>
        </member>
        <member name="E:Eto.Forms.Control.KeyDown">
            <summary>
            Occurs when a key has been pressed and is down
            </summary>
            <seealso cref="E:Eto.Forms.Control.KeyUp"/>
        </member>
        <member name="M:Eto.Forms.Control.OnKeyDown(Eto.Forms.KeyEventArgs)">
            <summary>
            Raises the <see cref="E:Eto.Forms.Control.KeyDown"/> event.
            </summary>
            <param name="e">Key event arguments</param>
        </member>
        <member name="F:Eto.Forms.Control.KeyUpEvent">
            <summary>
            Event identifier for handlers when attaching the <see cref="E:Eto.Forms.Control.KeyUp"/> event
            </summary>
        </member>
        <member name="E:Eto.Forms.Control.KeyUp">
            <summary>
            Occurs when a key was released
            </summary>
            <seealso cref="E:Eto.Forms.Control.KeyDown"/>
        </member>
        <member name="M:Eto.Forms.Control.OnKeyUp(Eto.Forms.KeyEventArgs)">
            <summary>
            Raises the <see cref="E:Eto.Forms.Control.KeyUp"/> event.
            </summary>
            <param name="e">Key event arguments</param>
        </member>
        <member name="F:Eto.Forms.Control.TextInputEvent">
            <summary>
            Event identifier for handlers when attaching the <see cref="E:Eto.Forms.Control.TextInput"/> event
            </summary>
        </member>
        <member name="E:Eto.Forms.Control.TextInput">
            <summary>
            Occurs when text is input for the control. Currently only partially supported on iOS.
            </summary>
        </member>
        <member name="M:Eto.Forms.Control.OnTextInput(Eto.Forms.TextInputEventArgs)">
            <summary>
            Raises the <see cref="E:Eto.Forms.Control.TextInput"/> event.
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="F:Eto.Forms.Control.MouseDownEvent">
            <summary>
            Event identifier for handlers when attaching the <see cref="E:Eto.Forms.Control.MouseDown"/> event
            </summary>
        </member>
        <member name="E:Eto.Forms.Control.MouseDown">
            <summary>
            Occurs when a mouse button has been pressed
            </summary>
            <remarks>
            Controls will typically capture the mouse after a mouse button is pressed and will be released
            only after the <see cref="E:Eto.Forms.Control.MouseUp"/> event.
            </remarks>
            <seealso cref="E:Eto.Forms.Control.MouseUp"/>
        </member>
        <member name="M:Eto.Forms.Control.OnMouseDown(Eto.Forms.MouseEventArgs)">
            <summary>
            Raises the <see cref="E:Eto.Forms.Control.MouseDown"/> event.
            </summary>
            <remarks>
            To override default behaviour of the control, set <see cref="P:Eto.Forms.MouseEventArgs.Handled"/> property to <c>true</c>.
            </remarks>
            <param name="e">Event arguments</param>
        </member>
        <member name="F:Eto.Forms.Control.MouseUpEvent">
            <summary>
            Event identifier for handlers when attaching the <see cref="E:Eto.Forms.Control.MouseUp"/> event
            </summary>
        </member>
        <member name="E:Eto.Forms.Control.MouseUp">
            <summary>
            Occurs when a mouse button is released
            </summary>
            <seealso cref="E:Eto.Forms.Control.MouseDown"/>
        </member>
        <member name="M:Eto.Forms.Control.OnMouseUp(Eto.Forms.MouseEventArgs)">
            <summary>
            Raises the <see cref="E:Eto.Forms.Control.MouseUp"/> event.
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="F:Eto.Forms.Control.MouseMoveEvent">
            <summary>
            Event identifier for handlers when attaching the <see cref="E:Eto.Forms.Control.MouseMove"/> event
            </summary>
        </member>
        <member name="E:Eto.Forms.Control.MouseMove">
            <summary>
            Occurs when mouse moves within the bounds of the control, or when the mouse is captured
            </summary>
            <remarks>
            The mouse is captured after a <see cref="E:Eto.Forms.Control.MouseDown"/> event within the control, 
            and is released when the mouse button is released
            </remarks>
            <seealso cref="E:Eto.Forms.Control.MouseDown"/>
            <seealso cref="E:Eto.Forms.Control.MouseUp"/>
        </member>
        <member name="M:Eto.Forms.Control.OnMouseMove(Eto.Forms.MouseEventArgs)">
            <summary>
            Raises the <see cref="E:Eto.Forms.Control.MouseMove"/> event.
            </summary>
            <param name="e">Mouse event args</param>
        </member>
        <member name="F:Eto.Forms.Control.MouseLeaveEvent">
            <summary>
            Event identifier for handlers when attaching the <see cref="E:Eto.Forms.Control.MouseLeave"/> event
            </summary>
        </member>
        <member name="E:Eto.Forms.Control.MouseLeave">
            <summary>
            Occurs when mouse leaves the bounds of the control
            </summary>
        </member>
        <member name="M:Eto.Forms.Control.OnMouseLeave(Eto.Forms.MouseEventArgs)">
            <summary>
            Raises the <see cref="E:Eto.Forms.Control.MouseLeave"/> event.
            </summary>
            <param name="e">Mouse event arguments</param>
            <seealso cref="E:Eto.Forms.Control.MouseEnter"/>
        </member>
        <member name="F:Eto.Forms.Control.MouseEnterEvent">
            <summary>
            Event identifier for handlers when attaching the <see cref="E:Eto.Forms.Control.MouseEnter"/> event
            </summary>
        </member>
        <member name="E:Eto.Forms.Control.MouseEnter">
            <summary>
            Occurs when the mouse enters the bounds of the control
            </summary>
            <seealso cref="E:Eto.Forms.Control.MouseLeave"/>
        </member>
        <member name="M:Eto.Forms.Control.OnMouseEnter(Eto.Forms.MouseEventArgs)">
            <summary>
            Raises the <see cref="E:Eto.Forms.Control.MouseEnter"/> event.
            </summary>
            <param name="e">Mouse event arguments</param>
        </member>
        <member name="F:Eto.Forms.Control.MouseDoubleClickEvent">
            <summary>
            Event identifier for handlers when attaching the <see cref="E:Eto.Forms.Control.MouseDoubleClick"/> event
            </summary>
        </member>
        <member name="E:Eto.Forms.Control.MouseDoubleClick">
            <summary>
            Occurs when a mouse button is double clicked within the bounds of the control
            </summary>
            <remarks>
            If you do not set the <see cref="P:Eto.Forms.MouseEventArgs.Handled"/> property to true, and the default behaviour of
            the control does not accept double clicks, the <see cref="E:Eto.Forms.Control.MouseDown"/> event will be called for each click of
            the mouse button. 
            
            For example, if the user clicks twice in succession, the following will be called:
            1. MouseDown for the first click
            2. MouseDoubleClick for the second click
            3. If Handled has not been set in #2, MouseDown will be called a 2nd time
            </remarks>
            <seealso cref="E:Eto.Forms.Control.MouseDown"/>
        </member>
        <member name="M:Eto.Forms.Control.OnMouseDoubleClick(Eto.Forms.MouseEventArgs)">
            <summary>
            Raises the mouse <see cref="E:Eto.Forms.Control.MouseDoubleClick"/> event.
            </summary>
            <param name="e">Mouse event arguments</param>
        </member>
        <member name="F:Eto.Forms.Control.MouseWheelEvent">
            <summary>
            Event identifier for handlers when attaching the <see cref="E:Eto.Forms.Control.MouseWheel"/> event
            </summary>
        </member>
        <member name="E:Eto.Forms.Control.MouseWheel">
            <summary>
            Occurs when mouse wheel has been changed
            </summary>
        </member>
        <member name="M:Eto.Forms.Control.OnMouseWheel(Eto.Forms.MouseEventArgs)">
            <summary>
            Raises the <see cref="E:Eto.Forms.Control.MouseWheel"/> event.
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="F:Eto.Forms.Control.GotFocusEvent">
            <summary>
            Event identifier for handlers when attaching the <see cref="E:Eto.Forms.Control.GotFocus"/> event
            </summary>
        </member>
        <member name="E:Eto.Forms.Control.GotFocus">
            <summary>
            Occurs when the control receives keyboard focus.
            </summary>
            <remarks>
            Note that not all controls can recieve keyboard focus.
            </remarks>
            <seealso cref="E:Eto.Forms.Control.LostFocus"/>
        </member>
        <member name="M:Eto.Forms.Control.OnGotFocus(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Eto.Forms.Control.GotFocus"/> event.
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="F:Eto.Forms.Control.LostFocusEvent">
            <summary>
            Event identifier for handlers when attaching the <see cref="E:Eto.Forms.Control.LostFocus"/> event
            </summary>
        </member>
        <member name="E:Eto.Forms.Control.LostFocus">
            <summary>
            Occurs when control loses keyboard focus
            </summary>
            <remarks>
            Note that not all controls can recieve keyboard focus
            </remarks>
            <seealso cref="E:Eto.Forms.Control.GotFocus"/>
        </member>
        <member name="M:Eto.Forms.Control.OnLostFocus(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Eto.Forms.Control.LostFocus"/> event.
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="F:Eto.Forms.Control.ShownEvent">
            <summary>
            Event identifier for handlers when attaching the <see cref="E:Eto.Forms.Control.Shown"/> event
            </summary>
        </member>
        <member name="E:Eto.Forms.Control.Shown">
            <summary>
            Occurs when the control is shown on the screen
            </summary>
            <remarks>
            This event fires when the <see cref="P:Eto.Forms.Control.Visible"/> property changes, or when initially showing a control
            on a form.
            </remarks>
        </member>
        <member name="M:Eto.Forms.Control.OnShown(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Eto.Forms.Control.Shown"/> event.
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="E:Eto.Forms.Control.PreLoad">
            <summary>
            Occurs before the control is loaded. See the <see cref="E:Eto.Forms.Control.Load"/> event for more detail.
            </summary>
            <seealso cref="E:Eto.Forms.Control.Load"/>
            <seealso cref="E:Eto.Forms.Control.LoadComplete"/>
            <seealso cref="E:Eto.Forms.Control.UnLoad"/>
        </member>
        <member name="M:Eto.Forms.Control.OnPreLoad(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Eto.Forms.Control.PreLoad"/> event.
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="E:Eto.Forms.Control.Load">
            <summary>
            Occurs when the control is displayed on a visible window
            </summary>
            <remarks>
            A control is loaded when it is part of the control hierarchy and is shown on a window.
            When the control is removed from the hierarchy, or the window is closed, the <see cref="E:Eto.Forms.Control.UnLoad"/> event
            will be called.
            </remarks>
            <seealso cref="E:Eto.Forms.Control.PreLoad"/>
            <seealso cref="E:Eto.Forms.Control.LoadComplete"/>
            <seealso cref="E:Eto.Forms.Control.UnLoad"/>
        </member>
        <member name="M:Eto.Forms.Control.OnLoad(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Eto.Forms.Control.Load"/> event.
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="E:Eto.Forms.Control.LoadComplete">
            <summary>
            Occurs when the load is complete, which happens after the <see cref="E:Eto.Forms.Control.Load"/> event
            </summary>
            <seealso cref="E:Eto.Forms.Control.Load"/>
            <seealso cref="E:Eto.Forms.Control.PreLoad"/>
            <seealso cref="E:Eto.Forms.Control.UnLoad"/>
        </member>
        <member name="M:Eto.Forms.Control.OnLoadComplete(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Eto.Forms.Control.LoadComplete"/> event.
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="E:Eto.Forms.Control.UnLoad">
            <summary>
            Occurs when the control is unloaded, which happens when removed from the control hierarchy or the window is closed.
            </summary>
            <seealso cref="E:Eto.Forms.Control.Load"/>
            <seealso cref="E:Eto.Forms.Control.LoadComplete"/>
            <seealso cref="E:Eto.Forms.Control.PreLoad"/>
        </member>
        <member name="M:Eto.Forms.Control.OnUnLoad(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Eto.Forms.Control.UnLoad"/> event.
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="F:Eto.Forms.Control.DragDropEvent">
            <summary>
            Event identifier for handlers when attaching the <see cref="E:Eto.Forms.Control.DragDrop"/> event
            </summary>
        </member>
        <member name="E:Eto.Forms.Control.DragDrop">
            <summary>
            Occurs when a drag operation is dropped onto the control.
            </summary>
            <remarks>
            This should perform any of the actual drop logic and update the control state to reflect the dropped data.
            Any cleanup should be performed in the <see cref="E:Eto.Forms.Control.DragLeave"/> event, which is called immediately before this event.
            </remarks>
        </member>
        <member name="M:Eto.Forms.Control.OnDragDrop(Eto.Forms.DragEventArgs)">
            <summary>
            Raises the <see cref="E:Eto.Forms.Control.DragDrop"/> event.
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="F:Eto.Forms.Control.DragOverEvent">
            <summary>
            Event identifier for handlers when attaching the <see cref="E:Eto.Forms.Control.DragOver"/> event
            </summary>
        </member>
        <member name="E:Eto.Forms.Control.DragOver">
            <summary>
            Occurs when a drag operation is over the control and needs updating based on position or keyboard state changes.
            </summary>
        </member>
        <member name="M:Eto.Forms.Control.OnDragOver(Eto.Forms.DragEventArgs)">
            <summary>
            Raises the <see cref="E:Eto.Forms.Control.DragOver"/> event.
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="F:Eto.Forms.Control.DragEnterEvent">
            <summary>
            Event identifier for handlers when attaching the <see cref="E:Eto.Forms.Control.DragEnter"/> event
            </summary>
        </member>
        <member name="E:Eto.Forms.Control.DragEnter">
            <summary>
            Occurs when a drag operation enters the bounds of the control.
            </summary>
        </member>
        <member name="M:Eto.Forms.Control.OnDragEnter(Eto.Forms.DragEventArgs)">
            <summary>
            Raises the <see cref="E:Eto.Forms.Control.DragEnter"/> event.
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="F:Eto.Forms.Control.DragLeaveEvent">
            <summary>
            Event identifier for handlers when attaching the <see cref="E:Eto.Forms.Control.DragLeave"/> event
            </summary>
        </member>
        <member name="E:Eto.Forms.Control.DragLeave">
            <summary>
            Occurs when a drag operation leaves the bounds of the control or the drag operation was completed inside the control.
            </summary>
            <remarks>
            Use this event to 'clean up' any state of the control for the current drag operation.
            This will be called before the <see cref="E:Eto.Forms.Control.DragDrop"/> event.
            </remarks>
        </member>
        <member name="M:Eto.Forms.Control.OnDragLeave(Eto.Forms.DragEventArgs)">
            <summary>
            Raises the <see cref="E:Eto.Forms.Control.DragLeave"/> event.
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:Eto.Forms.Control.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Eto.Forms.Control"/> class.
            </summary>
        </member>
        <member name="M:Eto.Forms.Control.#ctor(Eto.Forms.Control.IHandler)">
            <summary>
            Initializes a new instance of the Container with the specified handler
            </summary>
            <param name="handler">Pre-created handler to attach to this instance</param>
        </member>
        <member name="M:Eto.Forms.Control.Invalidate">
            <summary>
            Queues a repaint of the entire control on the screen and any of its children.
            </summary>
            <remarks>
            This is only useful when the control is visible.
            </remarks>
        </member>
        <member name="M:Eto.Forms.Control.Invalidate(System.Boolean)">
            <summary>
            Queues a repaint of the entire control on the screen
            </summary>
            <remarks>
            This is only useful when the control is visible.
            </remarks>
            <param name="invalidateChildren"><c>True</c> to invalidate all children, <c>false</c> to only invalidate the container</param>
        </member>
        <member name="M:Eto.Forms.Control.Invalidate(Eto.Drawing.Rectangle)">
            <summary>
            Queues a repaint of the specified <paramref name="rect"/> of the control and any children.
            </summary>
            <remarks>
            This is only useful when the control is visible.
            </remarks>
            <param name="rect">Rectangle to repaint</param>
        </member>
        <member name="M:Eto.Forms.Control.Invalidate(Eto.Drawing.Rectangle,System.Boolean)">
            <summary>
            Queues a repaint of the specified <paramref name="rect"/> of the control
            </summary>
            <remarks>
            This is only useful when the control is visible.
            </remarks>
            <param name="rect">Rectangle to repaint</param>
            <param name="invalidateChildren"><c>True</c> to invalidate all children, <c>false</c> to only invalidate the container</param>
        </member>
        <member name="P:Eto.Forms.Control.Size">
            <summary>
            Gets or sets the size of the control. Use -1 to specify auto sizing for either the width and/or height.
            </summary>
            <remarks>
            Setting the size of controls is entirely optional as most controls will size themselves appropriately.
            When specifying a size, it will be used as the desired size of the control.  The container will reposition
            and resize the control depending on the available size.
            
            For a <see cref="T:Eto.Forms.Window"/>, it is preferred to set the <see cref="P:Eto.Forms.Container.ClientSize"/> instead, as various
            platforms have different sizes of window decorations, toolbars, etc.
            </remarks>
            <value>The current size of the control</value>
        </member>
        <member name="P:Eto.Forms.Control.Width">
            <summary>
            Gets or sets the width of the control size.
            </summary>
        </member>
        <member name="P:Eto.Forms.Control.Height">
            <summary>
            Gets or sets the height of the control size.
            </summary>
        </member>
        <member name="E:Eto.Forms.Control.EnabledChanged">
            <summary>
            Occurs when the <see cref="P:Eto.Forms.Control.Enabled"/> value is changed.
            </summary>
        </member>
        <member name="M:Eto.Forms.Control.OnEnabledChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Eto.Forms.Control.EnabledChanged"/> event.
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="P:Eto.Forms.Control.Enabled">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Eto.Forms.Control"/> is enabled and accepts user input.
            </summary>
            <remarks>
            Typically when a control is disabled, the user cannot do anything with the control (including for example, selecting
            text in a text control).  Certain controls can have a 'Read Only' mode, such as <see cref="P:Eto.Forms.TextBox.ReadOnly"/> which
            allows the user to select text, but not change its contents.
            </remarks>
            <value><c>true</c> if enabled; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Eto.Forms.Control.Visible">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Eto.Forms.Control"/> is visible to the user.
            </summary>
            <remarks>
            When the visibility of a control is set to false, it will still occupy space in the layout, but not be shown.
            The only exception is for controls like the <see cref="T:Eto.Forms.Splitter"/>, which will hide a pane if the visibility
            of one of the panels is changed.
            </remarks>
            <value><c>true</c> if visible; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Eto.Forms.Control.Parent">
            <summary>
            Gets the container which this control has been added to, if any
            </summary>
            <value>The parent control, or null if there is no parent</value>
        </member>
        <member name="P:Eto.Forms.Control.InternalLogicalParent">
            <summary>
            Gets or sets the logical parent, which excludes any visual structure of custom containers.
            </summary>
            <value>The logical parent.</value>
        </member>
        <member name="P:Eto.Forms.Control.VisualParent">
            <summary>
            Gets the visual container of this control, if any.
            </summary>
            <remarks>
            Some containers may use other Eto controls to layout its children, such as the <see cref="T:Eto.Forms.StackLayout"/>.
            This will return the parent control that visually contains this control as opposed to <see cref="P:Eto.Forms.Control.Parent"/>
            which will return the logical parent.
            </remarks>
            <value>The visual parent of this control.</value>
        </member>
        <member name="M:Eto.Forms.Control.FindParent(System.Type,System.String)">
            <summary>
            Finds a control in the parent hierarchy with the specified type and <see cref="P:Eto.Widget.ID"/> if specified
            </summary>
            <returns>The parent if found, or null if not found.</returns>
            <param name="type">The type of control to find.</param>
            <param name="id">Identifier of the parent control to find, or null to find by type only.</param>
        </member>
        <member name="M:Eto.Forms.Control.FindParent(System.String)">
            <summary>
            Finds a control in the parent hierarchy with the specified <paramref name="id"/>
            </summary>
            <returns>The parent if found, or null if not found.</returns>
            <param name="id">Identifier of the parent control to find.</param>
        </member>
        <member name="M:Eto.Forms.Control.Detach">
            <summary>
            Detaches the control by removing it from its parent
            </summary>
            <remarks>
            This is essentially a shortcut to myControl.Parent.Remove(myControl);
            </remarks>
        </member>
        <member name="M:Eto.Forms.Control.AttachNative">
            <summary>
            Attaches the control for direct use in a native application
            </summary>
            <remarks>
            Use this to use a control directly in a native application.  Note that the native application must be running
            the same framework as the current platform.  E.g. a WinForms application can use an Eto.Forms control
            when using the Eto.WinForms platform.
            
            This prepares the control by firing the <see cref="E:Eto.Forms.Control.PreLoad"/>, <see cref="E:Eto.Forms.Control.Load"/>, etc. events.
            </remarks>
        </member>
        <member name="M:Eto.Forms.Control.DetachNative">
            <summary>
            Detaches the control when it is used in a native application, when you want to reuse the control.
            </summary>
            <remarks>
            This should only be called after <see cref="M:Eto.Forms.Control.AttachNative"/> has been called, which is usually done by calling
            to <c>ToNative(true)</c>.
            </remarks>
        </member>
        <member name="P:Eto.Forms.Control.BackgroundColor">
            <summary>
            Gets or sets the color for the background of the control
            </summary>
            <remarks>
            Note that on some platforms (e.g. Mac), setting the background color of a control can change the performance
            characteristics of the control and its children, since it must enable layers to do so.
            </remarks>
            <value>The color of the background.</value>
        </member>
        <member name="P:Eto.Forms.Control.HasFocus">
            <summary>
            Gets a value indicating whether this instance has the keyboard input focus.
            </summary>
            <value><c>true</c> if this instance has focus; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Eto.Forms.Control.Focus">
            <summary>
            Attempts to set the keyboard input focus to this control, or the first child that accepts focus
            </summary>
        </member>
        <member name="P:Eto.Forms.Control.IsSuspended">
            <summary>
            Gets a value indicating whether the layout of child controls is suspended.
            </summary>
            <seealso cref="M:Eto.Forms.Control.SuspendLayout"/>
            <seealso cref="M:Eto.Forms.Control.ResumeLayout"/>
            <value><c>true</c> if this instance is suspended; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Eto.Forms.Control.SuspendLayout">
            <summary>
            Suspends the layout of child controls
            </summary>
            <remarks>
            This can be used to optimize some platforms while adding, removing, or changing many child controls at once.
            It disables the calculation of control positioning until <see cref="M:Eto.Forms.Control.ResumeLayout"/> is called.
            Each call to SuspendLayout() must be balanced with a call to <see cref="M:Eto.Forms.Control.ResumeLayout"/>.
            </remarks>
        </member>
        <member name="M:Eto.Forms.Control.ResumeLayout">
            <summary>
            Resumes the layout after it has been suspended, and performs a layout
            </summary>
            <remarks>
            This can be used to optimize some platforms while adding, removing, or changing many child controls at once.
            Each call to ResumeLayout() must be balanced with a call to <see cref="M:Eto.Forms.Control.SuspendLayout"/> before it.
            </remarks>
        </member>
        <member name="P:Eto.Forms.Control.ParentWindow">
            <summary>
            Gets the window this control is contained in
            </summary>
            <value>The parent window, or null if it is not currently on a window</value>
        </member>
        <member name="P:Eto.Forms.Control.SupportedPlatformCommands">
            <summary>
            Gets the supported platform commands that can be used to hook up system functions to user defined logic
            </summary>
            <remarks>
            This lists all available commands that can be mapped using the <see cref="M:Eto.Forms.Control.MapPlatformCommand(System.String,Eto.Forms.Command)"/> method
            of the control.
            </remarks>
            <value>The supported platform commands.</value>
            <seealso cref="M:Eto.Forms.Control.MapPlatformCommand(System.String,Eto.Forms.Command)"/>
        </member>
        <member name="M:Eto.Forms.Control.MapPlatformCommand(System.String,Eto.Forms.Command)">
            <summary>
            Specifies a command to execute for a platform-specific command
            </summary>
            <remarks>
            Some platforms have specific system-defined commands that can be associated with a control.
            For example, the Mac platform's cut/copy/paste functionality is defined by the system, and if you want to
            hook into it, you can use this to map it to your own defined logic.
            The valid values of the <paramref name="systemCommand"/> parameter are defined by each platform, and a list can be
            retrieved using <see cref="P:Eto.Forms.Control.SupportedPlatformCommands"/>
            </remarks>
            <example>
            This example shows how to extend a control with cut/copy/paste for the mac platform:
            <code>
            var drawable = new Drawable();
            if (drawable.Generator.IsMac)
            {
            	drawable.MapPlatformCommand("cut", new MyCutCommand());
            	drawable.MapPlatformCommand("copy", new MyCopyCommand());
            	drawable.MapPlatformCommand("paste", new MyPasteCommand());
            }
            </code>
            </example>
            <param name="systemCommand">System command</param>
            <param name="command">Command to execute, or null to restore to the default behavior</param>
            <seealso cref="P:Eto.Forms.Control.SupportedPlatformCommands"/>
        </member>
        <member name="M:Eto.Forms.Control.PointFromScreen(Eto.Drawing.PointF)">
            <summary>
            Converts a point from screen space to control space.
            </summary>
            <returns>The point in control space</returns>
            <param name="point">Point in screen space</param>
        </member>
        <member name="M:Eto.Forms.Control.PointToScreen(Eto.Drawing.PointF)">
            <summary>
            Converts a point from control space to screen space
            </summary>
            <returns>The point in screen space</returns>
            <param name="point">Point in control space</param>
        </member>
        <member name="M:Eto.Forms.Control.RectangleToScreen(Eto.Drawing.RectangleF)">
            <summary>
            Converts a rectangle from screen space to control space.
            </summary>
            <returns>The rectangle in control space</returns>
            <param name="rect">Rectangle in screen space</param>
        </member>
        <member name="M:Eto.Forms.Control.RectangleFromScreen(Eto.Drawing.RectangleF)">
            <summary>
            Converts a rectangle from control space to screen space
            </summary>
            <returns>The rectangle in screen space</returns>
            <param name="rect">Rectangle in control space</param>
        </member>
        <member name="P:Eto.Forms.Control.Bounds">
            <summary>
            Gets the bounding rectangle of this control relative to its container
            </summary>
            <value>The bounding rectangle of the control</value>
        </member>
        <member name="P:Eto.Forms.Control.Location">
            <summary>
            Gets the location of the control as positioned by the container
            </summary>
            <remarks>
            A control's location is set by the container.
            This can be used to determine where the control is for overlaying floating windows, menus, etc.
            </remarks>
            <value>The current location of the control</value>
        </member>
        <member name="P:Eto.Forms.Control.Cursor">
            <summary>
            Gets or sets the type of cursor to use when the mouse is hovering over the control
            </summary>
            <value>The mouse cursor</value>
        </member>
        <member name="P:Eto.Forms.Control.ToolTip">
            <summary>
            Gets or sets the tool tip to show when the mouse is hovered over the control
            </summary>
            <value>The tool tip.</value>
        </member>
        <member name="P:Eto.Forms.Control.TabIndex">
            <summary>
            Gets or sets the tab index order for this control within its container.
            </summary>
            <remarks>
            This sets the order when using the tab key to cycle through controls
            
            Note that some platforms (Gtk and WinForms) may not support setting the context of the tab order to StackLayout 
            or DynamicLayout containers and may not behave exactly as expected. Use the 
            <see cref="F:Eto.PlatformFeatures.TabIndexWithCustomContainers"/> flag to determine if it is supported.
            </remarks>
            <value>The index of the control in the tab order.</value>
        </member>
        <member name="P:Eto.Forms.Control.AllowDrop">
            <summary>
            Gets or sets a value indicating whether this control can serve as drop target.
            </summary>
        </member>
        <member name="M:Eto.Forms.Control.DoDragDrop(Eto.Forms.DataObject,Eto.Forms.DragEffects)">
            <summary>
            Starts drag operation using this control as drag source.
            </summary>
            <param name="data">Drag data.</param>
            <param name="allowedEffects">Allowed action.</param>
        </member>
        <member name="M:Eto.Forms.Control.Dispose(System.Boolean)">
            <summary>
            Handles the disposal of this control
            </summary>
            <param name="disposing">True if the caller called <see cref="M:Eto.Widget.Dispose"/> manually, false if being called from a finalizer</param>
        </member>
        <member name="M:Eto.Forms.Control.op_Implicit(System.String)~Eto.Forms.Control">
            <summary>
            Converts a string to a label control implicitly.
            </summary>
            <remarks>
            This provides an easy way to add labels to your layout through code, without having to create <see cref="T:Eto.Forms.Label"/> instances.
            </remarks>
            <param name="labelText">Text to convert to a Label control.</param>
        </member>
        <member name="M:Eto.Forms.Control.op_Implicit(Eto.Drawing.Image)~Eto.Forms.Control">
            <summary>
            Converts an <see cref="T:Eto.Drawing.Image"/> to a control implicitly.
            </summary>
            <remarks>
            This provides an easy way to add images to your layout through code, without having to create <see cref="T:Eto.Forms.ImageView"/> instances manually.
            </remarks>
            <param name="image">Image to convert to an ImageView control.</param>
        </member>
        <member name="M:Eto.Forms.Control.GetCallback">
            <summary>
            Gets an instance of an object used to perform callbacks to the widget from handler implementations
            </summary>
            <returns>The callback instance to use for this widget</returns>
        </member>
        <member name="T:Eto.Forms.Control.ICallback">
            <summary>
            Callback interface for instances of <see cref="T:Eto.Forms.Control"/>
            </summary>
        </member>
        <member name="M:Eto.Forms.Control.ICallback.OnKeyDown(Eto.Forms.Control,Eto.Forms.KeyEventArgs)">
            <summary>
            Raises the key down event.
            </summary>
        </member>
        <member name="M:Eto.Forms.Control.ICallback.OnKeyUp(Eto.Forms.Control,Eto.Forms.KeyEventArgs)">
            <summary>
            Raises the key up event.
            </summary>
        </member>
        <member name="M:Eto.Forms.Control.ICallback.OnMouseDown(Eto.Forms.Control,Eto.Forms.MouseEventArgs)">
            <summary>
            Raises the mouse down event.
            </summary>
        </member>
        <member name="M:Eto.Forms.Control.ICallback.OnMouseUp(Eto.Forms.Control,Eto.Forms.MouseEventArgs)">
            <summary>
            Raises the mouse up event.
            </summary>
        </member>
        <member name="M:Eto.Forms.Control.ICallback.OnMouseMove(Eto.Forms.Control,Eto.Forms.MouseEventArgs)">
            <summary>
            Raises the mouse move event.
            </summary>
        </member>
        <member name="M:Eto.Forms.Control.ICallback.OnMouseLeave(Eto.Forms.Control,Eto.Forms.MouseEventArgs)">
            <summary>
            Raises the mouse leave event.
            </summary>
        </member>
        <member name="M:Eto.Forms.Control.ICallback.OnMouseEnter(Eto.Forms.Control,Eto.Forms.MouseEventArgs)">
            <summary>
            Raises the mouse enter event.
            </summary>
        </member>
        <member name="M:Eto.Forms.Control.ICallback.OnTextInput(Eto.Forms.Control,Eto.Forms.TextInputEventArgs)">
            <summary>
            Raises the text input event.
            </summary>
        </member>
        <member name="M:Eto.Forms.Control.ICallback.OnSizeChanged(Eto.Forms.Control,System.EventArgs)">
            <summary>
            Raises the size changed event.
            </summary>
        </member>
        <member name="M:Eto.Forms.Control.ICallback.OnMouseDoubleClick(Eto.Forms.Control,Eto.Forms.MouseEventArgs)">
            <summary>
            Raises the mouse double click event.
            </summary>
        </member>
        <member name="M:Eto.Forms.Control.ICallback.OnMouseWheel(Eto.Forms.Control,Eto.Forms.MouseEventArgs)">
            <summary>
            Raises the mouse wheel event.
            </summary>
        </member>
        <member name="M:Eto.Forms.Control.ICallback.OnGotFocus(Eto.Forms.Control,System.EventArgs)">
            <summary>
            Raises the got focus event.
            </summary>
        </member>
        <member name="M:Eto.Forms.Control.ICallback.OnLostFocus(Eto.Forms.Control,System.EventArgs)">
            <summary>
            Raises the lost focus event.
            </summary>
        </member>
        <member name="M:Eto.Forms.Control.ICallback.OnShown(Eto.Forms.Control,System.EventArgs)">
            <summary>
            Raises the shown event.
            </summary>
        </member>
        <member name="M:Eto.Forms.Control.ICallback.OnDragDrop(Eto.Forms.Control,Eto.Forms.DragEventArgs)">
            <summary>
            Raises the DragDrop event.
            </summary>
        </member>
        <member name="M:Eto.Forms.Control.ICallback.OnDragOver(Eto.Forms.Control,Eto.Forms.DragEventArgs)">
            <summary>
            Raises the DragOver event.
            </summary>
        </member>
        <member name="M:Eto.Forms.Control.ICallback.OnDragEnter(Eto.Forms.Control,Eto.Forms.DragEventArgs)">
            <summary>
            Raises the DragEnter event.
            </summary>
        </member>
        <member name="M:Eto.Forms.Control.ICallback.OnDragLeave(Eto.Forms.Control,Eto.Forms.DragEventArgs)">
            <summary>
            Raises the DragLeave event.
            </summary>
        </member>
        <member name="T:Eto.Forms.Control.Callback">
            <summary>
            Callback methods for handlers of <see cref="T:Eto.Forms.Control"/>
            </summary>
        </member>
        <member name="M:Eto.Forms.Control.Callback.OnKeyDown(Eto.Forms.Control,Eto.Forms.KeyEventArgs)">
            <summary>
            Raises the key down event.
            </summary>
        </member>
        <member name="M:Eto.Forms.Control.Callback.OnKeyUp(Eto.Forms.Control,Eto.Forms.KeyEventArgs)">
            <summary>
            Raises the key up event.
            </summary>
        </member>
        <member name="M:Eto.Forms.Control.Callback.OnMouseDown(Eto.Forms.Control,Eto.Forms.MouseEventArgs)">
            <summary>
            Raises the mouse down event.
            </summary>
        </member>
        <member name="M:Eto.Forms.Control.Callback.OnMouseUp(Eto.Forms.Control,Eto.Forms.MouseEventArgs)">
            <summary>
            Raises the mouse up event.
            </summary>
        </member>
        <member name="M:Eto.Forms.Control.Callback.OnMouseMove(Eto.Forms.Control,Eto.Forms.MouseEventArgs)">
            <summary>
            Raises the mouse move event.
            </summary>
        </member>
        <member name="M:Eto.Forms.Control.Callback.OnMouseLeave(Eto.Forms.Control,Eto.Forms.MouseEventArgs)">
            <summary>
            Raises the mouse leave event.
            </summary>
        </member>
        <member name="M:Eto.Forms.Control.Callback.OnMouseEnter(Eto.Forms.Control,Eto.Forms.MouseEventArgs)">
            <summary>
            Raises the mouse enter event.
            </summary>
        </member>
        <member name="M:Eto.Forms.Control.Callback.OnTextInput(Eto.Forms.Control,Eto.Forms.TextInputEventArgs)">
            <summary>
            Raises the text input event.
            </summary>
        </member>
        <member name="M:Eto.Forms.Control.Callback.OnSizeChanged(Eto.Forms.Control,System.EventArgs)">
            <summary>
            Raises the size changed event.
            </summary>
        </member>
        <member name="M:Eto.Forms.Control.Callback.OnMouseDoubleClick(Eto.Forms.Control,Eto.Forms.MouseEventArgs)">
            <summary>
            Raises the mouse double click event.
            </summary>
        </member>
        <member name="M:Eto.Forms.Control.Callback.OnMouseWheel(Eto.Forms.Control,Eto.Forms.MouseEventArgs)">
            <summary>
            Raises the mouse wheel event.
            </summary>
        </member>
        <member name="M:Eto.Forms.Control.Callback.OnGotFocus(Eto.Forms.Control,System.EventArgs)">
            <summary>
            Raises the got focus event.
            </summary>
        </member>
        <member name="M:Eto.Forms.Control.Callback.OnLostFocus(Eto.Forms.Control,System.EventArgs)">
            <summary>
            Raises the lost focus event.
            </summary>
        </member>
        <member name="M:Eto.Forms.Control.Callback.OnShown(Eto.Forms.Control,System.EventArgs)">
            <summary>
            Raises the shown event.
            </summary>
        </member>
        <member name="M:Eto.Forms.Control.Callback.OnDragDrop(Eto.Forms.Control,Eto.Forms.DragEventArgs)">
            <summary>
            Raises the DragDrop event.
            </summary>
        </member>
        <member name="M:Eto.Forms.Control.Callback.OnDragOver(Eto.Forms.Control,Eto.Forms.DragEventArgs)">
            <summary>
            Raises the DragOver event.
            </summary>
        </member>
        <member name="M:Eto.Forms.Control.Callback.OnDragEnter(Eto.Forms.Control,Eto.Forms.DragEventArgs)">
            <summary>
            Raises the DragEnter event.
            </summary>
        </member>
        <member name="M:Eto.Forms.Control.Callback.OnDragLeave(Eto.Forms.Control,Eto.Forms.DragEventArgs)">
            <summary>
            Raises the DragLeave event.
            </summary>
        </member>
        <member name="T:Eto.Forms.Control.IHandler">
            <summary>
            Handler interface for <see cref="T:Eto.Forms.Control"/>
            </summary>
            <copyright>(c) 2014 by Curtis Wensley</copyright>
            <license type="BSD-3">See LICENSE for full terms</license>
        </member>
        <member name="P:Eto.Forms.Control.IHandler.BackgroundColor">
            <summary>
            Gets or sets the color for the background of the control
            </summary>
            <remarks>
            Note that on some platforms (e.g. Mac), setting the background color of a control can change the performance
            characteristics of the control and its children, since it must enable layers to do so.
            </remarks>
            <value>The color of the background.</value>
        </member>
        <member name="P:Eto.Forms.Control.IHandler.Size">
            <summary>
            Gets or sets the size of the control. Use -1 to specify auto sizing for either the width and/or height.
            </summary>
            <remarks>
            Setting the size of controls is entirely optional as most controls will size themselves appropriately.
            When specifying a size, it will be used as the desired size of the control.  The container will reposition
            and resize the control depending on the available size.
            
            For a <see cref="T:Eto.Forms.Window"/>, it is preferred to set the <see cref="P:Eto.Forms.Container.ClientSize"/> instead, as various
            platforms have different sizes of window decorations, toolbars, etc.
            </remarks>
            <value>The current size of the control</value>
        </member>
        <member name="P:Eto.Forms.Control.IHandler.Enabled">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Eto.Forms.Control"/> is enabled and accepts user input.
            </summary>
            <remarks>
            Typically when a control is disabled, the user cannot do anything with the control (including for example, selecting
            text in a text control).  Certain controls can have a 'Read Only' mode, such as <see cref="P:Eto.Forms.TextBox.ReadOnly"/> which
            allows the user to select text, but not change its contents.
            </remarks>
            <value><c>true</c> if enabled; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Eto.Forms.Control.IHandler.Invalidate(System.Boolean)">
            <summary>
            Queues a repaint of the entire control on the screen
            </summary>
            <remarks>
            This is only useful when the control is visible.
            </remarks>
            <param name="invalidateChildren"><c>True</c> to invalidate all children, <c>false</c> to only invalidate the container</param>
        </member>
        <member name="M:Eto.Forms.Control.IHandler.Invalidate(Eto.Drawing.Rectangle,System.Boolean)">
            <summary>
            Queues a repaint of the specified <paramref name="rect"/> of the control
            </summary>
            <remarks>
            This is only useful when the control is visible.
            </remarks>
            <param name="rect">Rectangle to repaint</param>
            <param name="invalidateChildren"><c>True</c> to invalidate all children, <c>false</c> to only invalidate the container</param>
        </member>
        <member name="M:Eto.Forms.Control.IHandler.SuspendLayout">
            <summary>
            Suspends the layout of child controls
            </summary>
            <remarks>
            This can be used to optimize some platforms while adding, removing, or changing many child controls at once.
            It disables the calculation of control positioning until <see cref="M:Eto.Forms.Control.IHandler.ResumeLayout"/> is called.
            Each call to SuspendLayout() must be balanced with a call to <see cref="M:Eto.Forms.Control.IHandler.ResumeLayout"/>.
            </remarks>
        </member>
        <member name="M:Eto.Forms.Control.IHandler.ResumeLayout">
            <summary>
            Resumes the layout after it has been suspended, and performs a layout
            </summary>
            <remarks>
            This can be used to optimize some platforms while adding, removing, or changing many child controls at once.
            Each call to ResumeLayout() must be balanced with a call to <see cref="M:Eto.Forms.Control.IHandler.SuspendLayout"/> before it.
            </remarks>
        </member>
        <member name="M:Eto.Forms.Control.IHandler.Focus">
            <summary>
            Attempts to set the keyboard input focus to this control, or the first child that accepts focus
            </summary>
        </member>
        <member name="P:Eto.Forms.Control.IHandler.HasFocus">
            <summary>
            Gets a value indicating whether this instance has the keyboard input focus.
            </summary>
            <value><c>true</c> if this instance has focus; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Eto.Forms.Control.IHandler.Visible">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Eto.Forms.Control"/> is visible to the user.
            </summary>
            <remarks>
            When the visibility of a control is set to false, it will still occupy space in the layout, but not be shown.
            The only exception is for controls like the <see cref="T:Eto.Forms.Splitter"/>, which will hide a pane if the visibility
            of one of the panels is changed.
            </remarks>
            <value><c>true</c> if visible; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Eto.Forms.Control.IHandler.OnPreLoad(System.EventArgs)">
            <summary>
            Called before the control is loaded on a form
            </summary>
            <param name="e">Event arguments</param>
            <seealso cref="M:Eto.Forms.Control.IHandler.OnLoadComplete(System.EventArgs)"/>
            <seealso cref="M:Eto.Forms.Control.IHandler.OnLoad(System.EventArgs)"/>
            <seealso cref="M:Eto.Forms.Control.IHandler.OnUnLoad(System.EventArgs)"/>
        </member>
        <member name="M:Eto.Forms.Control.IHandler.OnLoad(System.EventArgs)">
            <summary>
            Called when the control is loaded on a form
            </summary>
            <param name="e">Event arguments</param>
            <seealso cref="M:Eto.Forms.Control.IHandler.OnPreLoad(System.EventArgs)"/>
            <seealso cref="M:Eto.Forms.Control.IHandler.OnLoadComplete(System.EventArgs)"/>
            <seealso cref="M:Eto.Forms.Control.IHandler.OnUnLoad(System.EventArgs)"/>
        </member>
        <member name="M:Eto.Forms.Control.IHandler.OnLoadComplete(System.EventArgs)">
            <summary>
            Called after all other controls have been loaded
            </summary>
            <param name="e">Event arguments</param>
            <seealso cref="M:Eto.Forms.Control.IHandler.OnPreLoad(System.EventArgs)"/>
            <seealso cref="M:Eto.Forms.Control.IHandler.OnLoad(System.EventArgs)"/>
            <seealso cref="M:Eto.Forms.Control.IHandler.OnUnLoad(System.EventArgs)"/>
        </member>
        <member name="M:Eto.Forms.Control.IHandler.OnUnLoad(System.EventArgs)">
            <summary>
            Called when the control is unloaded, which is when it is not currently on a displayed window
            </summary>
            <param name="e">Event arguments</param>
            <seealso cref="M:Eto.Forms.Control.IHandler.OnPreLoad(System.EventArgs)"/>
            <seealso cref="M:Eto.Forms.Control.IHandler.OnLoad(System.EventArgs)"/>
            <seealso cref="M:Eto.Forms.Control.IHandler.OnLoadComplete(System.EventArgs)"/>
        </member>
        <member name="M:Eto.Forms.Control.IHandler.SetParent(Eto.Forms.Container)">
            <summary>
            Called when the parent of the control has been set
            </summary>
            <param name="parent">New parent for the control, or null if the parent was removed</param>
        </member>
        <member name="P:Eto.Forms.Control.IHandler.SupportedPlatformCommands">
            <summary>
            Gets the supported platform commands that can be used to hook up system functions to user defined logic
            </summary>
            <remarks>
            This lists all available commands that can be mapped using the <see cref="M:Eto.Forms.Control.IHandler.MapPlatformCommand(System.String,Eto.Forms.Command)"/> method
            of the control.
            </remarks>
            <value>The supported platform commands.</value>
            <seealso cref="M:Eto.Forms.Control.IHandler.MapPlatformCommand(System.String,Eto.Forms.Command)"/>
        </member>
        <member name="M:Eto.Forms.Control.IHandler.MapPlatformCommand(System.String,Eto.Forms.Command)">
            <summary>
            Specifies a command to execute for a platform-specific command
            </summary>
            <remarks>
            Some platforms have specific system-defined commands that can be associated with a control.
            For example, the Mac platform's cut/copy/paste functionality is defined by the system, and if you want to
            hook into it, you can use this to map it to your own defined logic.
            The valid values of the <paramref name="systemCommand"/> parameter are defined by each platform, and a list can be
            retrieved using <see cref="P:Eto.Forms.Control.SupportedPlatformCommands"/>
            </remarks>
            <example>
            This example shows how to extend a control with cut/copy/paste for the mac platform:
            <code>
            var drawable = new Drawable();
            if (drawable.Generator.IsMac)
            {
            	drawable.MapPlatformCommand("cut", new MyCutCommand());
            	drawable.MapPlatformCommand("copy", new MyCopyCommand());
            	drawable.MapPlatformCommand("paste", new MyPasteCommand());
            }
            </code>
            </example>
            <param name="systemCommand">System command.</param>
            <param name="command">Command to execute, or null to restore to the default behavior</param>
            <seealso cref="P:Eto.Forms.Control.IHandler.SupportedPlatformCommands"/>
        </member>
        <member name="M:Eto.Forms.Control.IHandler.PointFromScreen(Eto.Drawing.PointF)">
            <summary>
            Converts a point from screen space to control space.
            </summary>
            <returns>The point in control space</returns>
            <param name="point">Point in screen space</param>
        </member>
        <member name="M:Eto.Forms.Control.IHandler.PointToScreen(Eto.Drawing.PointF)">
            <summary>
            Converts a point from control space to screen space
            </summary>
            <returns>The point in screen space</returns>
            <param name="point">Point in control space</param>
        </member>
        <member name="P:Eto.Forms.Control.IHandler.Location">
            <summary>
            Gets the location of the control as positioned by the container
            </summary>
            <remarks>
            A control's location is set by the container.
            This can be used to determine where the control is for overlaying floating windows, menus, etc.
            </remarks>
            <value>The current location of the control</value>
        </member>
        <member name="P:Eto.Forms.Control.IHandler.ToolTip">
            <summary>
            Gets or sets the tool tip to show when the mouse is hovered over the control
            </summary>
            <value>The tool tip.</value>
        </member>
        <member name="P:Eto.Forms.Control.IHandler.Cursor">
            <summary>
            Gets or sets the type of cursor to use when the mouse is hovering over the control
            </summary>
            <value>The mouse cursor</value>
        </member>
        <member name="P:Eto.Forms.Control.IHandler.TabIndex">
            <summary>
            Gets or sets the tab index order for this control within its container.
            </summary>
            <remarks>
            This sets the order when using the tab key to cycle through controls
            
            Note that some platforms (Gtk and WinForms) may not support setting the context of the tab order to StackLayout 
            or DynamicLayout containers and may not behave exactly as expected. Use the 
            <see cref="F:Eto.PlatformFeatures.TabIndexWithCustomContainers"/> flag to determine if it is supported.
            </remarks>
            <value>The index of the control in the tab order.</value>
        </member>
        <member name="P:Eto.Forms.Control.IHandler.VisualControls">
            <summary>
            Gets an enumeration of controls that are in the visual tree.
            </summary>
            <remarks>
            This is used to specify which controls are contained by this instance that are part of the visual tree.
            This should include all controls including non-logical Eto controls used for layout. 
            </remarks>
            <value>The visual controls.</value>
        </member>
        <member name="P:Eto.Forms.Control.IHandler.AllowDrop">
            <summary>
            Gets or sets a value indicating whether this control can serve as drop target.
            </summary>
        </member>
        <member name="M:Eto.Forms.Control.IHandler.DoDragDrop(Eto.Forms.DataObject,Eto.Forms.DragEffects)">
            <summary>
            Starts drag operation using this control as drag source.
            </summary>
            <param name="data">Drag data.</param>
            <param name="allowedEffects">Allowed effects.</param>
        </member>
        <member name="T:Eto.Forms.DateTimePickerMode">
            <summary>
            Modes for the <see cref="T:Eto.Forms.DateTimePicker"/>
            </summary>
        </member>
        <member name="F:Eto.Forms.DateTimePickerMode.Date">
            <summary>
            Show only the date component
            </summary>
        </member>
        <member name="F:Eto.Forms.DateTimePickerMode.Time">
            <summary>
            Show only the time component
            </summary>
        </member>
        <member name="F:Eto.Forms.DateTimePickerMode.DateTime">
            <summary>
            Show both the date and time components
            </summary>
        </member>
        <member name="T:Eto.Forms.DateTimePicker">
            <summary>
            Date/time picker control to enter a date and/or time value
            </summary>
        </member>
        <member name="E:Eto.Forms.DateTimePicker.ValueChanged">
            <summary>
            Occurs when the <see cref="P:Eto.Forms.DateTimePicker.Value"/> property has changed by the user
            </summary>
        </member>
        <member name="M:Eto.Forms.DateTimePicker.OnValueChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Eto.Forms.DateTimePicker.ValueChanged"/> event.
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="P:Eto.Forms.DateTimePicker.MinDate">
            <summary>
            Gets or sets the minimum date entered
            </summary>
            <value>The minimum date.</value>
        </member>
        <member name="P:Eto.Forms.DateTimePicker.MaxDate">
            <summary>
            Gets or sets the maximum date entered
            </summary>
            <value>The maximum date.</value>
        </member>
        <member name="P:Eto.Forms.DateTimePicker.Value">
            <summary>
            Gets or sets the value of the date/time picker. Null to display blank or with a unchecked checkbox.
            </summary>
            <value>The current value.</value>
        </member>
        <member name="P:Eto.Forms.DateTimePicker.ValueBinding">
            <summary>
            Gets a binding to the <see cref="P:Eto.Forms.DateTimePicker.Value"/> property.
            </summary>
            <value>The value binding.</value>
        </member>
        <member name="P:Eto.Forms.DateTimePicker.Mode">
            <summary>
            Gets or sets the mode of the date/time picker.
            </summary>
            <value>The picker mode.</value>
        </member>
        <member name="P:Eto.Forms.DateTimePicker.TextColor">
            <summary>
            Gets or sets the color of the text.
            </summary>
            <remarks>
            By default, the text will get a color based on the user's theme. However, this is usually black.
            </remarks>
            <value>The color of the text.</value>
        </member>
        <member name="P:Eto.Forms.DateTimePicker.ShowBorder">
            <summary>
            Gets or sets a value indicating whether to show the control's border.
            </summary>
            <remarks>
            This is a hint to omit the border of the control and show it as plainly as possible.
            
            Typically used when you want to show the control within a cell of the <see cref="T:Eto.Forms.GridView"/>.
            </remarks>
            <value><c>true</c> to show the control border; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Eto.Forms.DateTimePicker.GetCallback">
            <summary>
            Gets an instance of an object used to perform callbacks to the widget from handler implementations
            </summary>
            <returns>The callback instance to use for this widget</returns>
        </member>
        <member name="T:Eto.Forms.DateTimePicker.ICallback">
            <summary>
            Callback interface for the <see cref="T:Eto.Forms.DateTimePicker"/>.
            </summary>
        </member>
        <member name="M:Eto.Forms.DateTimePicker.ICallback.OnValueChanged(Eto.Forms.DateTimePicker,System.EventArgs)">
            <summary>
            Raises the value changed event.
            </summary>
        </member>
        <member name="T:Eto.Forms.DateTimePicker.Callback">
            <summary>
            Callback implementation for handlers of the <see cref="T:Eto.Forms.DateTimePicker"/>.
            </summary>
        </member>
        <member name="M:Eto.Forms.DateTimePicker.Callback.OnValueChanged(Eto.Forms.DateTimePicker,System.EventArgs)">
            <summary>
            Raises the value changed event.
            </summary>
        </member>
        <member name="T:Eto.Forms.DateTimePicker.IHandler">
            <summary>
            Handler interface for the <see cref="T:Eto.Forms.DateTimePicker"/> control
            </summary>
        </member>
        <member name="P:Eto.Forms.DateTimePicker.IHandler.Value">
            <summary>
            Gets or sets the value of the date/time picker
            </summary>
            <value>The current value.</value>
        </member>
        <member name="P:Eto.Forms.DateTimePicker.IHandler.MinDate">
            <summary>
            Gets or sets the minimum date entered
            </summary>
            <value>The minimum date.</value>
        </member>
        <member name="P:Eto.Forms.DateTimePicker.IHandler.MaxDate">
            <summary>
            Gets or sets the maximum date entered
            </summary>
            <value>The maximum date.</value>
        </member>
        <member name="P:Eto.Forms.DateTimePicker.IHandler.Mode">
            <summary>
            Gets or sets the mode of the date/time picker.
            </summary>
            <value>The picker mode.</value>
        </member>
        <member name="P:Eto.Forms.DateTimePicker.IHandler.TextColor">
            <summary>
            Gets or sets the color of the text.
            </summary>
            <remarks>
            By default, the text will get a color based on the user's theme. However, this is usually black.
            </remarks>
            <value>The color of the text.</value>
        </member>
        <member name="P:Eto.Forms.DateTimePicker.IHandler.ShowBorder">
            <summary>
            Gets or sets a value indicating whether to show the control's border.
            </summary>
            <remarks>
            This is a hint to omit the border of the control and show it as plainly as possible.
            
            Typically used when you want to show the control within a cell of the <see cref="T:Eto.Forms.GridView"/>.
            </remarks>
            <value><c>true</c> to show the control border; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Eto.Forms.DocumentPageEventArgs">
            <summary>
            Arguments for the <see cref="T:Eto.Forms.DocumentControl"/> to get the current page.
            </summary>
        </member>
        <member name="P:Eto.Forms.DocumentPageEventArgs.Page">
            <summary>
            Gets the document page.
            </summary>
            <value>The document page.</value>
        </member>
        <member name="M:Eto.Forms.DocumentPageEventArgs.#ctor(Eto.Forms.DocumentPage)">
            <summary>
            Initializes a new instance of the <see cref="T:Eto.Forms.DocumentPageEventArgs"/> class.
            </summary>
            <param name="page">Page.</param>
        </member>
        <member name="T:Eto.Forms.DocumentPageReorderEventArgs">
            <summary>
            Arguments for the <see cref="T:Eto.Forms.DocumentControl"/> when reordering pages.
            </summary>
        </member>
        <member name="P:Eto.Forms.DocumentPageReorderEventArgs.OldIndex">
            <summary>
            Gets the previous index of the page
            </summary>
            <value>The old index.</value>
        </member>
        <member name="P:Eto.Forms.DocumentPageReorderEventArgs.NewIndex">
            <summary>
            Gets the new index of the page.
            </summary>
            <value>The new index.</value>
        </member>
        <member name="M:Eto.Forms.DocumentPageReorderEventArgs.#ctor(Eto.Forms.DocumentPage,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Eto.Forms.DocumentPageReorderEventArgs"/> class.
            </summary>
            <param name="page">Page that was moved</param>
            <param name="oldIndex">Old index of the page.</param>
            <param name="newIndex">New index of the page.</param>
        </member>
        <member name="T:Eto.Forms.DocumentControl">
            <summary>
            Control to present multiple pages with tab selection and optional reordering and tab closing.
            </summary>
        </member>
        <member name="P:Eto.Forms.DocumentControl.Controls">
            <summary>
            Gets an enumeration of controls that are directly contained by this container
            </summary>
            <value>The contained controls.</value>
        </member>
        <member name="F:Eto.Forms.DocumentControl.PageReorderedEvent">
            <summary>
            Event identifier for the <see cref="E:Eto.Forms.DocumentControl.PageReordered"/> event.
            </summary>
        </member>
        <member name="E:Eto.Forms.DocumentControl.PageClosed">
            <summary>
            Occurs when the <see cref="T:Eto.Forms.DocumentPage"/> is closed.
            </summary>
        </member>
        <member name="E:Eto.Forms.DocumentControl.SelectedIndexChanged">
            <summary>
            Occurs when the <see cref="P:Eto.Forms.DocumentControl.SelectedIndex"/> is changed.
            </summary>
        </member>
        <member name="E:Eto.Forms.DocumentControl.PageReordered">
            <summary>
            Occurs when a page is reordered by the user.
            </summary>
        </member>
        <member name="M:Eto.Forms.DocumentControl.OnPageClosed(Eto.Forms.DocumentPageEventArgs)">
            <summary>
            Raises the <see cref="E:Eto.Forms.DocumentControl.PageClosed"/> event.
            </summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:Eto.Forms.DocumentControl.OnSelectedIndexChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Eto.Forms.DocumentControl.SelectedIndexChanged"/> event.
            </summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:Eto.Forms.DocumentControl.OnPageReordered(Eto.Forms.DocumentPageReorderEventArgs)">
            <summary>
            Raises the <see cref="E:Eto.Forms.DocumentControl.PageReordered"/> event.
            </summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:Eto.Forms.DocumentControl.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Eto.Forms.DocumentControl"/> class.
            </summary>
        </member>
        <member name="M:Eto.Forms.DocumentControl.#ctor(Eto.Forms.DocumentControl.IHandler)">
            <summary>
            Initializes a new instance of the <see cref="T:Eto.Forms.DocumentControl"/> class with the specified handler.
            </summary>
            <param name="handler">Handler for the implementation of the tab control.</param>
        </member>
        <member name="P:Eto.Forms.DocumentControl.SelectedIndex">
            <summary>
            Gets or sets the index of the selected page.
            </summary>
            <value>The index of the selected page.</value>
        </member>
        <member name="P:Eto.Forms.DocumentControl.SelectedPage">
            <summary>
            Gets or sets the currently selected page.
            </summary>
            <value>The selected page.</value>
        </member>
        <member name="P:Eto.Forms.DocumentControl.Pages">
            <summary>
            Gets the collection of tab pages.
            </summary>
            <value>The pages.</value>
        </member>
        <member name="P:Eto.Forms.DocumentControl.AllowReordering">
            <summary>
            Gets or sets a value indicating the tabs can be reordered.
            </summary>
            <value><c>true</c> to allow reordering; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Eto.Forms.DocumentControl.Remove(Eto.Forms.Control)">
            <summary>
            Remove the specified child from the container.
            </summary>
            <param name="child">Child to remove.</param>
        </member>
        <member name="P:Eto.Forms.DocumentControl.SelectedIndexBinding">
            <summary>
            Gets the binding for the <see cref="P:Eto.Forms.DocumentControl.SelectedIndex"/> property.
            </summary>
            <value>The selected index binding.</value>
        </member>
        <member name="M:Eto.Forms.DocumentControl.GetCallback">
            <summary>
            Gets an instance of an object used to perform callbacks to the widget from handler implementations
            </summary>
            <returns>The callback instance to use for this widget</returns>
        </member>
        <member name="T:Eto.Forms.DocumentControl.ICallback">
            <summary>
            Callback interface for the <see cref="T:Eto.Forms.DocumentControl"/>
            </summary>
        </member>
        <member name="M:Eto.Forms.DocumentControl.ICallback.OnPageClosed(Eto.Forms.DocumentControl,Eto.Forms.DocumentPageEventArgs)">
            <summary>
            Raises the page closed event.
            </summary>
        </member>
        <member name="M:Eto.Forms.DocumentControl.ICallback.OnSelectedIndexChanged(Eto.Forms.DocumentControl,System.EventArgs)">
            <summary>
            Raises the selected index changed event.
            </summary>
        </member>
        <member name="M:Eto.Forms.DocumentControl.ICallback.OnPageReordered(Eto.Forms.DocumentControl,Eto.Forms.DocumentPageReorderEventArgs)">
            <summary>
            Raises the page reordered event.
            </summary>
        </member>
        <member name="T:Eto.Forms.DocumentControl.Callback">
            <summary>
            Callback implementation for handlers of the <see cref="T:Eto.Forms.DocumentControl"/>
            </summary>
        </member>
        <member name="M:Eto.Forms.DocumentControl.Callback.OnPageClosed(Eto.Forms.DocumentControl,Eto.Forms.DocumentPageEventArgs)">
            <summary>
            Raises the page closed event.
            </summary>
        </member>
        <member name="M:Eto.Forms.DocumentControl.Callback.OnPageReordered(Eto.Forms.DocumentControl,Eto.Forms.DocumentPageReorderEventArgs)">
            <summary>
            Raises the page reordered event.
            </summary>
        </member>
        <member name="M:Eto.Forms.DocumentControl.Callback.OnSelectedIndexChanged(Eto.Forms.DocumentControl,System.EventArgs)">
            <summary>
            Raises the selected index changed event.
            </summary>
        </member>
        <member name="T:Eto.Forms.DocumentControl.IHandler">
            <summary>
            Handler interface for the <see cref="T:Eto.Forms.DocumentControl"/>
            </summary>
        </member>
        <member name="P:Eto.Forms.DocumentControl.IHandler.SelectedIndex">
            <summary>
            Gets or sets the index of the selected tab.
            </summary>
            <value>The index of the selected tab.</value>
        </member>
        <member name="M:Eto.Forms.DocumentControl.IHandler.InsertPage(System.Int32,Eto.Forms.DocumentPage)">
            <summary>
            Inserts a tab at the specified index.
            </summary>
            <param name="index">Index to insert the tab.</param>
            <param name="page">Page to insert.</param>
        </member>
        <member name="M:Eto.Forms.DocumentControl.IHandler.GetPage(System.Int32)">
            <summary>
            Gets the tab.
            </summary>
            <returns>The tab.</returns>
            <param name="index">The tab index.</param>
        </member>
        <member name="M:Eto.Forms.DocumentControl.IHandler.GetPageCount">
            <summary>
            Gets the tab count.
            </summary>
            <returns>The tab count.</returns>
        </member>
        <member name="M:Eto.Forms.DocumentControl.IHandler.RemovePage(System.Int32)">
            <summary>
            Removes the specified tab.
            </summary>
            <param name="index">Index of the page to remove.</param>
        </member>
        <member name="P:Eto.Forms.DocumentControl.IHandler.AllowReordering">
            <summary>
            Gets or sets a value indicating the tabs can be reordered.
            </summary>
            <value><c>true</c> to allow reordering; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Eto.Forms.DocumentPage">
            <summary>
            Control for a page in a <see cref="T:Eto.Forms.DocumentControl"/>
            </summary>
        </member>
        <member name="M:Eto.Forms.DocumentPage.#ctor(Eto.Forms.Control,System.Nullable{Eto.Drawing.Padding})">
            <summary>
            Initializes a new instance of the <see cref="T:Eto.Forms.DocumentPage"/> class.
            </summary>
            <param name="control">Control.</param>
            <param name="padding">Padding.</param>
        </member>
        <member name="M:Eto.Forms.DocumentPage.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Eto.Forms.DocumentPage"/> class.
            </summary>
        </member>
        <member name="E:Eto.Forms.DocumentPage.Closed">
            <summary>
            Occurs when the tab is closed.
            </summary>
        </member>
        <member name="E:Eto.Forms.DocumentPage.Click">
            <summary>
            Occurs when the tab is clicked to select it.
            </summary>
        </member>
        <member name="M:Eto.Forms.DocumentPage.OnClose(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Eto.Forms.DocumentPage.Closed"/> event.
            </summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:Eto.Forms.DocumentPage.OnClick(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Eto.Forms.DocumentPage.Click"/> event.
            </summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="P:Eto.Forms.DocumentPage.Closable">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Eto.Forms.DocumentPage"/> is closable.
            </summary>
            <value><c>true</c> if closable; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Eto.Forms.DocumentPage.Image">
            <summary>
            Gets or sets the image of the page.
            </summary>
            <remarks>
            It is usally good to use an <see cref="T:Eto.Drawing.Icon"/> for the image with multiple sizes, so that scaling won't be needed
            to fit the image in the space.
            Usually you'd need 16x16 (desktop), 32x32 (iOS), and 64x64 (iOS Retina) variations.
            </remarks>
            <value>The tab's image to display.</value>
        </member>
        <member name="P:Eto.Forms.DocumentPage.Text">
            <summary>
            Gets or sets the title text of the page.
            </summary>
            <value>The title text.</value>
        </member>
        <member name="T:Eto.Forms.DocumentPage.IHandler">
            <summary>
            Handler interface for the <see cref="T:Eto.Forms.DocumentPage"/>
            </summary>
        </member>
        <member name="P:Eto.Forms.DocumentPage.IHandler.Closable">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Eto.Forms.DocumentPage.IHandler"/> is closable.
            </summary>
            <value><c>true</c> if closable; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Eto.Forms.DocumentPage.IHandler.Image">
            <summary>
            Gets or sets the image of the page.
            </summary>
            <value>The tab's image.</value>
        </member>
        <member name="P:Eto.Forms.DocumentPage.IHandler.Text">
            <summary>
            Gets or sets the title text of the page.
            </summary>
            <value>The title text.</value>
        </member>
        <member name="T:Eto.Forms.DragEffects">
            <summary>
            Enumeration of drag actions.
            </summary>
        </member>
        <member name="F:Eto.Forms.DragEffects.None">
            <summary>
            No drag operation.
            </summary>
        </member>
        <member name="F:Eto.Forms.DragEffects.Copy">
            <summary>
            Copy data operation.
            </summary>
        </member>
        <member name="F:Eto.Forms.DragEffects.Move">
            <summary>
            Move data operation.
            </summary>
        </member>
        <member name="F:Eto.Forms.DragEffects.Link">
            <summary>
            Link data operation.
            </summary>
        </member>
        <member name="F:Eto.Forms.DragEffects.All">
            <summary>
            All data operations.
            </summary>
        </member>
        <member name="T:Eto.Forms.DragEventArgs">
            <summary>
            Drag/Drop event arguments.
            </summary>
        </member>
        <member name="P:Eto.Forms.DragEventArgs.Source">
            <summary>
            Gets source control of drag operation.
            </summary>
        </member>
        <member name="P:Eto.Forms.DragEventArgs.Data">
            <summary>
            Gets drag data.
            </summary>
        </member>
        <member name="P:Eto.Forms.DragEventArgs.AllowedEffects">
            <summary>
            Gets allowed drag/drop operation.
            </summary>
        </member>
        <member name="P:Eto.Forms.DragEventArgs.Effects">
            <summary>
            Gets or sets target drag/drop operation.
            </summary>
        </member>
        <member name="P:Eto.Forms.DragEventArgs.Location">
            <summary>
            Location of the cursor in control coordinates
            </summary>
        </member>
        <member name="P:Eto.Forms.DragEventArgs.Modifiers">
            <summary>
            Modifier keys pressed
            </summary>
        </member>
        <member name="P:Eto.Forms.DragEventArgs.Buttons">
            <summary>
            The mouse buttons pressed during the drag
            </summary>
        </member>
        <member name="P:Eto.Forms.DragEventArgs.ControlObject">
            <summary>
            Gets the instance of the platform-specific object associated with the drag event
            </summary>
            <remarks>
            This can be used by platform implementations to store additional information about the drag operation, 
            such as the parent object and child index for <see cref="M:Eto.Forms.TreeGridView.GetDragInfo(Eto.Forms.DragEventArgs)"/>.
            </remarks>
            <value>The platform-specific control object.</value>
        </member>
        <member name="M:Eto.Forms.DragEventArgs.#ctor(Eto.Forms.Control,Eto.Forms.DataObject,Eto.Forms.DragEffects,Eto.Drawing.PointF,Eto.Forms.Keys,Eto.Forms.MouseButtons,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Eto.Forms.DragEventArgs"/> class.
            </summary>
            <param name="source">Drag operation source control.</param>
            <param name="data">Drag data.</param>
            <param name="allowedEffects">Allowed operation.</param>
            <param name="location">Location of the mouse cursor for this event</param>
            <param name="modifiers">Modifier buttons pressed for this event</param>
            <param name="buttons">Mouse buttons pressed for this event</param>
            <param name="controlObject">Platform-specific object to store additional arguments/info</param>
        </member>
        <member name="T:Eto.Forms.PaintEventArgs">
            <summary>
            Event arguments when painting using the <see cref="E:Eto.Forms.Drawable.Paint"/> event
            </summary>
        </member>
        <member name="M:Eto.Forms.PaintEventArgs.#ctor(Eto.Drawing.Graphics,Eto.Drawing.RectangleF)">
            <summary>
            Initializes a new instance of the <see cref="T:Eto.Forms.PaintEventArgs"/> class.
            </summary>
            <param name="graphics">Graphics for the paint event</param>
            <param name="clipRectangle">Rectangle of the region being painted</param>
        </member>
        <member name="P:Eto.Forms.PaintEventArgs.Graphics">
            <summary>
            Gets the graphics for the paint operation
            </summary>
            <value>The graphics.</value>
        </member>
        <member name="P:Eto.Forms.PaintEventArgs.ClipRectangle">
            <summary>
            Gets the rectangle of the region being painted
            </summary>
            <remarks>
            This should be used to optimize what is drawn by only drawing content that intersects with this rectangle.
            </remarks>
            <value>The clip rectangle for the current paint operation</value>
        </member>
        <member name="T:Eto.Forms.Drawable">
            <summary>
            Control with a paintable user interface
            </summary>
            <remarks>
            The drawable control is used to perform custom painting.
            </remarks>
            <copyright>(c) 2014 by Curtis Wensley</copyright>
            <license type="BSD-3">See LICENSE for full terms</license>
        </member>
        <member name="E:Eto.Forms.Drawable.Paint">
            <summary>
            Event to handle custom painting on the control
            </summary>
        </member>
        <member name="M:Eto.Forms.Drawable.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Eto.Forms.Drawable"/> class.
            </summary>
        </member>
        <member name="M:Eto.Forms.Drawable.#ctor(Eto.Forms.Drawable.IHandler)">
            <summary>
            Initializes a new instance of the <see cref="T:Eto.Forms.Drawable"/> class with the specified handler
            </summary>
            <param name="handler">Handler interface for the drawable</param>
        </member>
        <member name="M:Eto.Forms.Drawable.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Eto.Forms.Drawable"/> class with a hint whether it is intended for a large canvas
            </summary>
            <remarks>
            Some platforms can optimize large canvases, such as mobile platforms by tiling the painting of the canvas.
            
            A large canvas is one that is larger than the intended screen size.
            
            Platforms are not required to change the behaviour of the drawable depending on this value.  Desktop platforms
            typically do not change their behaviour based on this.
            </remarks>
            <param name="largeCanvas">If set to <c>true</c> the drawable is created to have a large canvas.</param>
        </member>
        <member name="M:Eto.Forms.Drawable.OnPaint(Eto.Forms.PaintEventArgs)">
            <summary>
            Raises the <see cref="E:Eto.Forms.Drawable.Paint"/> event
            </summary>
            <param name="e">Paint event arguments</param>
        </member>
        <member name="P:Eto.Forms.Drawable.SupportsCreateGraphics">
            <summary>
            Gets a value indicating whether this <see cref="T:Eto.Forms.Drawable"/> supports the <see cref="M:Eto.Forms.Drawable.CreateGraphics"/> method
            </summary>
            <value><c>true</c> if supports creating graphics; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Eto.Forms.Drawable.CreateGraphics">
            <summary>
            Creates a graphics context for this control
            </summary>
            <remarks>
            This can be used to draw directly onto the control.
            Ensure you dispose the graphics object after performing any painting.
            Note that not all platforms support drawing directly on the control, use <see cref="P:Eto.Forms.Drawable.SupportsCreateGraphics"/>.
            </remarks>
            <returns>A new graphics context that can be used to draw directly onto the control</returns>
        </member>
        <member name="P:Eto.Forms.Drawable.CanFocus">
            <summary>
            Gets or sets a value indicating whether this instance can recieve the input/keyboard focus
            </summary>
            <remarks>
            If this is true, by default all platforms will focus the control automatically when it is clicked.
            </remarks>
            <value><c>true</c> if this instance can be focussed; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Eto.Forms.Drawable.Update(Eto.Drawing.Rectangle)">
            <summary>
            Update the specified <paramref name="region"/> directly
            </summary>
            <remarks>
            This forces the region to be painted immediately.  On some platforms, this will be similar to calling
            <see cref="M:Eto.Forms.Control.Invalidate(Eto.Drawing.Rectangle)"/>, and queue the repaint instead of blocking until it is painted.
            </remarks>
            <param name="region">Region to update the control</param>
        </member>
        <member name="M:Eto.Forms.Drawable.GetCallback">
            <summary>
            Gets an instance of an object used to perform callbacks to the widget from handler implementations
            </summary>
            <returns>The callback instance to use for this widget</returns>
        </member>
        <member name="T:Eto.Forms.Drawable.ICallback">
            <summary>
            Callback interface for <see cref="T:Eto.Forms.Drawable"/>
            </summary>
        </member>
        <member name="M:Eto.Forms.Drawable.ICallback.OnPaint(Eto.Forms.Drawable,Eto.Forms.PaintEventArgs)">
            <summary>
            Raises the paint event.
            </summary>
        </member>
        <member name="T:Eto.Forms.Drawable.Callback">
            <summary>
            Callback implementation for handlers of <see cref="T:Eto.Forms.Drawable"/>
            </summary>
        </member>
        <member name="M:Eto.Forms.Drawable.Callback.OnPaint(Eto.Forms.Drawable,Eto.Forms.PaintEventArgs)">
            <summary>
            Raises the paint event.
            </summary>
        </member>
        <member name="T:Eto.Forms.Drawable.IHandler">
            <summary>
            Handler interface for the <see cref="T:Eto.Forms.Drawable"/> control
            </summary>
            <copyright>(c) 2014 by Curtis Wensley</copyright>
            <license type="BSD-3">See LICENSE for full terms</license>
        </member>
        <member name="P:Eto.Forms.Drawable.IHandler.SupportsCreateGraphics">
            <summary>
            Gets a value indicating whether this <see cref="T:Eto.Forms.Drawable"/> supports the <see cref="M:Eto.Forms.Drawable.IHandler.CreateGraphics"/> method
            </summary>
            <value><c>true</c> if supports creating graphics; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Eto.Forms.Drawable.IHandler.Create">
            <summary>
            Creates a new drawable control without specifying a large canvas or not
            </summary>
        </member>
        <member name="M:Eto.Forms.Drawable.IHandler.Create(System.Boolean)">
            <summary>
            Called when creating a drawable control with a hint whether it is intended for a large canvas
            </summary>
            <remarks>
            Some platforms can optimize large canvases, such as mobile platforms by tiling the painting of the canvas.
            
            A large canvas is one that is larger than the intended screen size.
            
            Platforms are not required to change the behaviour of the drawable depending on this value.  Desktop platforms
            typically do not change their behaviour based on this.
            </remarks>
            <param name="largeCanvas">If set to <c>true</c> the drawable is created to have a large canvas.</param>
        </member>
        <member name="M:Eto.Forms.Drawable.IHandler.Update(Eto.Drawing.Rectangle)">
            <summary>
            Update the specified <paramref name="region"/> directly
            </summary>
            <remarks>
            This forces the region to be painted immediately.  On some platforms, this will be similar to calling
            <see cref="M:Eto.Forms.Control.Invalidate(Eto.Drawing.Rectangle)"/>, and queue the repaint instead of blocking until it is painted.
            </remarks>
            <param name="region">Region to update the control</param>
        </member>
        <member name="P:Eto.Forms.Drawable.IHandler.CanFocus">
            <summary>
            Gets or sets a value indicating whether this instance can recieve the input/keyboard focus
            </summary>
            <remarks>
            If this is true, by default all platforms will focus the control automatically when it is clicked.
            </remarks>
            <value><c>true</c> if this instance can be focussed; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Eto.Forms.Drawable.IHandler.CreateGraphics">
            <summary>
            Creates a graphics context for this control
            </summary>
            <remarks>
            This can be used to draw directly onto the control.
            Ensure you dispose the graphics object after performing any painting.
            Note that not all platforms support drawing directly on the control, use <see cref="P:Eto.Forms.Drawable.IHandler.SupportsCreateGraphics"/>.
            </remarks>
            <returns>A new graphics context that can be used to draw directly onto the control</returns>
        </member>
        <member name="T:Eto.Forms.DropDown">
            <summary>
            Presents a drop down to select from a list of items
            </summary>
        </member>
        <member name="M:Eto.Forms.DropDown.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Eto.Forms.DropDown"/> class.
            </summary>
        </member>
        <member name="P:Eto.Forms.DropDown.ItemImageBinding">
            <summary>
            Gets or sets the binding to get the image for each item. 
            </summary>
            <remarks>
            By default this looks for the "Image" property of the item, and also works if you use <see cref="T:Eto.Forms.ImageListItem"/>.
            
            This will be ignored when creating a <see cref="T:Eto.Forms.ComboBox"/>, and is only supported with the <see cref="T:Eto.Forms.DropDown"/> directly.
            </remarks>
            <value>The binding to get the image for each item.</value>
        </member>
        <member name="P:Eto.Forms.DropDown.ShowBorder">
            <summary>
            Gets or sets a value indicating whether to show the control's border.
            </summary>
            <remarks>
            This is a hint to omit the border of the control and show it as plainly as possible.
            
            Typically used when you want to show the control within a cell of the <see cref="T:Eto.Forms.GridView"/>.
            </remarks>
            <value><c>true</c> to show the control border; otherwise, <c>false</c>.</value>
        </member>
        <member name="F:Eto.Forms.DropDown.DropDownOpeningEvent">
            <summary>
            Event identifier for handlers when attaching the <see cref="E:Eto.Forms.DropDown.DropDownOpening"/> event
            </summary>
        </member>
        <member name="E:Eto.Forms.DropDown.DropDownOpening">
            <summary>
            Occurs right before the drop down is opened.
            </summary>
            <remarks>
            This is useful so you can fill the items of the drop down only when they are needed.
            </remarks>
        </member>
        <member name="M:Eto.Forms.DropDown.OnDropDownOpening(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Eto.Forms.DropDown.DropDownOpening"/> event.
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="F:Eto.Forms.DropDown.DropDownClosedEvent">
            <summary>
            Event identifier for handlers when attaching the <see cref="E:Eto.Forms.DropDown.DropDownClosed"/> event.
            </summary>
        </member>
        <member name="E:Eto.Forms.DropDown.DropDownClosed">
            <summary>
            Occurs when the drop down is closed.
            </summary>
        </member>
        <member name="M:Eto.Forms.DropDown.OnDropDownClosed(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Eto.Forms.DropDown.DropDownClosed"/> event
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:Eto.Forms.DropDown.GetCallback">
            <summary>
            Gets the callback.
            </summary>
            <returns>The callback.</returns>
        </member>
        <member name="T:Eto.Forms.DropDown.ICallback">
            <summary>
            Callback interface for the DropDown
            </summary>
        </member>
        <member name="M:Eto.Forms.DropDown.ICallback.OnDropDownOpening(Eto.Forms.DropDown,System.EventArgs)">
            <summary>
            Raises the <see cref="E:Eto.Forms.DropDown.DropDownOpening"/> event.
            </summary>
            <param name="widget">Widget to raise the event</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:Eto.Forms.DropDown.ICallback.OnDropDownClosed(Eto.Forms.DropDown,System.EventArgs)">
            <summary>
            Raises the <see cref="E:Eto.Forms.DropDown.DropDownClosed"/> event
            </summary>
            <param name="widget">Widget to raise the event</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="T:Eto.Forms.DropDown.Callback">
            <summary>
            Callback implementation for the DropDown
            </summary>
        </member>
        <member name="M:Eto.Forms.DropDown.Callback.OnDropDownOpening(Eto.Forms.DropDown,System.EventArgs)">
            <summary>
            Raises the <see cref="E:Eto.Forms.DropDown.DropDownOpening"/> event.
            </summary>
            <param name="widget">Widget to raise the event</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:Eto.Forms.DropDown.Callback.OnDropDownClosed(Eto.Forms.DropDown,System.EventArgs)">
            <summary>
            Raises the <see cref="E:Eto.Forms.DropDown.DropDownClosed"/> event
            </summary>
            <param name="widget">Widget to raise the event</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="T:Eto.Forms.DropDown.IHandler">
            <summary>
            Handler interface for the <see cref="T:Eto.Forms.DropDown"/>
            </summary>
        </member>
        <member name="P:Eto.Forms.DropDown.IHandler.ShowBorder">
            <summary>
            Gets or sets a value indicating whether to show the control's border.
            </summary>
            <remarks>
            This is a hint to omit the border of the control and show it as plainly as possible.
            
            Typically used when you want to show the control within a cell of the <see cref="T:Eto.Forms.GridView"/>.
            </remarks>
            <value><c>true</c> to show the control border; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Eto.Forms.AddValueEventArgs`1">
            <summary>
            Arguments for controlling whether values should be added to a list or control
            </summary>
        </member>
        <member name="P:Eto.Forms.AddValueEventArgs`1.Value">
            <summary>
            Value being added to the combo box
            </summary>
        </member>
        <member name="P:Eto.Forms.AddValueEventArgs`1.ShouldAdd">
            <summary>
            True if the value should be added, false otherwise
            </summary>
        </member>
        <member name="M:Eto.Forms.AddValueEventArgs`1.#ctor(`0,System.Boolean)">
            <summary>
            Initializes a new instance of the AddValueEventArgs class
            </summary>
            <param name="value">value to be added</param>
            <param name="shouldAdd">true if by default the item will be added, false otherwise</param>
        </member>
        <member name="T:Eto.Forms.EnumDropDown`1">
            <summary>
            Combo box for an enumeration
            </summary>
            <typeparam name="T">Enumeration type to fill the values with</typeparam>
        </member>
        <member name="E:Eto.Forms.EnumDropDown`1.AddValue">
            <summary>
            Event to handle when a value of the enumeration is added to the combo box
            </summary>
        </member>
        <member name="M:Eto.Forms.EnumDropDown`1.OnAddValue(Eto.Forms.AddValueEventArgs{`0})">
            <summary>
            Handles the <see cref="E:Eto.Forms.EnumDropDown`1.AddValue"/> event
            </summary>
        </member>
        <member name="P:Eto.Forms.EnumDropDown`1.SelectedValue">
            <summary>
            Gets or sets the currently selected enumeration value
            </summary>
        </member>
        <member name="P:Eto.Forms.EnumDropDown`1.GetText">
            <summary>
            Gets or sets a delegate used to get the text value for each item.
            </summary>
            <remarks>
            You can use this delegate to provide translated or custom text for each enumeration.
            Otherwise, the name of the enum is used.
            </remarks>
        </member>
        <member name="P:Eto.Forms.EnumDropDown`1.SortAlphabetically">
            <summary>
            Gets or sets a value indicating that the items in the list are sorted alphabetically, instead of by numerical value of the enumeration
            </summary>
        </member>
        <member name="M:Eto.Forms.EnumDropDown`1.CreateDefaultDataStore">
            <summary>
            Creates the default data store for the list.
            </summary>
            <remarks>This is used to create a data store if one is not specified by the user.
            This can be used by subclasses to provide default items to populate the list.</remarks>
            <returns>The default data store.</returns>
        </member>
        <member name="P:Eto.Forms.EnumDropDown`1.SelectedValueBinding">
            <summary>
            Gets a new binding for the <see cref="P:Eto.Forms.EnumDropDown`1.SelectedValue"/> property.
            </summary>
            <value>A new selected value binding.</value>
        </member>
        <member name="T:Eto.Forms.EnumRadioButtonList`1">
            <summary>
            Radio button list based on an enumeration
            </summary>
        </member>
        <member name="E:Eto.Forms.EnumRadioButtonList`1.AddValue">
            <summary>
            Event to handle when a value of the enumeration is added to the combo box
            </summary>
        </member>
        <member name="M:Eto.Forms.EnumRadioButtonList`1.OnAddValue(Eto.Forms.AddValueEventArgs{`0})">
            <summary>
            Handles the <see cref="E:Eto.Forms.EnumRadioButtonList`1.AddValue"/> event
            </summary>
        </member>
        <member name="P:Eto.Forms.EnumRadioButtonList`1.SelectedValue">
            <summary>
            Gets or sets the currently selected enumeration value
            </summary>
        </member>
        <member name="P:Eto.Forms.EnumRadioButtonList`1.GetText">
            <summary>
            Gets or sets a delegate used to get the text value for each item.
            </summary>
            <remarks>
            You can use this delegate to provide translated or custom text for each enumeration.
            Otherwise, the name of the enum is used.
            </remarks>
        </member>
        <member name="P:Eto.Forms.EnumRadioButtonList`1.SortAlphabetically">
            <summary>
            Gets or sets a value indicating that the items in the list are sorted alphabetically, instead of by numerical value of the enumeration
            </summary>
        </member>
        <member name="M:Eto.Forms.EnumRadioButtonList`1.CreateDefaultItems">
            <summary>
            Creates the default items.
            </summary>
            <returns>The default items.</returns>
        </member>
        <member name="P:Eto.Forms.EnumRadioButtonList`1.SelectedValueBinding">
            <summary>
            Gets a binding to the <see cref="P:Eto.Forms.EnumRadioButtonList`1.SelectedValue"/> property.
            </summary>
            <value>The selected value binding.</value>
        </member>
        <member name="T:Eto.Forms.Expander">
            <summary>
            A control with a panel that can be expanded or collapsed with a header and button.
            </summary>
        </member>
        <member name="F:Eto.Forms.Expander.ExpandedChangedEvent">
            <summary>
            Identifier for the <see cref="E:Eto.Forms.Expander.ExpandedChanged"/> event.
            </summary>
        </member>
        <member name="E:Eto.Forms.Expander.ExpandedChanged">
            <summary>
            Occurs when the <see cref="P:Eto.Forms.Expander.Expanded"/> property changes.
            </summary>
        </member>
        <member name="M:Eto.Forms.Expander.OnExpandedChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Eto.Forms.Expander.ExpandedChanged"/> event.
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="P:Eto.Forms.Expander.Controls">
            <summary>
            Gets an enumeration of controls that are directly contained by this container
            </summary>
            <value>The contained controls.</value>
        </member>
        <member name="M:Eto.Forms.Expander.GetCallback">
            <summary>
            Gets an instance of an object used to perform callbacks to the widget from handler implementations
            </summary>
            <returns>The callback.</returns>
        </member>
        <member name="P:Eto.Forms.Expander.Expanded">
            <summary>
            Gets or sets a value indicating whether the <see cref="P:Eto.Forms.Panel.Content"/> is expanded/visible.
            </summary>
            <value><c>true</c> if expanded; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Eto.Forms.Expander.Header">
            <summary>
            Gets or sets the header control.
            </summary>
            <value>The header control.</value>
        </member>
        <member name="T:Eto.Forms.Expander.ICallback">
            <summary>
            Callback interface for the <see cref="T:Eto.Forms.Expander"/>
            </summary>
        </member>
        <member name="M:Eto.Forms.Expander.ICallback.OnExpandedChanged(Eto.Forms.Expander,System.EventArgs)">
            <summary>
            Raises the expanded changed event.
            </summary>
            <param name="widget">Widget to raise the event.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="T:Eto.Forms.Expander.Callback">
            <summary>
            Callback implementation for the <see cref="T:Eto.Forms.Expander"/>
            </summary>
        </member>
        <member name="M:Eto.Forms.Expander.Callback.OnExpandedChanged(Eto.Forms.Expander,System.EventArgs)">
            <summary>
            Raises the expanded changed event.
            </summary>
            <param name="widget">Widget to raise the event.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="T:Eto.Forms.Expander.IHandler">
            <summary>
            Handler interface for platform implementations of the <see cref="T:Eto.Forms.Expander"/>.
            </summary>
        </member>
        <member name="P:Eto.Forms.Expander.IHandler.Expanded">
            <summary>
            Gets or sets a value indicating whether the <see cref="P:Eto.Forms.Panel.IHandler.Content"/> is expanded/visible.
            </summary>
            <value><c>true</c> if expanded; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Eto.Forms.Expander.IHandler.Header">
            <summary>
            Gets or sets the header control.
            </summary>
            <value>The header control.</value>
        </member>
        <member name="T:Eto.Forms.FilePicker">
            <summary>
            Control for picking a file or folder.
            </summary>
        </member>
        <member name="M:Eto.Forms.FilePicker.GetCallback">
            <summary>
            Gets an instance of an object used to perform callbacks to the widget from handler implementations.
            </summary>
            <returns>The callback instance to use for this widget.</returns>
        </member>
        <member name="P:Eto.Forms.FilePicker.CurrentFilterIndex">
            <summary>
            Gets or sets the index of the current filter in the <see cref="P:Eto.Forms.FilePicker.Filters"/> collection
            </summary>
            <seealso cref="P:Eto.Forms.FilePicker.Filters"/>
            <seealso cref="P:Eto.Forms.FilePicker.CurrentFilter"/>
            <value>The index of the current filter, or -1 if none is selected.</value>
        </member>
        <member name="P:Eto.Forms.FilePicker.CurrentFilter">
            <summary>
            Gets or sets the currently selected filter from the <see cref="P:Eto.Forms.FilePicker.Filters"/> collection.
            </summary>
            <remarks>
            This should always match an instance of a filter in the <see cref="P:Eto.Forms.FilePicker.Filters"/> collection, otherwise
            the current filter will be set to null.
            </remarks>
            <seealso cref="P:Eto.Forms.FilePicker.Filters"/>
            <value>The current filter.</value>
        </member>
        <member name="P:Eto.Forms.FilePicker.Filters">
            <summary>
            Gets the collection of available file filters the user can select from.
            </summary>
            <remarks>
            Add entries to this collection to set the filters the user can select when the file dialog is shown.
            
            Some platforms may either disable (OS X) or hide (GTK/WinForms/WPF) files that do not match the currently selected filter.
            </remarks>
            <seealso cref="P:Eto.Forms.FilePicker.CurrentFilterIndex"/>
            <seealso cref="P:Eto.Forms.FilePicker.CurrentFilter"/>
            <value>The filters that the user can select.</value>
        </member>
        <member name="P:Eto.Forms.FilePicker.FileAction">
            <summary>
            Gets or sets <see cref="P:Eto.Forms.FilePicker.FileAction"/> that is used when the user is selecting the file.
            </summary>
            <value>The file action.</value>
        </member>
        <member name="P:Eto.Forms.FilePicker.FilePath">
            <summary>
            Gets or sets the full path of the file that is selected.
            </summary>
            <value>The path of the file.</value>
        </member>
        <member name="P:Eto.Forms.FilePicker.Title">
            <summary>
            Gets or sets the title of the dialog that the control will show.
            </summary>
            <value>The title of the dialog.</value>
        </member>
        <member name="T:Eto.Forms.FilePicker.IHandler">
            <summary>
            Handler interface for the <see cref="T:Eto.Forms.FilePicker"/> control
            </summary>
        </member>
        <member name="P:Eto.Forms.FilePicker.IHandler.FileAction">
            <summary>
            Gets or sets <see cref="P:Eto.Forms.FilePicker.IHandler.FileAction"/> that is used when the user is selecting the file.
            </summary>
            <value>The file action.</value>
        </member>
        <member name="P:Eto.Forms.FilePicker.IHandler.FilePath">
            <summary>
            Gets or sets the full path of the file that is selected
            </summary>
            <value>The path of the file.</value>
        </member>
        <member name="P:Eto.Forms.FilePicker.IHandler.CurrentFilterIndex">
            <summary>
            Gets or sets the index of the current filter in the <see cref="P:Eto.Forms.FilePicker.Filters"/> collection
            </summary>
            <value>The index of the current filter.</value>
        </member>
        <member name="P:Eto.Forms.FilePicker.IHandler.Title">
            <summary>
            Gets or sets the title of the dialog that the control will show.
            </summary>
            <value>The title of the dialog.</value>
        </member>
        <member name="M:Eto.Forms.FilePicker.IHandler.ClearFilters">
            <summary>
            Clears all filters
            </summary>
        </member>
        <member name="M:Eto.Forms.FilePicker.IHandler.InsertFilter(System.Int32,Eto.Forms.FileFilter)">
            <summary>
            Inserts a filter at the specified index
            </summary>
            <param name="index">Index to insert the filter</param>
            <param name="filter">Filter to insert</param>
        </member>
        <member name="M:Eto.Forms.FilePicker.IHandler.RemoveFilter(System.Int32)">
            <summary>
            Removes a filter at the specified index
            </summary>
            <param name="index">Index of the filter to remove</param>
        </member>
        <member name="F:Eto.Forms.FilePicker.FilePathChangedEvent">
            <summary>
            Event identifier for handlers when attaching the <see cref="E:Eto.Forms.FilePicker.FilePathChanged"/> event.
            </summary>
        </member>
        <member name="E:Eto.Forms.FilePicker.FilePathChanged">
            <summary>
            Event to handle when the user selects a new file.
            </summary>
        </member>
        <member name="M:Eto.Forms.FilePicker.OnFilePathChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Eto.Forms.FilePicker.FilePathChanged"/> event
            </summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="T:Eto.Forms.FilePicker.ICallback">
            <summary>
            Callback interface for <see cref="T:Eto.Forms.FilePicker"/>
            </summary>
        </member>
        <member name="M:Eto.Forms.FilePicker.ICallback.OnFilePathChanged(Eto.Forms.FilePicker,System.EventArgs)">
            <summary>
            Raises file path changed event.
            </summary>
        </member>
        <member name="T:Eto.Forms.FilePicker.Callback">
            <summary>
            Callback implementation for handlers of <see cref="T:Eto.Forms.FilePicker"/>
            </summary>
        </member>
        <member name="M:Eto.Forms.FilePicker.Callback.OnFilePathChanged(Eto.Forms.FilePicker,System.EventArgs)">
            <summary>
            Raises file path changed event.
            </summary>
        </member>
        <member name="T:Eto.Forms.FontPicker">
            <summary>
            Control to show and pick a font.
            </summary>
        </member>
        <member name="M:Eto.Forms.FontPicker.GetCallback">
            <summary>
            Gets an instance of an object used to perform callbacks to the widget from handler implementations.
            </summary>
            <returns>The callback instance to use for this widget.</returns>
        </member>
        <member name="M:Eto.Forms.FontPicker.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Eto.Forms.FontPicker"/> class.
            </summary>
        </member>
        <member name="M:Eto.Forms.FontPicker.#ctor(Eto.Drawing.Font)">
            <summary>
            Initializes a new instance of the <see cref="T:Eto.Forms.FontPicker"/> class.
            </summary>
            <param name="font">Font to set as the current value..</param>
        </member>
        <member name="P:Eto.Forms.FontPicker.Value">
            <summary>
            Gets or sets the currently selected font.
            </summary>
            <value>The selected font.</value>
        </member>
        <member name="T:Eto.Forms.FontPicker.IHandler">
            <summary>
            Handler interface for the <see cref="T:Eto.Forms.FontPicker"/>.
            </summary>
        </member>
        <member name="P:Eto.Forms.FontPicker.IHandler.Value">
            <summary>
            Gets or sets the currently selected font.
            </summary>
            <value>The selected font.</value>
        </member>
        <member name="F:Eto.Forms.FontPicker.ValueChangedEvent">
            <summary>
            Identifier for handlers when attaching the <see cref="E:Eto.Forms.FontPicker.ValueChanged"/> event.
            </summary>
        </member>
        <member name="E:Eto.Forms.FontPicker.ValueChanged">
            <summary>
            Occurs when the <see cref="T:Eto.Drawing.Font"/> is changed.
            </summary>
        </member>
        <member name="M:Eto.Forms.FontPicker.OnValueChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Eto.Forms.FontPicker.ValueChanged"/> event.
            </summary>
            <param name="e">E.</param>
        </member>
        <member name="T:Eto.Forms.FontPicker.ICallback">
            <summary>
            Callback interface for handlers of the <see cref="T:Eto.Forms.FontPicker"/>.
            </summary>
        </member>
        <member name="M:Eto.Forms.FontPicker.ICallback.OnValueChanged(Eto.Forms.FontPicker,System.EventArgs)">
            <summary>
            Raises the value changed event.
            </summary>
        </member>
        <member name="T:Eto.Forms.FontPicker.Callback">
            <summary>
            Callback implementation for handlers of the <see cref="T:Eto.Forms.FontPicker"/>.
            </summary>
        </member>
        <member name="M:Eto.Forms.FontPicker.Callback.OnValueChanged(Eto.Forms.FontPicker,System.EventArgs)">
            <summary>
            Raises the value changed event.
            </summary>
        </member>
        <member name="T:Eto.Forms.GridColumnEventArgs">
            <summary>
            Event arguments for <see cref="T:Eto.Forms.Grid"/> events relating to a specific column
            </summary>
            <copyright>(c) 2014 by Curtis Wensley</copyright>
            <license type="BSD-3">See LICENSE for full terms</license>
        </member>
        <member name="P:Eto.Forms.GridColumnEventArgs.Column">
            <summary>
            Gets the column that originated the event
            </summary>
            <value>The column.</value>
        </member>
        <member name="M:Eto.Forms.GridColumnEventArgs.#ctor(Eto.Forms.GridColumn)">
            <summary>
            Initializes a new instance of the <see cref="T:Eto.Forms.GridColumnEventArgs"/> class.
            </summary>
            <param name="column">Column that originated the event</param>
        </member>
        <member name="T:Eto.Forms.GridCellMouseEventArgs">
            <summary>
            Event arguments for cell-based events of a <see cref="T:Eto.Forms.Grid"/> triggered by the mouse.
            </summary>
        </member>
        <member name="P:Eto.Forms.GridCellMouseEventArgs.GridColumn">
            <summary>
            Gets the grid column that triggered the event.
            </summary>
            <value>The grid column.</value>
        </member>
        <member name="P:Eto.Forms.GridCellMouseEventArgs.Row">
            <summary>
            Gets the row that triggered the event, or -1 if no row.
            </summary>
            <value>The grid row.</value>
        </member>
        <member name="P:Eto.Forms.GridCellMouseEventArgs.Column">
            <summary>
            Gets the index of the column that triggered the event, or -1 if no column.
            </summary>
            <value>The column index.</value>
        </member>
        <member name="P:Eto.Forms.GridCellMouseEventArgs.Item">
            <summary>
            Gets the item of the row that triggered the event, or null if there was no item.
            </summary>
            <value>The row item.</value>
        </member>
        <member name="M:Eto.Forms.GridCellMouseEventArgs.#ctor(Eto.Forms.GridColumn,System.Int32,System.Int32,System.Object,Eto.Forms.MouseButtons,Eto.Forms.Keys,Eto.Drawing.PointF,System.Nullable{Eto.Drawing.SizeF},System.Single)">
            <summary>
            Initializes a new instance of the GridCellMouseEventArgs class.
            </summary>
            <param name="gridColumn">Grid column that triggered the event.</param>
            <param name="row">The row that triggered the event, or -1 if no row.</param>
            <param name="column">Column that triggered the event, or -1 if no column.</param>
            <param name="item">Item of the row that triggered the event, or null if no item.</param>
            <param name="buttons">Mouse buttons that are pressed during the event</param>
            <param name="modifiers">Key modifiers currently pressed</param>
            <param name="location">Location of the mouse cursor in the grid</param>
            <param name="delta">Delta of the scroll wheel.</param>
            <param name="pressure">Pressure of a stylus or touch, if applicable. 1.0f for full pressure or not supported</param>
        </member>
        <member name="T:Eto.Forms.GridLines">
            <summary>
            Enumeration for the type of grid lines to show around each column/row in a <see cref="T:Eto.Forms.Grid"/>
            </summary>
        </member>
        <member name="F:Eto.Forms.GridLines.None">
            <summary>
            No grid lines shown
            </summary>
        </member>
        <member name="F:Eto.Forms.GridLines.Horizontal">
            <summary>
            A horizontal line is shown between each row
            </summary>
        </member>
        <member name="F:Eto.Forms.GridLines.Vertical">
            <summary>
            A vertical line is shown between each column
            </summary>
        </member>
        <member name="F:Eto.Forms.GridLines.Both">
            <summary>
            Shows both vertical and horizontal lines between each column/row
            </summary>
        </member>
        <member name="T:Eto.Forms.GridCellFormatEventArgs">
            <summary>
            Event arguments to format a cell in a <see cref="T:Eto.Forms.Grid"/>
            </summary>
            <copyright>(c) 2014 by Curtis Wensley</copyright>
            <license type="BSD-3">See LICENSE for full terms</license>
        </member>
        <member name="P:Eto.Forms.GridCellFormatEventArgs.Column">
            <summary>
            Gets the column to format
            </summary>
            <value>The column to format</value>
        </member>
        <member name="P:Eto.Forms.GridCellFormatEventArgs.Item">
            <summary>
            Gets the item that is associated with the row being formatted
            </summary>
            <value>The item.</value>
        </member>
        <member name="P:Eto.Forms.GridCellFormatEventArgs.Row">
            <summary>
            Gets the row number in the data source
            </summary>
            <value>The row.</value>
        </member>
        <member name="P:Eto.Forms.GridCellFormatEventArgs.Font">
            <summary>
            Gets or sets the font to use for the cell, or null to use the default font
            </summary>
            <value>The font.</value>
        </member>
        <member name="P:Eto.Forms.GridCellFormatEventArgs.BackgroundColor">
            <summary>
            Gets or sets the background color for the cell
            </summary>
            <value>The color of the background.</value>
        </member>
        <member name="P:Eto.Forms.GridCellFormatEventArgs.ForegroundColor">
            <summary>
            Gets or sets the foreground color for the cell contents
            </summary>
            <value>The color of the foreground.</value>
        </member>
        <member name="M:Eto.Forms.GridCellFormatEventArgs.#ctor(Eto.Forms.GridColumn,System.Object,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Eto.Forms.GridCellFormatEventArgs"/> class.
            </summary>
            <param name="column">Column to format</param>
            <param name="item">Item for the row being formatted</param>
            <param name="row">Row number being formatted</param>
        </member>
        <member name="T:Eto.Forms.Grid">
            <summary>
            Base grid control to display items in columns and rows
            </summary>
            <copyright>(c) 2014 by Curtis Wensley</copyright>
            <license type="BSD-3">See LICENSE for full terms</license>
        </member>
        <member name="P:Eto.Forms.Grid.Columns">
            <summary>
            Gets the collection of columns to display in the grid
            </summary>
            <value>The column collection</value>
        </member>
        <member name="F:Eto.Forms.Grid.CellEditingEvent">
            <summary>
            Event identifier for handlers when attaching the <see cref="E:Eto.Forms.Grid.CellEditing"/> event
            </summary>
        </member>
        <member name="E:Eto.Forms.Grid.CellEditing">
            <summary>
            Occurs before a cell is being edited to allow canceling based on application logic
            </summary>
        </member>
        <member name="M:Eto.Forms.Grid.OnCellEditing(Eto.Forms.GridViewCellEventArgs)">
            <summary>
            Raises the <see cref="E:Eto.Forms.Grid.CellEditing"/> event
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="F:Eto.Forms.Grid.CellEditedEvent">
            <summary>
            Event identifier for handlers when attaching the <see cref="E:Eto.Forms.Grid.CellEdited"/> event
            </summary>
        </member>
        <member name="E:Eto.Forms.Grid.CellEdited">
            <summary>
            Occurs after a cell has been edited
            </summary>
        </member>
        <member name="M:Eto.Forms.Grid.OnCellEdited(Eto.Forms.GridViewCellEventArgs)">
            <summary>
            Raises the <see cref="E:Eto.Forms.Grid.CellEdited"/> event
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="F:Eto.Forms.Grid.CellClickEvent">
            <summary>
            Event identifier for the <see cref="E:Eto.Forms.Grid.CellClick"/> event.
            </summary>
        </member>
        <member name="E:Eto.Forms.Grid.CellClick">
            <summary>
            Occurs when an individual cell is clicked.
            </summary>
        </member>
        <member name="M:Eto.Forms.Grid.OnCellClick(Eto.Forms.GridCellMouseEventArgs)">
            <summary>
            Raises the <see cref="E:Eto.Forms.Grid.CellClick"/> event.
            </summary>
            <param name="e">Grid cell event arguments.</param>
        </member>
        <member name="F:Eto.Forms.Grid.CellDoubleClickEvent">
            <summary>
            Event identifier for the <see cref="E:Eto.Forms.Grid.CellDoubleClick"/> event.
            </summary>
        </member>
        <member name="E:Eto.Forms.Grid.CellDoubleClick">
            <summary>
            Occurs when an individual cell is double clicked.
            </summary>
        </member>
        <member name="M:Eto.Forms.Grid.OnCellDoubleClick(Eto.Forms.GridCellMouseEventArgs)">
            <summary>
            Raises the <see cref="E:Eto.Forms.Grid.CellDoubleClick"/> event.
            </summary>
            <param name="e">Grid cell event arguments.</param>
        </member>
        <member name="F:Eto.Forms.Grid.SelectionChangedEvent">
            <summary>
            Event identifier for handlers when attaching the <see cref="E:Eto.Forms.Grid.SelectionChanged"/> event
            </summary>
        </member>
        <member name="E:Eto.Forms.Grid.SelectionChanged">
            <summary>
            Occurs when the user has changed the selection in the grid
            </summary>
        </member>
        <member name="M:Eto.Forms.Grid.OnSelectionChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Eto.Forms.Grid.SelectionChanged"/> event
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="F:Eto.Forms.Grid.ColumnHeaderClickEvent">
            <summary>
            Event identifier for handlers when attaching the <see cref="E:Eto.Forms.Grid.ColumnHeaderClick"/> event
            </summary>
        </member>
        <member name="E:Eto.Forms.Grid.ColumnHeaderClick">
            <summary>
            Occurs when the column header has been clicked by the user
            </summary>
        </member>
        <member name="M:Eto.Forms.Grid.OnColumnHeaderClick(Eto.Forms.GridColumnEventArgs)">
            <summary>
            Raises the <see cref="E:Eto.Forms.Grid.ColumnHeaderClick"/> event
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="F:Eto.Forms.Grid.CellFormattingEvent">
            <summary>
            Event identifier for handlers when attaching the <see cref="E:Eto.Forms.Grid.CellFormatting"/> event
            </summary>
        </member>
        <member name="E:Eto.Forms.Grid.CellFormatting">
            <summary>
            Occurs when each cell is being formatted for font and color
            </summary>
        </member>
        <member name="M:Eto.Forms.Grid.OnCellFormatting(Eto.Forms.GridCellFormatEventArgs)">
            <summary>
            Raises the <see cref="E:Eto.Forms.Grid.CellFormatting"/> event
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="E:Eto.Forms.Grid.SelectedItemsChanged">
            <summary>
            Occurs when the <see cref="P:Eto.Forms.Grid.SelectedItems"/> is changed.
            </summary>
        </member>
        <member name="E:Eto.Forms.Grid.SelectedRowsChanged">
            <summary>
            Occurs when the <see cref="P:Eto.Forms.Grid.SelectedRows"/> is changed.
            </summary>
        </member>
        <member name="M:Eto.Forms.Grid.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Eto.Forms.Grid"/> class.
            </summary>
        </member>
        <member name="M:Eto.Forms.Grid.#ctor(Eto.Forms.Grid.IHandler)">
            <summary>
            Initializes a new instance of the <see cref="T:Eto.Forms.Grid"/> class with the specified handler
            </summary>
            <param name="handler">Handler implementation for the control</param>
        </member>
        <member name="P:Eto.Forms.Grid.ShowHeader">
            <summary>
            Gets or sets a value indicating that the header should be shown
            </summary>
            <value><c>true</c> to show header; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Eto.Forms.Grid.AllowColumnReordering">
            <summary>
            Gets or sets a value indicating whether the user can re-order columns
            </summary>
            <value><c>true</c> to allow column reordering; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Eto.Forms.Grid.AllowMultipleSelection">
            <summary>
            Gets or sets a value indicating whether the user can select multiple rows
            </summary>
            <value><c>true</c> to allow multiple row selection; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Eto.Forms.Grid.SelectedItems">
            <summary>
            Gets an enumeration of the currently selected items
            </summary>
            <value>The selected items.</value>
        </member>
        <member name="P:Eto.Forms.Grid.SelectedItem">
            <summary>
            If there is exactly one selected item, returns it, otherwise
            returns null.
            </summary>
            <remarks>
            Typically, you would use <see cref="P:Eto.Forms.Grid.SelectedItems"/> when <see cref="P:Eto.Forms.Grid.AllowMultipleSelection"/> is <c>true</c>.
            </remarks>
            <seealso cref="P:Eto.Forms.Grid.SelectedItems"/>
        </member>
        <member name="P:Eto.Forms.Grid.SelectedItemBinding">
            <summary>
            Gets a binding object to bind to the <see cref="P:Eto.Forms.Grid.SelectedItem"/> property.
            </summary>
            <value>The selected item binding.</value>
        </member>
        <member name="P:Eto.Forms.Grid.SelectedRows">
            <summary>
            Gets the selected rows indexes
            </summary>
            <value>The selected rows.</value>
        </member>
        <member name="P:Eto.Forms.Grid.SelectedRow">
            <summary>
            Gets or sets the selected row, or -1 for none.
            </summary>
            <remarks>
            When <see cref="P:Eto.Forms.Grid.AllowMultipleSelection"/> is true and you want all selected rows, use <see cref="P:Eto.Forms.Grid.SelectedRow"/>.
            </remarks>
            <value>The selected row.</value>
        </member>
        <member name="P:Eto.Forms.Grid.RowHeight">
            <summary>
            Gets or sets the height for each row in the grid
            </summary>
            <value>The height of the row.</value>
        </member>
        <member name="P:Eto.Forms.Grid.GridLines">
            <summary>
            Gets or sets the style of grid lines to show between columns and rows
            </summary>
            <value>The grid line style.</value>
        </member>
        <member name="P:Eto.Forms.Grid.Border">
            <summary>
            Gets or sets the border type
            </summary>
            <value>The border.</value>
        </member>
        <member name="M:Eto.Forms.Grid.SelectRow(System.Int32)">
            <summary>
            Selects the row to the specified <paramref name="row"/>, clearing other selections
            </summary>
            <param name="row">Row to select</param>
        </member>
        <member name="M:Eto.Forms.Grid.SelectAll">
            <summary>
            Selects all rows
            </summary>
        </member>
        <member name="M:Eto.Forms.Grid.UnselectRow(System.Int32)">
            <summary>
            Unselects the specified <paramref name="row"/>
            </summary>
            <param name="row">Row to unselect</param>
        </member>
        <member name="M:Eto.Forms.Grid.UnselectAll">
            <summary>
            Clears the selection
            </summary>
        </member>
        <member name="M:Eto.Forms.Grid.BeginEdit(System.Int32,System.Int32)">
            <summary>
            Begin to edit one cell
            </summary>
            <param name="row">Row to edit</param>
            <param name="column">Column to edit</param>
        </member>
        <member name="M:Eto.Forms.Grid.CommitEdit">
            <summary>
            Commits a current edit operation and sets the current value to the model.
            </summary>
            <returns><c>true</c>, if edit was commited or if there was no current edit operation, <c>false</c> if the commit was cancelled..</returns>
        </member>
        <member name="M:Eto.Forms.Grid.CancelEdit">
            <summary>
            Cancels the current edit operation and reverts the cell value to the value in the model.
            </summary>
            <returns><c>true</c>, if edit was canceled or there was no current edit operation, <c>false</c> if the cancel was aborted.</returns>
        </member>
        <member name="P:Eto.Forms.Grid.IsEditing">
            <summary>
            Gets a value indicating that the current cell is in edit mode. 
            </summary>
            <value><c>true</c> if the current cell is in edit mode; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Eto.Forms.Grid.ScrollToRow(System.Int32)">
            <summary>
            Scrolls to show the specified row in the view
            </summary>
            <param name="row">Row to scroll to.</param>
        </member>
        <member name="M:Eto.Forms.Grid.GetCallback">
            <summary>
            Gets an instance of an object used to perform callbacks to the widget from handler implementations
            </summary>
            <returns>The callback instance to use for this widget</returns>
        </member>
        <member name="T:Eto.Forms.Grid.ICallback">
            <summary>
            Callback interface for instances of <see cref="T:Eto.Forms.Grid"/>
            </summary>
        </member>
        <member name="M:Eto.Forms.Grid.ICallback.OnCellEditing(Eto.Forms.Grid,Eto.Forms.GridViewCellEventArgs)">
            <summary>
            Raises the cell editing event.
            </summary>
        </member>
        <member name="M:Eto.Forms.Grid.ICallback.OnCellEdited(Eto.Forms.Grid,Eto.Forms.GridViewCellEventArgs)">
            <summary>
            Raises the cell edited event.
            </summary>
        </member>
        <member name="M:Eto.Forms.Grid.ICallback.OnCellClick(Eto.Forms.Grid,Eto.Forms.GridCellMouseEventArgs)">
            <summary>
            Raises the cell click event.
            </summary>
        </member>
        <member name="M:Eto.Forms.Grid.ICallback.OnCellDoubleClick(Eto.Forms.Grid,Eto.Forms.GridCellMouseEventArgs)">
            <summary>
            Raises the cell double click event.
            </summary>
        </member>
        <member name="M:Eto.Forms.Grid.ICallback.OnSelectionChanged(Eto.Forms.Grid,System.EventArgs)">
            <summary>
            Raises the selection changed event.
            </summary>
        </member>
        <member name="M:Eto.Forms.Grid.ICallback.OnColumnHeaderClick(Eto.Forms.Grid,Eto.Forms.GridColumnEventArgs)">
            <summary>
            Raises the column header click event.
            </summary>
        </member>
        <member name="M:Eto.Forms.Grid.ICallback.OnCellFormatting(Eto.Forms.Grid,Eto.Forms.GridCellFormatEventArgs)">
            <summary>
            Raises the cell formatting event.
            </summary>
        </member>
        <member name="T:Eto.Forms.Grid.Callback">
            <summary>
            Callbacks for instances of <see cref="T:Eto.Forms.Grid"/>
            </summary>
        </member>
        <member name="M:Eto.Forms.Grid.Callback.OnCellEditing(Eto.Forms.Grid,Eto.Forms.GridViewCellEventArgs)">
            <summary>
            Raises the cell editing event.
            </summary>
        </member>
        <member name="M:Eto.Forms.Grid.Callback.OnCellEdited(Eto.Forms.Grid,Eto.Forms.GridViewCellEventArgs)">
            <summary>
            Raises the cell edited event.
            </summary>
        </member>
        <member name="M:Eto.Forms.Grid.Callback.OnCellClick(Eto.Forms.Grid,Eto.Forms.GridCellMouseEventArgs)">
            <summary>
            Raises the cell click event.
            </summary>
        </member>
        <member name="M:Eto.Forms.Grid.Callback.OnCellDoubleClick(Eto.Forms.Grid,Eto.Forms.GridCellMouseEventArgs)">
            <summary>
            Raises the cell double click event.
            </summary>
        </member>
        <member name="M:Eto.Forms.Grid.Callback.OnSelectionChanged(Eto.Forms.Grid,System.EventArgs)">
            <summary>
            Raises the selection changed event.
            </summary>
        </member>
        <member name="M:Eto.Forms.Grid.Callback.OnColumnHeaderClick(Eto.Forms.Grid,Eto.Forms.GridColumnEventArgs)">
            <summary>
            Raises the column header click event.
            </summary>
        </member>
        <member name="M:Eto.Forms.Grid.Callback.OnCellFormatting(Eto.Forms.Grid,Eto.Forms.GridCellFormatEventArgs)">
            <summary>
            Raises the cell formatting event.
            </summary>
        </member>
        <member name="T:Eto.Forms.Grid.IHandler">
            <summary>
            Handler interface for the <see cref="T:Eto.Forms.Grid"/> control
            </summary>
            <copyright>(c) 2014 by Curtis Wensley</copyright>
            <license type="BSD-3">See LICENSE for full terms</license>
        </member>
        <member name="P:Eto.Forms.Grid.IHandler.ShowHeader">
            <summary>
            Gets or sets a value indicating that the header should be shown
            </summary>
            <value><c>true</c> to show header; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Eto.Forms.Grid.IHandler.RowHeight">
            <summary>
            Gets or sets the height for each row in the grid
            </summary>
            <value>The height of the row.</value>
        </member>
        <member name="P:Eto.Forms.Grid.IHandler.AllowColumnReordering">
            <summary>
            Gets or sets a value indicating whether the user can re-order columns
            </summary>
            <value><c>true</c> to allow column reordering; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Eto.Forms.Grid.IHandler.AllowMultipleSelection">
            <summary>
            Gets or sets a value indicating whether the user can select multiple rows
            </summary>
            <value><c>true</c> to allow multiple row selection; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Eto.Forms.Grid.IHandler.SelectedRows">
            <summary>
            Gets the selected rows indexes
            </summary>
            <value>The selected rows.</value>
        </member>
        <member name="P:Eto.Forms.Grid.IHandler.GridLines">
            <summary>
            Gets or sets the style of grid lines to show between columns and rows
            </summary>
            <value>The grid line style.</value>
        </member>
        <member name="P:Eto.Forms.Grid.IHandler.Border">
            <summary>
            Gets or sets the border type
            </summary>
            <value>The border.</value>
        </member>
        <member name="M:Eto.Forms.Grid.IHandler.SelectRow(System.Int32)">
            <summary>
            Selects the row to the specified <paramref name="row"/>, clearing other selections
            </summary>
            <param name="row">Row to select</param>
        </member>
        <member name="M:Eto.Forms.Grid.IHandler.UnselectRow(System.Int32)">
            <summary>
            Unselects the specified <paramref name="row"/>
            </summary>
            <param name="row">Row to unselect</param>
        </member>
        <member name="M:Eto.Forms.Grid.IHandler.SelectAll">
            <summary>
            Selects all rows
            </summary>
        </member>
        <member name="M:Eto.Forms.Grid.IHandler.UnselectAll">
            <summary>
            Clears the selection
            </summary>
        </member>
        <member name="M:Eto.Forms.Grid.IHandler.BeginEdit(System.Int32,System.Int32)">
            <summary>
            Begin to edit one cell
            </summary>
            <param name="row">Row to edit</param>
            <param name="column">Column to edit</param>
        </member>
        <member name="M:Eto.Forms.Grid.IHandler.CommitEdit">
            <summary>
            Commits a current edit operation and sets the current value to the model.
            </summary>
            <returns><c>true</c>, if edit was commited or there was no current edit operation, <c>false</c> if the commit was cancelled..</returns>
        </member>
        <member name="M:Eto.Forms.Grid.IHandler.CancelEdit">
            <summary>
            Cancels the current edit operation and reverts the cell value to the value in the model.
            </summary>
            <returns><c>true</c>, if edit was canceled or there was no current edit operation, <c>false</c> if the cancel was aborted.</returns>
        </member>
        <member name="P:Eto.Forms.Grid.IHandler.IsEditing">
            <summary>
            Gets a value indicating that the current cell is in edit mode. 
            </summary>
            <value><c>true</c> if the current cell is in edit mode; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Eto.Forms.Grid.IHandler.ScrollToRow(System.Int32)">
            <summary>
            Scrolls to show the specified row in the view
            </summary>
            <param name="row">Row to scroll to.</param>
        </member>
        <member name="T:Eto.Forms.GridColumnCollection">
            <summary>
            Column collection for the <see cref="T:Eto.Forms.Grid"/>
            </summary>
        </member>
        <member name="T:Eto.Forms.GridColumn">
            <summary>
            Grid column definition for a <see cref="T:Eto.Forms.Grid"/>
            </summary>
        </member>
        <member name="P:Eto.Forms.GridColumn.HeaderText">
            <summary>
            Gets or sets the text to display in the header of the column.
            </summary>
            <value>The header text.</value>
        </member>
        <member name="P:Eto.Forms.GridColumn.Resizable">
            <summary>
            Gets or sets a value indicating whether the column is resizable by the user.
            </summary>
            <value><c>true</c> if resizable; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Eto.Forms.GridColumn.AutoSize">
            <summary>
            Gets or sets a value indicating whether this column will auto size to the content of the grid.
            </summary>
            <remarks>
            This usually will only auto size based on the visible content to be as performant as possible.
            </remarks>
            <value><c>true</c> to auto size the column; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Eto.Forms.GridColumn.Sortable">
            <summary>
            Gets or sets a value indicating whether the user can click on the header.
            </summary>
            <seealso cref="E:Eto.Forms.Grid.ColumnHeaderClick"/>
            <value><c>true</c> if the user can click the header; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Eto.Forms.GridColumn.Width">
            <summary>
            Gets or sets the initial width of the column.
            </summary>
            <value>The width of the column.</value>
        </member>
        <member name="P:Eto.Forms.GridColumn.DataCell">
            <summary>
            Gets or sets the cell for the content of the column.
            </summary>
            <value>The column data cell.</value>
        </member>
        <member name="P:Eto.Forms.GridColumn.Editable">
            <summary>
            Gets or sets a value indicating whether the user can edit the contents of the cells, if the <see cref="P:Eto.Forms.GridColumn.DataCell"/> allows it.
            </summary>
            <value><c>true</c> if the data cell is editable; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Eto.Forms.GridColumn.Visible">
            <summary>
            Gets or sets a value indicating whether this column is visible.
            </summary>
            <value><c>true</c> if visible; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Eto.Forms.GridColumn.IHandler">
            <summary>
            Handler interface for the <see cref="T:Eto.Forms.GridColumn"/>.
            </summary>
        </member>
        <member name="P:Eto.Forms.GridColumn.IHandler.HeaderText">
            <summary>
            Gets or sets the text to display in the header of the column.
            </summary>
            <value>The header text.</value>
        </member>
        <member name="P:Eto.Forms.GridColumn.IHandler.Resizable">
            <summary>
            Gets or sets a value indicating whether the column is resizable by the user.
            </summary>
            <value><c>true</c> if resizable; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Eto.Forms.GridColumn.IHandler.Sortable">
            <summary>
            Gets or sets a value indicating whether the user can click on the header.
            </summary>
            <seealso cref="E:Eto.Forms.Grid.ColumnHeaderClick"/>
            <value><c>true</c> if the user can click the header; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Eto.Forms.GridColumn.IHandler.AutoSize">
            <summary>
            Gets or sets a value indicating whether this column will auto size to the content of the grid.
            </summary>
            <remarks>
            This usually will only auto size based on the visible content to be as performant as possible.
            </remarks>
            <value><c>true</c> to auto size the column; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Eto.Forms.GridColumn.IHandler.Width">
            <summary>
            Gets or sets the initial width of the column.
            </summary>
            <value>The width of the column.</value>
        </member>
        <member name="P:Eto.Forms.GridColumn.IHandler.DataCell">
            <summary>
            Gets or sets the cell for the content of the column.
            </summary>
            <value>The column data cell.</value>
        </member>
        <member name="P:Eto.Forms.GridColumn.IHandler.Editable">
            <summary>
            Gets or sets a value indicating whether the user can edit the contents of the cells, if the <see cref="P:Eto.Forms.GridColumn.IHandler.DataCell"/> allows it.
            </summary>
            <value><c>true</c> if the data cell is editable; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Eto.Forms.GridColumn.IHandler.Visible">
            <summary>
            Gets or sets a value indicating whether this column is visible.
            </summary>
            <value><c>true</c> if visible; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Eto.Forms.GridItem">
            <summary>
            Helper for an item in a <see cref="T:Eto.Forms.GridView"/> to store values in an array. 
            </summary>
            <remarks>
            This should only be used when you don't have your own class to represent each row.
            You can use the <see cref="T:Eto.Forms.ColumnBinding`1"/> to bind to an indexed value in this item.
            </remarks>
        </member>
        <member name="M:Eto.Forms.GridItem.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Eto.Forms.GridItem"/> class.
            </summary>
        </member>
        <member name="M:Eto.Forms.GridItem.#ctor(System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:Eto.Forms.GridItem"/> class.
            </summary>
            <param name="values">Values.</param>
        </member>
        <member name="P:Eto.Forms.GridItem.Tag">
            <summary>
            Gets or sets a custom value to associate with this item.
            </summary>
            <value>The custom tag value.</value>
        </member>
        <member name="P:Eto.Forms.GridItem.Values">
            <summary>
            Gets or sets the values of the row.
            </summary>
            <value>The values of the row.</value>
        </member>
        <member name="M:Eto.Forms.GridItem.GetValue(System.Int32)">
            <summary>
            Gets the value from this item for the specified column/index
            </summary>
            <param name="column">column/index to get the value</param>
            <returns>value of the object with the specified column/index</returns>
        </member>
        <member name="M:Eto.Forms.GridItem.SetValue(System.Int32,System.Object)">
            <summary>
            Sets the value of this object for the specified column/index
            </summary>
            <param name="column">column/index to set the value</param>
            <param name="value">value to set at the specified column/index</param>
        </member>
        <member name="T:Eto.Forms.GridViewCellEventArgs">
            <summary>
            Event arguments for cell-based events of a <see cref="T:Eto.Forms.GridView"/>
            </summary>
        </member>
        <member name="P:Eto.Forms.GridViewCellEventArgs.GridColumn">
            <summary>
            Gets the grid column that triggered the event.
            </summary>
            <value>The grid column.</value>
        </member>
        <member name="P:Eto.Forms.GridViewCellEventArgs.Row">
            <summary>
            Gets the row that triggered the event, or -1 if no row.
            </summary>
            <value>The grid row.</value>
        </member>
        <member name="P:Eto.Forms.GridViewCellEventArgs.Column">
            <summary>
            Gets the index of the column that triggered the event, or -1 if no column.
            </summary>
            <value>The column index.</value>
        </member>
        <member name="P:Eto.Forms.GridViewCellEventArgs.Item">
            <summary>
            Gets the item of the row that triggered the event, or null if there was no item.
            </summary>
            <value>The row item.</value>
        </member>
        <member name="M:Eto.Forms.GridViewCellEventArgs.#ctor(Eto.Forms.GridColumn,System.Int32,System.Int32,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Eto.Forms.GridViewCellEventArgs"/> class.
            </summary>
            <param name="gridColumn">Grid column that triggered the event.</param>
            <param name="row">The row that triggered the event, or -1 if no row.</param>
            <param name="column">Column that triggered the event, or -1 if no column.</param>
            <param name="item">Item of the row that triggered the event, or null if no item.</param>
        </member>
        <member name="T:Eto.Forms.GridCell">
            <summary>
            Information of a cell in the <see cref="T:Eto.Forms.TreeGridView"/>
            </summary>
        </member>
        <member name="P:Eto.Forms.GridCell.Item">
            <summary>
            Gets the item associated with the row of the cell.
            </summary>
            <value>The row item.</value>
        </member>
        <member name="P:Eto.Forms.GridCell.RowIndex">
            <summary>
            Gets the index of the row.
            </summary>
            <value>The index of the row.</value>
        </member>
        <member name="P:Eto.Forms.GridCell.Column">
            <summary>
            Gets the column of the cell, or null
            </summary>
            <value>The column.</value>
        </member>
        <member name="P:Eto.Forms.GridCell.ColumnIndex">
            <summary>
            Gets the index of the column.
            </summary>
            <value>The index of the column.</value>
        </member>
        <member name="T:Eto.Forms.GridViewDragInfo">
            <summary>
            Extra drag information when dragging to a <see cref="T:Eto.Forms.TreeGridView"/>.
            </summary>
            <remarks>
            Use this information to determine where the user is dragging to, and also to change where the drag indicator will
            be shown by modifying the Item and ChildIndex properties.
            </remarks>
        </member>
        <member name="P:Eto.Forms.GridViewDragInfo.Item">
            <summary>
            Gets or sets the item the user is dragging to.
            </summary>
            <value>The item.</value>
        </member>
        <member name="P:Eto.Forms.GridViewDragInfo.Index">
            <summary>
            Gets or sets the insertion index where the user is dragging to as a child of Item, or -1 if dragging ontop of the Item.
            </summary>
            <remarks>
            This is useful if the user is dragging inbetween existing items, or the beginning or end of a child list.
            
            Only some platforms may support this property, otherwise it will always return -1.
            </remarks>
            <value>The insertion index where the user is dragging to, otherwise -1.</value>
        </member>
        <member name="P:Eto.Forms.GridViewDragInfo.Position">
            <summary>
            Gets the position of the ChildIndex relative to the item under the mouse cursor.
            </summary>
            <remarks>
            When dragging between items, this will tell you if the ChildIndex specified is after or before the item under the mouse cursor.
            This allows you to adjust the Item and ChildIndex.
            </remarks>
            <value>The position.</value>
        </member>
        <member name="P:Eto.Forms.GridViewDragInfo.Control">
            <summary>
            Gets the parent tree control this info is for.
            </summary>
            <value>The parent tree for the drag info.</value>
        </member>
        <member name="P:Eto.Forms.GridViewDragInfo.IsChanged">
            <summary>
            Gets a value indicating whether this <see cref="T:Eto.Forms.GridDragInfo"/> is changed.
            </summary>
            <remarks>
            This will return true if the <see cref="P:Eto.Forms.GridViewDragInfo.Index"/> or <see cref="P:Eto.Forms.GridViewDragInfo.Item"/> have been set.
            This is useful for platform implementations to determine if the drop target has been modified.
            </remarks>
            <value><c>true</c> if is changed; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Eto.Forms.GridViewDragInfo.RestrictToOver">
            <summary>
            Helper to restrict to drop on top an existing item without allowing any insertion.
            </summary>
        </member>
        <member name="M:Eto.Forms.GridViewDragInfo.RestrictToInsert">
            <summary>
            Helper to restrict the drop to insert items only without allowing draging over existing items.
            </summary>
        </member>
        <member name="P:Eto.Forms.GridViewDragInfo.InsertIndex">
            <summary>
            Gets the insertion index of drop operation, or -1 if not an insert (dragging over)
            </summary>
            <value>The index to insert the item.</value>
        </member>
        <member name="M:Eto.Forms.GridViewDragInfo.#ctor(Eto.Forms.GridView,System.Object,System.Int32,Eto.Forms.GridDragPosition)">
            <summary>
            Initializes a new instance of the <see cref="T:Eto.Forms.GridDragInfo"/> class.
            </summary>
            <param name="control">The parent widget that this info belongs to</param>
            <param name="item">Item user is dragging to.</param>
            <param name="index">Index where the item should be inserted, or -1 if dragging ontop of item.</param>
            <param name="position">The position of the cursor relative to the item under the cursor.</param>
        </member>
        <member name="T:Eto.Forms.GridView`1">
            <summary>
            Grid view with a data store of a specific type
            </summary>
            <typeparam name="T">Type of the objects in the grid view's data store</typeparam> 
        </member>
        <member name="P:Eto.Forms.GridView`1.DataStore">
            <summary>
            The data store for the grid.
            </summary>
            <remarks>
            This defines what data to show in the grid. If the source implements <see cref="T:System.Collections.Specialized.INotifyCollectionChanged"/>, such
            as an <see cref="T:System.Collections.ObjectModel.ObservableCollection`1"/>, then changes to the collection will be reflected in the grid.
            </remarks>
            <value>The data store for the grid.</value>
        </member>
        <member name="P:Eto.Forms.GridView`1.SelectedItems">
            <summary>
            Gets an enumeration of the currently selected items
            </summary>
            <value>The selected items.</value>
        </member>
        <member name="P:Eto.Forms.GridView`1.SelectedItem">
            <summary>
            If there is exactly one selected item, returns it, otherwise returns null.
            </summary>
            <remarks>
            Typically, you would use <see cref="P:Eto.Forms.Grid.SelectedItems"/> when <see cref="P:Eto.Forms.Grid.AllowMultipleSelection"/> is <c>true</c>.
            </remarks>
            <seealso cref="P:Eto.Forms.GridView`1.SelectedItems"/>
        </member>
        <member name="P:Eto.Forms.GridView`1.SelectedItemBinding">
            <summary>
            Gets a binding object to bind to the <see cref="P:Eto.Forms.GridView`1.SelectedItem"/> property.
            </summary>
            <value>The selected item binding.</value>
        </member>
        <member name="T:Eto.Forms.GridView">
            <summary>
            Control to present data in a grid in columns and rows.
            </summary>
            <see cref="T:Eto.Forms.TreeGridView"/>
        </member>
        <member name="P:Eto.Forms.GridView.DeleteItemHandler">
            <summary>
            A delegate method to delete an item in response to a user's
            request. The method should return true after deleting the
            item, or false to indicate the item could not be deleted.
            
            Currently supported on iOS only.
            </summary>
        </member>
        <member name="P:Eto.Forms.GridView.CanDeleteItem">
            <summary>
            A delegate that returns true if an item can be deleted
            
            Currently supported on iOS only.
            </summary>
        </member>
        <member name="P:Eto.Forms.GridView.DeleteConfirmationTitle">
            <summary>
            The text to display in a Delete item button.
            
            Currently supported on iOS only.
            </summary>
        </member>
        <member name="M:Eto.Forms.GridView.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Eto.Forms.GridView"/> class.
            </summary>
        </member>
        <member name="M:Eto.Forms.GridView.#ctor(Eto.Forms.GridView.IHandler)">
            <summary>
            Initializes a new instance of the <see cref="T:Eto.Forms.GridView"/> class with the specified handler.
            </summary>
            <param name="handler">Platform handler to use for the implementation of this GridView instance.</param>
        </member>
        <member name="P:Eto.Forms.GridView.DataStore">
            <summary>
            The data store for the grid.
            </summary>
            <remarks>
            This defines what data to show in the grid. If the source implements <see cref="T:System.Collections.Specialized.INotifyCollectionChanged"/>, such
            as an <see cref="T:System.Collections.ObjectModel.ObservableCollection`1"/>, then changes to the collection will be reflected in the grid.
            </remarks>
            <value>The data store for the grid.</value>
        </member>
        <member name="P:Eto.Forms.GridView.ShowCellBorders">
            <summary>
            Gets or sets a value indicating whether to show a border around each cell.
            </summary>
            <value><c>true</c> to show a space between cells; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Eto.Forms.GridView.GetDragInfo(Eto.Forms.DragEventArgs)">
            <summary>
            Gets the grid drag info for the specified DragEventArgs.
            </summary>
            <remarks>
            Use this to get or set information about where the drop will occur.
            </remarks>
            <returns>The drag information.</returns>
            <param name="args">Arguments to get the drag info for.</param>
        </member>
        <member name="M:Eto.Forms.GridView.GetCellAt(Eto.Drawing.PointF)">
            <summary>
            Gets the node at a specified location from the origin of the control
            </summary>
            <remarks>
            Useful for determining which node is under the mouse cursor.
            </remarks>
            <returns>The item from the data store that is displayed at the specified location</returns>
            <param name="location">Point to find the node</param>
        </member>
        <member name="P:Eto.Forms.GridView.SelectionPreserver">
            <summary>
            Gets a new selection preserver instance for the grid.
            </summary>
            <remarks>
            This is used to keep the selected items consistent for a grid when changing the <see cref="P:Eto.Forms.GridView.DataStore"/>
            collection dramatically, such as filtering or sorting the collection.  Events such as removing or adding rows
            will always keep the selection of existing rows.
            </remarks>
            <value>A new instance of the selection preserver.</value>
        </member>
        <member name="P:Eto.Forms.GridView.SelectedItems">
            <summary>
            Gets an enumeration of the currently selected items
            </summary>
            <value>The selected items.</value>
        </member>
        <member name="P:Eto.Forms.GridView.ContextMenu">
            <summary>
            Gets or sets the context menu when right clicking or pressing the menu button on the control.
            </summary>
            <value>The context menu.</value>
        </member>
        <member name="M:Eto.Forms.GridView.ReloadData(System.Int32)">
            <summary>
            Reloads the data at the specified row.
            </summary>
            <remarks>
            This will refresh the cells of the specified row with the current data in the model for that row.
            </remarks>
            <param name="row">Row to update.</param>
        </member>
        <member name="M:Eto.Forms.GridView.ReloadData(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Reloads the data at the specified rows.
            </summary>
            <remarks>
            This will refresh the cells of the specified rows with the current data in the model for each row.
            </remarks>
            <param name="rows">Rows to update.</param>
        </member>
        <member name="M:Eto.Forms.GridView.ReloadData(Eto.Forms.Range{System.Int32})">
            <summary>
            Reloads the data at the specified range of rows.
            </summary>
            <remarks>
            This will refresh the cells of the specified range of rows with the current data in the model for each row.
            </remarks>
            <param name="range">Range of rows to update.</param>
        </member>
        <member name="M:Eto.Forms.GridView.GetCallback">
            <summary>
            Gets an instance of an object used to perform callbacks to the widget from handler implementations
            </summary>
            <returns>The callback instance to use for this widget</returns>
        </member>
        <member name="T:Eto.Forms.GridView.IHandler">
            <summary>
            Handler interface for the <see cref="T:Eto.Forms.GridView"/>.
            </summary>
        </member>
        <member name="P:Eto.Forms.GridView.IHandler.DataStore">
            <summary>
            Gets or sets the data store for the items to show in the grid.
            </summary>
            <value>The grid's data store.</value>
        </member>
        <member name="P:Eto.Forms.GridView.IHandler.SelectedItems">
            <summary>
            Gets an enumeration of the currently selected items
            </summary>
            <value>The selected items.</value>
        </member>
        <member name="M:Eto.Forms.GridView.IHandler.ReloadData(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Reloads the data at the specified rows.
            </summary>
            <remarks>
            This will refresh the cells of the specified rows with the current data in the model for each row.
            </remarks>
            <param name="rows">Rows to update.</param>
        </member>
        <member name="M:Eto.Forms.GridView.IHandler.GetCellAt(Eto.Drawing.PointF,System.Int32@,System.Int32@)">
            <summary>
            Gets the node at a specified point from the origin of the control
            </summary>
            <remarks>
            Useful for determining which node is under the mouse cursor.
            </remarks>
            <returns>The item from the data store that is displayed at the specified location</returns>
            <param name="location">Point to find the node</param>
            <param name="row">Row under the specified location</param>
            <param name="column">Column under the specified location</param>
        </member>
        <member name="M:Eto.Forms.GridView.IHandler.GetDragInfo(Eto.Forms.DragEventArgs)">
            <summary>
            Gets the grid drag info for the specified DragEventArgs.
            </summary>
            <remarks>
            Use this to get or set information about where the drop will occur.
            </remarks>
            <returns>The drag information.</returns>
            <param name="args">Arguments to get the drag info for.</param>
        </member>
        <member name="T:Eto.Forms.GroupBox">
            <summary>
            Interface elment to group controls inside a box with an optional title
            </summary>
        </member>
        <member name="P:Eto.Forms.GroupBox.Font">
            <summary>
            Gets or sets the font used for the title
            </summary>
            <value>The title font.</value>
        </member>
        <member name="P:Eto.Forms.GroupBox.Text">
            <summary>
            Gets or sets the title text.
            </summary>
            <value>The title text.</value>
        </member>
        <member name="P:Eto.Forms.GroupBox.TextColor">
            <summary>
            Gets or sets the color of the text.
            </summary>
            <remarks>
            By default, the text will get a color based on the user's theme. However, this is usually black.
            </remarks>
            <value>The color of the text.</value>
        </member>
        <member name="T:Eto.Forms.GroupBox.IHandler">
            <summary>
            Handler interface for the <see cref="T:Eto.Forms.GroupBox"/>
            </summary>
        </member>
        <member name="P:Eto.Forms.GroupBox.IHandler.Font">
            <summary>
            Gets or sets the font used for the title
            </summary>
            <value>The title font.</value>
        </member>
        <member name="P:Eto.Forms.GroupBox.IHandler.Text">
            <summary>
            Gets or sets the title text.
            </summary>
            <value>The title text.</value>
        </member>
        <member name="P:Eto.Forms.GroupBox.IHandler.TextColor">
            <summary>
            Gets or sets the color of the text.
            </summary>
            <remarks>
            By default, the text will get a color based on the user's theme. However, this is usually black.
            </remarks>
            <value>The color of the text.</value>
        </member>
        <member name="T:Eto.Forms.ImageView">
            <summary>
            Control to display an image
            </summary>
            <remarks>
            By default, the ImageView will automatically size to the size of the specified <see cref="P:Eto.Forms.ImageView.Image"/>,
            otherwise the image will be scaled to fit inside the available area for the control.
            </remarks>
        </member>
        <member name="P:Eto.Forms.ImageView.Image">
            <summary>
            Gets or sets the image to display.
            </summary>
            <value>The image.</value>
        </member>
        <member name="T:Eto.Forms.ImageView.IHandler">
            <summary>
            Handler interface for the <see cref="T:Eto.Forms.ImageView"/>
            </summary>
        </member>
        <member name="P:Eto.Forms.ImageView.IHandler.Image">
            <summary>
            Gets or sets the image to display.
            </summary>
            <value>The image.</value>
        </member>
        <member name="T:Eto.Forms.KeyEventType">
            <summary>
            Type of key event
            </summary>
        </member>
        <member name="F:Eto.Forms.KeyEventType.KeyDown">
            <summary>
            The key was pressed
            </summary>
        </member>
        <member name="F:Eto.Forms.KeyEventType.KeyUp">
            <summary>
            The key was released
            </summary>
        </member>
        <member name="T:Eto.Forms.KeyEventArgs">
            <summary>
            Arguments for key press events
            </summary>
        </member>
        <member name="M:Eto.Forms.KeyEventArgs.#ctor(Eto.Forms.Keys,Eto.Forms.KeyEventType,System.Nullable{System.Char})">
            <summary>
            Initializes a new instance of the KeyPressEventArgs class for a character key press
            </summary>
            <param name="keyData">Key and modifiers that were pressed</param>
            <param name="keyEventType">Type of key event</param>
            <param name="keyChar">Character equivalent</param>
        </member>
        <member name="P:Eto.Forms.KeyEventArgs.KeyEventType">
            <summary>
            Gets the type of the key event.
            </summary>
            <value>The type of the key event.</value>
        </member>
        <member name="P:Eto.Forms.KeyEventArgs.KeyData">
            <summary>
            Gets the raw key data (the combination of the <see cref="P:Eto.Forms.KeyEventArgs.Key"/> and <see cref="P:Eto.Forms.KeyEventArgs.Modifiers"/>)
            </summary>
        </member>
        <member name="P:Eto.Forms.KeyEventArgs.Key">
            <summary>
            Gets the key value (without modifiers)
            </summary>
        </member>
        <member name="P:Eto.Forms.KeyEventArgs.Modifiers">
            <summary>
            Gets the modifier keys that were pressed for this event
            </summary>
        </member>
        <member name="P:Eto.Forms.KeyEventArgs.IsChar">
            <summary>
            Gets a value indicating that the key press corresponds to a character input value
            </summary>
        </member>
        <member name="P:Eto.Forms.KeyEventArgs.Handled">
            <summary>
            Gets or sets a value indicating that this event was handled by user code
            </summary>
            <remarks>
            If you pass true for this, typically the key press will not be passed to the control
            for event processing. This also allows controls to handle key combinations that would
            otherwise be handled as a shortcut in the menu or toolbar items.
            </remarks>
        </member>
        <member name="P:Eto.Forms.KeyEventArgs.KeyChar">
            <summary>
            Gets the key character corresponding to the key press (if <see cref="P:Eto.Forms.KeyEventArgs.IsChar"/> is true)
            </summary>
        </member>
        <member name="P:Eto.Forms.KeyEventArgs.Shift">
            <summary>
            Gets whether the shift key was pressed/released for the event
            </summary>
        </member>
        <member name="P:Eto.Forms.KeyEventArgs.Control">
            <summary>
            Gets whether the control key was pressed/released for the event
            </summary>
        </member>
        <member name="P:Eto.Forms.KeyEventArgs.Alt">
            <summary>
            Gets whether the alt key was pressed/released for the event
            </summary>
        </member>
        <member name="P:Eto.Forms.KeyEventArgs.Application">
            <summary>
            Gets whether the application key was pressed/released for the event
            </summary>
        </member>
        <member name="M:Eto.Forms.KeyEventArgs.IsKeyUp(Eto.Forms.Keys,System.Nullable{Eto.Forms.Keys})">
            <summary>
            Determines whether the specified key and modifier was released
            </summary>
            <returns><c>true</c> the key with modifier was released; otherwise, <c>false</c>.</returns>
            <param name="key">Key to test if it was released</param>
            <param name="modifier">Modifier of the key, or null to allow any modifiers</param>
        </member>
        <member name="M:Eto.Forms.KeyEventArgs.IsKeyDown(Eto.Forms.Keys,System.Nullable{Eto.Forms.Keys})">
            <summary>
            Determines whether the specified key and modifier was pressed
            </summary>
            <returns><c>true</c> the key with modifier was pressed; otherwise, <c>false</c>.</returns>
            <param name="key">Key to test if it was pressed</param>
            <param name="modifier">Modifier of the key, or null to allow any modifiers</param>
        </member>
        <member name="T:Eto.Forms.TextAlignment">
            <summary>
            Specifies the text alignment for a <see cref="T:Eto.Forms.Label"/>
            </summary>
        </member>
        <member name="F:Eto.Forms.TextAlignment.Left">
            <summary>
            Text will be aligned to the left
            </summary>
        </member>
        <member name="F:Eto.Forms.TextAlignment.Center">
            <summary>
            Text will be aligned in the center of the label
            </summary>
        </member>
        <member name="F:Eto.Forms.TextAlignment.Right">
            <summary>
            Text will be aligned to the right
            </summary>
        </member>
        <member name="T:Eto.Forms.WrapMode">
            <summary>
            Specifies the wrapping mode for the text of a <see cref="T:Eto.Forms.Label"/>
            </summary>
            <remarks>
            Regardless of the mode, you can always add hard wraps by inserting newline characters.
            </remarks>
        </member>
        <member name="F:Eto.Forms.WrapMode.None">
            <summary>
            No wrapping, the text will clip when smaller than the required space for the text.
            </summary>
        </member>
        <member name="F:Eto.Forms.WrapMode.Word">
            <summary>
            Text will wrap by word to fit the horizontal space available
            </summary>
        </member>
        <member name="F:Eto.Forms.WrapMode.Character">
            <summary>
            Text will wrap by character to fit the horizontal space available
            </summary>
        </member>
        <member name="T:Eto.Forms.Label">
            <summary>
            Displays a string of text on the form
            </summary>
        </member>
        <member name="P:Eto.Forms.Label.Wrap">
            <summary>
            Gets or sets the wrap mode for the text
            </summary>
            <remarks>
            This defines the soft wrapping for the label's text. 
            Hard wraps can be placed in the text with newline characters.
            
            Wrapping will only occur if the label's width is smaller than the space needed for the text.
            If you are autosizing your control, it may get autosized to the width so you will have to add constraints
            to the container or explicitly set the size.
            </remarks>
            <value>The wrapping mode for the text.</value>
        </member>
        <member name="P:Eto.Forms.Label.TextAlignment">
            <summary>
            Gets or sets the horizontal alignment of the text.
            </summary>
            <remarks>
            When auto sizing the label, this won't have an affect unless the label's container is larger than the text.
            </remarks>
            <value>The horizontal alignment.</value>
        </member>
        <member name="P:Eto.Forms.Label.HorizontalAlign">
            <summary>
            Gets or sets the horizontal alignment of the text.
            </summary>
            <remarks>
            When auto sizing the label, this won't have an affect unless the label's container is larger than the text.
            </remarks>
            <value>The horizontal alignment.</value>
        </member>
        <member name="P:Eto.Forms.Label.VerticalAlignment">
            <summary>
            Gets or sets the vertical alignment of the text.
            </summary>
            <remarks>
            When auto sizing the label, this won't have an affect unless the label's container is larger than the text.
            </remarks>
            <value>The vertical alignment.</value>
        </member>
        <member name="P:Eto.Forms.Label.VerticalAlign">
            <summary>
            Gets or sets the vertical alignment of the text.
            </summary>
            <remarks>
            When auto sizing the label, this won't have an affect unless the label's container is larger than the text.
            </remarks>
            <value>The vertical alignment.</value>
        </member>
        <member name="T:Eto.Forms.Label.IHandler">
            <summary>
            Handler interface for the <see cref="T:Eto.Forms.Label"/>
            </summary>
        </member>
        <member name="P:Eto.Forms.Label.IHandler.TextAlignment">
            <summary>
            Gets or sets the horizontal alignment of the text.
            </summary>
            <remarks>
            When auto sizing the label, this won't have an affect unless the label's container is larger than the text.
            </remarks>
            <value>The horizontal alignment.</value>
        </member>
        <member name="P:Eto.Forms.Label.IHandler.VerticalAlignment">
            <summary>
            Gets or sets the vertical alignment of the text.
            </summary>
            <remarks>
            When auto sizing the label, this won't have an affect unless the label's container is larger than the text.
            </remarks>
            <value>The vertical alignment.</value>
        </member>
        <member name="P:Eto.Forms.Label.IHandler.Wrap">
            <summary>
            Gets or sets the wrap mode for the text
            </summary>
            <remarks>
            This defines the soft wrapping for the label's text. 
            Hard wraps can be placed in the text with newline characters.
            
            Wrapping will only occur if the label's width is smaller than the space needed for the text.
            If you are autosizing your control, it may get autosized to the width so you will have to add constraints
            to the container or explicitly set the size.
            </remarks>
            <value>The wrapping mode for the text.</value>
        </member>
        <member name="T:Eto.Forms.HorizontalAlign">
            <summary>
            Specifies the horizontal alignment for a <see cref="T:Eto.Forms.Label"/>
            </summary>
        </member>
        <member name="P:Eto.Forms.HorizontalAlign.Center">
            <summary>
            Text will be aligned in the center of the label
            </summary>
        </member>
        <member name="P:Eto.Forms.HorizontalAlign.Left">
            <summary>
            Text will be aligned to the left
            </summary>
        </member>
        <member name="P:Eto.Forms.HorizontalAlign.Right">
            <summary>
            Text will be aligned to the right
            </summary>
        </member>
        <member name="M:Eto.Forms.HorizontalAlign.op_Implicit(Eto.Forms.HorizontalAlign)~Eto.Forms.TextAlignment">
            <summary>Converts to a TextAlignment</summary>
        </member>
        <member name="M:Eto.Forms.HorizontalAlign.op_Implicit(Eto.Forms.TextAlignment)~Eto.Forms.HorizontalAlign">
            <summary>Converts an TextAlignment to a HorizontalAlign</summary>
        </member>
        <member name="M:Eto.Forms.HorizontalAlign.op_Equality(Eto.Forms.TextAlignment,Eto.Forms.HorizontalAlign)">
            <summary>Compares for equality</summary>
            <param name="value1">Value1.</param>
            <param name="value2">Value2.</param>
        </member>
        <member name="M:Eto.Forms.HorizontalAlign.op_Inequality(Eto.Forms.TextAlignment,Eto.Forms.HorizontalAlign)">
            <summary>Compares for inequality</summary>
            <param name="value1">Value1.</param>
            <param name="value2">Value2.</param>
        </member>
        <member name="M:Eto.Forms.HorizontalAlign.op_Implicit(System.String)~Eto.Forms.HorizontalAlign">
            <summary>Convert from string to vertical align (for json/xaml compat)</summary>
            <param name="value">Value.</param>
        </member>
        <member name="M:Eto.Forms.HorizontalAlign.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:Eto.Forms.HorizontalAlign"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:Eto.Forms.HorizontalAlign"/>.</param>
            <returns><c>true</c> if the specified <see cref="T:System.Object"/> is equal to the current
            <see cref="T:Eto.Forms.HorizontalAlign"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Eto.Forms.HorizontalAlign.GetHashCode">
            <summary>
            Serves as a hash function for a <see cref="T:Eto.Forms.HorizontalAlign"/> object.
            </summary>
            <returns>A hash code for this instance that is suitable for use in hashing algorithms and data structures such as a hash table.</returns>
        </member>
        <member name="T:Eto.Forms.VerticalAlign">
            <summary>
            Specifies the horizontal alignment for a <see cref="T:Eto.Forms.Label"/>
            </summary>
        </member>
        <member name="P:Eto.Forms.VerticalAlign.Middle">
            <summary>
            Text will be aligned to the middle of the label
            </summary>
        </member>
        <member name="P:Eto.Forms.VerticalAlign.Top">
            <summary>
            Text will be aligned to the top of the label
            </summary>
        </member>
        <member name="P:Eto.Forms.VerticalAlign.Bottom">
            <summary>
            Text will be aligned to the bottom of the label
            </summary>
        </member>
        <member name="M:Eto.Forms.VerticalAlign.op_Implicit(Eto.Forms.VerticalAlign)~Eto.Forms.VerticalAlignment">
            <summary>Converts to an VerticalAlignment</summary>
        </member>
        <member name="M:Eto.Forms.VerticalAlign.op_Implicit(Eto.Forms.VerticalAlignment)~Eto.Forms.VerticalAlign">
            <summary>Converts an VerticalAlignment to a VerticalAlign</summary>
        </member>
        <member name="M:Eto.Forms.VerticalAlign.op_Equality(Eto.Forms.VerticalAlignment,Eto.Forms.VerticalAlign)">
            <summary>Compares for equality</summary>
            <param name="value1">Value1.</param>
            <param name="value2">Value2.</param>
        </member>
        <member name="M:Eto.Forms.VerticalAlign.op_Inequality(Eto.Forms.VerticalAlignment,Eto.Forms.VerticalAlign)">
            <summary>Compares for inequality</summary>
            <param name="value1">Value1.</param>
            <param name="value2">Value2.</param>
        </member>
        <member name="M:Eto.Forms.VerticalAlign.op_Implicit(System.String)~Eto.Forms.VerticalAlign">
            <summary>Convert from string to vertical align (for json/xaml compat)</summary>
            <param name="value">Value.</param>
        </member>
        <member name="M:Eto.Forms.VerticalAlign.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:Eto.Forms.VerticalAlign"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:Eto.Forms.VerticalAlign"/>.</param>
            <returns><c>true</c> if the specified <see cref="T:System.Object"/> is equal to the current
            <see cref="T:Eto.Forms.VerticalAlign"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Eto.Forms.VerticalAlign.GetHashCode">
            <summary>
            Serves as a hash function for a <see cref="T:Eto.Forms.VerticalAlign"/> object.
            </summary>
            <returns>A hash code for this instance that is suitable for use in hashing algorithms and data structures such as a hash table.</returns>
        </member>
        <member name="T:Eto.Forms.LinkButton">
            <summary>
            Button that is visually represented like a hyperlink on a web page.
            </summary>
        </member>
        <member name="F:Eto.Forms.LinkButton.ClickEvent">
            <summary>
            Event identifier for the <see cref="E:Eto.Forms.LinkButton.Click"/> event.
            </summary>
        </member>
        <member name="E:Eto.Forms.LinkButton.Click">
            <summary>
            Occurs when an individual cell is clicked.
            </summary>
        </member>
        <member name="M:Eto.Forms.LinkButton.OnClick(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Eto.Forms.LinkButton.Click"/> event.
            </summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="P:Eto.Forms.LinkButton.Command">
            <summary>
            Gets or sets the command to invoke when the link button is pressed.
            </summary>
            <remarks>
            This will invoke the specified command when the link button is pressed.
            The <see cref="M:System.Windows.Input.ICommand.CanExecute(System.Object)"/> will also used to set the enabled/disabled state of the link button.
            </remarks>
            <value>The command to invoke.</value>
        </member>
        <member name="P:Eto.Forms.LinkButton.CommandParameter">
            <summary>
            Gets or sets the parameter to pass to the <see cref="P:Eto.Forms.LinkButton.Command"/> when executing or determining its CanExecute state.
            </summary>
            <value>The command parameter.</value>
        </member>
        <member name="P:Eto.Forms.LinkButton.DisabledTextColor">
            <summary>
            Gets or sets the color of the text when the control is disabled.
            </summary>
            <value>The color of the text when disabled.</value>
        </member>
        <member name="M:Eto.Forms.LinkButton.GetCallback">
            <summary>
            Gets an instance of an object used to perform callbacks to the widget from handler implementations
            </summary>
            <returns>The callback instance to use for this widget</returns>
        </member>
        <member name="T:Eto.Forms.LinkButton.ICallback">
            <summary>
            Callback interface for <see cref="T:Eto.Forms.LinkButton"/>
            </summary>
        </member>
        <member name="M:Eto.Forms.LinkButton.ICallback.OnClick(Eto.Forms.LinkButton,System.EventArgs)">
            <summary>
            Raises the click event.
            </summary>
        </member>
        <member name="T:Eto.Forms.LinkButton.Callback">
            <summary>
            Callback implementation for handlers of <see cref="T:Eto.Forms.LinkButton"/>
            </summary>
        </member>
        <member name="M:Eto.Forms.LinkButton.Callback.OnClick(Eto.Forms.LinkButton,System.EventArgs)">
            <summary>
            Raises the click event.
            </summary>
        </member>
        <member name="T:Eto.Forms.LinkButton.IHandler">
            <summary>
            Handler interface for the <see cref="T:Eto.Forms.LinkButton"/> control
            </summary>
            <copyright>(c) 2012-2014 by Curtis Wensley</copyright>
            <license type="BSD-3">See LICENSE for full terms</license>
        </member>
        <member name="P:Eto.Forms.LinkButton.IHandler.DisabledTextColor">
            <summary>
            Gets or sets the color of the text when the control is disabled.
            </summary>
        </member>
        <member name="T:Eto.Forms.IImageListItem">
            <summary>
            Represents a list item that can have an image associated with each item.
            </summary>
            <remarks>
            Not all controls that use the <see cref="T:Eto.Forms.IListItem"/> can support images, for example the <see cref="T:Eto.Forms.DropDown"/>.
            </remarks>
        </member>
        <member name="P:Eto.Forms.IImageListItem.Image">
            <summary>
            Gets the image for this item.
            </summary>
            <value>The item's image.</value>
        </member>
        <member name="T:Eto.Forms.ListBox">
            <summary>
            Control to show a list of items that the user can select
            </summary>
        </member>
        <member name="P:Eto.Forms.ListBox.ItemImageBinding">
            <summary>
            Gets or sets the binding for the Image of each item
            </summary>
            <remarks>
            By default will be an public Image property on your object
            </remarks>
            <value>The image binding.</value>
        </member>
        <member name="P:Eto.Forms.ListBox.ImageBinding">
            <summary>
            Gets or sets the binding for the Image of each item
            </summary>
            <remarks>
            By default will be an public Image property on your object
            </remarks>
            <value>The image binding.</value>
        </member>
        <member name="E:Eto.Forms.ListBox.Activated">
            <summary>
            Occurs when an item is activated, usually with a double click or by pressing enter.
            </summary>
        </member>
        <member name="M:Eto.Forms.ListBox.OnActivated(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Eto.Forms.ListBox.Activated"/>event.
            </summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:Eto.Forms.ListBox.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Eto.Forms.ListBox"/> class.
            </summary>
        </member>
        <member name="P:Eto.Forms.ListBox.ContextMenu">
            <summary>
            Gets or sets the context menu for the control.
            </summary>
            <value>The context menu.</value>
        </member>
        <member name="M:Eto.Forms.ListBox.GetCallback">
            <summary>
            Gets an instance of an object used to perform callbacks to the widget from handler implementations
            </summary>
            <returns>The callback instance to use for this widget</returns>
        </member>
        <member name="T:Eto.Forms.ListBox.ICallback">
            <summary>
            Callback interface for the <see cref="T:Eto.Forms.ListBox"/>
            </summary>
        </member>
        <member name="M:Eto.Forms.ListBox.ICallback.OnActivated(Eto.Forms.ListBox,System.EventArgs)">
            <summary>
            Raises the activated event.
            </summary>
        </member>
        <member name="T:Eto.Forms.ListBox.Callback">
            <summary>
            Callback implementation for handlers of <see cref="T:Eto.Forms.ListBox"/>
            </summary>
        </member>
        <member name="M:Eto.Forms.ListBox.Callback.OnActivated(Eto.Forms.ListBox,System.EventArgs)">
            <summary>
            Raises the activated event.
            </summary>
        </member>
        <member name="T:Eto.Forms.ListBox.IHandler">
            <summary>
            Handler interface for the <see cref="T:Eto.Forms.ListBox"/>
            </summary>
        </member>
        <member name="T:Eto.Forms.ListItemCollection">
            <summary>
            A collection of <see cref="T:Eto.Forms.ListItem"/> objects for use with <see cref="T:Eto.Forms.ListControl"/> objects
            </summary>
            <remarks>
            This is used to provide an easy way to add items to a <see cref="T:Eto.Forms.ListControl"/>.
            It is not mandatory to use this collection, however, since each control can specify bindings to your own
            model objects using <see cref="P:Eto.Forms.ListControl.ItemKeyBinding"/>, <see cref="P:Eto.Forms.ListControl.ItemTextBinding"/>, or other
            subclass bindings.
            </remarks>
        </member>
        <member name="M:Eto.Forms.ListItemCollection.#ctor">
            <summary>
            Initializes a new instance of the ListItemCollection class.
            </summary>
        </member>
        <member name="M:Eto.Forms.ListItemCollection.#ctor(System.Collections.Generic.IEnumerable{Eto.Forms.IListItem})">
            <summary>
            Initializes a new instance of the ListItemCollection class with the specified collection.
            </summary>
            <param name="collection">Collection of items to populate this collection with</param>
        </member>
        <member name="M:Eto.Forms.ListItemCollection.Add(System.String)">
            <summary>
            Adds a new item to the list with the specified text
            </summary>
            <param name="text">Text to display for the item.</param>
        </member>
        <member name="M:Eto.Forms.ListItemCollection.Add(System.String,System.String)">
            <summary>
            Add a new item to the list with the specified text and key
            </summary>
            <param name="text">Text to display for the item.</param>
            <param name="key">Key for the item.</param>
        </member>
        <member name="T:Eto.Forms.ListControl">
            <summary>
            Base control binding to a list of items
            </summary>
        </member>
        <member name="P:Eto.Forms.ListControl.ItemTextBinding">
            <summary>
            Gets or sets the binding for the text value of each item.
            </summary>
            <value>The text binding.</value>
        </member>
        <member name="P:Eto.Forms.ListControl.ItemKeyBinding">
            <summary>
            Gets or sets the binding for the key value of each item.
            </summary>
            <value>The key binding.</value>
        </member>
        <member name="P:Eto.Forms.ListControl.TextBinding">
            <summary>
            Gets or sets the binding for the text value of each item.
            </summary>
            <value>The text binding.</value>
        </member>
        <member name="P:Eto.Forms.ListControl.KeyBinding">
            <summary>
            Gets or sets the binding for the key value of each item.
            </summary>
            <value>The key binding.</value>
        </member>
        <member name="E:Eto.Forms.ListControl.SelectedIndexChanged">
            <summary>
            Occurs when the <see cref="P:Eto.Forms.ListControl.SelectedIndex"/> changed.
            </summary>
        </member>
        <member name="M:Eto.Forms.ListControl.OnSelectedIndexChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Eto.Forms.ListControl.SelectedIndexChanged"/> event.
            </summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="E:Eto.Forms.ListControl.SelectedValueChanged">
            <summary>
            Occurs when the <see cref="P:Eto.Forms.ListControl.SelectedValue"/> changed.
            </summary>
        </member>
        <member name="M:Eto.Forms.ListControl.OnSelectedValueChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Eto.Forms.ListControl.SelectedValueChanged"/> event.
            </summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="E:Eto.Forms.ListControl.SelectedKeyChanged">
            <summary>
            Occurs when the <see cref="P:Eto.Forms.ListControl.SelectedValue"/> changed.
            </summary>
        </member>
        <member name="M:Eto.Forms.ListControl.OnSelectedKeyChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Eto.Forms.ListControl.SelectedValueChanged"/> event.
            </summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:Eto.Forms.ListControl.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Eto.Forms.ListControl"/> class.
            </summary>
        </member>
        <member name="P:Eto.Forms.ListControl.Items">
            <summary>
            Gets the list of items in the control.
            </summary>
            <remarks>
            This is an alternate to using <see cref="P:Eto.Forms.ListControl.DataStore"/> to easily add items to the list, when you do not
            want to use custom objects as the source for the list.
            This will set the <see cref="P:Eto.Forms.ListControl.DataStore"/> to a new instance of a <see cref="T:Eto.Forms.ListItemCollection"/>.
            </remarks>
            <value>The items.</value>
        </member>
        <member name="P:Eto.Forms.ListControl.DataStore">
            <summary>
            Gets or sets the data store for the items of the list control.
            </summary>
            <value>The data store.</value>
        </member>
        <member name="P:Eto.Forms.ListControl.SelectedIndex">
            <summary>
            Gets or sets the index of the currently selected item in the <see cref="P:Eto.Forms.ListControl.DataStore"/>
            </summary>
            <value>The index of the selected item.</value>
        </member>
        <member name="P:Eto.Forms.ListControl.SelectedValue">
            <summary>
            Gets or sets the selected object value of the item in <see cref="P:Eto.Forms.ListControl.DataStore"/>
            </summary>
            <value>The selected value.</value>
        </member>
        <member name="P:Eto.Forms.ListControl.SelectedKey">
            <summary>
            Gets or sets the key of the selected item in the <see cref="P:Eto.Forms.ListControl.DataStore"/>.
            </summary>
            <remarks>
            This uses the <see cref="P:Eto.Forms.ListControl.ItemKeyBinding"/> to map the key for each item in the list.
            </remarks>
            <value>The selected key.</value>
        </member>
        <member name="P:Eto.Forms.ListControl.TextColor">
            <summary>
            Gets or sets the color of the text.
            </summary>
            <remarks>
            By default, the text will get a color based on the user's theme. However, this is usually black.
            </remarks>
            <value>The color of the text.</value>
        </member>
        <member name="M:Eto.Forms.ListControl.OnLoadComplete(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Eto.Forms.Control.LoadComplete"/> event.
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:Eto.Forms.ListControl.CreateDefaultDataStore">
            <summary>
            Creates the default data store for the list.
            </summary>
            <remarks>
            This is used to create a data store if one is not specified by the user.
            This can be used by subclasses to provide default items to populate the list.
            </remarks>
            <returns>The default data store.</returns>
        </member>
        <member name="P:Eto.Forms.ListControl.SelectedIndexBinding">
            <summary>
            Gets the binding to the <see cref="P:Eto.Forms.ListControl.SelectedIndex"/> property.
            </summary>
            <value>The selected index binding.</value>
        </member>
        <member name="P:Eto.Forms.ListControl.SelectedKeyBinding">
            <summary>
            Gets the binding to the <see cref="P:Eto.Forms.ListControl.SelectedKey"/> property.
            </summary>
            <value>The selected key binding.</value>
        </member>
        <member name="P:Eto.Forms.ListControl.SelectedValueBinding">
            <summary>
            Gets the binding to the <see cref="P:Eto.Forms.ListControl.SelectedValue"/> property.
            </summary>
            <value>The selected value binding.</value>
        </member>
        <member name="M:Eto.Forms.ListControl.GetCallback">
            <summary>
            Gets an instance of an object used to perform callbacks to the widget from handler implementations
            </summary>
            <returns>The callback instance to use for this widget</returns>
        </member>
        <member name="T:Eto.Forms.ListControl.ICallback">
            <summary>
            Callback interface for the <see cref="T:Eto.Forms.ListControl"/>
            </summary>
        </member>
        <member name="M:Eto.Forms.ListControl.ICallback.OnSelectedIndexChanged(Eto.Forms.ListControl,System.EventArgs)">
            <summary>
            Raises the selected index changed event.
            </summary>
        </member>
        <member name="T:Eto.Forms.ListControl.Callback">
            <summary>
            Callback implementation for handlers of <see cref="T:Eto.Forms.ListControl"/>
            </summary>
        </member>
        <member name="M:Eto.Forms.ListControl.Callback.OnSelectedIndexChanged(Eto.Forms.ListControl,System.EventArgs)">
            <summary>
            Raises the selected index changed event.
            </summary>
        </member>
        <member name="T:Eto.Forms.ListControl.IHandler">
            <summary>
            Handler interface for the <see cref="T:Eto.Forms.ListControl"/>
            </summary>
        </member>
        <member name="P:Eto.Forms.ListControl.IHandler.DataStore">
            <summary>
            Gets or sets the data store for the items of the list control.
            </summary>
            <value>The data store.</value>
        </member>
        <member name="P:Eto.Forms.ListControl.IHandler.SelectedIndex">
            <summary>
            Gets or sets the index of the currently selected item in the <see cref="P:Eto.Forms.ListControl.IHandler.DataStore"/>
            </summary>
            <value>The index of the selected item.</value>
        </member>
        <member name="P:Eto.Forms.ListControl.IHandler.TextColor">
            <summary>
            Gets or sets the color of the text.
            </summary>
            <remarks>
            By default, the text will get a color based on the user's theme. However, this is usually black.
            </remarks>
            <value>The color of the text.</value>
        </member>
        <member name="T:Eto.Forms.InsertKeyMode">
            <summary>
            Mode for insertion of text when the user types into a control.
            </summary>
        </member>
        <member name="F:Eto.Forms.InsertKeyMode.Insert">
            <summary>
            Always insert, shifting any characters to the right of the caret position when inserting or deleting text.
            </summary>
        </member>
        <member name="F:Eto.Forms.InsertKeyMode.Overwrite">
            <summary>
            Always overwrite and do not shift characters when inserting or deleting text.
            </summary>
        </member>
        <member name="F:Eto.Forms.InsertKeyMode.Toggle">
            <summary>
            Allow the user to toggle the insert mode (fn+Return on OS X or insert key on other keyboards)
            </summary>
        </member>
        <member name="T:Eto.Forms.NumericMaskedTextBox`1">
            <summary>
            Masked text box with a variable length numeric mask.
            </summary>
            <remarks>
            This provides a text box that limits the user input to only allow numeric values.
            </remarks>
            <typeparam name="T">Numeric type such as int, decimal, double, etc.</typeparam>
        </member>
        <member name="P:Eto.Forms.NumericMaskedTextBox`1.Provider">
            <summary>
            Gets the numeric provider.
            </summary>
            <value>The masked text provider.</value>
        </member>
        <member name="P:Eto.Forms.NumericMaskedTextBox`1.AllowSign">
            <summary>
            Gets or sets a value indicating whether the mask can accept a sign.
            </summary>
            <remarks>
            This defaults to whether the type specified by <typeparamref name="T"/> allows negative values.
            </remarks>
            <value><c>true</c> to allow sign character; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Eto.Forms.NumericMaskedTextBox`1.AllowDecimal">
            <summary>
            Gets or sets a value indicating whether the mask can input a decimal.
            </summary>
            <remarks>
            This defaults to whether the type specified by <typeparamref name="T"/> allows decimals, such as when
            it is a decimal, double, or float.
            </remarks>
            <value><c>true</c> to allow decimal; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Eto.Forms.NumericMaskedTextBox`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Eto.Forms.NumericMaskedTextBox`1"/> class.
            </summary>
        </member>
        <member name="T:Eto.Forms.MaskedTextBox`1">
            <summary>
            Masked text box that provides a value converted to/from text
            </summary>
            <remarks>
            This is useful when the text can be converted to another type (e.g. DateTime, numeric, etc).
            
            The <see cref="P:Eto.Forms.MaskedTextBox`1.Provider"/> specified for the control is responsible for converting the value.
            </remarks>
        </member>
        <member name="E:Eto.Forms.MaskedTextBox`1.ValueChanged">
            <summary>
            Event to handle when the <see cref="P:Eto.Forms.MaskedTextBox`1.Value"/> property changes
            </summary>
        </member>
        <member name="P:Eto.Forms.MaskedTextBox`1.Provider">
            <summary>
            Gets or sets the provider for the text box
            </summary>
            <value>The provider.</value>
        </member>
        <member name="M:Eto.Forms.MaskedTextBox`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Eto.Forms.MaskedTextBox`1"/> class.
            </summary>
        </member>
        <member name="M:Eto.Forms.MaskedTextBox`1.#ctor(Eto.Forms.IMaskedTextProvider{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Eto.Forms.MaskedTextBox`1"/> class with the specified masked text provider.
            </summary>
            <param name="provider">Masked text provider to format the mask.</param>
        </member>
        <member name="P:Eto.Forms.MaskedTextBox`1.Value">
            <summary>
            Gets or sets the translated value of the masked text.
            </summary>
            <value>The translated value.</value>
        </member>
        <member name="P:Eto.Forms.MaskedTextBox`1.ValueBinding">
            <summary>
            Gets a binding for the <see cref="P:Eto.Forms.MaskedTextBox`1.Value"/> property.
            </summary>
            <value>The value binding.</value>
        </member>
        <member name="T:Eto.Forms.MaskedTextBox">
            <summary>
            Text box with masking capabilities.
            </summary>
            <remarks>
            This uses the <see cref="T:Eto.Forms.IMaskedTextProvider"/> as its interface to the mask.  
            The mask can implement any format it wishes, including both fixed or variable length masks.
            </remarks>
        </member>
        <member name="P:Eto.Forms.MaskedTextBox.SupportsInsert">
            <summary>
            Gets a cached value indicating the current platform supports getting the insert mode state.
            </summary>
        </member>
        <member name="P:Eto.Forms.MaskedTextBox.ManualOverwriteMode">
            <summary>
            If the platform doesn't support global insert/overwrite mode, this stores an application-wide state of the insert mode
            </summary>
        </member>
        <member name="P:Eto.Forms.MaskedTextBox.Provider">
            <summary>
            Gets or sets the masked text provider to specify the mask format.
            </summary>
            <value>The masked text provider.</value>
        </member>
        <member name="P:Eto.Forms.MaskedTextBox.InsertMode">
            <summary>
            Gets or sets the mode for insertion. Use <see cref="P:Eto.Forms.MaskedTextBox.IsOverwrite"/> to determine the current mode.
            </summary>
            <value>The desired insert mode.</value>
        </member>
        <member name="P:Eto.Forms.MaskedTextBox.IsOverwrite">
            <summary>
            Gets a value indicating whether typing will overwrite text.
            </summary>
            <seealso cref="P:Eto.Forms.MaskedTextBox.InsertMode"/> 
            <value><c>true</c> if text will be overwritten; otherwise, <c>false</c> to insert text.</value>
        </member>
        <member name="P:Eto.Forms.MaskedTextBox.ShowPromptOnFocus">
            <summary>
            Gets or sets a value indicating that the prompt characters should only be shown when the control has focus.
            </summary>
            <value><c>true</c> if to show the prompt only when focussed; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Eto.Forms.MaskedTextBox.ShowPlaceholderWhenEmpty">
            <summary>
            Gets or sets a value indicating that the placeholder should be shown when the mask is empty and the control does
            not have focus.
            </summary>
            <value><c>true</c> to show the placeholder when its value is empty; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Eto.Forms.MaskedTextBox.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Eto.Forms.MaskedTextBox"/> class.
            </summary>
        </member>
        <member name="M:Eto.Forms.MaskedTextBox.#ctor(Eto.Forms.IMaskedTextProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Eto.Forms.MaskedTextBox"/> class with the specified masked text provider.
            </summary>
            <param name="provider">Masked text provider to specify the format of the mask.</param>
        </member>
        <member name="M:Eto.Forms.MaskedTextBox.UpdateText">
            <summary>
            Updates the text to the display text from the provider.
            </summary>
            <remarks>
            Call this in a subclass when you want to update the text based on the state of the control.
            When the <see cref="P:Eto.Forms.IMaskedTextProvider.IsEmpty"/> is true, it will set the text to null to show the placeholder text.
            
            Override this to perform other actions before or after the text of the control is updated.
            </remarks>
        </member>
        <member name="M:Eto.Forms.MaskedTextBox.OnLoadComplete(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Eto.Forms.Control.LoadComplete"/> event.
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:Eto.Forms.MaskedTextBox.OnGotFocus(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Eto.Forms.Control.GotFocus"/> event.
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:Eto.Forms.MaskedTextBox.OnLostFocus(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Eto.Forms.Control.LostFocus"/> event.
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:Eto.Forms.MaskedTextBox.OnTextChanging(Eto.Forms.TextChangingEventArgs)">
            <summary>
            Raises the <see cref="E:Eto.Forms.TextBox.TextChanging"/> event.
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:Eto.Forms.MaskedTextBox.OnKeyDown(Eto.Forms.KeyEventArgs)">
            <summary>
            Raises the <see cref="E:Eto.Forms.Control.KeyDown"/> event.
            </summary>
            <param name="e">Key event arguments</param>
        </member>
        <member name="P:Eto.Forms.MaskedTextBox.Text">
            <summary>
            Gets or sets the text of the control including any mask characters.
            </summary>
            <value>The text content of the control.</value>
        </member>
        <member name="P:Eto.Forms.MaskedTextBox.MaskCompleted">
            <summary>
            Gets a value indicating whether the mask is completed.
            </summary>
            <value><c>true</c> if mask completed; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Eto.Forms.NumericMaskedTextStepper`1">
            <summary>
            Masked text box with a variable length numeric mask.
            </summary>
            <remarks>
            This provides a text box that limits the user input to only allow numeric values.
            </remarks>
            <typeparam name="T">Numeric type such as int, decimal, double, etc.</typeparam>
        </member>
        <member name="P:Eto.Forms.NumericMaskedTextStepper`1.Provider">
            <summary>
            Gets the numeric provider.
            </summary>
            <value>The masked text provider.</value>
        </member>
        <member name="P:Eto.Forms.NumericMaskedTextStepper`1.AllowSign">
            <summary>
            Gets or sets a value indicating whether the mask can accept a sign.
            </summary>
            <remarks>
            This defaults to whether the type specified by <typeparamref name="T"/> allows negative values.
            </remarks>
            <value><c>true</c> to allow sign character; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Eto.Forms.NumericMaskedTextStepper`1.AllowDecimal">
            <summary>
            Gets or sets a value indicating whether the mask can input a decimal.
            </summary>
            <remarks>
            This defaults to whether the type specified by <typeparamref name="T"/> allows decimals, such as when
            it is a decimal, double, or float.
            </remarks>
            <value><c>true</c> to allow decimal; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Eto.Forms.NumericMaskedTextStepper`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Eto.Forms.NumericMaskedTextStepper`1"/> class.
            </summary>
        </member>
        <member name="T:Eto.Forms.MaskedTextStepper`1">
            <summary>
            Masked text box that provides a value converted to/from text
            </summary>
            <remarks>
            This is useful when the text can be converted to another type (e.g. DateTime, numeric, etc).
            
            The <see cref="P:Eto.Forms.MaskedTextStepper`1.Provider"/> specified for the control is responsible for converting the value.
            </remarks>
        </member>
        <member name="E:Eto.Forms.MaskedTextStepper`1.ValueChanged">
            <summary>
            Event to handle when the <see cref="P:Eto.Forms.MaskedTextStepper`1.Value"/> property changes
            </summary>
        </member>
        <member name="P:Eto.Forms.MaskedTextStepper`1.Provider">
            <summary>
            Gets or sets the provider for the text box
            </summary>
            <value>The provider.</value>
        </member>
        <member name="M:Eto.Forms.MaskedTextStepper`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Eto.Forms.MaskedTextStepper`1"/> class.
            </summary>
        </member>
        <member name="M:Eto.Forms.MaskedTextStepper`1.#ctor(Eto.Forms.IMaskedTextProvider{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Eto.Forms.MaskedTextStepper`1"/> class with the specified masked text provider.
            </summary>
            <param name="provider">Masked text provider to format the mask.</param>
        </member>
        <member name="P:Eto.Forms.MaskedTextStepper`1.Value">
            <summary>
            Gets or sets the translated value of the masked text.
            </summary>
            <value>The translated value.</value>
        </member>
        <member name="P:Eto.Forms.MaskedTextStepper`1.ValueBinding">
            <summary>
            Gets a binding for the <see cref="P:Eto.Forms.MaskedTextStepper`1.Value"/> property.
            </summary>
            <value>The value binding.</value>
        </member>
        <member name="T:Eto.Forms.MaskedTextStepper">
            <summary>
            Text box with masking capabilities.
            </summary>
            <remarks>
            This uses the <see cref="T:Eto.Forms.IMaskedTextProvider"/> as its interface to the mask.  
            The mask can implement any format it wishes, including both fixed or variable length masks.
            </remarks>
        </member>
        <member name="P:Eto.Forms.MaskedTextStepper.SupportsInsert">
            <summary>
            Gets a cached value indicating the current platform supports getting the insert mode state.
            </summary>
        </member>
        <member name="P:Eto.Forms.MaskedTextStepper.ManualOverwriteMode">
            <summary>
            If the platform doesn't support global insert/overwrite mode, this stores an application-wide state of the insert mode
            </summary>
        </member>
        <member name="P:Eto.Forms.MaskedTextStepper.Provider">
            <summary>
            Gets or sets the masked text provider to specify the mask format.
            </summary>
            <value>The masked text provider.</value>
        </member>
        <member name="P:Eto.Forms.MaskedTextStepper.InsertMode">
            <summary>
            Gets or sets the mode for insertion. Use <see cref="P:Eto.Forms.MaskedTextStepper.IsOverwrite"/> to determine the current mode.
            </summary>
            <value>The desired insert mode.</value>
        </member>
        <member name="P:Eto.Forms.MaskedTextStepper.IsOverwrite">
            <summary>
            Gets a value indicating whether typing will overwrite text.
            </summary>
            <seealso cref="P:Eto.Forms.MaskedTextStepper.InsertMode"/> 
            <value><c>true</c> if text will be overwritten; otherwise, <c>false</c> to insert text.</value>
        </member>
        <member name="P:Eto.Forms.MaskedTextStepper.ShowPromptOnFocus">
            <summary>
            Gets or sets a value indicating that the prompt characters should only be shown when the control has focus.
            </summary>
            <value><c>true</c> if to show the prompt only when focussed; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Eto.Forms.MaskedTextStepper.ShowPlaceholderWhenEmpty">
            <summary>
            Gets or sets a value indicating that the placeholder should be shown when the mask is empty and the control does
            not have focus.
            </summary>
            <value><c>true</c> to show the placeholder when its value is empty; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Eto.Forms.MaskedTextStepper.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Eto.Forms.MaskedTextStepper"/> class.
            </summary>
        </member>
        <member name="M:Eto.Forms.MaskedTextStepper.#ctor(Eto.Forms.IMaskedTextProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Eto.Forms.MaskedTextStepper"/> class with the specified masked text provider.
            </summary>
            <param name="provider">Masked text provider to specify the format of the mask.</param>
        </member>
        <member name="M:Eto.Forms.MaskedTextStepper.UpdateText">
            <summary>
            Updates the text to the display text from the provider.
            </summary>
            <remarks>
            Call this in a subclass when you want to update the text based on the state of the control.
            When the <see cref="P:Eto.Forms.IMaskedTextProvider.IsEmpty"/> is true, it will set the text to null to show the placeholder text.
            
            Override this to perform other actions before or after the text of the control is updated.
            </remarks>
        </member>
        <member name="M:Eto.Forms.MaskedTextStepper.OnLoadComplete(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Eto.Forms.Control.LoadComplete"/> event.
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:Eto.Forms.MaskedTextStepper.OnGotFocus(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Eto.Forms.Control.GotFocus"/> event.
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:Eto.Forms.MaskedTextStepper.OnLostFocus(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Eto.Forms.Control.LostFocus"/> event.
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:Eto.Forms.MaskedTextStepper.OnTextChanging(Eto.Forms.TextChangingEventArgs)">
            <summary>
            Raises the <see cref="E:Eto.Forms.TextBox.TextChanging"/> event.
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:Eto.Forms.MaskedTextStepper.OnKeyDown(Eto.Forms.KeyEventArgs)">
            <summary>
            Raises the <see cref="E:Eto.Forms.Control.KeyDown"/> event.
            </summary>
            <param name="e">Key event arguments</param>
        </member>
        <member name="P:Eto.Forms.MaskedTextStepper.Text">
            <summary>
            Gets or sets the text of the control including any mask characters.
            </summary>
            <value>The text content of the control.</value>
        </member>
        <member name="P:Eto.Forms.MaskedTextStepper.MaskCompleted">
            <summary>
            Gets a value indicating whether the mask is completed.
            </summary>
            <value><c>true</c> if mask completed; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Eto.Forms.MouseButtons">
            <summary>
            Enumeration of mouse buttons
            </summary>
        </member>
        <member name="F:Eto.Forms.MouseButtons.None">
            <summary>
            No mouse button
            </summary>
        </member>
        <member name="F:Eto.Forms.MouseButtons.Primary">
            <summary>
            The primary button, usually Left but can be Right depending on the user's preferences for a right handed mouse.
            </summary>
        </member>
        <member name="F:Eto.Forms.MouseButtons.Alternate">
            <summary>
            The alternate button, usually Right but can be Left depending on the user's preferences for a right handed mouse.
            </summary>
        </member>
        <member name="F:Eto.Forms.MouseButtons.Middle">
            <summary>
            The middle mouse button
            </summary>
        </member>
        <member name="T:Eto.Forms.MouseEventArgs">
            <summary>
            Mouse event arguments.
            </summary>
        </member>
        <member name="M:Eto.Forms.MouseEventArgs.#ctor(Eto.Forms.MouseButtons,Eto.Forms.Keys,Eto.Drawing.PointF,System.Nullable{Eto.Drawing.SizeF},System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Eto.Forms.MouseEventArgs"/> class.
            </summary>
            <param name="buttons">Buttons involved in the event.</param>
            <param name="modifiers">Key modifiers such as Control, Alt, or Shift.</param>
            <param name="location">Location of the mouse cursor for the event.</param>
            <param name="delta">Delta of the scroll wheel.</param>
            <param name="pressure">Pressure of a stylus or touch, if applicable. 1.0f for full pressure or not supported</param>
        </member>
        <member name="P:Eto.Forms.MouseEventArgs.Modifiers">
            <summary>
            Gets the key modifiers such as <see cref="F:Eto.Forms.Keys.Control"/>, <see cref="F:Eto.Forms.Keys.Alt"/>, or <see cref="F:Eto.Forms.Keys.Shift"/>.
            </summary>
            <value>The key modifiers.</value>
        </member>
        <member name="P:Eto.Forms.MouseEventArgs.Buttons">
            <summary>
            Gets the mouse buttons involved in the event.
            </summary>
            <value>The mouse buttons.</value>
        </member>
        <member name="P:Eto.Forms.MouseEventArgs.Location">
            <summary>
            Gets the location of the mouse relative to the control that raised the event.
            </summary>
            <value>The location of the mouse cursor.</value>
        </member>
        <member name="P:Eto.Forms.MouseEventArgs.Handled">
            <summary>
            Gets or sets a value indicating whether the event is handled.
            </summary>
            <remarks>
            Set this to true if you perform logic with the event and wish the default event to be cancelled.
            Some platforms may cause audio feedback if the user's action does not perform anything.
            </remarks>
            <value><c>true</c> if handled; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Eto.Forms.MouseEventArgs.Pressure">
            <summary>
            Gets or sets the pressure of the mouse/stylus press, if applicable. 1.0 if full pressure or not supported.
            </summary>
            <value>The pressure of the mouse/stylus.</value>
        </member>
        <member name="P:Eto.Forms.MouseEventArgs.Delta">
            <summary>
            Gets or sets the delta change of the scroll wheel for the event.
            </summary>
            <value>The scroll wheel delta.</value>
        </member>
        <member name="T:Eto.Forms.NavigationItemEventArgs">
            <summary>
            Event arguments with a <see cref="T:Eto.Forms.NavigationItem"/> reference
            </summary>
        </member>
        <member name="P:Eto.Forms.NavigationItemEventArgs.Item">
            <summary>
            Gets the item that triggered the event
            </summary>
            <value>The item.</value>
        </member>
        <member name="M:Eto.Forms.NavigationItemEventArgs.#ctor(Eto.Forms.INavigationItem)">
            <summary>
            Initializes a new instance of the <see cref="T:Eto.Forms.NavigationItemEventArgs"/> class.
            </summary>
            <param name="item">Item that triggered the event</param>
        </member>
        <member name="T:Eto.Forms.Navigation">
            <summary>
            Control to show child panels in a hirarchical stack using a navigation button to go back to a previous panel.
            </summary>
            <remarks>
            Typically only available on mobile platforms, this allows you to show multiple panes of information in a
            hierarchical fashion, keeping the state of previous panes.
            </remarks>
        </member>
        <member name="P:Eto.Forms.Navigation.Controls">
            <summary>
            Gets an enumeration of controls that are directly contained by this container
            </summary>
            <value>The contained controls.</value>
        </member>
        <member name="P:Eto.Forms.Navigation.IsSupported">
            <summary>
            Gets a value indicating that the Navigation control is supported by the current platform.
            </summary>
            <value><c>true</c> if supported; otherwise, <c>false</c>.</value>
        </member>
        <member name="F:Eto.Forms.Navigation.ItemShownEvent">
            <summary>
            Event identifier for handlers when attaching the <see cref="E:Eto.Forms.Navigation.ItemShown"/> event
            </summary>
        </member>
        <member name="E:Eto.Forms.Navigation.ItemShown">
            <summary>
            Event to handle when an item is shown on the navigation stack
            </summary>
        </member>
        <member name="M:Eto.Forms.Navigation.OnItemShown(Eto.Forms.NavigationItemEventArgs)">
            <summary>
            Raises the <see cref="E:Eto.Forms.Navigation.ItemShown"/> event.
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="F:Eto.Forms.Navigation.ItemRemovedEvent">
            <summary>
            Event identifier for handlers when attaching the <see cref="E:Eto.Forms.Navigation.ItemRemoved"/> event
            </summary>
        </member>
        <member name="E:Eto.Forms.Navigation.ItemRemoved">
            <summary>
            Event to handle when an item is removed from the navigation stack, either by the user or by code.
            </summary>
        </member>
        <member name="M:Eto.Forms.Navigation.OnItemRemoved(Eto.Forms.NavigationItemEventArgs)">
            <summary>
            Raises the <see cref="E:Eto.Forms.Navigation.ItemRemoved"/> event.
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:Eto.Forms.Navigation.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Eto.Forms.Navigation"/> class.
            </summary>
        </member>
        <member name="M:Eto.Forms.Navigation.#ctor(Eto.Forms.Control,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Eto.Forms.Navigation"/> class with the initial <paramref name="content"/> and <paramref name="title"/>.
            </summary>
            <param name="content">Content.</param>
            <param name="title">Title.</param>
        </member>
        <member name="M:Eto.Forms.Navigation.#ctor(Eto.Forms.INavigationItem)">
            <summary>
            Initializes a new instance of the <see cref="T:Eto.Forms.Navigation"/> class with the initial navigation item.
            </summary>
            <param name="item">Item for the intial content of the navigation control.</param>
        </member>
        <member name="M:Eto.Forms.Navigation.Push(Eto.Forms.Control,System.String)">
            <summary>
            Pushes a new pane onto the navigation stack with the specified <paramref name="content"/> and <paramref name="title"/>.
            </summary>
            <param name="content">Content for the new pane</param>
            <param name="title">Title of the pane</param>
        </member>
        <member name="M:Eto.Forms.Navigation.Push(Eto.Forms.INavigationItem)">
            <summary>
            Pushes a new navigation item onto the stack.
            </summary>
            <param name="item">Item to push onto the navigation stack.</param>
        </member>
        <member name="M:Eto.Forms.Navigation.Pop">
            <summary>
            Pops the last item from the navigation stack.
            </summary>
        </member>
        <member name="M:Eto.Forms.Navigation.Remove(Eto.Forms.Control)">
            <summary>
            Removes the specified child.
            </summary>
            <param name="child">Child to remove.</param>
        </member>
        <member name="M:Eto.Forms.Navigation.GetCallback">
            <summary>
            Gets an instance of an object used to perform callbacks to the widget from handler implementations
            </summary>
            <returns>The callback instance to use for this widget</returns>
        </member>
        <member name="T:Eto.Forms.Navigation.ICallback">
            <summary>
            Callback interface for the <see cref="T:Eto.Forms.Navigation"/> control.
            </summary>
        </member>
        <member name="M:Eto.Forms.Navigation.ICallback.OnItemShown(Eto.Forms.Navigation,Eto.Forms.NavigationItemEventArgs)">
            <summary>
            Raises the item shown event.
            </summary>
        </member>
        <member name="M:Eto.Forms.Navigation.ICallback.OnItemRemoved(Eto.Forms.Navigation,Eto.Forms.NavigationItemEventArgs)">
            <summary>
            Raises the item removed event.
            </summary>
        </member>
        <member name="T:Eto.Forms.Navigation.Callback">
            <summary>
            Callback implementation for the <see cref="T:Eto.Forms.Navigation"/> control.
            </summary>
        </member>
        <member name="M:Eto.Forms.Navigation.Callback.OnItemShown(Eto.Forms.Navigation,Eto.Forms.NavigationItemEventArgs)">
            <summary>
            Raises the item shown event.
            </summary>
        </member>
        <member name="M:Eto.Forms.Navigation.Callback.OnItemRemoved(Eto.Forms.Navigation,Eto.Forms.NavigationItemEventArgs)">
            <summary>
            Raises the item removed event.
            </summary>
        </member>
        <member name="T:Eto.Forms.Navigation.IHandler">
            <summary>
            Handler interface for the <see cref="T:Eto.Forms.Navigation"/> control.
            </summary>
        </member>
        <member name="M:Eto.Forms.Navigation.IHandler.Push(Eto.Forms.INavigationItem)">
            <summary>
            Pushes a new navigation item onto the stack.
            </summary>
            <param name="item">Item to push onto the navigation stack.</param>
        </member>
        <member name="M:Eto.Forms.Navigation.IHandler.Pop">
            <summary>
            Pops the last item from the navigation stack.
            </summary>
        </member>
        <member name="T:Eto.Forms.INavigationItem">
            <summary>
            Item for panes on a <see cref="T:Eto.Forms.Navigation"/> control.
            </summary>
            <seealso cref="T:Eto.Forms.NavigationItem"/>
        </member>
        <member name="P:Eto.Forms.INavigationItem.Content">
            <summary>
            Gets the content for the pane.
            </summary>
            <value>The pane's content.</value>
        </member>
        <member name="T:Eto.Forms.NavigationItem">
            <summary>
            Item for a pane on a <see cref="T:Eto.Forms.Navigation"/> control.
            </summary>
            <remarks>
            This defines an item on a <see cref="T:Eto.Forms.Navigation"/> control that contains the item's content and title.
            </remarks>
        </member>
        <member name="P:Eto.Forms.NavigationItem.Content">
            <summary>
            Gets the content for the pane.
            </summary>
            <value>The pane's content.</value>
        </member>
        <member name="T:Eto.Forms.NumericUpDown">
            <summary>
            Control for the user to enter a numeric value (obsolete, use NumericStepper instead)
            </summary>
            <remarks>
            This usually presents with a <see cref="T:Eto.Forms.Stepper"/> to increase/decrease the value, or a specific numeric keyboard.
            </remarks>
        </member>
        <member name="T:Eto.Forms.NumericStepper">
            <summary>
            Control for the user to enter a numeric value
            </summary>
            <remarks>
            This usually presents with a <see cref="T:Eto.Forms.Stepper"/> to increase/decrease the value, or a specific numeric keyboard.
            </remarks>
        </member>
        <member name="E:Eto.Forms.NumericStepper.ValueChanged">
            <summary>
            Occurs when the <see cref="P:Eto.Forms.NumericStepper.Value"/> changed.
            </summary>
        </member>
        <member name="M:Eto.Forms.NumericStepper.OnValueChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Eto.Forms.NumericStepper.ValueChanged"/> event.
            </summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="P:Eto.Forms.NumericStepper.ReadOnly">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Eto.Forms.NumericStepper"/> is read only.
            </summary>
            <remarks>
            A read only control can copy the value and focus the control, but cannot edit or change the value.
            </remarks>
            <value><c>true</c> if the control is read only; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Eto.Forms.NumericStepper.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <remarks>
            The value will be limited to a value between the <see cref="P:Eto.Forms.NumericStepper.MinValue"/> and <see cref="P:Eto.Forms.NumericStepper.MaxValue"/>.
            </remarks>
            <value>The value.</value>
        </member>
        <member name="P:Eto.Forms.NumericStepper.MinValue">
            <summary>
            Gets or sets the minimum value that can be entered.
            </summary>
            <remarks>
            Changing this will limit the current <see cref="P:Eto.Forms.NumericStepper.Value"/> of the control.
            </remarks>
            <value>The minimum value.</value>
        </member>
        <member name="P:Eto.Forms.NumericStepper.MaxValue">
            <summary>
            Gets or sets the maximum value that can be entered.
            </summary>
            <remarks>
            Changing this will limit the current <see cref="P:Eto.Forms.NumericStepper.Value"/> of the control.
            </remarks>
            <value>The maximum value.</value>
        </member>
        <member name="P:Eto.Forms.NumericStepper.TextColor">
            <summary>
            Gets or sets the color of the text.
            </summary>
            <remarks>
            By default, the text will get a color based on the user's theme. However, this is usually black.
            </remarks>
            <value>The color of the text.</value>
        </member>
        <member name="P:Eto.Forms.NumericStepper.DecimalPlaces">
            <summary>
            Gets or sets the number of digits to display after the decimal.
            </summary>
            <remarks>
            The NumericStepper control will at least show the number of fraction digits as specified by this value, padded
            by zeros. 
            The <see cref="P:Eto.Forms.NumericStepper.MaximumDecimalPlaces"/> specifies the maximum number of fraction digits the control will display
            if the value has a value that can be represented by more digits.
            The <see cref="P:Eto.Forms.NumericStepper.Value"/> property is rounded to the number of fraction digits specified by <see cref="P:Eto.Forms.NumericStepper.MaximumDecimalPlaces"/>.
            
            Note that this does not apply if you have specified <see cref="P:Eto.Forms.NumericStepper.FormatString"/>
            </remarks>
            <example>
            This shows the effect of the <see cref="P:Eto.Forms.NumericStepper.DecimalPlaces"/> and <see cref="P:Eto.Forms.NumericStepper.MaximumDecimalPlaces"/> on the display 
            of the control and its returned value.
            <pre>
            var numeric = new NumericStepper();
            
            numeric.DecimalPlaces = 2;
            numeric.MaximumDecimalPlaces = 4;
            
            numeric.Value = 123;         // control will display "123.00"
            numeric.Value = 123.45;      // control will display "123.45"
            numeric.Value = 123.4567;    // control will display "123.4567"
            numeric.Value = 123.4567890; // control will display "123.4568"
            </pre>
            </example>
            <value>The number of decimal places to always show.</value>
            <seealso cref="P:Eto.Forms.NumericStepper.MaximumDecimalPlaces"/>
            <seealso cref="P:Eto.Forms.NumericStepper.FormatString"/>
        </member>
        <member name="P:Eto.Forms.NumericStepper.Increment">
            <summary>
            Gets or sets the value to increment when the user clicks on the stepper buttons.
            </summary>
            <value>The step increment.</value>
        </member>
        <member name="P:Eto.Forms.NumericStepper.MaximumDecimalPlaces">
            <summary>
            Gets or sets the maximum number of decimal places that can be shown.
            </summary>
            <remarks>
            Specifies how many fraction digits can be shown if required to display the specified <see cref="P:Eto.Forms.NumericStepper.Value"/>.
            The number of digits shown will be at least the number of digits specified by <see cref="P:Eto.Forms.NumericStepper.DecimalPlaces"/>.
            The <see cref="P:Eto.Forms.NumericStepper.Value"/> and the display is rounded to the number of fraction digits specified by this value.
            <see cref="P:Eto.Forms.NumericStepper.DecimalPlaces"/> for an example of how the MaximumDecimalPlaces can be used.
            
            Note that this does not apply if you have specified <see cref="P:Eto.Forms.NumericStepper.FormatString"/>.
            </remarks>
            <value>The maximum number of decimal places that will be shown.</value>
            <seealso cref="P:Eto.Forms.NumericStepper.MaximumDecimalPlaces"/>
            <seealso cref="P:Eto.Forms.NumericStepper.FormatString"/>
        </member>
        <member name="P:Eto.Forms.NumericStepper.FormatString">
            <summary>
            Gets or sets the format string for the display of the numeric value.
            </summary>
            <remarks>
            This can be used to specify standard or custom format strings used via <see cref="M:System.Double.ToString(System.String,System.IFormatProvider)"/>.
            The exact output is determined using the specified <see cref="P:Eto.Forms.NumericStepper.CultureInfo"/>.
            
            For example "c" would show a currency value.
            
            Any extra non-numeric or separator characters are stripped when parsing the string so that you can include extra (non-numeric) 
            string values while still allowing the user to change the numeric string.
            </remarks>
        </member>
        <member name="P:Eto.Forms.NumericStepper.CultureInfo">
            <summary>
            Specifies the culture to show the numeric value in (default is <see cref="P:System.Globalization.CultureInfo.CurrentCulture"/>).
            </summary>
            <remarks>
            This is used to format the numeric value, and when using the <see cref="P:Eto.Forms.NumericStepper.FormatString"/> it determines the character(s) used
            for the thousands separator, decimal separator, and currency symbol.
            </remarks>
        </member>
        <member name="P:Eto.Forms.NumericStepper.ValueBinding">
            <summary>
            Gets the binding for the <see cref="P:Eto.Forms.NumericStepper.Value"/> property.
            </summary>
            <value>The value binding.</value>
        </member>
        <member name="M:Eto.Forms.NumericStepper.GetCallback">
            <summary>
            Gets an instance of an object used to perform callbacks to the widget from handler implementations
            </summary>
            <returns>The callback instance to use for this widget</returns>
        </member>
        <member name="T:Eto.Forms.NumericStepper.ICallback">
            <summary>
            Callback interface for the <see cref="T:Eto.Forms.NumericStepper"/>
            </summary>
        </member>
        <member name="M:Eto.Forms.NumericStepper.ICallback.OnValueChanged(Eto.Forms.NumericStepper,System.EventArgs)">
            <summary>
            Raises the value changed event.
            </summary>
        </member>
        <member name="T:Eto.Forms.NumericStepper.Callback">
            <summary>
            Callback implementation for handlers of the <see cref="T:Eto.Forms.NumericStepper"/>
            </summary>
        </member>
        <member name="M:Eto.Forms.NumericStepper.Callback.OnValueChanged(Eto.Forms.NumericStepper,System.EventArgs)">
            <summary>
            Raises the value changed event.
            </summary>
        </member>
        <member name="T:Eto.Forms.NumericStepper.IHandler">
            <summary>
            Handler interface for the <see cref="T:Eto.Forms.NumericStepper"/> control.
            </summary>
        </member>
        <member name="P:Eto.Forms.NumericStepper.IHandler.ReadOnly">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Eto.Forms.NumericStepper"/> is read only.
            </summary>
            <remarks>
            A read only control can copy the value and focus the control, but cannot edit or change the value.
            </remarks>
            <value><c>true</c> if the control is read only; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Eto.Forms.NumericStepper.IHandler.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <remarks>
            The value will be limited to a value between the <see cref="P:Eto.Forms.NumericStepper.IHandler.MinValue"/> and <see cref="P:Eto.Forms.NumericStepper.IHandler.MaxValue"/>.
            </remarks>
            <value>The value.</value>
        </member>
        <member name="P:Eto.Forms.NumericStepper.IHandler.MinValue">
            <summary>
            Gets or sets the minimum value that can be entered.
            </summary>
            <remarks>
            Changing this will limit the current <see cref="P:Eto.Forms.NumericStepper.IHandler.Value"/> of the control.
            </remarks>
            <value>The minimum value.</value>
        </member>
        <member name="P:Eto.Forms.NumericStepper.IHandler.MaxValue">
            <summary>
            Gets or sets the maximum value that can be entered.
            </summary>
            <remarks>
            Changing this will limit the current <see cref="P:Eto.Forms.NumericStepper.IHandler.Value"/> of the control.
            </remarks>
            <value>The maximum value.</value>
        </member>
        <member name="P:Eto.Forms.NumericStepper.IHandler.DecimalPlaces">
            <summary>
            Gets or sets the number of digits to display after the decimal.
            </summary>
            <remarks>
            The NumericStepper control will at least show the number of fraction digits as specified by this value, padded
            by zeros. 
            The <see cref="P:Eto.Forms.NumericStepper.IHandler.MaximumDecimalPlaces"/> specifies the maximum number of fraction digits the control will display
            if the value has a value that can be represented by more digits.
            The <see cref="P:Eto.Forms.NumericStepper.IHandler.Value"/> property is rounded to the number of fraction digits specified by <see cref="P:Eto.Forms.NumericStepper.IHandler.MaximumDecimalPlaces"/>.
            </remarks>
        </member>
        <member name="P:Eto.Forms.NumericStepper.IHandler.Increment">
            <summary>
            Gets or sets the value to increment when the user clicks on the stepper buttons.
            </summary>
            <value>The step increment.</value>
        </member>
        <member name="P:Eto.Forms.NumericStepper.IHandler.TextColor">
            <summary>
            Gets or sets the color of the text.
            </summary>
            <remarks>
            By default, the text will get a color based on the user's theme. However, this is usually black.
            </remarks>
            <value>The color of the text.</value>
        </member>
        <member name="P:Eto.Forms.NumericStepper.IHandler.MaximumDecimalPlaces">
            <summary>
            Gets or sets the maximum number of decimal places that can be shown.
            </summary>
            <remarks>
            Specifies how many fraction digits can be shown if required to display the specified <see cref="P:Eto.Forms.NumericStepper.IHandler.Value"/>.
            The number of digits shown will be at least the number of digits specified by <see cref="P:Eto.Forms.NumericStepper.IHandler.DecimalPlaces"/>.
            The <see cref="P:Eto.Forms.NumericStepper.IHandler.Value"/> and the display is rounded to the number of fraction digits specified by this value.
            </remarks>
            <value>The maximum number of decimal places that will be shown.</value>
            <seealso cref="P:Eto.Forms.NumericStepper.IHandler.MaximumDecimalPlaces"/>
        </member>
        <member name="P:Eto.Forms.NumericStepper.IHandler.FormatString">
            <summary>
            Gets or sets the format string for the display of the numeric value.
            </summary>
            <remarks>
            This can be used to specify standard or custom format strings used via <see cref="M:System.Double.ToString(System.String,System.IFormatProvider)"/>.
            The exact output is determined using the specified <see cref="P:Eto.Forms.NumericStepper.IHandler.CultureInfo"/>.
            
            For example "c" would show a currency value.
            
            Any extra non-numeric or separator characters are stripped when parsing the string so that you can include extra (non-numeric) 
            string values while still allowing the user to change the numeric string.
            </remarks>
        </member>
        <member name="P:Eto.Forms.NumericStepper.IHandler.CultureInfo">
            <summary>
            Specifies the culture to show the numeric value in (default is <see cref="P:System.Globalization.CultureInfo.CurrentCulture"/>).
            </summary>
            <remarks>
            This is used to format the numeric value, and when using the <see cref="P:Eto.Forms.NumericStepper.IHandler.FormatString"/> it determines the character(s) used
            for the thousands separator, decimal separator, and currency symbol.
            </remarks>
        </member>
        <member name="T:Eto.Forms.Panel">
            <summary>
            Control to display a panel containing a single <see cref="P:Eto.Forms.Panel.Content"/> control
            </summary>
            <remarks>
            This can be instantiated directly to provide padding around a control, and is also the base of other containers that have
            only a single child control.
            </remarks>
        </member>
        <member name="M:Eto.Forms.Panel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Eto.Forms.Panel"/> class.
            </summary>
        </member>
        <member name="M:Eto.Forms.Panel.#ctor(Eto.Forms.Panel.IHandler)">
            <summary>
            Initializes a new instance of the <see cref="T:Eto.Forms.Panel"/> class with the specified handler.
            </summary>
            <param name="handler">Handler to use for the implementation of the control.</param>
        </member>
        <member name="P:Eto.Forms.Panel.Controls">
            <summary>
            Gets an enumeration of controls that are directly contained by this container
            </summary>
            <value>The contained controls.</value>
        </member>
        <member name="P:Eto.Forms.Panel.Padding">
            <summary>
            Gets or sets the padding around the <see cref="P:Eto.Forms.Panel.Content"/> of the panel.
            </summary>
            <value>The padding around the content.</value>
        </member>
        <member name="P:Eto.Forms.Panel.MinimumSize">
            <summary>
            Gets or sets the minimum size of the panel.
            </summary>
            <value>The minimum size.</value>
        </member>
        <member name="P:Eto.Forms.Panel.ContextMenu">
            <summary>
            Gets or sets the context menu for the panel.
            </summary>
            <remarks>
            The context menu is usually shown when the user right clicks the control, or in mobile platforms when the
            user taps and holds their finger down on the control.
            </remarks>
            <value>The context menu.</value>
        </member>
        <member name="P:Eto.Forms.Panel.Content">
            <summary>
            Gets or sets the main content of the panel.
            </summary>
            <remarks>
            The main content will be offset by the <see cref="P:Eto.Forms.Panel.Padding"/> value specified, and will take up the entire
            content area of the control.
            Some controls may have decorations that will surround the content, such as a <see cref="T:Eto.Forms.GroupBox"/>, <see cref="T:Eto.Forms.TabControl"/>,
            or <see cref="T:Eto.Forms.Window"/>
            </remarks>
            <value>The child content of the control.</value>
        </member>
        <member name="M:Eto.Forms.Panel.Remove(Eto.Forms.Control)">
            <summary>
            Removes the specified child from the container
            </summary>
            <param name="child">Child to remove.</param>
        </member>
        <member name="T:Eto.Forms.Panel.IHandler">
            <summary>
            Handler interface fot the <see cref="T:Eto.Forms.Panel"/>
            </summary>
        </member>
        <member name="P:Eto.Forms.Panel.IHandler.Content">
            <summary>
            Gets or sets the main content of the panel.
            </summary>
            <remarks>
            The main content will be offset by the <see cref="P:Eto.Forms.Panel.IHandler.Padding"/> value specified, and will take up the entire
            content area of the control.
            Some controls may have decorations that will surround the content, such as a <see cref="T:Eto.Forms.GroupBox"/>, <see cref="T:Eto.Forms.TabControl"/>,
            or <see cref="T:Eto.Forms.Window"/>
            </remarks>
            <value>The child content of the control.</value>
        </member>
        <member name="P:Eto.Forms.Panel.IHandler.Padding">
            <summary>
            Gets or sets the padding around the <see cref="P:Eto.Forms.Panel.IHandler.Content"/> of the panel.
            </summary>
            <value>The padding around the content.</value>
        </member>
        <member name="P:Eto.Forms.Panel.IHandler.MinimumSize">
            <summary>
            Gets or sets the minimum size of the panel.
            </summary>
            <value>The minimum size.</value>
        </member>
        <member name="T:Eto.Forms.PasswordBox">
            <summary>
            An entry box for the user to enter a password without displaying the contents of the password while typed.
            </summary>
            <copyright>(c) 2014 by Curtis Wensley</copyright>
            <license type="BSD-3">See LICENSE for full terms</license>
        </member>
        <member name="P:Eto.Forms.PasswordBox.ReadOnly">
            <summary>
            Gets or sets a value indicating whether the value is read only
            </summary>
            <value><c>true</c> if the control is read only; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Eto.Forms.PasswordBox.MaxLength">
            <summary>
            Gets or sets the maximum length of password the user can enter
            </summary>
            <value>The maximum length</value>
        </member>
        <member name="P:Eto.Forms.PasswordBox.PasswordChar">
            <summary>
            Gets or sets the password display character hint
            </summary>
            <remarks>
            Some platforms may not support changing the password display character
            </remarks>
            <value>The password character</value>
        </member>
        <member name="T:Eto.Forms.PasswordBox.IHandler">
            <summary>
            Handler interface for the <see cref="T:Eto.Forms.PasswordBox"/> control
            </summary>
            <copyright>(c) 2014 by Curtis Wensley</copyright>
            <license type="BSD-3">See LICENSE for full terms</license>
        </member>
        <member name="P:Eto.Forms.PasswordBox.IHandler.ReadOnly">
            <summary>
            Gets or sets a value indicating whether the value is read only
            </summary>
            <value><c>true</c> if read only; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Eto.Forms.PasswordBox.IHandler.MaxLength">
            <summary>
            Gets or sets the maximum length of password the user can enter
            </summary>
            <value>The maximum length</value>
        </member>
        <member name="P:Eto.Forms.PasswordBox.IHandler.PasswordChar">
            <summary>
            Gets or sets the password display character hint
            </summary>
            <remarks>
            Some platforms may not support changing the password display character
            </remarks>
            <value>The password character</value>
        </member>
        <member name="T:Eto.Forms.ProgressBar">
            <summary>
            Control to show progress of a long running task
            </summary>
            <seealso cref="T:Eto.Forms.Spinner"/>
        </member>
        <member name="P:Eto.Forms.ProgressBar.MaxValue">
            <summary>
            Gets or sets the value of the progress bar that represents 100% complete. The default is 100.
            </summary>
            <value>The maximum value.</value>
        </member>
        <member name="P:Eto.Forms.ProgressBar.MinValue">
            <summary>
            Gets or sets the minimum value of the progress that represents 0% complete. The default is 0.
            </summary>
            <value>The minimum value.</value>
        </member>
        <member name="P:Eto.Forms.ProgressBar.Value">
            <summary>
            Gets or sets the current progress that falls between <see cref="P:Eto.Forms.ProgressBar.MinValue"/> and <see cref="P:Eto.Forms.ProgressBar.MaxValue"/>
            </summary>
            <value>The value.</value>
        </member>
        <member name="P:Eto.Forms.ProgressBar.Indeterminate">
            <summary>
            Gets or sets a value indicating whether the progress is indeterminate
            </summary>
            <remarks>
            When indeterminate is true, the <see cref="P:Eto.Forms.ProgressBar.MaxValue"/>/<see cref="P:Eto.Forms.ProgressBar.MinValue"/>/<see cref="P:Eto.Forms.ProgressBar.Value"/> are ignored
            and will typically show in a continuous style.
            </remarks>
            <value><c>true</c> if indeterminate; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Eto.Forms.ProgressBar.IHandler">
            <summary>
            Handler interface for the <see cref="T:Eto.Forms.ProgressBar"/> control
            </summary>
        </member>
        <member name="P:Eto.Forms.ProgressBar.IHandler.MaxValue">
            <summary>
            Gets or sets the value of the progress bar that represents 100% complete. The default is 100.
            </summary>
            <value>The maximum value.</value>
        </member>
        <member name="P:Eto.Forms.ProgressBar.IHandler.MinValue">
            <summary>
            Gets or sets the minimum value of the progress that represents 0% complete. The default is 0.
            </summary>
            <value>The minimum value.</value>
        </member>
        <member name="P:Eto.Forms.ProgressBar.IHandler.Value">
            <summary>
            Gets or sets the current progress that falls between <see cref="P:Eto.Forms.ProgressBar.IHandler.MinValue"/> and <see cref="P:Eto.Forms.ProgressBar.IHandler.MaxValue"/>
            </summary>
            <value>The value.</value>
        </member>
        <member name="P:Eto.Forms.ProgressBar.IHandler.Indeterminate">
            <summary>
            Gets or sets a value indicating whether the progress is indeterminate
            </summary>
            <remarks>
            When indeterminate is true, the <see cref="P:Eto.Forms.ProgressBar.IHandler.MaxValue"/>/<see cref="P:Eto.Forms.ProgressBar.IHandler.MinValue"/>/<see cref="P:Eto.Forms.ProgressBar.IHandler.Value"/> are ignored
            and will typically show in a continuous style.
            </remarks>
            <value><c>true</c> if indeterminate; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Eto.Forms.RadioButton">
            <summary>
            Control to present a button to choose from a set of options
            </summary>
            <remarks>
            The RadioButton works with other radio buttons to present a list of options that the user can select from.
            When a radio button is toggled on, all others that are linked together will be toggled off.
            
            To link radio buttons together, use the <see cref="C:Eto.Forms.RadioButton(RadioButton)"/> constructor
            to specify the controller radio button, which can be created with the default constructor.
            </remarks>
            <seealso cref="T:Eto.Forms.RadioButtonList"/>
        </member>
        <member name="E:Eto.Forms.RadioButton.CheckedChanged">
            <summary>
            Occurs when the <see cref="P:Eto.Forms.RadioButton.Checked"/> property is changed.
            </summary>
        </member>
        <member name="E:Eto.Forms.RadioButton.Click">
            <summary>
            Occurs when the user clicks the radio button.
            </summary>
        </member>
        <member name="M:Eto.Forms.RadioButton.OnClick(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Eto.Forms.RadioButton.Click"/> event.
            </summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="P:Eto.Forms.RadioButton.Command">
            <summary>
            Gets or sets the command to invoke when the radio button is pressed.
            </summary>
            <remarks>
            This will invoke the specified command when the radio button is pressed.
            The <see cref="M:System.Windows.Input.ICommand.CanExecute(System.Object)"/> will also used to set the enabled/disabled state of the button.
            </remarks>
            <value>The command to invoke.</value>
        </member>
        <member name="P:Eto.Forms.RadioButton.CommandParameter">
            <summary>
            Gets or sets the parameter to pass to the <see cref="P:Eto.Forms.RadioButton.Command"/> when executing or determining its CanExecute state.
            </summary>
            <value>The command parameter.</value>
        </member>
        <member name="M:Eto.Forms.RadioButton.OnCheckedChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Eto.Forms.RadioButton.CheckedChanged"/> event.
            </summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:Eto.Forms.RadioButton.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Eto.Forms.RadioButton"/> class.
            </summary>
        </member>
        <member name="M:Eto.Forms.RadioButton.#ctor(Eto.Forms.RadioButton)">
            <summary>
            Initializes a new instance of the <see cref="T:Eto.Forms.RadioButton"/> class.
            </summary>
            <param name="controller">Controller radio button to link to, or null if no controller.</param>
        </member>
        <member name="P:Eto.Forms.RadioButton.Checked">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Eto.Forms.RadioButton"/> is checked.
            </summary>
            <value><c>true</c> if checked; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Eto.Forms.RadioButton.ICallback">
            <summary>
            Callback interface for the <see cref="T:Eto.Forms.RadioButton"/>
            </summary>
        </member>
        <member name="M:Eto.Forms.RadioButton.ICallback.OnClick(Eto.Forms.RadioButton,System.EventArgs)">
            <summary>
            Raises the click event.
            </summary>
        </member>
        <member name="M:Eto.Forms.RadioButton.ICallback.OnCheckedChanged(Eto.Forms.RadioButton,System.EventArgs)">
            <summary>
            Raises the checked changed event.
            </summary>
        </member>
        <member name="T:Eto.Forms.RadioButton.Callback">
            <summary>
            Callback implementation for handlers of the <see cref="T:Eto.Forms.RadioButton"/>
            </summary>
        </member>
        <member name="M:Eto.Forms.RadioButton.Callback.OnClick(Eto.Forms.RadioButton,System.EventArgs)">
            <summary>
            Raises the click event.
            </summary>
        </member>
        <member name="M:Eto.Forms.RadioButton.Callback.OnCheckedChanged(Eto.Forms.RadioButton,System.EventArgs)">
            <summary>
            Raises the checked changed event.
            </summary>
        </member>
        <member name="M:Eto.Forms.RadioButton.GetCallback">
            <summary>
            Gets an instance of an object used to perform callbacks to the widget from handler implementations
            </summary>
            <returns>The callback.</returns>
        </member>
        <member name="T:Eto.Forms.RadioButton.IHandler">
            <summary>
            Handler interface for the <see cref="T:Eto.Forms.RadioButton"/>
            </summary>
            <remarks>
            When using this handler, you must call <see cref="M:Eto.Widget.Initialize"/> in the constructor.
            </remarks>
        </member>
        <member name="M:Eto.Forms.RadioButton.IHandler.Create(Eto.Forms.RadioButton)">
            <summary>
            Used when creating a new instance of the RadioButton to specify the controller
            </summary>
            <param name="controller">Controller radio button to link to, or null if no controller.</param>
        </member>
        <member name="P:Eto.Forms.RadioButton.IHandler.Checked">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Eto.Forms.RadioButton"/> is checked.
            </summary>
            <value><c>true</c> if checked; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Eto.Forms.RadioButtonList">
            <summary>
            Shows a list of radio buttons.
            </summary>
            <remarks>
            The list of items can be added manually using <see cref="P:Eto.Forms.RadioButtonList.Items"/>, or 
            use the <see cref="P:Eto.Forms.RadioButtonList.DataStore"/> to have a dynamic list of items controlled by a custom collection.
            </remarks>
        </member>
        <member name="P:Eto.Forms.RadioButtonList.ItemTextBinding">
            <summary>
            Gets or sets the binding to get the text for each radio button.
            </summary>
            <remarks>
            By default, this will bind to a "Text" property, or <see cref="P:Eto.Forms.IListItem.Text"/> when implemented.
            </remarks>
            <value>The text binding.</value>
        </member>
        <member name="P:Eto.Forms.RadioButtonList.ItemKeyBinding">
            <summary>
            Gets or sets the binding to get the key for each radio button.
            </summary>
            <remarks>
            By default, this will bind to a "Key" property, or <see cref="P:Eto.Forms.IListItem.Key"/> when implemented.
            </remarks>
            <value>The key binding.</value>
        </member>
        <member name="P:Eto.Forms.RadioButtonList.TextBinding">
            <summary>
            Gets or sets the binding to get the text for each radio button.
            </summary>
            <remarks>
            By default, this will bind to a "Text" property, or <see cref="P:Eto.Forms.IListItem.Text"/> when implemented.
            </remarks>
            <value>The text binding.</value>
        </member>
        <member name="P:Eto.Forms.RadioButtonList.KeyBinding">
            <summary>
            Gets or sets the binding to get the key for each radio button.
            </summary>
            <remarks>
            By default, this will bind to a "Key" property, or <see cref="P:Eto.Forms.IListItem.Key"/> when implemented.
            </remarks>
            <value>The key binding.</value>
        </member>
        <member name="E:Eto.Forms.RadioButtonList.SelectedIndexChanged">
            <summary>
            Occurs when the <see cref="P:Eto.Forms.RadioButtonList.SelectedIndex"/> changes.
            </summary>
        </member>
        <member name="M:Eto.Forms.RadioButtonList.OnSelectedIndexChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Eto.Forms.RadioButtonList.SelectedIndexChanged"/> event.
            </summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="E:Eto.Forms.RadioButtonList.SelectedValueChanged">
            <summary>
            Occurs when <see cref="P:Eto.Forms.RadioButtonList.SelectedValue"/> changes.
            </summary>
        </member>
        <member name="M:Eto.Forms.RadioButtonList.OnSelectedValueChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Eto.Forms.RadioButtonList.SelectedValueChanged"/> event.
            </summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="E:Eto.Forms.RadioButtonList.SelectedKeyChanged">
            <summary>
            Occurs when <see cref="P:Eto.Forms.RadioButtonList.SelectedKey"/> changes.
            </summary>
        </member>
        <member name="M:Eto.Forms.RadioButtonList.OnSelectedKeyChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Eto.Forms.RadioButtonList.SelectedKeyChanged"/> event.
            </summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="P:Eto.Forms.RadioButtonList.SelectedKey">
            <summary>
            Gets or sets the selected key of the currently selected item using the <see cref="P:Eto.Forms.RadioButtonList.ItemKeyBinding"/>.
            </summary>
            <value>The selected key.</value>
        </member>
        <member name="P:Eto.Forms.RadioButtonList.Enabled">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Eto.Forms.RadioButtonList"/> is enabled.
            </summary>
            <remarks>
            When the control is disabled, the user will not be able to change the selected radio button.
            However, you can still programatically change the selection.
            </remarks>
            <value><c>true</c> if enabled; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Eto.Forms.RadioButtonList.SelectedValue">
            <summary>
            Gets or sets the selected value, which is the <see cref="T:Eto.Forms.ListItem"/> or object in your custom data store.
            </summary>
            <value>The selected value.</value>
        </member>
        <member name="P:Eto.Forms.RadioButtonList.SelectedIndex">
            <summary>
            Gets or sets the index of the selected item.
            </summary>
            <value>The index of the selected item.</value>
        </member>
        <member name="P:Eto.Forms.RadioButtonList.Orientation">
            <summary>
            Gets or sets the orientation of the radio buttons.
            </summary>
            <value>The radio button orientation.</value>
        </member>
        <member name="P:Eto.Forms.RadioButtonList.Spacing">
            <summary>
            Gets or sets the spacing between each radio button.
            </summary>
            <value>The spacing between radio buttons.</value>
        </member>
        <member name="P:Eto.Forms.RadioButtonList.Items">
            <summary>
            Gets the item collection, when adding items programatically.
            </summary>
            <remarks>
            This is used when you want to add items manually.  Use the <see cref="P:Eto.Forms.RadioButtonList.DataStore"/>
            when you have an existing collection you want to bind to directly.
            </remarks>
            <value>The item collection.</value>
        </member>
        <member name="P:Eto.Forms.RadioButtonList.DataStore">
            <summary>
            Gets or sets the data store of the items shown in the list.
            </summary>
            <remarks>
            When using a custom object collection, you can use the <see cref="P:Eto.Forms.RadioButtonList.ItemTextBinding"/> and <see cref="P:Eto.Forms.RadioButtonList.ItemKeyBinding"/> 
            to specify how to get the text/key values for each item.
            </remarks>
            <value>The data store.</value>
        </member>
        <member name="M:Eto.Forms.RadioButtonList.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Eto.Forms.RadioButtonList"/> class.
            </summary>
        </member>
        <member name="M:Eto.Forms.RadioButtonList.OnLoad(System.EventArgs)">
            <summary>
            Raises the load event.
            </summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:Eto.Forms.RadioButtonList.CreateDefaultItems">
            <summary>
            Creates the default items.
            </summary>
            <returns>The default items.</returns>
        </member>
        <member name="P:Eto.Forms.RadioButtonList.SelectedValueBinding">
            <summary>
            Gets a binding to the <see cref="P:Eto.Forms.RadioButtonList.SelectedValue"/> property.
            </summary>
            <value>The selected value binding.</value>
        </member>
        <member name="P:Eto.Forms.RadioButtonList.SelectedIndexBinding">
            <summary>
            Gets a binding to the <see cref="P:Eto.Forms.RadioButtonList.SelectedIndex"/> property.
            </summary>
            <value>The selected index binding.</value>
        </member>
        <member name="P:Eto.Forms.RadioButtonList.SelectedKeyBinding">
            <summary>
            Gets a binding to the <see cref="P:Eto.Forms.RadioButtonList.SelectedKey"/> property.
            </summary>
            <value>The selected index binding.</value>
        </member>
        <member name="T:Eto.Forms.RadioButtonListOrientation">
            <summary>
            Orientation of buttons in a <see cref="T:Eto.Forms.RadioButtonList"/>
            </summary>
        </member>
        <member name="P:Eto.Forms.RadioButtonListOrientation.Horizontal">
            <summary>
            Radio buttons are displayed horizontally.
            </summary>
        </member>
        <member name="P:Eto.Forms.RadioButtonListOrientation.Vertical">
            <summary>
            Radio buttons are displayed vertically.
            </summary>
        </member>
        <member name="M:Eto.Forms.RadioButtonListOrientation.op_Implicit(Eto.Forms.RadioButtonListOrientation)~Eto.Forms.Orientation">
            <summary>Converts to an Orientation</summary>
        </member>
        <member name="M:Eto.Forms.RadioButtonListOrientation.op_Implicit(Eto.Forms.Orientation)~Eto.Forms.RadioButtonListOrientation">
            <summary>Converts an Orientation to a RadioButtonListOrientation</summary>
        </member>
        <member name="M:Eto.Forms.RadioButtonListOrientation.op_Equality(Eto.Forms.Orientation,Eto.Forms.RadioButtonListOrientation)">
            <summary>Compares for equality</summary>
            <param name="orientation1">Orientation1.</param>
            <param name="orientation2">Orientation2.</param>
        </member>
        <member name="M:Eto.Forms.RadioButtonListOrientation.op_Inequality(Eto.Forms.Orientation,Eto.Forms.RadioButtonListOrientation)">
            <summary>Compares for inequality</summary>
            <param name="orientation1">Orientation1.</param>
            <param name="orientation2">Orientation2.</param>
        </member>
        <member name="M:Eto.Forms.RadioButtonListOrientation.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:Eto.Forms.SliderOrientation"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:Eto.Forms.SliderOrientation"/>.</param>
            <returns><c>true</c> if the specified <see cref="T:System.Object"/> is equal to the current
            <see cref="T:Eto.Forms.SliderOrientation"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Eto.Forms.RadioButtonListOrientation.GetHashCode">
            <summary>
            Serves as a hash function for a <see cref="T:Eto.Forms.SliderOrientation"/> object.
            </summary>
            <returns>A hash code for this instance that is suitable for use in hashing algorithms and data structures such as a hash table.</returns>
        </member>
        <member name="T:Eto.Forms.RichTextAreaFormat">
            <summary>
            Format for loading and saving text from the <see cref="T:Eto.Forms.RichTextArea"/>
            </summary>
        </member>
        <member name="F:Eto.Forms.RichTextAreaFormat.Rtf">
            <summary>
            Standard Rich Text format
            </summary>
        </member>
        <member name="F:Eto.Forms.RichTextAreaFormat.PlainText">
            <summary>
            Plain Text only
            </summary>
        </member>
        <member name="T:Eto.Forms.TextBufferExtensions">
            <summary>
            Extensions for <see cref="T:Eto.Forms.ITextBuffer"/>
            </summary>
        </member>
        <member name="M:Eto.Forms.TextBufferExtensions.GetRtf(Eto.Forms.ITextBuffer)">
            <summary>
            Gets the content of the specified buffer as an RTF formatted string. Note that some platforms don't support RTF (e.g. Gtk).
            </summary>
            <returns>The content of the buffer in RTF format.</returns>
            <param name="buffer">Buffer to get the content from.</param>
        </member>
        <member name="M:Eto.Forms.TextBufferExtensions.SetRtf(Eto.Forms.ITextBuffer,System.String)">
            <summary>
            Sets the content of the buffer to the specified <paramref name="rtf"/> string. Note that some platforms don't support RTF (e.g. Gtk).
            </summary>
            <remarks>
            The CaretIndex and Selection will be set to the end of the string after set.
            </remarks>
            <param name="buffer">Buffer to set the content for</param>
            <param name="rtf">RTF formatted string to set the buffer</param>
        </member>
        <member name="T:Eto.Forms.ITextBuffer">
            <summary>
            Interface for a formatted text buffer
            </summary>
        </member>
        <member name="M:Eto.Forms.ITextBuffer.SetBold(Eto.Forms.Range{System.Int32},System.Boolean)">
            <summary>
            Sets the bold flag for the specified text range.
            </summary>
            <param name="range">Range to set the font weight.</param>
            <param name="bold">If set to <c>true</c>, then text will be bold.</param>
        </member>
        <member name="M:Eto.Forms.ITextBuffer.SetItalic(Eto.Forms.Range{System.Int32},System.Boolean)">
            <summary>
            Sets the italic flag for the specified text range.
            </summary>
            <param name="range">Range to set the italics.</param>
            <param name="italic">If set to <c>true</c>, then text will be italic.</param>
        </member>
        <member name="M:Eto.Forms.ITextBuffer.SetUnderline(Eto.Forms.Range{System.Int32},System.Boolean)">
            <summary>
            Sets the underline flag for the specified text range.
            </summary>
            <param name="range">Range to set the underline.</param>
            <param name="underline">If set to <c>true</c>, then the text will be underline.</param>
        </member>
        <member name="M:Eto.Forms.ITextBuffer.SetStrikethrough(Eto.Forms.Range{System.Int32},System.Boolean)">
            <summary>
            Sets the strikethrough for the specified text range.
            </summary>
            <param name="range">Range to set the strikethrough.</param>
            <param name="strikethrough">If set to <c>true</c>, then the text will be strikethrough.</param>
        </member>
        <member name="M:Eto.Forms.ITextBuffer.SetFont(Eto.Forms.Range{System.Int32},Eto.Drawing.Font)">
            <summary>
            Sets the font for the specified text range.
            </summary>
            <param name="range">Range to set the font.</param>
            <param name="font">Font for the text in the range.</param>
        </member>
        <member name="M:Eto.Forms.ITextBuffer.SetForeground(Eto.Forms.Range{System.Int32},Eto.Drawing.Color)">
            <summary>
            Sets the foreground color for the specified text range.
            </summary>
            <param name="range">Range to set the foreground color.</param>
            <param name="color">Color to set the text foreground in the range.</param>
        </member>
        <member name="M:Eto.Forms.ITextBuffer.SetBackground(Eto.Forms.Range{System.Int32},Eto.Drawing.Color)">
            <summary>
            Sets the background color for the specified range.
            </summary>
            <param name="range">Range to set the background color.</param>
            <param name="color">Color to set the text background in the range.</param>
        </member>
        <member name="M:Eto.Forms.ITextBuffer.SetFamily(Eto.Forms.Range{System.Int32},Eto.Drawing.FontFamily)">
            <summary>
            Sets the font family for the specified text range.
            </summary>
            <param name="range">Range to set the font family.</param>
            <param name="family">Font family for the text in the range.</param>
        </member>
        <member name="P:Eto.Forms.ITextBuffer.SupportedFormats">
            <summary>
            Gets an enumeration of formats supported for the <see cref="M:Eto.Forms.ITextBuffer.Load(System.IO.Stream,Eto.Forms.RichTextAreaFormat)"/> and <see cref="M:Eto.Forms.ITextBuffer.Save(System.IO.Stream,Eto.Forms.RichTextAreaFormat)"/> methods.
            </summary>
            <value>The supported formats for loading and saving.</value>
        </member>
        <member name="M:Eto.Forms.ITextBuffer.Load(System.IO.Stream,Eto.Forms.RichTextAreaFormat)">
            <summary>
            Loads the specified format from the stream, replacing the content of the buffer.
            </summary>
            <remarks>
            The CaretIndex and Selection will be set to the end of the string after set.
            </remarks>
            <param name="stream">Stream to load from.</param>
            <param name="format">Format of the stream to load.</param>
        </member>
        <member name="M:Eto.Forms.ITextBuffer.Save(System.IO.Stream,Eto.Forms.RichTextAreaFormat)">
            <summary>
            Saves the buffer into a stream with the specified format.
            </summary>
            <param name="stream">Stream to save to.</param>
            <param name="format">Format to save into the stream.</param>
        </member>
        <member name="M:Eto.Forms.ITextBuffer.Clear">
            <summary>
            Clears the buffer of all text and formatting.
            </summary>
        </member>
        <member name="M:Eto.Forms.ITextBuffer.Delete(Eto.Forms.Range{System.Int32})">
            <summary>
            Deletes text from the specified range
            </summary>
            <param name="range">Range of the text to delete.</param>
        </member>
        <member name="M:Eto.Forms.ITextBuffer.Insert(System.Int32,System.String)">
            <summary>
            Inserts text with the format of the text at the specified position.
            </summary>
            <param name="position">Position to insert the text.</param>
            <param name="text">Text to insert.</param>
        </member>
        <member name="T:Eto.Forms.RichTextArea">
            <summary>
            Text area with ability to specify rich text formatting such as font attributes and colors.
            </summary>
        </member>
        <member name="P:Eto.Forms.RichTextArea.SelectionFont">
            <summary>
            Gets or sets the font of the selected text or insertion point.
            </summary>
            <value>The font of the selection.</value>
        </member>
        <member name="P:Eto.Forms.RichTextArea.SelectionForeground">
            <summary>
            Gets or sets the foreground color of the selected text or insertion point.
            </summary>
            <value>The foreground color of the selection.</value>
        </member>
        <member name="P:Eto.Forms.RichTextArea.SelectionBackground">
            <summary>
            Gets or sets the background color of the selected text or insertion point.
            </summary>
            <value>The background color of the selection.</value>
        </member>
        <member name="P:Eto.Forms.RichTextArea.SelectionBold">
            <summary>
            Gets or sets a value indicating whether the selected text or insertion point has bold text.
            </summary>
            <value><c>true</c> if selected text is bold; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Eto.Forms.RichTextArea.SelectionItalic">
            <summary>
            Gets or sets a value indicating whether the selected text or insertion point has italic style.
            </summary>
            <value><c>true</c> if selected text is italic; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Eto.Forms.RichTextArea.SelectionUnderline">
            <summary>
            Gets or sets a value indicating whether the selected text or insertion point has underline decorations.
            </summary>
            <value><c>true</c> if selected text is underline; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Eto.Forms.RichTextArea.SelectionStrikethrough">
            <summary>
            Gets or sets a value indicating whether the selected text or insertion point has strikethrough decorations.
            </summary>
            <value><c>true</c> if selected text is strikethrough; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Eto.Forms.RichTextArea.SelectionFamily">
            <summary>
            Gets or sets the font family of the selected text or insertion point.
            </summary>
            <value>The font family of the selected text.</value>
        </member>
        <member name="P:Eto.Forms.RichTextArea.Buffer">
            <summary>
            Gets the formatted text buffer to set formatting and load/save to file.
            </summary>
            <remarks>
            The text buffer allows you to control the formatting of the text.
            </remarks>
            <value>The text buffer.</value>
        </member>
        <member name="P:Eto.Forms.RichTextArea.Rtf">
            <summary>
            Gets or sets the content as a RTF (Rich Text Format) string. Note that some platforms don't support RTF (e.g. Gtk).
            </summary>
            <remarks>
            The CaretIndex and Selection will be set to the end of the string after set.
            </remarks>
            <value>The RTF string.</value>
        </member>
        <member name="T:Eto.Forms.RichTextArea.IHandler">
            <summary>
            Handler interface for the <see cref="T:Eto.Forms.RichTextArea"/>.
            </summary>
        </member>
        <member name="P:Eto.Forms.RichTextArea.IHandler.SelectionBold">
            <summary>
            Gets or sets a value indicating whether the selected text or insertion point has bold text.
            </summary>
            <value><c>true</c> if selected text is bold; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Eto.Forms.RichTextArea.IHandler.SelectionItalic">
            <summary>
            Gets or sets a value indicating whether the selected text or insertion point has italic style.
            </summary>
            <value><c>true</c> if selected text is italic; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Eto.Forms.RichTextArea.IHandler.SelectionUnderline">
            <summary>
            Gets or sets a value indicating whether the selected text or insertion point has underline decorations.
            </summary>
            <value><c>true</c> if selected text is underline; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Eto.Forms.RichTextArea.IHandler.SelectionStrikethrough">
            <summary>
            Gets or sets a value indicating whether the selected text or insertion point has strikethrough decorations.
            </summary>
            <value><c>true</c> if selected text is strikethrough; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Eto.Forms.RichTextArea.IHandler.SelectionFont">
            <summary>
            Gets or sets the font of the selected text or insertion point.
            </summary>
            <value>The font of the selection.</value>
        </member>
        <member name="P:Eto.Forms.RichTextArea.IHandler.SelectionForeground">
            <summary>
            Gets or sets the foreground color of the selected text or insertion point.
            </summary>
            <value>The foreground color of the selection.</value>
        </member>
        <member name="P:Eto.Forms.RichTextArea.IHandler.SelectionBackground">
            <summary>
            Gets or sets the background color of the selected text or insertion point.
            </summary>
            <value>The background color of the selection.</value>
        </member>
        <member name="P:Eto.Forms.RichTextArea.IHandler.Buffer">
            <summary>
            Gets the formatted text buffer to set formatting and load/save to file.
            </summary>
            <remarks>
            The text buffer allows you to control the formatting of the text.
            </remarks>
            <value>The text buffer.</value>
        </member>
        <member name="P:Eto.Forms.RichTextArea.IHandler.SelectionFamily">
            <summary>
            Gets or sets the font family of the selected text or insertion point.
            </summary>
            <value>The font family of the selected text.</value>
        </member>
        <member name="T:Eto.Forms.ScrollEventArgs">
            <summary>
            Event arguments for <see cref="E:Eto.Forms.Scrollable.Scroll"/> events
            </summary>
        </member>
        <member name="P:Eto.Forms.ScrollEventArgs.ScrollPosition">
            <summary>
            Gets the scroll position of the Scrollable
            </summary>
            <value>The scroll position.</value>
        </member>
        <member name="M:Eto.Forms.ScrollEventArgs.#ctor(Eto.Drawing.Point)">
            <summary>
            Initializes a new instance of the <see cref="T:Eto.Forms.ScrollEventArgs"/> class.
            </summary>
            <param name="scrollPosition">Scroll position.</param>
        </member>
        <member name="T:Eto.Forms.BorderType">
            <summary>
            Border types
            </summary>
        </member>
        <member name="F:Eto.Forms.BorderType.Bezel">
            <summary>
            Shows a bezel, if that is the default border for controls
            </summary>
        </member>
        <member name="F:Eto.Forms.BorderType.Line">
            <summary>
            Shows a single line border
            </summary>
        </member>
        <member name="F:Eto.Forms.BorderType.None">
            <summary>
            Show no border
            </summary>
        </member>
        <member name="T:Eto.Forms.Scrollable">
            <summary>
            Control to show content in a scrollable container
            </summary>
            <copyright>(c) 2014 by Curtis Wensley</copyright>
            <license type="BSD-3">See LICENSE for full terms</license>
        </member>
        <member name="F:Eto.Forms.Scrollable.ScrollEvent">
            <summary>
            Event identifier for handlers when attaching the <see cref="E:Eto.Forms.Scrollable.Scroll"/> event
            </summary>
        </member>
        <member name="E:Eto.Forms.Scrollable.Scroll">
            <summary>
            Event to handle when the <see cref="P:Eto.Forms.Scrollable.ScrollPosition"/> changes
            </summary>
        </member>
        <member name="M:Eto.Forms.Scrollable.OnScroll(Eto.Forms.ScrollEventArgs)">
            <summary>
            Raises the <see cref="E:Eto.Forms.Scrollable.Scroll"/> event
            </summary>
            <param name="e">Scroll event arguments</param>
        </member>
        <member name="M:Eto.Forms.Scrollable.UpdateScrollSizes">
            <summary>
            Manually updates the scroll sizes based on the content
            </summary>
            <remarks>
            This should not typically be necessary as it should be done automatically
            </remarks>
        </member>
        <member name="P:Eto.Forms.Scrollable.ScrollPosition">
            <summary>
            Gets or sets the scroll position from the top-left origin
            </summary>
            <value>The scroll position.</value>
        </member>
        <member name="P:Eto.Forms.Scrollable.ScrollSize">
            <summary>
            Gets or sets the size of the scrollable region manually
            </summary>
            <remarks>
            Typically you do not need to set the scroll size manually, as the content will be used to determine the size
            automatically.
            </remarks>
            <value>The size of the scrollable region.</value>
        </member>
        <member name="P:Eto.Forms.Scrollable.Border">
            <summary>
            Gets or sets the border type
            </summary>
            <value>The border.</value>
        </member>
        <member name="P:Eto.Forms.Scrollable.VisibleRect">
            <summary>
            Gets the coordinates of the rectangle that is visible to the user
            </summary>
            <value>The visible rect.</value>
        </member>
        <member name="P:Eto.Forms.Scrollable.ExpandContentWidth">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Eto.Forms.Scrollable"/> expands content to the width of the control
            </summary>
            <remarks>
            This controls whether content that is smaller than the size of the control will be expanded to fill the available space.
            Content that is larger than the available space will make the horizontal scrollbar appear, regardless of this setting.
            </remarks>
            <value><c>true</c> to expand content to the width of the control; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Eto.Forms.Scrollable.ExpandContentHeight">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Eto.Forms.Scrollable"/> expands content to the height of the control
            </summary>
            <remarks>
            This controls whether content that is smaller than the size of the control will be expanded to fill the available space.
            Content that is larger than the available space will make the vertical scrollbar appear, regardless of this setting.
            </remarks>
            <value><c>true</c> to expand content to the height of the control; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Eto.Forms.Scrollable.MinimumZoom">
            <summary>
            Hint to get or set the minimum zoom of the scrollable region, if the platform supports it
            </summary>
            <value>The minimum zoom.</value>
        </member>
        <member name="P:Eto.Forms.Scrollable.MaximumZoom">
            <summary>
            Hint to get or set the maximum zoom of the scrollable region, if the platform supports it
            </summary>
            <value>The maximum zoom.</value>
        </member>
        <member name="P:Eto.Forms.Scrollable.Zoom">
            <summary>
            Hint to set the zoom level of the scrollable region, if the platform supports it
            </summary>
            <value>The current zoom level</value>
        </member>
        <member name="M:Eto.Forms.Scrollable.GetCallback">
            <summary>
            Gets an instance of an object used to perform callbacks to the widget from handler implementations
            </summary>
            <returns>The callback instance to use for this widget</returns>
        </member>
        <member name="T:Eto.Forms.Scrollable.ICallback">
            <summary>
            Callback interface for the <see cref="T:Eto.Forms.Scrollable"/>
            </summary>
        </member>
        <member name="M:Eto.Forms.Scrollable.ICallback.OnScroll(Eto.Forms.Scrollable,Eto.Forms.ScrollEventArgs)">
            <summary>
            Raises the scroll event.
            </summary>
        </member>
        <member name="T:Eto.Forms.Scrollable.Callback">
            <summary>
            Callback implementation for the <see cref="T:Eto.Forms.Scrollable"/>
            </summary>
        </member>
        <member name="M:Eto.Forms.Scrollable.Callback.OnScroll(Eto.Forms.Scrollable,Eto.Forms.ScrollEventArgs)">
            <summary>
            Raises the scroll event.
            </summary>
        </member>
        <member name="T:Eto.Forms.Scrollable.IHandler">
            <summary>
            Handler interface for the <see cref="T:Eto.Forms.Scrollable"/> control
            </summary>
            <copyright>(c) 2014 by Curtis Wensley</copyright>
            <license type="BSD-3">See LICENSE for full terms</license>
        </member>
        <member name="M:Eto.Forms.Scrollable.IHandler.UpdateScrollSizes">
            <summary>
            Manually updates the scroll sizes based on the content
            </summary>
            <remarks>
            This should not typically be necessary as it should be done automatically
            </remarks>
        </member>
        <member name="P:Eto.Forms.Scrollable.IHandler.ScrollPosition">
            <summary>
            Gets or sets the scroll position from the top-left origin
            </summary>
            <value>The scroll position.</value>
        </member>
        <member name="P:Eto.Forms.Scrollable.IHandler.ScrollSize">
            <summary>
            Gets or sets the size of the scrollable region manually
            </summary>
            <remarks>
            Typically you do not need to set the scroll size manually, as the content will be used to determine the size
            automatically.
            </remarks>
            <value>The size of the scrollable region.</value>
        </member>
        <member name="P:Eto.Forms.Scrollable.IHandler.Border">
            <summary>
            Gets or sets the border type
            </summary>
            <value>The border.</value>
        </member>
        <member name="P:Eto.Forms.Scrollable.IHandler.VisibleRect">
            <summary>
            Gets the coordinates of the rectangle that is visible to the user
            </summary>
            <value>The visible rect.</value>
        </member>
        <member name="P:Eto.Forms.Scrollable.IHandler.ExpandContentWidth">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Eto.Forms.Scrollable"/> expands content to the width of the control
            </summary>
            <remarks>
            This controls whether content that is smaller than the size of the control will be expanded to fill the available space.
            Content that is larger than the available space will make the horizontal scrollbar appear, regardless of this setting.
            </remarks>
            <value><c>true</c> to expand content to the width of the control; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Eto.Forms.Scrollable.IHandler.ExpandContentHeight">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Eto.Forms.Scrollable"/> expands content to the height of the control
            </summary>
            <remarks>
            This controls whether content that is smaller than the size of the control will be expanded to fill the available space.
            Content that is larger than the available space will make the vertical scrollbar appear, regardless of this setting.
            </remarks>
            <value><c>true</c> to expand content to the height of the control; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Eto.Forms.Scrollable.IHandler.MinimumZoom">
            <summary>
            Hint to get or set the minimum zoom of the scrollable region, if the platform supports it
            </summary>
            <value>The minimum zoom.</value>
        </member>
        <member name="P:Eto.Forms.Scrollable.IHandler.MaximumZoom">
            <summary>
            Hint to get or set the maximum zoom of the scrollable region, if the platform supports it
            </summary>
            <value>The maximum zoom.</value>
        </member>
        <member name="P:Eto.Forms.Scrollable.IHandler.Zoom">
            <summary>
            Hint to set the zoom level of the scrollable region, if the platform supports it
            </summary>
            <value>The current zoom level</value>
        </member>
        <member name="T:Eto.Forms.SearchBox">
            <summary>
            Search box control
            </summary>
            <remarks>
            The search box control is similar to a plain text box, but provides platform-specific styling.
            </remarks>
            <copyright>(c) 2014 by Curtis Wensley</copyright>
            <license type="BSD-3">See LICENSE for full terms</license>
        </member>
        <member name="T:Eto.Forms.SearchBox.IHandler">
            <summary>
            Handler interface for the <see cref="T:Eto.Forms.SearchBox"/> control
            </summary>
            <copyright>(c) 2014 by Curtis Wensley</copyright>
            <license type="BSD-3">See LICENSE for full terms</license>
        </member>
        <member name="T:Eto.Forms.Slider">
            <summary>
            Control with a knob the user can slide up/down or left/right to select a numeric range.
            </summary>
        </member>
        <member name="E:Eto.Forms.Slider.ValueChanged">
            <summary>
            Occurs when the <see cref="P:Eto.Forms.Slider.Value"/> property is changed.
            </summary>
        </member>
        <member name="M:Eto.Forms.Slider.OnValueChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Eto.Forms.Slider.ValueChanged"/> event.
            </summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="P:Eto.Forms.Slider.TickFrequency">
            <summary>
            Gets or sets the hint for numeric value between each visual tick.
            </summary>
            <remarks>
            This is for visual representation only, unless the <see cref="P:Eto.Forms.Slider.SnapToTick"/> is set to true.
            </remarks>
            <value>The tick frequency.</value>
        </member>
        <member name="P:Eto.Forms.Slider.SnapToTick">
            <summary>
            Gets or sets a value indicating whether the slider will snap to each tick.
            </summary>
            <remarks>
            This will restrict the user's input to only values at each <see cref="P:Eto.Forms.Slider.TickFrequency"/> interval
            between the <see cref="P:Eto.Forms.Slider.MinValue"/> and <see cref="P:Eto.Forms.Slider.MaxValue"/>.
            </remarks>
            <seealso cref="P:Eto.Forms.Slider.TickFrequency"/>
            <value><c>true</c> if the slider will snap to each tick; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Eto.Forms.Slider.MaxValue">
            <summary>
            Gets or sets the maximum value that can be set by the user.
            </summary>
            <value>The maximum value.</value>
        </member>
        <member name="P:Eto.Forms.Slider.MinValue">
            <summary>
            Gets or sets the minimum value that can be set by the user.
            </summary>
            <value>The minimum value.</value>
        </member>
        <member name="P:Eto.Forms.Slider.Value">
            <summary>
            Gets or sets the current slider value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="P:Eto.Forms.Slider.Orientation">
            <summary>
            Gets or sets the orientation of the slider.
            </summary>
            <value>The slider orientation.</value>
        </member>
        <member name="M:Eto.Forms.Slider.GetCallback">
            <summary>
            Gets an instance of an object used to perform callbacks to the widget from handler implementations
            </summary>
            <returns>The callback instance to use for this widget</returns>
        </member>
        <member name="T:Eto.Forms.Slider.ICallback">
            <summary>
            Callback interface for the <see cref="T:Eto.Forms.Slider"/>
            </summary>
        </member>
        <member name="M:Eto.Forms.Slider.ICallback.OnValueChanged(Eto.Forms.Slider,System.EventArgs)">
            <summary>
            Raises the value changed event.
            </summary>
        </member>
        <member name="T:Eto.Forms.Slider.Callback">
            <summary>
            Callback implementation for handlers of <see cref="T:Eto.Forms.Slider"/>
            </summary>
        </member>
        <member name="M:Eto.Forms.Slider.Callback.OnValueChanged(Eto.Forms.Slider,System.EventArgs)">
            <summary>
            Raises the value changed event.
            </summary>
        </member>
        <member name="T:Eto.Forms.Slider.IHandler">
            <summary>
            Handler interface for the <see cref="T:Eto.Forms.Slider"/>
            </summary>
        </member>
        <member name="P:Eto.Forms.Slider.IHandler.MaxValue">
            <summary>
            Gets or sets the maximum value that can be set by the user.
            </summary>
            <value>The maximum value.</value>
        </member>
        <member name="P:Eto.Forms.Slider.IHandler.MinValue">
            <summary>
            Gets or sets the minimum value that can be set by the user.
            </summary>
            <value>The minimum value.</value>
        </member>
        <member name="P:Eto.Forms.Slider.IHandler.Value">
            <summary>
            Gets or sets the current slider value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="P:Eto.Forms.Slider.IHandler.TickFrequency">
            <summary>
            Gets or sets the hint for numeric value between each visual tick.
            </summary>
            <remarks>
            This is for visual representation only, unless the <see cref="P:Eto.Forms.Slider.IHandler.SnapToTick"/> is set to true.
            </remarks>
            <value>The tick frequency.</value>
        </member>
        <member name="P:Eto.Forms.Slider.IHandler.SnapToTick">
            <summary>
            Gets or sets a value indicating whether the slider will snap to each tick.
            </summary>
            <remarks>
            This will restrict the user's input to only values at each <see cref="P:Eto.Forms.Slider.IHandler.TickFrequency"/> interval
            between the <see cref="P:Eto.Forms.Slider.IHandler.MinValue"/> and <see cref="P:Eto.Forms.Slider.IHandler.MaxValue"/>.
            </remarks>
            <seealso cref="P:Eto.Forms.Slider.IHandler.TickFrequency"/>
            <value><c>true</c> if the slider will snap to each tick; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Eto.Forms.Slider.IHandler.Orientation">
            <summary>
            Gets or sets the orientation of the slider.
            </summary>
            <value>The slider orientation.</value>
        </member>
        <member name="T:Eto.Forms.SliderOrientation">
            <summary>
            Enumeration of the orientations available for the <see cref="T:Eto.Forms.Slider"/> control
            </summary>
        </member>
        <member name="P:Eto.Forms.SliderOrientation.Horizontal">
            <summary>
            Slider should be shown in a horizontal orientation
            </summary>
        </member>
        <member name="P:Eto.Forms.SliderOrientation.Vertical">
            <summary>
            Slider should be shown in a vertical orientation
            </summary>
        </member>
        <member name="M:Eto.Forms.SliderOrientation.op_Implicit(Eto.Forms.SliderOrientation)~Eto.Forms.Orientation">
            <summary>Converts to an Orientation</summary>
        </member>
        <member name="M:Eto.Forms.SliderOrientation.op_Implicit(Eto.Forms.Orientation)~Eto.Forms.SliderOrientation">
            <summary>Converts an Orientation to a RadioButtonListOrientation</summary>
        </member>
        <member name="M:Eto.Forms.SliderOrientation.op_Equality(Eto.Forms.Orientation,Eto.Forms.SliderOrientation)">
            <summary>Compares for equality</summary>
            <param name="orientation1">Orientation1.</param>
            <param name="orientation2">Orientation2.</param>
        </member>
        <member name="M:Eto.Forms.SliderOrientation.op_Inequality(Eto.Forms.Orientation,Eto.Forms.SliderOrientation)">
            <summary>Compares for inequality</summary>
            <param name="orientation1">Orientation1.</param>
            <param name="orientation2">Orientation2.</param>
        </member>
        <member name="M:Eto.Forms.SliderOrientation.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:Eto.Forms.SliderOrientation"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:Eto.Forms.SliderOrientation"/>.</param>
            <returns><c>true</c> if the specified <see cref="T:System.Object"/> is equal to the current
            <see cref="T:Eto.Forms.SliderOrientation"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Eto.Forms.SliderOrientation.GetHashCode">
            <summary>
            Serves as a hash function for a <see cref="T:Eto.Forms.SliderOrientation"/> object.
            </summary>
            <returns>A hash code for this instance that is suitable for use in hashing algorithms and data structures such as a hash table.</returns>
        </member>
        <member name="T:Eto.Forms.Spinner">
            <summary>
            Presents a spinning indeterminate progress spinner wheel
            </summary>
            <remarks>
            Use the <see cref="P:Eto.Forms.Control.Enabled"/> property to control whether the spinner is active or not.
            </remarks>
            <copyright>(c) 2013 by Curtis Wensley</copyright>
            <license type="BSD-3">See LICENSE for full terms</license>
        </member>
        <member name="T:Eto.Forms.Spinner.IHandler">
            <summary>
            Handler interface for the <see cref="T:Eto.Forms.Spinner"/> control
            </summary>
            <copyright>(c) 2013 by Curtis Wensley</copyright>
            <license type="BSD-3">See LICENSE for full terms</license>
        </member>
        <member name="P:Eto.Forms.Spinner.Enabled">
            <summary>
            Gets or sets a value indicating whether the Spinner is spinning, default is false.
            </summary>
            <value><c>true</c> if enabled; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Eto.Forms.SplitterFixedPanel">
            <summary>
            Specifies which panel has a fixed size the parent container is resized.
            </summary>
        </member>
        <member name="F:Eto.Forms.SplitterFixedPanel.Panel1">
            <summary>
            The first panel will be fixed size, where the second will resize along with the splitter's container.
            </summary>
        </member>
        <member name="F:Eto.Forms.SplitterFixedPanel.Panel2">
            <summary>
            The second panel will be fixed size, where the first will resize along with the splitter's container.
            </summary>
        </member>
        <member name="F:Eto.Forms.SplitterFixedPanel.None">
            <summary>
            Both panels will resize along with the splitter's container.
            </summary>
        </member>
        <member name="T:Eto.Forms.Splitter">
            <summary>
            Control to show two panels separated by a splitter
            </summary>
            <remarks>
            Most desktop platforms allow the user to modify the position of the splitter, though some (notibly iOS) do
            not.
            The <see cref="P:Eto.Forms.Splitter.Orientation"/> of the splitter determines how the controls are laid out, either horizontally
            or vertically.
            </remarks>
        </member>
        <member name="P:Eto.Forms.Splitter.Controls">
            <summary>
            Gets an enumeration of controls that are directly contained by this container
            </summary>
            <value>The contained controls.</value>
        </member>
        <member name="P:Eto.Forms.Splitter.IsSupported">
            <summary>
            Gets a value indicating the <see cref="T:Eto.Forms.Splitter"/> is supported in the platform
            </summary>
            <value><c>true</c> if supported; otherwise, <c>false</c>.</value>
        </member>
        <member name="F:Eto.Forms.Splitter.PositionChangedEvent">
            <summary>
            Identifier for the <see cref="E:Eto.Forms.Splitter.PositionChanged"/> event
            </summary>
        </member>
        <member name="E:Eto.Forms.Splitter.PositionChanged">
            <summary>
            Raised when the user moves the splitter.
            </summary>
        </member>
        <member name="M:Eto.Forms.Splitter.OnPositionChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Eto.Forms.Splitter.PositionChanged"/> event.
            </summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="P:Eto.Forms.Splitter.Orientation">
            <summary>
            Gets or sets the orientation of the panels in the splitter.
            </summary>
            <remarks>
            This defines the orientation of the panels, with a splitter of the opposite orientation between them.
            For example, when set to <see cref="T:Orientation.Horizontal"/>, Panel1 and Panel2 will be horizontal to 
            eachother with a vertical splitter/gutter between them.
            </remarks>
            <value>The orientation of the panels.</value>
        </member>
        <member name="P:Eto.Forms.Splitter.FixedPanel">
            <summary>
            Gets or sets the panel with fixed size.
            </summary>
            <remarks>
            This specifies which panel will not change its size when the splitter's container is resized.
            If <see cref="F:Eto.Forms.SplitterFixedPanel.None"/>, both panels will resize.
            </remarks>
            <value>The fixed panel.</value>
        </member>
        <member name="P:Eto.Forms.Splitter.Position">
            <summary>
            Gets or sets the position of the splitter from the left or top, in pixels.
            </summary>
            <value>The position of the splitter.</value>
        </member>
        <member name="P:Eto.Forms.Splitter.RelativePosition">
            <summary>
            Gets or sets the relative position of the splitter which is based on <see cref="P:Eto.Forms.Splitter.FixedPanel"/>.
            </summary>
            <remarks>
            Same as <see cref="P:Eto.Forms.Splitter.Position"/> with SplitterFixedPanel.Panel1,
            width/height of second panel with SplitterFixedPanel.Panel2
            and ratio of width/height of first panel against available size with SplitterFixedPanel.None.
            </remarks>
        </member>
        <member name="P:Eto.Forms.Splitter.SplitterWidth">
            <summary>
            Gets or sets size of the splitter/gutter
            </summary>
        </member>
        <member name="P:Eto.Forms.Splitter.Panel1">
            <summary>
            Gets or sets the top or left panel of the splitter.
            </summary>
            <value>The first panel.</value>
        </member>
        <member name="P:Eto.Forms.Splitter.Panel1MinimumSize">
            <summary>
            Gets or sets the minimal size of the first panel.
            </summary>
            <value>The minimal size of the first panel.</value>
        </member>
        <member name="P:Eto.Forms.Splitter.Panel2">
            <summary>
            Gets or sets the bottom or right panel of the splitter.
            </summary>
            <value>The second panel.</value>
        </member>
        <member name="P:Eto.Forms.Splitter.Panel2MinimumSize">
            <summary>
            Gets or sets the minimal size of the second panel.
            </summary>
            <value>The minimal size of the second panel.</value>
        </member>
        <member name="M:Eto.Forms.Splitter.Remove(Eto.Forms.Control)">
            <summary>
            Removes the specified child from the container.
            </summary>
            <param name="child">Child to remove.</param>
        </member>
        <member name="M:Eto.Forms.Splitter.GetCallback">
            <summary>
            Gets an instance of an object used to perform callbacks to the widget from handler implementations
            </summary>
            <returns>The callback instance to use for this widget</returns>
        </member>
        <member name="T:Eto.Forms.Splitter.ICallback">
            <summary>
            Callback interface for the <see cref="T:Eto.Forms.Splitter"/>
            </summary>
        </member>
        <member name="M:Eto.Forms.Splitter.ICallback.OnPositionChanged(Eto.Forms.Splitter,System.EventArgs)">
            <summary>
            Raises the position changed event.
            </summary>
        </member>
        <member name="T:Eto.Forms.Splitter.Callback">
            <summary>
            Callback implementation for handlers of the <see cref="T:Eto.Forms.Splitter"/>
            </summary>
        </member>
        <member name="M:Eto.Forms.Splitter.Callback.OnPositionChanged(Eto.Forms.Splitter,System.EventArgs)">
            <summary>
            Raises the position changed event.
            </summary>
        </member>
        <member name="T:Eto.Forms.Splitter.IHandler">
            <summary>
            Handler interface for the <see cref="T:Eto.Forms.Splitter"/>
            </summary>
        </member>
        <member name="P:Eto.Forms.Splitter.IHandler.Orientation">
            <summary>
            Gets or sets the orientation of the panels in the splitter.
            </summary>
            <value>The orientation of the panels.</value>
        </member>
        <member name="P:Eto.Forms.Splitter.IHandler.FixedPanel">
            <summary>
            Gets or sets the panel with fixed size.
            </summary>
            <remarks>
            This specifies which panel will not change its size when the splitter's container is resized.
            If <see cref="F:Eto.Forms.SplitterFixedPanel.None"/>, both panels will resize.
            </remarks>
            <value>The fixed panel.</value>
        </member>
        <member name="P:Eto.Forms.Splitter.IHandler.Position">
            <summary>
            Gets or sets the position of the splitter from the left or top, in pixels.
            </summary>
            <value>The position of the splitter.</value>
        </member>
        <member name="P:Eto.Forms.Splitter.IHandler.RelativePosition">
            <summary>
            Gets or sets the relative position of the splitter which is based on <see cref="P:Eto.Forms.Splitter.IHandler.FixedPanel"/>.
            </summary>
            <remarks>
            Same as <see cref="P:Eto.Forms.Splitter.IHandler.Position"/> with SplitterFixedPanel.Panel1,
            width/height of second panel with SplitterFixedPanel.Panel2
            and ratio of width/height of first panel against available size with SplitterFixedPanel.None.
            </remarks>
        </member>
        <member name="P:Eto.Forms.Splitter.IHandler.SplitterWidth">
            <summary>
            Gets or sets size of the splitter/gutter
            </summary>
        </member>
        <member name="P:Eto.Forms.Splitter.IHandler.Panel1">
            <summary>
            Gets or sets the top or left panel of the splitter.
            </summary>
            <value>The first panel.</value>
        </member>
        <member name="P:Eto.Forms.Splitter.IHandler.Panel2">
            <summary>
            Gets or sets the bottom or right panel of the splitter.
            </summary>
            <value>The second panel.</value>
        </member>
        <member name="P:Eto.Forms.Splitter.IHandler.Panel1MinimumSize">
            <summary>
            Gets or sets the minimal size of the first panel.
            </summary>
            <value>The minimal size of the first panel.</value>
        </member>
        <member name="P:Eto.Forms.Splitter.IHandler.Panel2MinimumSize">
            <summary>
            Gets or sets the minimal size of the second panel.
            </summary>
            <value>The minimal size of the second panel.</value>
        </member>
        <member name="T:Eto.Forms.SplitterOrientation">
            <summary>
            Orientation of a <see cref="T:Eto.Forms.Splitter"/> control.
            </summary>
        </member>
        <member name="P:Eto.Forms.SplitterOrientation.Horizontal">
            <summary>
            Controls are in horizontal orientation, with a vertical divider between them.
            </summary>
        </member>
        <member name="P:Eto.Forms.SplitterOrientation.Vertical">
            <summary>
            Controls are in vertical orientation, with a horizontal divider betwen them.
            </summary>
        </member>
        <member name="M:Eto.Forms.SplitterOrientation.op_Implicit(Eto.Forms.SplitterOrientation)~Eto.Forms.Orientation">
            <summary>Converts to an Orientation</summary>
        </member>
        <member name="M:Eto.Forms.SplitterOrientation.op_Implicit(Eto.Forms.Orientation)~Eto.Forms.SplitterOrientation">
            <summary>Converts an Orientation to a SplitterOrientation</summary>
        </member>
        <member name="M:Eto.Forms.SplitterOrientation.op_Equality(Eto.Forms.Orientation,Eto.Forms.SplitterOrientation)">
            <summary>Compares for equality</summary>
            <param name="orientation1">Orientation1.</param>
            <param name="orientation2">Orientation2.</param>
        </member>
        <member name="M:Eto.Forms.SplitterOrientation.op_Inequality(Eto.Forms.Orientation,Eto.Forms.SplitterOrientation)">
            <summary>Compares for inequality</summary>
            <param name="orientation1">Orientation1.</param>
            <param name="orientation2">Orientation2.</param>
        </member>
        <member name="M:Eto.Forms.SplitterOrientation.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:Eto.Forms.SplitterOrientation"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:Eto.Forms.SplitterOrientation"/>.</param>
            <returns><c>true</c> if the specified <see cref="T:System.Object"/> is equal to the current
            <see cref="T:Eto.Forms.SplitterOrientation"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Eto.Forms.SplitterOrientation.GetHashCode">
            <summary>
            Serves as a hash function for a <see cref="T:Eto.Forms.SplitterOrientation"/> object.
            </summary>
            <returns>A hash code for this instance that is suitable for use in hashing algorithms and data structures such as a hash table.</returns>
        </member>
        <member name="T:Eto.Forms.StepperDirection">
            <summary>
            Direction of the stepper when it has been clicked
            </summary>
        </member>
        <member name="F:Eto.Forms.StepperDirection.Up">
            <summary>
            The Up direction, which usually increases the value
            </summary>
        </member>
        <member name="F:Eto.Forms.StepperDirection.Down">
            <summary>
            The Down direction, which usually decreases the value
            </summary>
        </member>
        <member name="T:Eto.Forms.StepperValidDirections">
            <summary>
            Valid stepper directions for the (typically) up/down buttons
            </summary>
            <remarks>
            Note that some platforms do not actually disable the up or down buttons, but just won't trigger the <see cref="E:Eto.Forms.Stepper.Step"/>
            event when it is not valid.
            </remarks>
        </member>
        <member name="F:Eto.Forms.StepperValidDirections.None">
            <summary>
            Neither the up or down buttons are valid
            </summary>
        </member>
        <member name="F:Eto.Forms.StepperValidDirections.Up">
            <summary>
            Specifies that the up/increase button is a valid direction for the stepper
            </summary>
        </member>
        <member name="F:Eto.Forms.StepperValidDirections.Down">
            <summary>
            Specifies that the down/decrease button is a valid direction for the stepper
            </summary>
        </member>
        <member name="F:Eto.Forms.StepperValidDirections.Both">
            <summary>
            Combines both the <see cref="F:Eto.Forms.StepperValidDirections.Up"/> and <see cref="F:Eto.Forms.StepperValidDirections.Down"/> flags.
            </summary>
        </member>
        <member name="T:Eto.Forms.StepperEventArgs">
            <summary>
            Arguments for the <see cref="T:Eto.Forms.Stepper"/> and <see cref="T:Eto.Forms.TextStepper"/> to give you the direction of the step.
            </summary>
        </member>
        <member name="P:Eto.Forms.StepperEventArgs.Direction">
            <summary>
            Gets the step direction, either up/increase, or down/decrease.
            </summary>
            <value>The step direction.</value>
        </member>
        <member name="M:Eto.Forms.StepperEventArgs.#ctor(Eto.Forms.StepperDirection)">
            <summary>
            Initializes a new instance of the <see cref="T:Eto.Forms.StepperEventArgs"/> class.
            </summary>
            <param name="direction">Direction of the step that the user clicked.</param>
        </member>
        <member name="T:Eto.Forms.Stepper">
            <summary>
            Control that allows you to "step" through values, usually presented by two buttons arranged vertically with up and down arrows.
            </summary>
        </member>
        <member name="F:Eto.Forms.Stepper.StepEvent">
            <summary>
            Identifier for the <see cref="E:Eto.Forms.Stepper.Step"/> event.
            </summary>
        </member>
        <member name="E:Eto.Forms.Stepper.Step">
            <summary>
            Event to handle when the user clicks on one of the step buttons, either up or down.
            </summary>
        </member>
        <member name="M:Eto.Forms.Stepper.OnStep(Eto.Forms.StepperEventArgs)">
            <summary>
            Triggers the <see cref="E:Eto.Forms.Stepper.Step"/> event.
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="P:Eto.Forms.Stepper.ValidDirection">
            <summary>
            Gets or sets the valid directions the stepper will allow the user to click.
            </summary>
            <remarks>
            On some platforms, the up and/or down buttons will not appear disabled, but will not trigger any events when they are 
            not set as a valid direction.
            </remarks>
            <value>The valid directions for the stepper.</value>
        </member>
        <member name="M:Eto.Forms.Stepper.GetCallback">
            <summary>
            Gets the callback.
            </summary>
            <returns>The callback.</returns>
        </member>
        <member name="T:Eto.Forms.Stepper.ICallback">
            <summary>
            Callback interface for the Stepper
            </summary>
        </member>
        <member name="M:Eto.Forms.Stepper.ICallback.OnStep(Eto.Forms.Stepper,Eto.Forms.StepperEventArgs)">
            <summary>
            Triggers the <see cref="E:Eto.Forms.Stepper.Step"/> event.
            </summary>
            <param name="widget">Widget instance to trigger the event</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="T:Eto.Forms.Stepper.Callback">
            <summary>
            Callback implementation for the Stepper
            </summary>
        </member>
        <member name="M:Eto.Forms.Stepper.Callback.OnStep(Eto.Forms.Stepper,Eto.Forms.StepperEventArgs)">
            <summary>
            Triggers the <see cref="E:Eto.Forms.Stepper.Step"/> event.
            </summary>
            <param name="widget">Widget instance to trigger the event</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="T:Eto.Forms.Stepper.IHandler">
            <summary>
            Handler interface for the Stepper
            </summary>
        </member>
        <member name="P:Eto.Forms.Stepper.IHandler.ValidDirection">
            <summary>
            Gets or sets the valid directions the stepper will allow the user to click.
            </summary>
            <remarks>
            On some platforms, the up and/or down buttons will not appear disabled, but will not trigger any events when they are 
            not set as a valid direction.
            </remarks>
            <value>The valid directions for the stepper.</value>
        </member>
        <member name="T:Eto.Forms.TabControl">
            <summary>
            Control to present multiple pages with a tab selection
            </summary>
            <remarks>
            Some platforms (e.g. OS X) have limitations on how many tabs are visible.
            It is advised to utilize different methods (e.g. a listbox or combo box) to switch between many sections
            if there are too many tabs.
            </remarks>
        </member>
        <member name="P:Eto.Forms.TabControl.Controls">
            <summary>
            Gets an enumeration of controls that are directly contained by this container
            </summary>
            <value>The contained controls.</value>
        </member>
        <member name="E:Eto.Forms.TabControl.SelectedIndexChanged">
            <summary>
            Occurs when the <see cref="P:Eto.Forms.TabControl.SelectedIndex"/> is changed.
            </summary>
        </member>
        <member name="M:Eto.Forms.TabControl.OnSelectedIndexChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Eto.Forms.TabControl.SelectedIndexChanged"/> event.
            </summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:Eto.Forms.TabControl.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Eto.Forms.TabControl"/> class.
            </summary>
        </member>
        <member name="M:Eto.Forms.TabControl.#ctor(Eto.Forms.TabControl.IHandler)">
            <summary>
            Initializes a new instance of the <see cref="T:Eto.Forms.TabControl"/> class with the specified handler.
            </summary>
            <param name="handler">Handler for the implementation of the tab control.</param>
        </member>
        <member name="P:Eto.Forms.TabControl.SelectedIndex">
            <summary>
            Gets or sets the index of the selected tab.
            </summary>
            <value>The index of the selected tab.</value>
        </member>
        <member name="P:Eto.Forms.TabControl.SelectedPage">
            <summary>
            Gets or sets the currently selected page.
            </summary>
            <value>The selected page.</value>
        </member>
        <member name="P:Eto.Forms.TabControl.Pages">
            <summary>
            Gets the collection of tab pages.
            </summary>
            <value>The pages.</value>
        </member>
        <member name="M:Eto.Forms.TabControl.Remove(Eto.Forms.Control)">
            <summary>
            Remove the specified child from the container.
            </summary>
            <param name="child">Child to remove.</param>
        </member>
        <member name="P:Eto.Forms.TabControl.TabPosition">
            <summary>
            Gets or sets the position of the tabs relative to the content.
            </summary>
            <remarks>
            Note that on some platforms the text is rotated when using Left or Right (e.g. OS X).
            This means that is is not suitable when you have a lot of tabs.
            Some platforms (mobile) may ignore this hint and display the tabs according to the platform.
            </remarks>
        </member>
        <member name="P:Eto.Forms.TabControl.SelectedIndexBinding">
            <summary>
            Gets the binding for the <see cref="P:Eto.Forms.TabControl.SelectedIndex"/> property.
            </summary>
            <value>The selected index binding.</value>
        </member>
        <member name="M:Eto.Forms.TabControl.GetCallback">
            <summary>
            Gets an instance of an object used to perform callbacks to the widget from handler implementations
            </summary>
            <returns>The callback instance to use for this widget</returns>
        </member>
        <member name="T:Eto.Forms.TabControl.ICallback">
            <summary>
            Callback interface for the <see cref="T:Eto.Forms.TabControl"/>
            </summary>
        </member>
        <member name="M:Eto.Forms.TabControl.ICallback.OnSelectedIndexChanged(Eto.Forms.TabControl,System.EventArgs)">
            <summary>
            Raises the selected index changed event.
            </summary>
        </member>
        <member name="T:Eto.Forms.TabControl.Callback">
            <summary>
            Callback implementation for handlers of the <see cref="T:Eto.Forms.TabControl"/>
            </summary>
        </member>
        <member name="M:Eto.Forms.TabControl.Callback.OnSelectedIndexChanged(Eto.Forms.TabControl,System.EventArgs)">
            <summary>
            Raises the selected index changed event.
            </summary>
        </member>
        <member name="T:Eto.Forms.TabControl.IHandler">
            <summary>
            Handler interface for the <see cref="T:Eto.Forms.TabControl"/>
            </summary>
        </member>
        <member name="P:Eto.Forms.TabControl.IHandler.SelectedIndex">
            <summary>
            Gets or sets the index of the selected tab.
            </summary>
            <value>The index of the selected tab.</value>
        </member>
        <member name="M:Eto.Forms.TabControl.IHandler.InsertTab(System.Int32,Eto.Forms.TabPage)">
            <summary>
            Inserts a tab at the specified index.
            </summary>
            <param name="index">Index to insert the tab.</param>
            <param name="page">Page to insert.</param>
        </member>
        <member name="M:Eto.Forms.TabControl.IHandler.ClearTabs">
            <summary>
            Removes all tabs from the control.
            </summary>
        </member>
        <member name="M:Eto.Forms.TabControl.IHandler.RemoveTab(System.Int32,Eto.Forms.TabPage)">
            <summary>
            Removes the specified tab.
            </summary>
            <param name="index">Index of the page to remove.</param>
            <param name="page">Page to remove.</param>
        </member>
        <member name="P:Eto.Forms.TabControl.IHandler.TabPosition">
            <summary>
            Gets or sets the position of the tabs relative to the content.
            </summary>
        </member>
        <member name="T:Eto.Forms.TabPage">
            <summary>
            Control for a page in a <see cref="T:Eto.Forms.TabControl"/>
            </summary>
        </member>
        <member name="M:Eto.Forms.TabPage.#ctor(Eto.Forms.Control,System.Nullable{Eto.Drawing.Padding})">
            <summary>
            Initializes a new instance of the <see cref="T:Eto.Forms.TabPage"/> class.
            </summary>
            <param name="control">Control.</param>
            <param name="padding">Padding.</param>
        </member>
        <member name="M:Eto.Forms.TabPage.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Eto.Forms.TabPage"/> class.
            </summary>
        </member>
        <member name="E:Eto.Forms.TabPage.Click">
            <summary>
            Occurs when the tab is clicked to select it.
            </summary>
        </member>
        <member name="M:Eto.Forms.TabPage.OnClick(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Eto.Forms.TabPage.Click"/> event.
            </summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="P:Eto.Forms.TabPage.Text">
            <summary>
            Gets or sets the title text of the page.
            </summary>
            <value>The title text.</value>
        </member>
        <member name="P:Eto.Forms.TabPage.Image">
            <summary>
            Gets or sets the image of the page.
            </summary>
            <remarks>
            It is usally good to use an <see cref="T:Eto.Drawing.Icon"/> for the image with multiple sizes, so that scaling won't be needed
            to fit the image in the space.
            Usually you'd need 16x16 (desktop), 32x32 (iOS), and 64x64 (iOS Retina) variations.
            </remarks>
            <value>The tab's image to display.</value>
        </member>
        <member name="T:Eto.Forms.TabPage.IHandler">
            <summary>
            Handler interface for the <see cref="T:Eto.Forms.TabPage"/>
            </summary>
        </member>
        <member name="P:Eto.Forms.TabPage.IHandler.Text">
            <summary>
            Gets or sets the title text of the page.
            </summary>
            <value>The title text.</value>
        </member>
        <member name="P:Eto.Forms.TabPage.IHandler.Image">
            <summary>
            Gets or sets the image of the page.
            </summary>
            <value>The tab's image.</value>
        </member>
        <member name="T:Eto.Forms.TextReplacements">
            <summary>
            Text replacement options when entering text
            </summary>
        </member>
        <member name="F:Eto.Forms.TextReplacements.None">
            <summary>
            Do not perform any automatic replacements based on user input
            </summary>
        </member>
        <member name="F:Eto.Forms.TextReplacements.Text">
            <summary>
            Perform text replacements, such as shortcuts
            </summary>
        </member>
        <member name="F:Eto.Forms.TextReplacements.Quote">
            <summary>
            Perform replacements of straight quotes to 'curly' quotes
            </summary>
        </member>
        <member name="F:Eto.Forms.TextReplacements.Dash">
            <summary>
            Perform replacements of dashes '-' to em dash '—'.
            </summary>
            <remarks>
            Note that some platforms may do this automatically with a single dash, some may require the user to enter 
            double dashes.
            </remarks>
        </member>
        <member name="F:Eto.Forms.TextReplacements.Spelling">
            <summary>
            Perform automatic spelling correction
            </summary>
        </member>
        <member name="F:Eto.Forms.TextReplacements.All">
            <summary>
            All replacements enabled.
            </summary>
        </member>
        <member name="T:Eto.Forms.TextArea">
            <summary>
            Control for multi-line text
            </summary>
            <remarks>
            This differs from the <see cref="T:Eto.Forms.TextBox"/> in that it is used for multi-line text entry and can accept <see cref="F:Eto.Forms.Keys.Tab"/>
            and <see cref="F:Eto.Forms.Keys.Enter"/> input.
            </remarks>
        </member>
        <member name="F:Eto.Forms.TextArea.SelectionChangedEvent">
            <summary>
            Identifier for handlers when attaching the <see cref="E:Eto.Forms.TextArea.SelectionChanged"/> event.
            </summary>
        </member>
        <member name="E:Eto.Forms.TextArea.SelectionChanged">
            <summary>
            Occurs when the <see cref="P:Eto.Forms.TextArea.Selection"/> is changed.
            </summary>
        </member>
        <member name="M:Eto.Forms.TextArea.OnSelectionChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Eto.Forms.TextArea.SelectionChanged"/> event.
            </summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="F:Eto.Forms.TextArea.CaretIndexChangedEvent">
            <summary>
            Identifier for handlers when attaching the <see cref="E:Eto.Forms.TextArea.CaretIndexChanged"/> event.
            </summary>
        </member>
        <member name="E:Eto.Forms.TextArea.CaretIndexChanged">
            <summary>
            Occurs when the <see cref="P:Eto.Forms.TextArea.CaretIndex"/> has changed.
            </summary>
        </member>
        <member name="M:Eto.Forms.TextArea.OnCaretIndexChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Eto.Forms.TextArea.CaretIndexChanged"/> event.
            </summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="P:Eto.Forms.TextArea.ReadOnly">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Eto.Forms.TextArea"/> is read only.
            </summary>
            <remarks>
            A read only text box can be scrolled, text can be selected and copied, etc. However, the user
            will not be able to change any of the text.
            This differs from the <see cref="P:Eto.Forms.Control.Enabled"/> property, which disables all user interaction.
            </remarks>
            <value><c>true</c> if the control is read only; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Eto.Forms.TextArea.Wrap">
            <summary>
            Gets or sets a value indicating whether text will wrap if lines are longer than the width of the control.
            </summary>
            <remarks>
            Typically, a platform will word wrap the text.
            </remarks>
            <value><c>true</c> to wrap the text; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Eto.Forms.TextArea.SelectedText">
            <summary>
            Gets or sets the selected text.
            </summary>
            <remarks>
            When setting the selected text, the text within the <see cref="P:Eto.Forms.TextArea.Selection"/> range will be replaced with
            the new value.
            </remarks>
            <value>The selected text.</value>
        </member>
        <member name="P:Eto.Forms.TextArea.Selection">
            <summary>
            Gets or sets the range of selected text.
            </summary>
            <remarks>
            When setting the selection, the control will be focussed and the associated keyboard may appear on mobile platforms.
            </remarks>
            <seealso cref="M:Eto.Forms.TextArea.SelectAll"/>
            <value>The text selection.</value>
        </member>
        <member name="M:Eto.Forms.TextArea.SelectAll">
            <summary>
            Selects all text.
            </summary>
            <remarks>
            When setting the selection, the control will be focussed and the associated keyboard may appear on mobile platforms.
            </remarks>
        </member>
        <member name="P:Eto.Forms.TextArea.CaretIndex">
            <summary>
            Gets or sets the index of the insertion caret.
            </summary>
            <remarks>
            When setting the caret, the control will be focussed and the associated keyboard may appear on mobile platforms.
            </remarks>
            <value>The index of the insertion caret.</value>
        </member>
        <member name="P:Eto.Forms.TextArea.AcceptsTab">
            <summary>
            Gets or sets a value indicating whether the tab key is inserted into the text area, or if it should be ignored by this control and used
            for navigating to the next control.
            </summary>
            <value><c>true</c> if the TextArea accepts tab key characters; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Eto.Forms.TextArea.AcceptsReturn">
            <summary>
            Gets or sets a value indicating whether the return key is inserted into the text area, or if it should be ignored by this control.
            </summary>
            <value><c>true</c> if the TextArea accepts the return key; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Eto.Forms.TextArea.TextAlignment">
            <summary>
            Gets or sets the horizontal alignment of the text.
            </summary>
            <value>The horizontal alignment.</value>
        </member>
        <member name="P:Eto.Forms.TextArea.HorizontalAlign">
            <summary>
            Gets or sets the horizontal alignment of the text.
            </summary>
            <value>The horizontal alignment.</value>
        </member>
        <member name="P:Eto.Forms.TextArea.SpellCheck">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Eto.Forms.TextArea"/> will perform spell checking.
            </summary>
            <remarks>
            When <c>true</c>, platforms will typically show misspelled or unknown words with a red underline.
            This is a hint, and is only supported by the platform when <see cref="P:Eto.Forms.TextArea.SpellCheckIsSupported"/> is true.
            When not supported, setting this property will do nothing.
            </remarks>
            <value><c>true</c> if spell check; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Eto.Forms.TextArea.SpellCheckIsSupported">
            <summary>
            Gets a value indicating whether the <see cref="P:Eto.Forms.TextArea.SpellCheck"/> property is supported on the control's platform.
            </summary>
            <value><c>true</c> if spell check is supported; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Eto.Forms.TextArea.TextReplacements">
            <summary>
            Gets or sets a hint value indicating whether this <see cref="T:Eto.Forms.TextArea"/> will automatically correct text.
            </summary>
            <remarks>
            On some platforms, autocorrection or text replacements such as quotes, etc may be default.
            Set this to <see cref="F:Eto.Forms.TextReplacements.None"/> to disable any text replacement.
            
            Note this is only supported on OS X currently, all other platforms will be ignored.
            </remarks>
            <value>Type of replacements to enable when entering text..</value>
        </member>
        <member name="P:Eto.Forms.TextArea.SupportedTextReplacements">
            <summary>
            Gets the text replacements that this control supports on the current platform.
            </summary>
            <remarks>
            You can use this to determine which flags in the <see cref="P:Eto.Forms.TextArea.TextReplacements"/> will take effect.
            </remarks>
            <value>The supported text replacements.</value>
        </member>
        <member name="M:Eto.Forms.TextArea.Append(System.String,System.Boolean)">
            <summary>
            Append the specified text to the control and optionally scrolls to make the inserted text visible.
            </summary>
            <remarks>
            This is an optimized way of inserting text into a TextArea when its content gets large.
            </remarks>
            <param name="text">Text to insert.</param>
            <param name="scrollToCursor">If set to <c>true</c>, scroll to the inserted text.</param>
        </member>
        <member name="M:Eto.Forms.TextArea.GetCallback">
            <summary>
            Gets an instance of an object used to perform callbacks to the widget from handler implementations
            </summary>
            <returns>The callback instance to use for this widget</returns>
        </member>
        <member name="T:Eto.Forms.TextArea.ICallback">
            <summary>
            Callback interface for the <see cref="T:Eto.Forms.TextArea"/>
            </summary>
        </member>
        <member name="M:Eto.Forms.TextArea.ICallback.OnSelectionChanged(Eto.Forms.TextArea,System.EventArgs)">
            <summary>
            Raises the selection changed event.
            </summary>
        </member>
        <member name="M:Eto.Forms.TextArea.ICallback.OnCaretIndexChanged(Eto.Forms.TextArea,System.EventArgs)">
            <summary>
            Raises the caret index changed event.
            </summary>
        </member>
        <member name="T:Eto.Forms.TextArea.Callback">
            <summary>
            Callback implementation for handlers of the <see cref="T:Eto.Forms.TextArea"/>
            </summary>
        </member>
        <member name="M:Eto.Forms.TextArea.Callback.OnSelectionChanged(Eto.Forms.TextArea,System.EventArgs)">
            <summary>
            Raises the selection changed event.
            </summary>
        </member>
        <member name="M:Eto.Forms.TextArea.Callback.OnCaretIndexChanged(Eto.Forms.TextArea,System.EventArgs)">
            <summary>
            Raises the caret index changed event.
            </summary>
        </member>
        <member name="T:Eto.Forms.TextArea.IHandler">
            <summary>
            Handler interface for the <see cref="T:Eto.Forms.TextArea"/>
            </summary>
        </member>
        <member name="P:Eto.Forms.TextArea.IHandler.ReadOnly">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Eto.Forms.TextArea"/> is read only.
            </summary>
            <remarks>
            A read only text box can be scrolled, text can be selected and copied, etc. However, the user
            will not be able to change any of the text.
            This differs from the <see cref="P:Eto.Forms.Control.Enabled"/> property, which disables all user interaction.
            </remarks>
            <value><c>true</c> if the control is read only; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Eto.Forms.TextArea.IHandler.Wrap">
            <summary>
            Gets or sets a value indicating whether text will wrap if lines are longer than the width of the control.
            </summary>
            <remarks>
            Typically, a platform will word wrap the text.
            </remarks>
            <value><c>true</c> to wrap the text; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Eto.Forms.TextArea.IHandler.Append(System.String,System.Boolean)">
            <summary>
            Append the specified text to the control and optionally scrolls to make the inserted text visible.
            </summary>
            <remarks>
            This is an optimized way of inserting text into a TextArea when its content gets large.
            </remarks>
            <param name="text">Text to insert.</param>
            <param name="scrollToCursor">If set to <c>true</c>, scroll to the inserted text.</param>
        </member>
        <member name="P:Eto.Forms.TextArea.IHandler.SelectedText">
            <summary>
            Gets or sets the selected text.
            </summary>
            <remarks>
            When setting the selected text, the text within the <see cref="P:Eto.Forms.TextArea.IHandler.Selection"/> range will be replaced with
            the new value.
            </remarks>
            <value>The selected text.</value>
        </member>
        <member name="P:Eto.Forms.TextArea.IHandler.Selection">
            <summary>
            Gets or sets the range of selected text.
            </summary>
            <seealso cref="M:Eto.Forms.TextArea.IHandler.SelectAll"/>
            <value>The text selection.</value>
        </member>
        <member name="M:Eto.Forms.TextArea.IHandler.SelectAll">
            <summary>
            Selects all text.
            </summary>
            <remarks>
            When setting the selection, the control will be focussed and the associated keyboard may appear on mobile platforms.
            </remarks>
        </member>
        <member name="P:Eto.Forms.TextArea.IHandler.CaretIndex">
            <summary>
            Gets or sets the index of the insertion caret.
            </summary>
            <remarks>
            When setting the caret, the control will be focussed and the associated keyboard may appear on mobile platforms.
            </remarks>
            <value>The index of the insertion caret.</value>
        </member>
        <member name="P:Eto.Forms.TextArea.IHandler.AcceptsTab">
            <summary>
            Gets or sets a value indicating whether the tab key is inserted into the text area, or if it should be ignored by this control and used
            for navigating to the next control.
            </summary>
            <value><c>true</c> if the TextArea accepts tab key characters; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Eto.Forms.TextArea.IHandler.AcceptsReturn">
            <summary>
            Gets or sets a value indicating whether the return key is inserted into the text area, or if it should be ignored by this control.
            </summary>
            <value><c>true</c> if the TextArea accepts the return key; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Eto.Forms.TextArea.IHandler.TextReplacements">
            <summary>
            Gets or sets a hint value indicating whether this <see cref="T:Eto.Forms.TextArea"/> will automatically correct text.
            </summary>
            <remarks>
            On some platforms, autocorrection or text replacements such as quotes, etc may be default.
            Set this to <see cref="F:Eto.Forms.TextReplacements.None"/> to disable any text replacement.
            
            Note this is only a hint and not all (or any) of the replacements may apply on some platforms.
            </remarks>
            <value>Type of replacements to enable when entering text..</value>
        </member>
        <member name="P:Eto.Forms.TextArea.IHandler.SupportedTextReplacements">
            <summary>
            Gets the text replacements that this control supports on the current platform.
            </summary>
            <remarks>
            You can use this to determine which flags in the <see cref="P:Eto.Forms.TextArea.IHandler.TextReplacements"/> will take effect.
            </remarks>
            <value>The supported text replacements.</value>
        </member>
        <member name="P:Eto.Forms.TextArea.IHandler.TextAlignment">
            <summary>
            Gets or sets the horizontal alignment of the text.
            </summary>
            <value>The horizontal alignment.</value>
        </member>
        <member name="P:Eto.Forms.TextArea.IHandler.SpellCheck">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Eto.Forms.TextArea"/> will perform spell checking.
            </summary>
            <remarks>
            When <c>true</c>, platforms will typically show misspelled or unknown words with a red underline.
            This is a hint, and is only supported by the platform when <see cref="P:Eto.Forms.TextArea.IHandler.SpellCheckIsSupported"/> is true.
            When not supported, setting this property will do nothing.
            </remarks>
            <value><c>true</c> if spell check; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Eto.Forms.TextArea.IHandler.SpellCheckIsSupported">
            <summary>
            Gets a value indicating whether the <see cref="P:Eto.Forms.TextArea.IHandler.SpellCheck"/> property is supported on the control's platform.
            </summary>
            <value><c>true</c> if spell check is supported; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Eto.Forms.AutoSelectMode">
            <summary>
            Enumeration of the modes for auto selecting text.
            </summary>
        </member>
        <member name="F:Eto.Forms.AutoSelectMode.OnFocus">
            <summary>
            Selects the text when the control recieves focus, unless the user
            clicks at a point in the text with the I beam cursor.
            </summary>
        </member>
        <member name="F:Eto.Forms.AutoSelectMode.Never">
            <summary>
            The text is never automatically selected.  When the text of the control is set
            to a different value, the cursor usually will be at the end of the text input.
            
            The last selection of the control is also usually kept in this mode.
            </summary>
        </member>
        <member name="F:Eto.Forms.AutoSelectMode.Always">
            <summary>
            Selects the text when the control recieves focus regardless of whether the user 
            clicked at a point in the text, or the last selection.
            
            On macOS, if the user clicks and drags to select some text it will not select all text.
            </summary>
        </member>
        <member name="T:Eto.Forms.TextBox">
            <summary>
            Single line text box control
            </summary>
            <seealso cref="T:Eto.Forms.TextArea"/>
        </member>
        <member name="F:Eto.Forms.TextBox.TextChangingEvent">
            <summary>
            Event identifier for handlers when attaching the <see cref="E:Eto.Forms.TextBox.TextChanging"/> event
            </summary>
        </member>
        <member name="E:Eto.Forms.TextBox.TextChanging">
            <summary>
            Event to handle before the text is changed to allow cancelling any change events triggered by the user.
            </summary>
        </member>
        <member name="M:Eto.Forms.TextBox.OnTextChanging(Eto.Forms.TextChangingEventArgs)">
            <summary>
            Raises the <see cref="E:Eto.Forms.TextBox.TextChanging"/> event.
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="P:Eto.Forms.TextBox.ReadOnly">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Eto.Forms.TextBox"/> is read only.
            </summary>
            <remarks>
            A user can selected and copied text when the read only, however the user will not be able to change any of the text.
            This differs from the <see cref="P:Eto.Forms.Control.Enabled"/> property, which disables all user interaction.
            </remarks>
            <value><c>true</c> if the control is read only; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Eto.Forms.TextBox.MaxLength">
            <summary>
            Gets or sets the maximum length of the text that can be entered in the control, 0 for no limit.
            </summary>
            <remarks>
            This typically does not affect the value set using <see cref="P:Eto.Forms.TextControl.Text"/>, only the limit of what the user can 
            enter into the control.
            </remarks>
            <value>The maximum length of the text in the control.</value>
        </member>
        <member name="P:Eto.Forms.TextBox.PlaceholderText">
            <summary>
            Gets or sets the placeholder text to show as a hint of what the user should enter.
            </summary>
            <remarks>
            Typically this will be shown when the control is blank, and will dissappear when the user enters text or if
            it has an existing value.
            </remarks>
            <value>The placeholder text.</value>
        </member>
        <member name="P:Eto.Forms.TextBox.ShowBorder">
            <summary>
            Gets or sets a value indicating whether to show the control's border.
            </summary>
            <remarks>
            This is a hint to omit the border of the control and show it as plainly as possible.
            
            Typically used when you want to show the control within a cell of the <see cref="T:Eto.Forms.GridView"/>.
            </remarks>
            <value><c>true</c> to show the control border; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Eto.Forms.TextBox.TextAlignment">
            <summary>
            Gets or sets the alignment of the text in the entry box.
            </summary>
            <value>The text alignment.</value>
        </member>
        <member name="M:Eto.Forms.TextBox.SelectAll">
            <summary>
            Selects all of the text in the control.
            </summary>
            <remarks>
            When setting the selection, the control will be focussed and the associated keyboard may appear on mobile platforms.
            </remarks>
        </member>
        <member name="P:Eto.Forms.TextBox.CaretIndex">
            <summary>
            Gets or sets the index of the current insertion point.
            </summary>
            <remarks>
            When there is selected text, this is usually the start of the selection.
            </remarks>
            <value>The index of the current insertion point.</value>
        </member>
        <member name="P:Eto.Forms.TextBox.Selection">
            <summary>
            Gets or sets the current text selection.
            </summary>
            <value>The text selection.</value>
        </member>
        <member name="P:Eto.Forms.TextBox.SelectedText">
            <summary>
            Gets or sets the selected text.
            </summary>
            <value>The selected text.</value>
        </member>
        <member name="P:Eto.Forms.TextBox.AutoSelectMode">
            <summary>
            Gets or sets the auto selection mode.
            </summary>
            <value>The auto selection mode.</value>
        </member>
        <member name="T:Eto.Forms.TextBox.IHandler">
            <summary>
            Handler interface for the <see cref="T:Eto.Forms.TextBox"/>.
            </summary>
        </member>
        <member name="P:Eto.Forms.TextBox.IHandler.ReadOnly">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Eto.Forms.TextBox"/> is read only.
            </summary>
            <remarks>
            A user can selected and copied text when the read only, however the user will not be able to change any of the text.
            This differs from the <see cref="P:Eto.Forms.Control.Enabled"/> property, which disables all user interaction.
            </remarks>
            <value><c>true</c> if the control is read only; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Eto.Forms.TextBox.IHandler.MaxLength">
            <summary>
            Gets or sets the maximum length of the text that can be entered in the control.
            </summary>
            <remarks>
            This typically does not affect the value set using <see cref="P:Eto.Forms.TextControl.Text"/>, only the limit of what the user can 
            enter into the control.
            </remarks>
            <value>The maximum length of the text in the control.</value>
        </member>
        <member name="M:Eto.Forms.TextBox.IHandler.SelectAll">
            <summary>
            Selects all of the text in the control.
            </summary>
            <remarks>
            When setting the selection, the control will be focussed and the associated keyboard may appear on mobile platforms.
            </remarks>
        </member>
        <member name="P:Eto.Forms.TextBox.IHandler.PlaceholderText">
            <summary>
            Gets or sets the placeholder text to show as a hint of what the user should enter.
            </summary>
            <remarks>
            Typically this will be shown when the control is blank, and will dissappear when the user enters text or if
            it has an existing value.
            </remarks>
            <value>The placeholder text.</value>
        </member>
        <member name="P:Eto.Forms.TextBox.IHandler.CaretIndex">
            <summary>
            Gets or sets the index of the current insertion point.
            </summary>
            <remarks>
            When there is selected text, this is usually the start of the selection.
            </remarks>
            <value>The index of the current insertion point.</value>
        </member>
        <member name="P:Eto.Forms.TextBox.IHandler.Selection">
            <summary>
            Gets or sets the current text selection.
            </summary>
            <value>The text selection.</value>
        </member>
        <member name="P:Eto.Forms.TextBox.IHandler.ShowBorder">
            <summary>
            Gets or sets a value indicating whether to show the control's border.
            </summary>
            <remarks>
            This is a hint to omit the border of the control and show it as plainly as possible.
            
            Typically used when you want to show the control within a cell of the <see cref="T:Eto.Forms.GridView"/>.
            </remarks>
            <value><c>true</c> to show the control border; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Eto.Forms.TextBox.IHandler.TextAlignment">
            <summary>
            Gets or sets the alignment of the text in the entry box.
            </summary>
            <value>The text alignment.</value>
        </member>
        <member name="P:Eto.Forms.TextBox.IHandler.AutoSelectMode">
            <summary>
            Gets or sets the auto selection mode.
            </summary>
            <value>The auto selection mode.</value>
        </member>
        <member name="M:Eto.Forms.TextBox.GetCallback">
            <summary>
            Gets an instance of an object used to perform callbacks to the widget from handler implementations
            </summary>
            <returns>The callback instance to use for this widget</returns>
        </member>
        <member name="T:Eto.Forms.TextBox.ICallback">
            <summary>
            Callback interface for the <see cref="T:Eto.Forms.TextBox"/> based controls
            </summary>
        </member>
        <member name="M:Eto.Forms.TextBox.ICallback.OnTextChanging(Eto.Forms.TextBox,Eto.Forms.TextChangingEventArgs)">
            <summary>
            Raises the text changed event.
            </summary>
        </member>
        <member name="T:Eto.Forms.TextBox.Callback">
            <summary>
            Callback implementation for handlers of <see cref="T:Eto.Forms.TextControl"/> based controls
            </summary>
        </member>
        <member name="M:Eto.Forms.TextBox.Callback.OnTextChanging(Eto.Forms.TextBox,Eto.Forms.TextChangingEventArgs)">
            <summary>
            Raises the text changed event.
            </summary>
        </member>
        <member name="T:Eto.Forms.TextChangingEventArgs">
            <summary>
            Arguments for events that handle when text is about to change, such as the <see cref="E:Eto.Forms.TextBox.TextChanging"/> event.
            </summary>
            <remarks>
            To cancel the change, set the inherited <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/> property to true.
            </remarks>
        </member>
        <member name="P:Eto.Forms.TextChangingEventArgs.Text">
            <summary>
            Gets the text that is to be inserted at the given <see cref="P:Eto.Forms.TextChangingEventArgs.Range"/>, or string.Empty if text will be deleted.
            </summary>
            <value>The text to be inserted.</value>
        </member>
        <member name="P:Eto.Forms.TextChangingEventArgs.Range">
            <summary>
            Gets the range that the text will be replaced or deleted.
            </summary>
            <remarks>
            When the <see cref="P:Eto.Forms.TextChangingEventArgs.Text"/> is empty, then the specified range of text will be deleted.
            Otherwise, the text in the range will be replaced.
            Note that the length of the <see cref="P:Eto.Forms.TextChangingEventArgs.Text"/> will not necessarily match the length of the range. 
            </remarks>
            <value>The range.</value>
        </member>
        <member name="M:Eto.Forms.TextChangingEventArgs.#ctor(System.String,Eto.Forms.Range{System.Int32})">
            <summary>
            Initializes a new instance of the <see cref="T:Eto.Forms.TextChangingEventArgs"/> class.
            </summary>
            <param name="text">Text to be replaced in the range.</param>
            <param name="range">Range of text to be effected.</param>
        </member>
        <member name="T:Eto.Forms.TextControl">
            <summary>
            Base class for controls implementing text and text changing events, when it has a singular text property.
            </summary>
            <remarks>
            If a control has multiple text properties, it is best to implement those specifically to identify what the property
            represents more clearly.
            </remarks>
        </member>
        <member name="F:Eto.Forms.TextControl.TextChangedEvent">
            <summary>
            Identifier for handlers when attaching the <see cref="E:Eto.Forms.TextControl.TextChanged"/> event
            </summary>
        </member>
        <member name="E:Eto.Forms.TextControl.TextChanged">
            <summary>
            Occurs when the <see cref="P:Eto.Forms.TextControl.Text"/> property is changed.
            </summary>
        </member>
        <member name="M:Eto.Forms.TextControl.OnTextChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Eto.Forms.TextControl.TextChanged"/> event.
            </summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="P:Eto.Forms.TextControl.Text">
            <summary>
            Gets or sets the text of the control.
            </summary>
            <remarks>
            Usually, the caret and selection will be set to the end of the string after its set.
            </remarks>
            <value>The text content.</value>
        </member>
        <member name="P:Eto.Forms.TextControl.TextColor">
            <summary>
            Gets or sets the color of the text.
            </summary>
            <remarks>
            By default, the text will get a color based on the user's theme. However, this is usually black.
            </remarks>
            <value>The color of the text.</value>
        </member>
        <member name="P:Eto.Forms.TextControl.TextBinding">
            <summary>
            Gets the binding for the <see cref="P:Eto.Forms.TextControl.Text"/> property.
            </summary>
            <value>The text binding.</value>
        </member>
        <member name="M:Eto.Forms.TextControl.GetCallback">
            <summary>
            Gets an instance of an object used to perform callbacks to the widget from handler implementations
            </summary>
            <returns>The callback instance to use for this widget</returns>
        </member>
        <member name="T:Eto.Forms.TextControl.ICallback">
            <summary>
            Callback interface for the <see cref="T:Eto.Forms.TextControl"/> based controls
            </summary>
        </member>
        <member name="M:Eto.Forms.TextControl.ICallback.OnTextChanged(Eto.Forms.TextControl,System.EventArgs)">
            <summary>
            Raises the text changed event.
            </summary>
        </member>
        <member name="T:Eto.Forms.TextControl.Callback">
            <summary>
            Callback implementation for handlers of <see cref="T:Eto.Forms.TextControl"/> based controls
            </summary>
        </member>
        <member name="M:Eto.Forms.TextControl.Callback.OnTextChanged(Eto.Forms.TextControl,System.EventArgs)">
            <summary>
            Raises the text changed event.
            </summary>
        </member>
        <member name="T:Eto.Forms.TextControl.IHandler">
            <summary>
            Handler interface for the <see cref="T:Eto.Forms.TextControl"/> based controls
            </summary>
        </member>
        <member name="P:Eto.Forms.TextControl.IHandler.Text">
            <summary>
            Gets or sets the text of the control.
            </summary>
            <value>The text content.</value>
        </member>
        <member name="P:Eto.Forms.TextControl.IHandler.TextColor">
            <summary>
            Gets or sets the color of the text.
            </summary>
            <remarks>
            By default, the text will get a color based on the user's theme. However, this is usually black.
            </remarks>
            <value>The color of the text.</value>
        </member>
        <member name="T:Eto.Forms.TextInputEventArgs">
            <summary>
            Event arguments when handling text input events
            </summary>
        </member>
        <member name="P:Eto.Forms.TextInputEventArgs.Text">
            <summary>
            The entered text, or null if no text was entered.
            </summary>
        </member>
        <member name="M:Eto.Forms.TextInputEventArgs.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Eto.Forms.TextInputEventArgs"/> class.
            </summary>
            <param name="text">Text that was input into the control</param>
        </member>
        <member name="T:Eto.Forms.TextStepper">
            <summary>
            Stepper with custom text entry field
            </summary>
            <remarks>
            This can be used to implement a custom stepper interface that is not entirely restricted to numeric values like <see cref="T:Eto.Forms.NumericStepper"/>.
            </remarks>
        </member>
        <member name="F:Eto.Forms.TextStepper.StepEvent">
            <summary>
            Identifier for the <see cref="E:Eto.Forms.TextStepper.Step"/> event.
            </summary>
        </member>
        <member name="E:Eto.Forms.TextStepper.Step">
            <summary>
            Event to handle when the user clicks on one of the step buttons, either up or down.
            </summary>
        </member>
        <member name="M:Eto.Forms.TextStepper.OnStep(Eto.Forms.StepperEventArgs)">
            <summary>
            Triggers the <see cref="E:Eto.Forms.TextStepper.Step"/> event.
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="P:Eto.Forms.TextStepper.ValidDirection">
            <summary>
            Gets or sets the valid directions the stepper will allow the user to click.
            </summary>
            <remarks>
            On some platforms, the up and/or down buttons will not appear disabled, but will not trigger any events when they are 
            not set as a valid direction.
            </remarks>
            <value>The valid directions for the stepper.</value>
        </member>
        <member name="P:Eto.Forms.TextStepper.ShowStepper">
            <summary>
            Gets or sets a value indicating whether the Stepper will be shown.
            </summary>
            <remarks>
            This is a hint only, some platforms (currently Gtk) may ignore this setting.
            </remarks>
            <value><c>true</c> to show the stepper (default); otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Eto.Forms.TextStepper.GetCallback">
            <summary>
            Gets the callback.
            </summary>
            <returns>The callback.</returns>
        </member>
        <member name="T:Eto.Forms.TextStepper.ICallback">
            <summary>
            Callback interface for the TextStepper
            </summary>
        </member>
        <member name="M:Eto.Forms.TextStepper.ICallback.OnStep(Eto.Forms.TextStepper,Eto.Forms.StepperEventArgs)">
            <summary>
            Triggers the <see cref="E:Eto.Forms.TextStepper.Step"/> event.
            </summary>
            <param name="widget">Widget instance to trigger the event</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="T:Eto.Forms.TextStepper.Callback">
            <summary>
            Callback implementation for the TextStepper
            </summary>
        </member>
        <member name="M:Eto.Forms.TextStepper.Callback.OnStep(Eto.Forms.TextStepper,Eto.Forms.StepperEventArgs)">
            <summary>
            Triggers the <see cref="E:Eto.Forms.TextStepper.Step"/> event.
            </summary>
            <param name="widget">Widget instance to trigger the event</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="T:Eto.Forms.TextStepper.IHandler">
            <summary>
            Handler interface for platform implementations of the TextStepper
            </summary>
        </member>
        <member name="P:Eto.Forms.TextStepper.IHandler.ValidDirection">
            <summary>
            Gets or sets the valid directions the stepper will allow the user to click.
            </summary>
            <remarks>
            On some platforms, the up and/or down buttons will not appear disabled, but will not trigger any events when they are 
            not set as a valid direction.
            </remarks>
            <value>The valid directions for the stepper.</value>
        </member>
        <member name="P:Eto.Forms.TextStepper.IHandler.ShowStepper">
            <summary>
            Gets or sets a value indicating whether the Stepper will be shown.
            </summary>
            <remarks>
            This is a hint only, some platforms (currently Gtk) may ignore this setting.
            </remarks>
            <value><c>true</c> to show the stepper (default); otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Eto.Forms.ThemedContainerHandler`3">
            <summary>
            Base class for implementing Eto Container control handlers using Eto controls.
            </summary>
            <typeparam name="TControl">The Eto control used to create the custom implementation</typeparam>
            <typeparam name="TWidget">The container being implemented.</typeparam>
            <typeparam name="TCallback">The callback inferface for the control, e.g. TabControl.ICallback</typeparam>
        </member>
        <member name="P:Eto.Forms.ThemedContainerHandler`3.ClientSize">
            <summary>
            Gets or sets the size of the client.
            </summary>
            <value>The size of the client.</value>
        </member>
        <member name="P:Eto.Forms.ThemedContainerHandler`3.RecurseToChildren">
            <summary>
            Gets a value indicating whether PreLoad/Load/LoadComplete/Unload events are propegated to the children controls
            </summary>
            <remarks>
            This is mainly used when you want to use Eto controls in your handler, such as with the <see cref="T:Eto.Forms.ThemedContainerHandler`3"/>
            </remarks>
            <value><c>true</c> to recurse events to children; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Eto.Forms.ThemedControlHandler`3">
            <summary>
            Base class for implementing Eto control handlers using other Eto controls.
            </summary>
            <remarks>
            This allows a single implementation to be used in multiple platforms and is useful in a couple of scenarios:
            
            a) Creating default implementations of a control on platforms that do not support the control natively.
            b) Implementing a control with a non-native look and feel that is consistent across platforms.
            </remarks>
            <typeparam name="TControl">The Eto control used to create the custom implementation, e.g. Panel</typeparam>
            <typeparam name="TWidget">The control being implemented, e.g. TabControl</typeparam>
            <typeparam name="TCallback">The callback inferface for the control, e.g. TabControl.ICallback</typeparam>
        </member>
        <member name="M:Eto.Forms.ThemedControlHandler`3.Initialize">
            <summary>
            Called to initialize this widget after it has been constructed
            </summary>
            <remarks>
            Override this to initialize any of the platform objects.  This is called
            in the widget constructor, after all of the widget's constructor code has been called.
            </remarks>
        </member>
        <member name="P:Eto.Forms.ThemedControlHandler`3.BackgroundColor">
            <summary>
            Gets or sets the color for the background of the control
            </summary>
            <remarks>Note that on some platforms (e.g. Mac), setting the background color of a control can change the performance
            characteristics of the control and its children, since it must enable layers to do so.</remarks>
            <value>The color of the background.</value>
        </member>
        <member name="P:Eto.Forms.ThemedControlHandler`3.VisualControls">
            <summary>
            Gets an enumeration of controls that are in the visual tree.
            </summary>
            <remarks>
            This is used to specify which controls are contained by this instance that are part of the visual tree.
            This should include all controls including non-logical Eto controls used for layout. 
            </remarks>
            <value>The visual controls.</value>
        </member>
        <member name="P:Eto.Forms.ThemedControlHandler`3.PropagateLoadEvents">
            <summary>
            Gets a value indicating whether <see cref="E:Eto.Forms.Control.PreLoad"/>/<see cref="E:Eto.Forms.Control.Load"/>/<see cref="E:Eto.Forms.Control.LoadComplete"/>/<see cref="E:Eto.Forms.Control.UnLoad"/>
            events are propagated to the inner control
            </summary>
            <remarks>
            Typically this should be true so that the events are propagated, but when you set the control hierarchy 
            manually, such as a <see cref="T:Eto.Forms.TabPage"/> on a <see cref="T:Eto.Forms.TabControl"/>, you can return false here
            since the load events will be handled automatically by the internal eto controls.
            </remarks>
            <value><c>true</c> if propagate load events; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Eto.Forms.ThemedControlHandler`3.Size">
            <summary>
            Gets or sets the size of the control. Use -1 to specify auto sizing for either the width and/or height.
            </summary>
            <value>The size.</value>
        </member>
        <member name="P:Eto.Forms.ThemedControlHandler`3.Enabled">
            <summary>
            Gets or sets a value indicating whether this control is enabled
            </summary>
            <value><c>true</c> if enabled; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Eto.Forms.ThemedControlHandler`3.Invalidate(System.Boolean)">
            <summary>
            Queues a repaint of the entire control on the screen
            </summary>
            <remarks>This is only useful when the control is visible.</remarks>
            <param name="invalidateChildren"><c>True</c> to invalidate all children, <c>false</c> to only invalidate the container</param>
        </member>
        <member name="M:Eto.Forms.ThemedControlHandler`3.Invalidate(Eto.Drawing.Rectangle,System.Boolean)">
            <summary>
            Queues a repaint of the specified <paramref name="rect"/> of the control
            </summary>
            <remarks>
            This is only useful when the control is visible.
            </remarks>
            <param name="rect">Rectangle to repaint</param>
            <param name="invalidateChildren"><c>True</c> to invalidate all children, <c>false</c> to only invalidate the container</param>
        </member>
        <member name="M:Eto.Forms.ThemedControlHandler`3.SuspendLayout">
            <summary>
            Suspends the layout of child controls
            </summary>
            <remarks>
            This can be used to optimize some platforms while adding, removing, or changing many child controls at once.
            It disables the calculation of control positioning until <see cref="M:Eto.Forms.ThemedControlHandler`3.ResumeLayout"/> is called.
            Each call to SuspendLayout() must be balanced with a call to <see cref="M:Eto.Forms.ThemedControlHandler`3.ResumeLayout"/>.
            </remarks>
        </member>
        <member name="M:Eto.Forms.ThemedControlHandler`3.ResumeLayout">
            <summary>
            Resumes the layout after it has been suspended, and performs a layout
            </summary>
            <remarks>
            This can be used to optimize some platforms while adding, removing, or changing many child controls at once.
            Each call to ResumeLayout() must be balanced with a call to <see cref="M:Eto.Forms.ThemedControlHandler`3.SuspendLayout"/> before it.
            </remarks>
        </member>
        <member name="M:Eto.Forms.ThemedControlHandler`3.Focus">
            <summary>
            Attempts to set the keyboard input focus to this control, or the first child that accepts focus
            </summary>
        </member>
        <member name="P:Eto.Forms.ThemedControlHandler`3.HasFocus">
            <summary>
            Gets a value indicating whether this instance has the keyboard input focus.
            </summary>
            <value>true</value>
            <c>false</c>
        </member>
        <member name="P:Eto.Forms.ThemedControlHandler`3.Visible">
            <summary>
            Gets or sets a value indicating whether this control is visible to the user.
            </summary>
            <remarks>
            When the visibility of a control is set to false, it will still occupy space in the layout, but not be shown.
            The only exception is for controls like the <see cref="T:Eto.Forms.Splitter"/>, which will hide a pane if the visibility
            of one of the panels is changed.
            </remarks>
            <value><c>true</c> if visible; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Eto.Forms.ThemedControlHandler`3.OnPreLoad(System.EventArgs)">
            <summary>
            Called before the control is loaded on a form
            </summary>
            <param name="e">Event arguments</param>
            <seealso cref="M:Eto.Forms.ThemedControlHandler`3.OnLoadComplete(System.EventArgs)"></seealso>
            <seealso cref="M:Eto.Forms.ThemedControlHandler`3.OnLoad(System.EventArgs)"></seealso>
            <seealso cref="M:Eto.Forms.ThemedControlHandler`3.OnUnLoad(System.EventArgs)"></seealso>
        </member>
        <member name="M:Eto.Forms.ThemedControlHandler`3.OnLoad(System.EventArgs)">
            <summary>
            Called when the control is loaded on a form
            </summary>
            <param name="e">Event arguments</param>
            <seealso cref="M:Eto.Forms.ThemedControlHandler`3.OnPreLoad(System.EventArgs)"></seealso>
            <seealso cref="M:Eto.Forms.ThemedControlHandler`3.OnLoadComplete(System.EventArgs)"></seealso>
            <seealso cref="M:Eto.Forms.ThemedControlHandler`3.OnUnLoad(System.EventArgs)"></seealso>
        </member>
        <member name="M:Eto.Forms.ThemedControlHandler`3.OnLoadComplete(System.EventArgs)">
            <summary>
            Called after all other controls have been loaded
            </summary>
            <param name="e">Event arguments</param>
            <seealso cref="M:Eto.Forms.ThemedControlHandler`3.OnPreLoad(System.EventArgs)"></seealso>
            <seealso cref="M:Eto.Forms.ThemedControlHandler`3.OnLoad(System.EventArgs)"></seealso>
            <seealso cref="M:Eto.Forms.ThemedControlHandler`3.OnUnLoad(System.EventArgs)"></seealso>
        </member>
        <member name="M:Eto.Forms.ThemedControlHandler`3.OnUnLoad(System.EventArgs)">
            <summary>
            Called when the control is unloaded, which is when it is not currently on a displayed window
            </summary>
            <param name="e">Event arguments</param>
            <seealso cref="M:Eto.Forms.ThemedControlHandler`3.OnPreLoad(System.EventArgs)"></seealso>
            <seealso cref="M:Eto.Forms.ThemedControlHandler`3.OnLoad(System.EventArgs)"></seealso>
            <seealso cref="M:Eto.Forms.ThemedControlHandler`3.OnLoadComplete(System.EventArgs)"></seealso>
        </member>
        <member name="M:Eto.Forms.ThemedControlHandler`3.SetParent(Eto.Forms.Container)">
            <summary>
            Called when the parent of the control has been set
            </summary>
            <param name="parent">New parent for the control, or null if the parent was removed</param>
        </member>
        <member name="M:Eto.Forms.ThemedControlHandler`3.PointFromScreen(Eto.Drawing.PointF)">
            <summary>
            Converts a point from screen space to control space.
            </summary>
            <returns>The point in control space</returns>
            <param name="point">Point in screen space</param>
        </member>
        <member name="M:Eto.Forms.ThemedControlHandler`3.PointToScreen(Eto.Drawing.PointF)">
            <summary>
            Converts a point from control space to screen space
            </summary>
            <returns>The point in screen space</returns>
            <param name="point">Point in control space</param>
        </member>
        <member name="P:Eto.Forms.ThemedControlHandler`3.SupportedPlatformCommands">
            <summary>
            Gets the supported platform commands that can be used to hook up system functions to user defined logic
            </summary>
            <value>The supported platform commands.</value>
        </member>
        <member name="M:Eto.Forms.ThemedControlHandler`3.MapPlatformCommand(System.String,Eto.Forms.Command)">
            <summary>
            Specifies a command to execute for a platform-specific command
            </summary>
            <param name="systemAction">System action.</param>
            <param name="action">Action.</param>
        </member>
        <member name="P:Eto.Forms.ThemedControlHandler`3.Location">
            <summary>
            Gets the location of the control as positioned by the container
            </summary>
            <remarks>A control's location is set by the container.
            This can be used to determine where the control is for overlaying floating windows, menus, etc.</remarks>
            <value>The current location of the control</value>
        </member>
        <member name="P:Eto.Forms.ThemedControlHandler`3.ToolTip">
            <summary>
            Gets or sets the tool tip to show when the mouse is hovered over the control
            </summary>
            <value>The tool tip.</value>
        </member>
        <member name="P:Eto.Forms.ThemedControlHandler`3.Cursor">
            <summary>
            Gets or sets the type of cursor to use when the mouse is hovering over the control
            </summary>
            <value>The mouse cursor</value>
        </member>
        <member name="P:Eto.Forms.ThemedControlHandler`3.ControlObject">
            <summary>
            Gets the instance of the platform-specific object
            </summary>
            <value>The control object.</value>
        </member>
        <member name="P:Eto.Forms.ThemedControlHandler`3.KeyboardControl">
            <summary>
            Gets the control used to attach keyboard and text input events
            </summary>
            <value>The keyboard control.</value>
        </member>
        <member name="P:Eto.Forms.ThemedControlHandler`3.MouseControl">
            <summary>
            Gets the control used to attach mouse events
            </summary>
            <value>The mouse control.</value>
        </member>
        <member name="P:Eto.Forms.ThemedControlHandler`3.FocusControl">
            <summary>
            Gets the control used to attach focus events.
            </summary>
            <value>The focus control.</value>
        </member>
        <member name="P:Eto.Forms.ThemedControlHandler`3.TabIndex">
            <summary>
            Gets or sets the tab index order for this control within its container.
            </summary>
            <remarks>
            This sets the order when using the tab key to cycle through controls
            
            Note that some platforms (Gtk and WinForms) may not support setting the context of the tab order to StackLayout 
            or DynamicLayout containers and may not behave exactly as expected. Use the 
            <see cref="F:Eto.PlatformFeatures.TabIndexWithCustomContainers"/> flag to determine if it is supported.
            </remarks>
            <value>The index of the control in the tab order.</value>
        </member>
        <member name="P:Eto.Forms.ThemedControlHandler`3.AllowDrop">
            <summary>
            Gets or sets a value indicating whether this control can serve as drop target.
            </summary>
        </member>
        <member name="M:Eto.Forms.ThemedControlHandler`3.DoDragDrop(Eto.Forms.DataObject,Eto.Forms.DragEffects)">
            <summary>
            Starts drag operation using this control as drag source.
            </summary>
            <param name="data">Drag data.</param>
            <param name="allowedAction">Allowed action.</param>
        </member>
        <member name="M:Eto.Forms.ThemedControlHandler`3.AttachEvent(System.String)">
            <summary>
            Attaches the specified event to the platform-specific control
            </summary>
            <remarks>Implementors should override this method to handle any events that the widget
            supports. Ensure to call the base class' implementation if the event is not
            one the specific widget supports, so the base class' events can be handled as well.</remarks>
            <param name="id">Identifier of the event</param>
        </member>
        <member name="T:Eto.Forms.ITreeItem`1">
            <summary>
            Base tree item interface
            </summary>
        </member>
        <member name="P:Eto.Forms.ITreeItem`1.Expanded">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Eto.Forms.ITreeItem`1"/> is expanded.
            </summary>
            <remarks>
            When expanded, the children of the tree item will be shown.
            This will be set automatically by the <see cref="T:Eto.Forms.TreeGridView"/> when the item is expanded or collapsed
            and keep in in sync with the view.
            </remarks>
            <value><c>true</c> if expanded; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Eto.Forms.ITreeItem`1.Expandable">
            <summary>
            Gets a value indicating whether this <see cref="T:Eto.Forms.ITreeItem`1"/> is expandable.
            </summary>
            <remarks>
            When <c>true</c>, this will typically show a glyph that can be clicked to expand the item to show its children.
            When <c>false</c>, the glyph is not shown and the node is not expandable by the user.
            </remarks>
            <value><c>true</c> if expandable; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Eto.Forms.ITreeItem`1.Parent">
            <summary>
            Gets or sets the parent of this item.
            </summary>
            <value>The parent of this item.</value>
        </member>
        <member name="T:Eto.Forms.ITreeGridItem">
            <summary>
            Interface for an item in a <see cref="T:Eto.Forms.TreeGridView"/>.
            </summary>
            <remarks>
            This is the base interface for items in a tree grid.  Use this interface if you wish to
            use your own class for items in a tree. Otherwise, you can use the standard <see cref="T:Eto.Forms.TreeGridItem"/>.
            </remarks>
        </member>
        <member name="T:Eto.Forms.ITreeGridItem`1">
            <summary>
            Interface for an item in a <see cref="T:Eto.Forms.TreeGridView"/> that implements children
            </summary>
        </member>
        <member name="T:Eto.Forms.TreeGridItemCollection">
            <summary>
            Collection of <see cref="T:Eto.Forms.ITreeGridItem"/> objects for child nodes of a tree.
            </summary>
        </member>
        <member name="M:Eto.Forms.TreeGridItemCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Eto.Forms.TreeGridItemCollection"/> class.
            </summary>
        </member>
        <member name="M:Eto.Forms.TreeGridItemCollection.#ctor(System.Collections.Generic.IEnumerable{Eto.Forms.ITreeGridItem})">
            <summary>
            Initializes a new instance of the <see cref="T:Eto.Forms.TreeGridItemCollection"/> class with an enumeration of existing values.
            </summary>
            <param name="items">Items to initialize the collection with.</param>
        </member>
        <member name="T:Eto.Forms.TreeGridItem">
            <summary>
            Item for a <see cref="T:Eto.Forms.TreeGridView"/> for each node of the tree.
            </summary>
            <remarks>
            This is the standard implementation.  You can implement <see cref="T:Eto.Forms.ITreeGridItem"/> with your own
            class to use them as nodes in the tree instead.	
            </remarks>
        </member>
        <member name="P:Eto.Forms.TreeGridItem.Children">
            <summary>
            Gets the collection of children for this tree grid item.
            </summary>
            <value>The children of this item.</value>
        </member>
        <member name="P:Eto.Forms.TreeGridItem.Parent">
            <summary>
            Gets or sets the parent of this item.
            </summary>
            <value>The parent of this item.</value>
        </member>
        <member name="P:Eto.Forms.TreeGridItem.Expandable">
            <summary>
            Gets a value indicating whether this <see cref="T:Eto.Forms.TreeGridItem"/> is expandable.
            </summary>
            <value><c>true</c> if expandable; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Eto.Forms.TreeGridItem.Expanded">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Eto.Forms.TreeGridItem"/> is expanded.
            </summary>
            <value><c>true</c> if expanded; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Eto.Forms.TreeGridItem.Item(System.Int32)">
            <summary>
            Gets the child item at the specified index.
            </summary>
            <param name="index">Index of the item to get.</param>
        </member>
        <member name="P:Eto.Forms.TreeGridItem.Count">
            <summary>
            Gets the number of child items.
            </summary>
            <value>The count of child items.</value>
        </member>
        <member name="M:Eto.Forms.TreeGridItem.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Eto.Forms.TreeGridItem"/> class.
            </summary>
        </member>
        <member name="M:Eto.Forms.TreeGridItem.#ctor(System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:Eto.Forms.TreeGridItem"/> class with the specified <paramref name="values"/>.
            </summary>
            <param name="values">Values for this node.</param>
        </member>
        <member name="M:Eto.Forms.TreeGridItem.#ctor(System.Collections.Generic.IEnumerable{Eto.Forms.ITreeGridItem},System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:Eto.Forms.TreeGridItem"/> class with the specified <paramref name="children"/> and <paramref name="values"/>.
            </summary>
            <param name="children">Children to initialize the item with.</param>
            <param name="values">Values for this node in the tree.</param>
        </member>
        <member name="T:Eto.Forms.ITreeGridStore`1">
            <summary>
            Item store for the <see cref="T:Eto.Forms.TreeGridView"/>
            </summary>
        </member>
        <member name="T:Eto.Forms.TreeGridViewItemEventArgs">
            <summary>
            Event arguments for <see cref="T:Eto.Forms.TreeGridView"/> events
            </summary>
        </member>
        <member name="P:Eto.Forms.TreeGridViewItemEventArgs.Item">
            <summary>
            Gets the item that triggered the event.
            </summary>
            <value>The item that triggered the event.</value>
        </member>
        <member name="M:Eto.Forms.TreeGridViewItemEventArgs.#ctor(Eto.Forms.ITreeGridItem)">
            <summary>
            Initializes a new instance of the <see cref="T:Eto.Forms.TreeGridViewItemEventArgs"/> class.
            </summary>
            <param name="item">Item that triggered the event.</param>
        </member>
        <member name="T:Eto.Forms.TreeGridViewItemCancelEventArgs">
            <summary>
            Event arguments for <see cref="T:Eto.Forms.TreeGridView"/> events that can be cancelled
            </summary>
        </member>
        <member name="P:Eto.Forms.TreeGridViewItemCancelEventArgs.Item">
            <summary>
            Gets the item that triggered the event.
            </summary>
            <value>The item that triggered the event.</value>
        </member>
        <member name="M:Eto.Forms.TreeGridViewItemCancelEventArgs.#ctor(Eto.Forms.ITreeGridItem)">
            <summary>
            Initializes a new instance of the <see cref="T:Eto.Forms.TreeGridViewItemCancelEventArgs"/> class.
            </summary>
            <param name="item">Item that triggered the event.</param>
        </member>
        <member name="T:Eto.Forms.TreeGridCell">
            <summary>
            Information of a cell in the <see cref="T:Eto.Forms.TreeGridView"/>
            </summary>
        </member>
        <member name="P:Eto.Forms.TreeGridCell.Item">
            <summary>
            Gets the item associated with the row of the cell.
            </summary>
            <value>The row item.</value>
        </member>
        <member name="P:Eto.Forms.TreeGridCell.Column">
            <summary>
            Gets the column of the cell, or null
            </summary>
            <value>The column.</value>
        </member>
        <member name="P:Eto.Forms.TreeGridCell.ColumnIndex">
            <summary>
            Gets the index of the column.
            </summary>
            <value>The index of the column.</value>
        </member>
        <member name="T:Eto.Forms.GridDragPosition">
            <summary>
            Enumeration of the drag position relative to a node or item in a Grid.
            </summary>
        </member>
        <member name="F:Eto.Forms.GridDragPosition.Over">
            <summary>
            The user is dragging overtop an existing node or item.
            </summary>
        </member>
        <member name="F:Eto.Forms.GridDragPosition.Before">
            <summary>
            The user is dragging to insert before a node or item.
            </summary>
        </member>
        <member name="F:Eto.Forms.GridDragPosition.After">
            <summary>
            The user is dragging to insert after a node or item.
            </summary>
        </member>
        <member name="T:Eto.Forms.TreeGridViewDragInfo">
            <summary>
            Extra drag information when dragging to a <see cref="T:Eto.Forms.TreeGridView"/>.
            </summary>
            <remarks>
            Use this information to determine where the user is dragging to, and also to change where the drag indicator will
            be shown by modifying the Item and ChildIndex properties.
            </remarks>
        </member>
        <member name="P:Eto.Forms.TreeGridViewDragInfo.Parent">
            <summary>
            Gets or sets the parent node of the <see cref="P:Eto.Forms.TreeGridViewDragInfo.Item"/> to drag to.
            </summary>
            <remarks>
            Normally you would only need to set <see cref="P:Eto.Forms.TreeGridViewDragInfo.Item"/> to specify which node to drag to.
            
            However, in the case of dragging to below the Parent as inserting a first child you would set Parent to the node, 
            <see cref="P:Eto.Forms.TreeGridViewDragInfo.Item"/> to null, and <see cref="P:Eto.Forms.TreeGridViewDragInfo.Position"/> to <see cref="F:Eto.Forms.GridDragPosition.After"/>.
            </remarks>
        </member>
        <member name="P:Eto.Forms.TreeGridViewDragInfo.ChildIndex">
            <summary>
            Gets the index of the <see cref="P:Eto.Forms.TreeGridViewDragInfo.Item"/> relative to the <see cref="P:Eto.Forms.TreeGridViewDragInfo.Parent"/>.
            </summary>
        </member>
        <member name="P:Eto.Forms.TreeGridViewDragInfo.InsertIndex">
            <summary>
            Gets or sets the insertion index where the user is dragging to as a child of Item, or -1 if dragging over the Item.
            </summary>
            <remarks>
            This is useful if the user is dragging between existing items, or the beginning or end of a child list.
            </remarks>
            <value>The insertion index where the user is dragging to, otherwise -1 if dragging over an item.</value>
        </member>
        <member name="P:Eto.Forms.TreeGridViewDragInfo.Position">
            <summary>
            Gets a value indicating whether the drop should insert before, after, or over the <see cref="P:Eto.Forms.TreeGridViewDragInfo.Item"/>.
            </summary>
            <remarks>
            When this is Before or After, you can use the <see cref="P:Eto.Forms.TreeGridViewDragInfo.InsertIndex"/> to determine what index to insert the 
            item as a child of the <see cref="P:Eto.Forms.TreeGridViewDragInfo.Parent"/> node.
            </remarks>
            <value>The position to insert the dropped item, or over.</value>
        </member>
        <member name="P:Eto.Forms.TreeGridViewDragInfo.Control">
            <summary>
            Gets the parent tree control this info is for.
            </summary>
            <value>The parent tree for the drag info.</value>
        </member>
        <member name="P:Eto.Forms.TreeGridViewDragInfo.IsChanged">
            <summary>
            Gets a value indicating whether this <see cref="T:Eto.Forms.TreeGridDragInfo"/> is changed.
            </summary>
            <remarks>
            This will return true if the <see cref="P:Eto.Forms.TreeGridViewDragInfo.InsertIndex"/> or <see cref="P:Eto.Forms.TreeGridViewDragInfo.Parent"/> have been set.
            This is useful for platform implementations to determine if the drop target has been modified.
            </remarks>
            <value><c>true</c> if is changed; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Eto.Forms.TreeGridViewDragInfo.Item">
            <summary>
            Gets or sets the item to drag to, or null if dragging below the <see cref="P:Eto.Forms.TreeGridViewDragInfo.Parent"/> node.
            </summary>
            <remarks>
            This specifies the target item to drag to.  Note that if <see cref="P:Eto.Forms.TreeGridViewDragInfo.Position"/> is Before or After,
            then you should use <see cref="P:Eto.Forms.TreeGridViewDragInfo.InsertIndex"/> to insert the nodes at that specified location.
            
            If you do not want to allow inserting, use <see cref="M:Eto.Forms.TreeGridViewDragInfo.RestrictToOver"/> in the <see cref="E:Eto.Forms.Control.DragOver"/> event,
            or you can also use <see cref="M:Eto.Forms.TreeGridViewDragInfo.RestrictToInsert"/> to only allow inserting items.
            </remarks>
        </member>
        <member name="M:Eto.Forms.TreeGridViewDragInfo.RestrictToOver">
            <summary>
            Helper to restrict to drop on top an existing item without allowing any insertion.
            </summary>
        </member>
        <member name="M:Eto.Forms.TreeGridViewDragInfo.RestrictToInsert">
            <summary>
            Helper to restrict the drop to insert items only without allowing draging over existing items.
            </summary>
        </member>
        <member name="M:Eto.Forms.TreeGridViewDragInfo.RestrictToNode(System.Object,System.Int32)">
            <summary>
            Restricts the drop to an item or a child within the specified number of levels.
            </summary>
            <param name="item">Item to restrict the drop to, or any of its children</param>
            <param name="childLevels">Number of child levels to allow, or -1 to allow any number of levels</param>
            <returns>True if the drag was restricted, or false if the user is already dragging over the specified item or its children.</returns>
        </member>
        <member name="M:Eto.Forms.TreeGridViewDragInfo.#ctor(Eto.Forms.TreeGridView,System.Object,System.Object,System.Nullable{System.Int32},Eto.Forms.GridDragPosition)">
            <summary>
            Initializes a new instance of the <see cref="T:Eto.Forms.TreeGridDragInfo"/> class.
            </summary>
            <param name="control">The parent widget that this info belongs to</param>
            <param name="parent">Parent of the item dragging to.</param>
            <param name="item">Item user is dragging to, or null if dragging as a child of the parent node.</param>
            <param name="childIndex">Index of the item relative to the parent if known, otherwise null to determine the index when requsted.</param>
            <param name="position">The position of the cursor relative to the item or parent if item is null.</param>
        </member>
        <member name="T:Eto.Forms.TreeGridView">
            <summary>
            Presents a tree with multiple columns
            </summary>
        </member>
        <member name="F:Eto.Forms.TreeGridView.ActivatedEvent">
            <summary>
            Identifier for handlers when attaching the <see cref="E:Eto.Forms.TreeGridView.Activated"/> event.
            </summary>
        </member>
        <member name="E:Eto.Forms.TreeGridView.Activated">
            <summary>
            Occurs when the user activates an item by double clicking or pressing enter.
            </summary>
        </member>
        <member name="M:Eto.Forms.TreeGridView.OnActivated(Eto.Forms.TreeGridViewItemEventArgs)">
            <summary>
            Raises the <see cref="E:Eto.Forms.TreeGridView.Activated"/> event.
            </summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="F:Eto.Forms.TreeGridView.ExpandingEvent">
            <summary>
            Identifier for handlers when attaching the <see cref="E:Eto.Forms.TreeGridView.Expanding"/> event.
            </summary>
        </member>
        <member name="E:Eto.Forms.TreeGridView.Expanding">
            <summary>
            Occurs before a tree item is expanded.
            </summary>
        </member>
        <member name="M:Eto.Forms.TreeGridView.OnExpanding(Eto.Forms.TreeGridViewItemCancelEventArgs)">
            <summary>
            Raises the <see cref="E:Eto.Forms.TreeGridView.Expanding"/> event.
            </summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="F:Eto.Forms.TreeGridView.ExpandedEvent">
            <summary>
            Identifier for handlers when attaching the <see cref="E:Eto.Forms.TreeGridView.Expanded"/> event.
            </summary>
        </member>
        <member name="E:Eto.Forms.TreeGridView.Expanded">
            <summary>
            Occurs after a tree item has been expanded.
            </summary>
        </member>
        <member name="M:Eto.Forms.TreeGridView.OnExpanded(Eto.Forms.TreeGridViewItemEventArgs)">
            <summary>
            Raises the <see cref="E:Eto.Forms.TreeGridView.Expanded"/> event.
            </summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="F:Eto.Forms.TreeGridView.CollapsingEvent">
            <summary>
            Identifier for handlers when attaching the <see cref="E:Eto.Forms.TreeGridView.Collapsing"/> event.
            </summary>
        </member>
        <member name="E:Eto.Forms.TreeGridView.Collapsing">
            <summary>
            Occurs before a tree item is collapsed.
            </summary>
        </member>
        <member name="M:Eto.Forms.TreeGridView.OnCollapsing(Eto.Forms.TreeGridViewItemCancelEventArgs)">
            <summary>
            Raises the <see cref="E:Eto.Forms.TreeGridView.Collapsing"/> event.
            </summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="F:Eto.Forms.TreeGridView.CollapsedEvent">
            <summary>
            Identifier for handlers when attaching the <see cref="E:Eto.Forms.TreeGridView.Collapsed"/> event.
            </summary>
        </member>
        <member name="E:Eto.Forms.TreeGridView.Collapsed">
            <summary>
            Occurs after a tree item is collapsed.
            </summary>
        </member>
        <member name="M:Eto.Forms.TreeGridView.OnCollapsed(Eto.Forms.TreeGridViewItemEventArgs)">
            <summary>
            Raises the <see cref="E:Eto.Forms.TreeGridView.Collapsed"/> event.
            </summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="F:Eto.Forms.TreeGridView.SelectedItemChangedEvent">
            <summary>
            Identifier for handlers when attaching the <see cref="E:Eto.Forms.TreeGridView.SelectedItemChanged"/> event.
            </summary>
        </member>
        <member name="E:Eto.Forms.TreeGridView.SelectedItemChanged">
            <summary>
            Occurs when the <see cref="P:Eto.Forms.TreeGridView.SelectedItem"/> has changed.
            </summary>
        </member>
        <member name="M:Eto.Forms.TreeGridView.OnSelectedItemChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Eto.Forms.TreeGridView.SelectedItemChanged"/> event.
            </summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="P:Eto.Forms.TreeGridView.SelectedItem">
            <summary>
            Gets or sets the selected item in the tree.
            </summary>
            <value>The selected item.</value>
        </member>
        <member name="P:Eto.Forms.TreeGridView.DataStore">
            <summary>
            Gets or sets the data store of tree items.
            </summary>
            <remarks>
            Use the <see cref="T:Eto.Forms.TreeGridItemCollection"/> for easy creation of a tree.
            </remarks>
            <value>The data store.</value>
        </member>
        <member name="P:Eto.Forms.TreeGridView.SelectedItems">
            <summary>
            Gets an enumeration of the currently selected items
            </summary>
            <value>The selected items.</value>
        </member>
        <member name="P:Eto.Forms.TreeGridView.ContextMenu">
            <summary>
            Gets or sets the context menu when right clicking or pressing the menu key on an item.
            </summary>
            <value>The context menu.</value>
        </member>
        <member name="M:Eto.Forms.TreeGridView.ReloadData">
            <summary>
            Refreshes the data, keeping the selection
            </summary>
        </member>
        <member name="M:Eto.Forms.TreeGridView.ReloadItem(Eto.Forms.ITreeGridItem)">
            <summary>
            Refreshes the specified item and all its children, keeping the selection if not part of the refreshed nodes
            </summary>
            <param name="item">Item to refresh</param>
        </member>
        <member name="M:Eto.Forms.TreeGridView.GetCellAt(Eto.Drawing.PointF)">
            <summary>
            Gets the node at a specified location from the origin of the control
            </summary>
            <remarks>
            Useful for determining which node is under the mouse cursor.
            </remarks>
            <returns>The item from the data store that is displayed at the specified location</returns>
            <param name="location">Point to find the node</param>
        </member>
        <member name="M:Eto.Forms.TreeGridView.GetDragInfo(Eto.Forms.DragEventArgs)">
            <summary>
            Gets the tree grid drag info for the specified DragEventArgs.
            </summary>
            <remarks>
            Use this to get or set information about where the drop will occur.
            </remarks>
            <returns>The drag information.</returns>
            <param name="args">Arguments to get the drag info for.</param>
        </member>
        <member name="M:Eto.Forms.TreeGridView.GetCallback">
            <summary>
            Gets an instance of an object used to perform callbacks to the widget from handler implementations
            </summary>
            <returns>The callback instance to use for this widget</returns>
        </member>
        <member name="T:Eto.Forms.TreeGridView.ICallback">
            <summary>
            Callback interface for the <see cref="T:Eto.Forms.TreeGridView"/>
            </summary>
        </member>
        <member name="M:Eto.Forms.TreeGridView.ICallback.OnActivated(Eto.Forms.TreeGridView,Eto.Forms.TreeGridViewItemEventArgs)">
            <summary>
            Raises the activated event.
            </summary>
        </member>
        <member name="M:Eto.Forms.TreeGridView.ICallback.OnExpanding(Eto.Forms.TreeGridView,Eto.Forms.TreeGridViewItemCancelEventArgs)">
            <summary>
            Raises the expanding event.
            </summary>
        </member>
        <member name="M:Eto.Forms.TreeGridView.ICallback.OnExpanded(Eto.Forms.TreeGridView,Eto.Forms.TreeGridViewItemEventArgs)">
            <summary>
            Raises the expanded event.
            </summary>
        </member>
        <member name="M:Eto.Forms.TreeGridView.ICallback.OnCollapsing(Eto.Forms.TreeGridView,Eto.Forms.TreeGridViewItemCancelEventArgs)">
            <summary>
            Raises the collapsing event.
            </summary>
        </member>
        <member name="M:Eto.Forms.TreeGridView.ICallback.OnCollapsed(Eto.Forms.TreeGridView,Eto.Forms.TreeGridViewItemEventArgs)">
            <summary>
            Raises the collapsed event.
            </summary>
        </member>
        <member name="M:Eto.Forms.TreeGridView.ICallback.OnSelectedItemChanged(Eto.Forms.TreeGridView,System.EventArgs)">
            <summary>
            Raises the selected item changed event.
            </summary>
        </member>
        <member name="T:Eto.Forms.TreeGridView.Callback">
            <summary>
            Callback implementation for handlers of <see cref="T:Eto.Forms.TreeGridView"/>
            </summary>
        </member>
        <member name="M:Eto.Forms.TreeGridView.Callback.OnActivated(Eto.Forms.TreeGridView,Eto.Forms.TreeGridViewItemEventArgs)">
            <summary>
            Raises the activated event.
            </summary>
        </member>
        <member name="M:Eto.Forms.TreeGridView.Callback.OnExpanding(Eto.Forms.TreeGridView,Eto.Forms.TreeGridViewItemCancelEventArgs)">
            <summary>
            Raises the expanding event.
            </summary>
        </member>
        <member name="M:Eto.Forms.TreeGridView.Callback.OnExpanded(Eto.Forms.TreeGridView,Eto.Forms.TreeGridViewItemEventArgs)">
            <summary>
            Raises the expanded event.
            </summary>
        </member>
        <member name="M:Eto.Forms.TreeGridView.Callback.OnCollapsing(Eto.Forms.TreeGridView,Eto.Forms.TreeGridViewItemCancelEventArgs)">
            <summary>
            Raises the collapsing event.
            </summary>
        </member>
        <member name="M:Eto.Forms.TreeGridView.Callback.OnCollapsed(Eto.Forms.TreeGridView,Eto.Forms.TreeGridViewItemEventArgs)">
            <summary>
            Raises the collapsed event.
            </summary>
        </member>
        <member name="M:Eto.Forms.TreeGridView.Callback.OnSelectedItemChanged(Eto.Forms.TreeGridView,System.EventArgs)">
            <summary>
            Raises the selected item changed event.
            </summary>
        </member>
        <member name="T:Eto.Forms.TreeGridView.IHandler">
            <summary>
            Handler interface for the <see cref="T:Eto.Forms.TreeGridView"/>
            </summary>
        </member>
        <member name="P:Eto.Forms.TreeGridView.IHandler.DataStore">
            <summary>
            Gets or sets the data store of tree items.
            </summary>
            <remarks>
            Use the <see cref="T:Eto.Forms.TreeGridItemCollection"/> for easy creation of a tree.
            </remarks>
            <value>The data store.</value>
        </member>
        <member name="P:Eto.Forms.TreeGridView.IHandler.SelectedItem">
            <summary>
            Gets or sets the selected item in the tree.
            </summary>
            <value>The selected item.</value>
        </member>
        <member name="P:Eto.Forms.TreeGridView.IHandler.SelectedItems">
            <summary>
            Gets an enumeration of the currently selected items
            </summary>
            <value>The selected items.</value>
        </member>
        <member name="M:Eto.Forms.TreeGridView.IHandler.ReloadData">
            <summary>
            Refreshes the data, keeping the selection
            </summary>
        </member>
        <member name="M:Eto.Forms.TreeGridView.IHandler.ReloadItem(Eto.Forms.ITreeGridItem)">
            <summary>
            Refreshes the specified item and all its children, keeping the selection if not part of the refreshed nodes
            </summary>
            <param name="item">Item to refresh</param>
        </member>
        <member name="M:Eto.Forms.TreeGridView.IHandler.GetCellAt(Eto.Drawing.PointF,System.Int32@)">
            <summary>
            Gets the item and column of a location in the control.
            </summary>
            <returns>The item from the data store that is displayed at the specified location</returns>
            <param name="location">Point to find the node</param>
            <param name="column">Column at the location, or -1 if no column (e.g. at the end of the row)</param>
        </member>
        <member name="M:Eto.Forms.TreeGridView.IHandler.GetDragInfo(Eto.Forms.DragEventArgs)">
            <summary>
            Gets the tree grid drag info for the specified DragEventArgs.
            </summary>
            <remarks>
            Use this to get or set information about where the drop will occur.
            </remarks>
            <returns>The drag information.</returns>
            <param name="args">Arguments to get the drag info for.</param>
        </member>
        <member name="T:Eto.Forms.ITreeItem">
            <summary>
            Interface for an item in a <see cref="T:Eto.Forms.TreeView"/>
            </summary>
            <remarks>
            This can be used instead of <see cref="T:Eto.Forms.TreeItem"/> when you want to use your own class as the item object
            of a tree.
            </remarks>
        </member>
        <member name="T:Eto.Forms.TreeItemCollection">
            <summary>
            Tree item collection.
            </summary>
        </member>
        <member name="T:Eto.Forms.TreeItem">
            <summary>
            Item for a <see cref="T:Eto.Forms.TreeView"/>
            </summary>
        </member>
        <member name="E:Eto.Forms.TreeItem.CollectionChanged">
            <summary>
            Occurs when the <see cref="P:Eto.Forms.TreeItem.Children"/> collection is changed.
            </summary>
        </member>
        <member name="P:Eto.Forms.TreeItem.Children">
            <summary>
            Gets the children collection
            </summary>
            <value>The children collection.</value>
        </member>
        <member name="P:Eto.Forms.TreeItem.Parent">
            <summary>
            Gets or sets the parent tree item
            </summary>
            <value>The parent.</value>
        </member>
        <member name="P:Eto.Forms.TreeItem.Expandable">
            <summary>
            Gets a value indicating whether this <see cref="T:Eto.Forms.TreeItem"/> is expandable.
            </summary>
            <value><c>true</c> if expandable; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Eto.Forms.TreeItem.Expanded">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Eto.Forms.TreeItem"/> is expanded.
            </summary>
            <value><c>true</c> if expanded; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Eto.Forms.TreeItem.Item(System.Int32)">
            <summary>
            Gets the child <see cref="T:Eto.Forms.ITreeItem"/> at the specified index.
            </summary>
            <param name="index">Index to get the child</param>
        </member>
        <member name="P:Eto.Forms.TreeItem.Count">
            <summary>
            Gets the count of children of this node
            </summary>
            <value>The child count</value>
        </member>
        <member name="M:Eto.Forms.TreeItem.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Eto.Forms.TreeItem"/> class.
            </summary>
        </member>
        <member name="M:Eto.Forms.TreeItem.#ctor(System.Collections.Generic.IEnumerable{Eto.Forms.ITreeItem})">
            <summary>
            Initializes a new instance of the <see cref="T:Eto.Forms.TreeItem"/> class with the specified children
            </summary>
            <param name="children">Children to populate this node with</param>
        </member>
        <member name="M:Eto.Forms.TreeItem.#ctor(Eto.Forms.ITreeItem[])">
            <summary>
            Initializes a new instance of the <see cref="T:Eto.Forms.TreeItem"/> class with the specified children
            </summary>
            <param name="children">Children to populate this node with</param>
        </member>
        <member name="T:Eto.Forms.ITreeStore">
            <summary>
            Base data store for the <see cref="T:Eto.Forms.TreeView"/>
            </summary>
            <copyright>(c) 2014 by Curtis Wensley</copyright>
            <license type="BSD-3">See LICENSE for full terms</license>
        </member>
        <member name="T:Eto.Forms.TreeViewItemEventArgs">
            <summary>
            Event arguments for <see cref="T:Eto.Forms.TreeView"/> events relating to an item
            </summary>
            <copyright>(c) 2014 by Curtis Wensley</copyright>
            <license type="BSD-3">See LICENSE for full terms</license>
        </member>
        <member name="P:Eto.Forms.TreeViewItemEventArgs.Item">
            <summary>
            Gets the item that triggered the event
            </summary>
            <value>The item.</value>
        </member>
        <member name="M:Eto.Forms.TreeViewItemEventArgs.#ctor(Eto.Forms.ITreeItem)">
            <summary>
            Initializes a new instance of the <see cref="T:Eto.Forms.TreeViewItemEventArgs"/> class.
            </summary>
            <param name="item">Item.</param>
        </member>
        <member name="T:Eto.Forms.TreeViewItemCancelEventArgs">
            <summary>
            Event arguments for <see cref="T:Eto.Forms.TreeView"/> events that can be cancelled
            </summary>
            <copyright>(c) 2014 by Curtis Wensley</copyright>
            <license type="BSD-3">See LICENSE for full terms</license>
        </member>
        <member name="P:Eto.Forms.TreeViewItemCancelEventArgs.Item">
            <summary>
            Gets the item that triggered the event
            </summary>
            <value>The item.</value>
        </member>
        <member name="M:Eto.Forms.TreeViewItemCancelEventArgs.#ctor(Eto.Forms.ITreeItem)">
            <summary>
            Initializes a new instance of the <see cref="T:Eto.Forms.TreeViewItemCancelEventArgs"/> class.
            </summary>
            <param name="item">Item.</param>
        </member>
        <member name="T:Eto.Forms.TreeViewItemEditEventArgs">
            <summary>
            Event arguments for <see cref="T:Eto.Forms.TreeView"/> events that can modify the label of the text
            </summary>
            <copyright>(c) 2014 by Curtis Wensley</copyright>
            <license type="BSD-3">See LICENSE for full terms</license>
        </member>
        <member name="P:Eto.Forms.TreeViewItemEditEventArgs.Label">
            <summary>
            Gets or sets the label of the item
            </summary>
            <value>The label.</value>
        </member>
        <member name="M:Eto.Forms.TreeViewItemEditEventArgs.#ctor(Eto.Forms.ITreeItem,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Eto.Forms.TreeViewItemEditEventArgs"/> class.
            </summary>
            <param name="item">Item.</param>
            <param name="label">Label.</param>
        </member>
        <member name="T:Eto.Forms.TreeView">
            <summary>
            Standard tree view control with a single column
            </summary>
            <remarks>
            This uses the standard tree view controls on windows, so it can sometimes be more desirable to use to give a more
            natural feel in that case.
            
            For a tree with multiple columns, use the <see cref="T:Eto.Forms.TreeGridView"/>.
            </remarks>
            <copyright>(c) 2014 by Curtis Wensley</copyright>
            <license type="BSD-3">See LICENSE for full terms</license>
        </member>
        <member name="F:Eto.Forms.TreeView.ActivatedEvent">
            <summary>
            Identifier for handlers when attaching the <see cref="E:Eto.Forms.TreeView.Activated"/> event
            </summary>
        </member>
        <member name="E:Eto.Forms.TreeView.Activated">
            <summary>
            Event to handle when an item is activated
            </summary>
            <remarks>
            An item is activated typically when double clicking the mouse on the item, or pressing enter with it selected.
            </remarks>
        </member>
        <member name="M:Eto.Forms.TreeView.OnActivated(Eto.Forms.TreeViewItemEventArgs)">
            <summary>
            Raises the <see cref="E:Eto.Forms.TreeView.Activated"/> event.
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="F:Eto.Forms.TreeView.SelectionChangedEvent">
            <summary>
            Identifier for handlers when attaching the <see cref="E:Eto.Forms.TreeView.SelectionChanged"/> event
            </summary>
        </member>
        <member name="E:Eto.Forms.TreeView.SelectionChanged">
            <summary>
            Occurs when the selection has been changed by the user or programattically
            </summary>
        </member>
        <member name="M:Eto.Forms.TreeView.OnSelectionChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Eto.Forms.TreeView.SelectionChanged"/> event.
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="F:Eto.Forms.TreeView.ExpandingEvent">
            <summary>
            Identifier for handlers when attaching the <see cref="E:Eto.Forms.TreeView.Expanding"/> event
            </summary>
        </member>
        <member name="E:Eto.Forms.TreeView.Expanding">
            <summary>
            Occurs before an item is expanding
            </summary>
        </member>
        <member name="M:Eto.Forms.TreeView.OnExpanding(Eto.Forms.TreeViewItemCancelEventArgs)">
            <summary>
            Raises the <see cref="E:Eto.Forms.TreeView.Expanding"/> event.
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="F:Eto.Forms.TreeView.ExpandedEvent">
            <summary>
            Identifier for handlers when attaching the <see cref="E:Eto.Forms.TreeView.Expanded"/> event
            </summary>
        </member>
        <member name="E:Eto.Forms.TreeView.Expanded">
            <summary>
            Occurs after an item has been expanded
            </summary>
        </member>
        <member name="M:Eto.Forms.TreeView.OnExpanded(Eto.Forms.TreeViewItemEventArgs)">
            <summary>
            Raises the <see cref="E:Eto.Forms.TreeView.Expanded"/> event.
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="F:Eto.Forms.TreeView.CollapsingEvent">
            <summary>
            Identifier for handlers when attaching the <see cref="E:Eto.Forms.TreeView.Collapsing"/> event
            </summary>
        </member>
        <member name="E:Eto.Forms.TreeView.Collapsing">
            <summary>
            Occurs before an item is collapsed
            </summary>
        </member>
        <member name="M:Eto.Forms.TreeView.OnCollapsing(Eto.Forms.TreeViewItemCancelEventArgs)">
            <summary>
            Raises the <see cref="E:Eto.Forms.TreeView.Collapsing"/> event.
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="F:Eto.Forms.TreeView.CollapsedEvent">
            <summary>
            Identifier for handlers when attaching the <see cref="E:Eto.Forms.TreeView.Collapsed"/> event
            </summary>
        </member>
        <member name="E:Eto.Forms.TreeView.Collapsed">
            <summary>
            Occurs after an item has been collapsed
            </summary>
        </member>
        <member name="M:Eto.Forms.TreeView.OnCollapsed(Eto.Forms.TreeViewItemEventArgs)">
            <summary>
            Raises the <see cref="E:Eto.Forms.TreeView.Collapsed"/> event.
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="F:Eto.Forms.TreeView.LabelEditedEvent">
            <summary>
            Identifier for handlers when attaching the <see cref="E:Eto.Forms.TreeView.LabelEdited"/> event
            </summary>
        </member>
        <member name="E:Eto.Forms.TreeView.LabelEdited">
            <summary>
            Occurs after the label of an item has been edited
            </summary>
        </member>
        <member name="M:Eto.Forms.TreeView.OnLabelEdited(Eto.Forms.TreeViewItemEditEventArgs)">
            <summary>
            Raises the <see cref="E:Eto.Forms.TreeView.LabelEdited"/> event.
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="F:Eto.Forms.TreeView.LabelEditingEvent">
            <summary>
            Identifier for handlers when attaching the <see cref="E:Eto.Forms.TreeView.LabelEditing"/> event
            </summary>
        </member>
        <member name="E:Eto.Forms.TreeView.LabelEditing">
            <summary>
            Occurs before an items label is edited
            </summary>
        </member>
        <member name="M:Eto.Forms.TreeView.OnLabelEditing(Eto.Forms.TreeViewItemCancelEventArgs)">
            <summary>
            Raises the <see cref="E:Eto.Forms.TreeView.LabelEditing"/> event.
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="F:Eto.Forms.TreeView.NodeMouseClickEvent">
            <summary>
            Identifier for handlers when attaching the <see cref="E:Eto.Forms.TreeView.NodeMouseClick"/> event
            </summary>
        </member>
        <member name="E:Eto.Forms.TreeView.NodeMouseClick">
            <summary>
            Occurs when a node is clicked with the mouse
            </summary>
        </member>
        <member name="M:Eto.Forms.TreeView.OnNodeMouseClick(Eto.Forms.TreeViewItemEventArgs)">
            <summary>
            Raises the <see cref="E:Eto.Forms.TreeView.NodeMouseClick"/> event.
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="P:Eto.Forms.TreeView.SelectedItem">
            <summary>
            Gets or sets the selected item.
            </summary>
            <value>The selected item.</value>
        </member>
        <member name="P:Eto.Forms.TreeView.DataStore">
            <summary>
            Gets or sets the data store.
            </summary>
            <value>The data store.</value>
        </member>
        <member name="P:Eto.Forms.TreeView.TextColor">
            <summary>
            Gets or sets the color of the text for all nodes.
            </summary>
            <value>The color of the text.</value>
        </member>
        <member name="M:Eto.Forms.TreeView.RefreshData">
            <summary>
            Refreshes the data, keeping the selection
            </summary>
        </member>
        <member name="M:Eto.Forms.TreeView.RefreshItem(Eto.Forms.ITreeItem)">
            <summary>
            Refreshes the specified item and all its children, keeping the selection if not part of the refreshed nodes
            </summary>
            <param name="item">Item to refresh</param>
        </member>
        <member name="M:Eto.Forms.TreeView.GetNodeAt(Eto.Drawing.PointF)">
            <summary>
            Gets the node at a specified point from the origin of the control
            </summary>
            <remarks>
            Useful for determining which node is under the mouse cursor.
            </remarks>
            <returns>The item from the data store that is displayed at the specified location</returns>
            <param name="point">Point to find the node</param>
        </member>
        <member name="P:Eto.Forms.TreeView.LabelEdit">
            <summary>
            Gets or sets a value indicating whether users can edit the labels of items
            </summary>
            <seealso cref="E:Eto.Forms.TreeView.LabelEditing"/>
            <seealso cref="E:Eto.Forms.TreeView.LabelEdited"/>
            <value><c>true</c> to allow label editing; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Eto.Forms.TreeView.ContextMenu">
            <summary>
            Gets or sets the context menu to show when the user right clicks or presses the menu key
            </summary>
            <value>The context menu to show, or null to have no menu</value>
        </member>
        <member name="M:Eto.Forms.TreeView.GetCallback">
            <summary>
            Gets an instance of an object used to perform callbacks to the widget from handler implementations
            </summary>
            <returns>The callback instance to use for this widget</returns>
        </member>
        <member name="T:Eto.Forms.TreeView.ICallback">
            <summary>
            Callback interface for instances of <see cref="T:Eto.Forms.TreeView"/>
            </summary>
        </member>
        <member name="M:Eto.Forms.TreeView.ICallback.OnActivated(Eto.Forms.TreeView,Eto.Forms.TreeViewItemEventArgs)">
            <summary>
            Raises the activated event.
            </summary>
        </member>
        <member name="M:Eto.Forms.TreeView.ICallback.OnSelectionChanged(Eto.Forms.TreeView,System.EventArgs)">
            <summary>
            Raises the selection changed event.
            </summary>
        </member>
        <member name="M:Eto.Forms.TreeView.ICallback.OnExpanding(Eto.Forms.TreeView,Eto.Forms.TreeViewItemCancelEventArgs)">
            <summary>
            Raises the expanding event.
            </summary>
        </member>
        <member name="M:Eto.Forms.TreeView.ICallback.OnExpanded(Eto.Forms.TreeView,Eto.Forms.TreeViewItemEventArgs)">
            <summary>
            Raises the expanded event.
            </summary>
        </member>
        <member name="M:Eto.Forms.TreeView.ICallback.OnCollapsing(Eto.Forms.TreeView,Eto.Forms.TreeViewItemCancelEventArgs)">
            <summary>
            Raises the collapsing event.
            </summary>
        </member>
        <member name="M:Eto.Forms.TreeView.ICallback.OnCollapsed(Eto.Forms.TreeView,Eto.Forms.TreeViewItemEventArgs)">
            <summary>
            Raises the collapsed event.
            </summary>
        </member>
        <member name="M:Eto.Forms.TreeView.ICallback.OnLabelEdited(Eto.Forms.TreeView,Eto.Forms.TreeViewItemEditEventArgs)">
            <summary>
            Raises the label edited event.
            </summary>
        </member>
        <member name="M:Eto.Forms.TreeView.ICallback.OnLabelEditing(Eto.Forms.TreeView,Eto.Forms.TreeViewItemCancelEventArgs)">
            <summary>
            Raises the label editing event.
            </summary>
        </member>
        <member name="M:Eto.Forms.TreeView.ICallback.OnNodeMouseClick(Eto.Forms.TreeView,Eto.Forms.TreeViewItemEventArgs)">
            <summary>
            Raises the node mouse click event.
            </summary>
        </member>
        <member name="T:Eto.Forms.TreeView.Callback">
            <summary>
            Callback methods for handlers of <see cref="T:Eto.Forms.TreeView"/>
            </summary>
        </member>
        <member name="M:Eto.Forms.TreeView.Callback.OnActivated(Eto.Forms.TreeView,Eto.Forms.TreeViewItemEventArgs)">
            <summary>
            Raises the activated event.
            </summary>
        </member>
        <member name="M:Eto.Forms.TreeView.Callback.OnSelectionChanged(Eto.Forms.TreeView,System.EventArgs)">
            <summary>
            Raises the selection changed event.
            </summary>
        </member>
        <member name="M:Eto.Forms.TreeView.Callback.OnExpanding(Eto.Forms.TreeView,Eto.Forms.TreeViewItemCancelEventArgs)">
            <summary>
            Raises the expanding event.
            </summary>
        </member>
        <member name="M:Eto.Forms.TreeView.Callback.OnExpanded(Eto.Forms.TreeView,Eto.Forms.TreeViewItemEventArgs)">
            <summary>
            Raises the expanded event.
            </summary>
        </member>
        <member name="M:Eto.Forms.TreeView.Callback.OnCollapsing(Eto.Forms.TreeView,Eto.Forms.TreeViewItemCancelEventArgs)">
            <summary>
            Raises the collapsing event.
            </summary>
        </member>
        <member name="M:Eto.Forms.TreeView.Callback.OnCollapsed(Eto.Forms.TreeView,Eto.Forms.TreeViewItemEventArgs)">
            <summary>
            Raises the collapsed event.
            </summary>
        </member>
        <member name="M:Eto.Forms.TreeView.Callback.OnLabelEdited(Eto.Forms.TreeView,Eto.Forms.TreeViewItemEditEventArgs)">
            <summary>
            Raises the label edited event.
            </summary>
        </member>
        <member name="M:Eto.Forms.TreeView.Callback.OnLabelEditing(Eto.Forms.TreeView,Eto.Forms.TreeViewItemCancelEventArgs)">
            <summary>
            Raises the label editing event.
            </summary>
        </member>
        <member name="M:Eto.Forms.TreeView.Callback.OnNodeMouseClick(Eto.Forms.TreeView,Eto.Forms.TreeViewItemEventArgs)">
            <summary>
            Raises the node mouse click event.
            </summary>
        </member>
        <member name="T:Eto.Forms.TreeView.IHandler">
            <summary>
            Handler interface for <see cref="T:Eto.Forms.TreeView"/>
            </summary>
        </member>
        <member name="P:Eto.Forms.TreeView.IHandler.DataStore">
            <summary>
            Gets or sets the data store.
            </summary>
            <value>The data store.</value>
        </member>
        <member name="P:Eto.Forms.TreeView.IHandler.SelectedItem">
            <summary>
            Gets or sets the selected item.
            </summary>
            <value>The selected item.</value>
        </member>
        <member name="M:Eto.Forms.TreeView.IHandler.RefreshData">
            <summary>
            Refreshes the data, keeping the selection
            </summary>
        </member>
        <member name="M:Eto.Forms.TreeView.IHandler.RefreshItem(Eto.Forms.ITreeItem)">
            <summary>
            Refreshes the specified item and all its children, keeping the selection if not part of the refreshed nodes
            </summary>
            <param name="item">Item to refresh</param>
        </member>
        <member name="M:Eto.Forms.TreeView.IHandler.GetNodeAt(Eto.Drawing.PointF)">
            <summary>
            Gets the node at a specified point from the origin of the control
            </summary>
            <remarks>
            Useful for determining which node is under the mouse cursor.
            </remarks>
            <returns>The item from the data store that is displayed at the specified location</returns>
            <param name="point">Point to find the node</param>
        </member>
        <member name="P:Eto.Forms.TreeView.IHandler.LabelEdit">
            <summary>
            Gets or sets a value indicating whether users can edit the labels of items
            </summary>
            <value><c>true</c> to allow label editing; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Eto.Forms.TreeView.IHandler.TextColor">
            <summary>
            Gets or sets the color of the text for all nodes.
            </summary>
            <value>The color of the text.</value>
        </member>
        <member name="T:Eto.Forms.WebViewLoadedEventArgs">
            <summary>
            Event arguments when the <see cref="T:Eto.Forms.WebView"/> has finished loaded a uri
            </summary>
        </member>
        <member name="P:Eto.Forms.WebViewLoadedEventArgs.Uri">
            <summary>
            Gets the URI of the page that was loaded.
            </summary>
            <value>The URI.</value>
        </member>
        <member name="M:Eto.Forms.WebViewLoadedEventArgs.#ctor(System.Uri)">
            <summary>
            Initializes a new instance of the <see cref="T:Eto.Forms.WebViewLoadedEventArgs"/> class.
            </summary>
            <param name="uri">URI of the page that was loaded.</param>
        </member>
        <member name="T:Eto.Forms.WebViewLoadingEventArgs">
            <summary>
            Event arguments when the <see cref="T:Eto.Forms.WebView"/> is loading a new uri.
            </summary>
        </member>
        <member name="P:Eto.Forms.WebViewLoadingEventArgs.Cancel">
            <summary>
            Gets or sets a value indicating whether to cancel the load.
            </summary>
            <value><c>true</c> to cancel loading the page; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Eto.Forms.WebViewLoadingEventArgs.IsMainFrame">
            <summary>
            Gets or sets a value indicating whether the main frame is loading, or a child frame.
            </summary>
            <value><c>true</c> if loading for the main frame; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Eto.Forms.WebViewLoadingEventArgs.#ctor(System.Uri,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Eto.Forms.WebViewLoadingEventArgs"/> class.
            </summary>
            <param name="uri">URI of the page that is loading.</param>
            <param name="isMainFrame">If set to <c>true</c> the uri is for the main frame, otherwise <c>false</c>.</param>
        </member>
        <member name="T:Eto.Forms.WebViewTitleEventArgs">
            <summary>
            Event arguments for when the <see cref="T:Eto.Forms.WebView"/> changes its title
            </summary>
        </member>
        <member name="P:Eto.Forms.WebViewTitleEventArgs.Title">
            <summary>
            Gets the new title for the page.
            </summary>
            <value>The title for the page.</value>
        </member>
        <member name="M:Eto.Forms.WebViewTitleEventArgs.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Eto.Forms.WebViewTitleEventArgs"/> class.
            </summary>
            <param name="title">New title for the page.</param>
        </member>
        <member name="T:Eto.Forms.WebViewNewWindowEventArgs">
            <summary>
            Event arguments for when the <see cref="T:Eto.Forms.WebView"/> prompts to open a new window.
            </summary>
        </member>
        <member name="P:Eto.Forms.WebViewNewWindowEventArgs.NewWindowName">
            <summary>
            Gets the name of the new window.
            </summary>
            <value>The name of the new window.</value>
        </member>
        <member name="M:Eto.Forms.WebViewNewWindowEventArgs.#ctor(System.Uri,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Eto.Forms.WebViewNewWindowEventArgs"/> class.
            </summary>
            <param name="uri">URI of the new window.</param>
            <param name="newWindowName">Name of the new window.</param>
        </member>
        <member name="T:Eto.Forms.WebView">
            <summary>
            Control to show a browser control that can display html and execute javascript.
            </summary>
            <remarks>
            Most platforms have built-in support for a browser control, which by default this will use.
            
            There are other browser implementations available, such as Chromium, etc. 
            You can create your own handler for the web view if you want to use a different browser control.
            </remarks>
        </member>
        <member name="F:Eto.Forms.WebView.NavigatedEvent">
            <summary>
            Identifier for handlers when attaching the <see cref="E:Eto.Forms.WebView.Navigated"/> event.
            </summary>
        </member>
        <member name="E:Eto.Forms.WebView.Navigated">
            <summary>
            Occurs when the browser has loaded a new uri and has begun loading it.
            </summary>
            <remarks>
            This happens after the <see cref="E:Eto.Forms.WebView.DocumentLoading"/> event.
            Once the document is fully loaded, the <see cref="E:Eto.Forms.WebView.DocumentLoaded"/> event will be triggered.
            </remarks>
        </member>
        <member name="M:Eto.Forms.WebView.OnNavigated(Eto.Forms.WebViewLoadedEventArgs)">
            <summary>
            Raises the <see cref="E:Eto.Forms.WebView.Navigated"/> event.
            </summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="F:Eto.Forms.WebView.DocumentLoadedEvent">
            <summary>
            Identifier for handlers when attaching the <see cref="E:Eto.Forms.WebView.DocumentLoaded"/> event.
            </summary>
        </member>
        <member name="E:Eto.Forms.WebView.DocumentLoaded">
            <summary>
            Occurs when the document is fully loaded.
            </summary>
            <remarks>
            This event fires after the entire document has loaded and is fully rendered.
            Usually this is a good event to use when determining when you can execute scripts
            or interact with the document.
            </remarks>
        </member>
        <member name="M:Eto.Forms.WebView.OnDocumentLoaded(Eto.Forms.WebViewLoadedEventArgs)">
            <summary>
            Raises the <see cref="E:Eto.Forms.WebView.DocumentLoaded"/> event.
            </summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="F:Eto.Forms.WebView.DocumentLoadingEvent">
            <summary>
            Identifier for handlers when attaching the <see cref="E:Eto.Forms.WebView.DocumentLoading"/> event.
            </summary>
        </member>
        <member name="E:Eto.Forms.WebView.DocumentLoading">
            <summary>
            Occurs when a document starts loading.
            </summary>
            <remarks>
            This fires when the document shown is changed, and notifies which url is being loaded.
            You can cancel the loading of a page through this event, though you should check the <see cref="P:Eto.Forms.WebViewLoadingEventArgs.IsMainFrame"/>
            to determine if it is for the main frame, or a child frame.
            </remarks>
        </member>
        <member name="M:Eto.Forms.WebView.OnDocumentLoading(Eto.Forms.WebViewLoadingEventArgs)">
            <summary>
            Raises the <see cref="E:Eto.Forms.WebView.DocumentLoading"/> event.
            </summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="F:Eto.Forms.WebView.OpenNewWindowEvent">
            <summary>
            Identifier for handlers when attaching the <see cref="E:Eto.Forms.WebView.OpenNewWindow"/> event.
            </summary>
        </member>
        <member name="E:Eto.Forms.WebView.OpenNewWindow">
            <summary>
            Occurs when the page prompts to open a link in a new window
            </summary>
            <remarks>
            This event will occur when a user or script opens a new link in a new window.
            
            This is usually when an anchor's target is set to _blank, or a specific window name.
            
            You must handle this event to perform an action, otherwise no action will occur.
            </remarks>
        </member>
        <member name="M:Eto.Forms.WebView.OnOpenNewWindow(Eto.Forms.WebViewNewWindowEventArgs)">
            <summary>
            Raises the <see cref="E:Eto.Forms.WebView.OpenNewWindow"/> event.
            </summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="F:Eto.Forms.WebView.DocumentTitleChangedEvent">
            <summary>
            Identifier for handlers when attaching the <see cref="E:Eto.Forms.WebView.DocumentTitleChanged"/> event.
            </summary>
        </member>
        <member name="E:Eto.Forms.WebView.DocumentTitleChanged">
            <summary>
            Occurs when the title of the page has change either through navigation or a script.
            </summary>
        </member>
        <member name="M:Eto.Forms.WebView.OnDocumentTitleChanged(Eto.Forms.WebViewTitleEventArgs)">
            <summary>
            Raises the <see cref="E:Eto.Forms.WebView.DocumentTitleChanged"/> event.
            </summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:Eto.Forms.WebView.GoBack">
            <summary>
            Navigates the browser back to the previous page in history, if there is one.
            </summary>
            <seealso cref="P:Eto.Forms.WebView.CanGoBack"/>
        </member>
        <member name="P:Eto.Forms.WebView.CanGoBack">
            <summary>
            Gets a value indicating whether the browser can go back to the previous page in history.
            </summary>
            <seealso cref="M:Eto.Forms.WebView.GoBack"/>
            <value><c>true</c> if the browser can go back; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Eto.Forms.WebView.GoForward">
            <summary>
            Navigates the browser forward to the next page in history, if there is one.
            </summary>
            <seealso cref="P:Eto.Forms.WebView.CanGoForward"/>
        </member>
        <member name="P:Eto.Forms.WebView.CanGoForward">
            <summary>
            Gets a value indicating whether the browser can go forward to the next page.
            </summary>
            <seealso cref="M:Eto.Forms.WebView.GoForward"/>
            <value><c>true</c> if the browser can go forward; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Eto.Forms.WebView.Url">
            <summary>
            Gets or sets the URL of the currently navigated page.
            </summary>
            <remarks>
            Setting this will cause the current page to stop loading (if not already loaded), and begin loading another page.
            Loading the new page can be cancelled by the <see cref="E:Eto.Forms.WebView.DocumentLoading"/> event.
            </remarks>
            <value>The URL of the currently navigated page.</value>
        </member>
        <member name="M:Eto.Forms.WebView.Stop">
            <summary>
            Stops loading the current page.
            </summary>
            <remarks>
            You can determine if the page is finished loading by the <see cref="E:Eto.Forms.WebView.DocumentLoaded"/> event.
            </remarks>
        </member>
        <member name="M:Eto.Forms.WebView.Reload">
            <summary>
            Reloads the current page
            </summary>
        </member>
        <member name="M:Eto.Forms.WebView.ExecuteScript(System.String)">
            <summary>
            Executes the specified javascript in the context of the current page, returning its result.
            </summary>
            <returns>The script to execute.</returns>
            <param name="script">Script result.</param>
        </member>
        <member name="P:Eto.Forms.WebView.DocumentTitle">
            <summary>
            Gets the document title of the current page.
            </summary>
            <value>The document title.</value>
        </member>
        <member name="M:Eto.Forms.WebView.LoadHtml(System.IO.Stream,System.Uri)">
            <summary>
            Loads the specified stream as html into the control.
            </summary>
            <param name="stream">Stream containing the html to load.</param>
            <param name="baseUri">Base URI to load associated resources. Can be a url or file path.</param>
        </member>
        <member name="M:Eto.Forms.WebView.LoadHtml(System.String,System.Uri)">
            <summary>
            Loads the specified html string.
            </summary>
            <param name="html">Html string to load.</param>
            <param name="baseUri">Base URI to load associated resources. Can be a url or file path.</param>
        </member>
        <member name="M:Eto.Forms.WebView.ShowPrintDialog">
            <summary>
            Shows the print dialog for the current page.
            </summary>
            <remarks>
            This prompts the browser to print its contents.
            </remarks>
        </member>
        <member name="P:Eto.Forms.WebView.BrowserContextMenuEnabled">
            <summary>
            Gets or sets a value indicating whether the user can click to show the context menu.
            </summary>
            <remarks>
            This is useful when using a browser control with content that should not be changed.
            The context menu can show navigation items which may cause the page to reload so setting this
            value to false will ensure the user can only interact with the page as is.
            </remarks>
            <value><c>true</c> if the context menu is enabled; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Eto.Forms.WebView.ICallback">
            <summary>
            Callback interface for the <see cref="T:Eto.Forms.WebView"/>.
            </summary>
        </member>
        <member name="M:Eto.Forms.WebView.ICallback.OnNavigated(Eto.Forms.WebView,Eto.Forms.WebViewLoadedEventArgs)">
            <summary>
            Raises the navigated event.
            </summary>
        </member>
        <member name="M:Eto.Forms.WebView.ICallback.OnDocumentLoaded(Eto.Forms.WebView,Eto.Forms.WebViewLoadedEventArgs)">
            <summary>
            Raises the document loaded event.
            </summary>
        </member>
        <member name="M:Eto.Forms.WebView.ICallback.OnDocumentLoading(Eto.Forms.WebView,Eto.Forms.WebViewLoadingEventArgs)">
            <summary>
            Raises the document loading event.
            </summary>
        </member>
        <member name="M:Eto.Forms.WebView.ICallback.OnOpenNewWindow(Eto.Forms.WebView,Eto.Forms.WebViewNewWindowEventArgs)">
            <summary>
            Raises the open new window event.
            </summary>
        </member>
        <member name="M:Eto.Forms.WebView.ICallback.OnDocumentTitleChanged(Eto.Forms.WebView,Eto.Forms.WebViewTitleEventArgs)">
            <summary>
            Raises the document title changed event.
            </summary>
        </member>
        <member name="M:Eto.Forms.WebView.GetCallback">
            <summary>
            Gets an instance of an object used to perform callbacks to the widget from handler implementations
            </summary>
            <returns>The callback instance to use for this widget</returns>
        </member>
        <member name="T:Eto.Forms.WebView.Callback">
            <summary>
            Callback implementation for handlers of the <see cref="T:Eto.Forms.WebView"/>
            </summary>
        </member>
        <member name="M:Eto.Forms.WebView.Callback.OnNavigated(Eto.Forms.WebView,Eto.Forms.WebViewLoadedEventArgs)">
            <summary>
            Raises the navigated event.
            </summary>
        </member>
        <member name="M:Eto.Forms.WebView.Callback.OnDocumentLoaded(Eto.Forms.WebView,Eto.Forms.WebViewLoadedEventArgs)">
            <summary>
            Raises the document loaded event.
            </summary>
        </member>
        <member name="M:Eto.Forms.WebView.Callback.OnDocumentLoading(Eto.Forms.WebView,Eto.Forms.WebViewLoadingEventArgs)">
            <summary>
            Raises the document loading event.
            </summary>
        </member>
        <member name="M:Eto.Forms.WebView.Callback.OnOpenNewWindow(Eto.Forms.WebView,Eto.Forms.WebViewNewWindowEventArgs)">
            <summary>
            Raises the open new window event.
            </summary>
        </member>
        <member name="M:Eto.Forms.WebView.Callback.OnDocumentTitleChanged(Eto.Forms.WebView,Eto.Forms.WebViewTitleEventArgs)">
            <summary>
            Raises the document title changed event.
            </summary>
        </member>
        <member name="T:Eto.Forms.WebView.IHandler">
            <summary>
            Handler interface for the <see cref="T:Eto.Forms.WebView"/>.
            </summary>
        </member>
        <member name="P:Eto.Forms.WebView.IHandler.Url">
            <summary>
            Gets or sets the URL of the currently navigated page.
            </summary>
            <remarks>
            Setting this will cause the current page to stop loading (if not already loaded), and begin loading another page.
            Loading the new page can be cancelled by the <see cref="E:Eto.Forms.WebView.DocumentLoading"/> event.
            </remarks>
            <value>The URL of the currently navigated page.</value>
        </member>
        <member name="M:Eto.Forms.WebView.IHandler.LoadHtml(System.String,System.Uri)">
            <summary>
            Loads the specified html string.
            </summary>
            <param name="html">Html string to load.</param>
            <param name="baseUri">Base URI to load associated resources. Can be a url or file path.</param>
        </member>
        <member name="M:Eto.Forms.WebView.IHandler.GoBack">
            <summary>
            Navigates the browser back to the previous page in history, if there is one.
            </summary>
            <seealso cref="P:Eto.Forms.WebView.IHandler.CanGoBack"/>
        </member>
        <member name="P:Eto.Forms.WebView.IHandler.CanGoBack">
            <summary>
            Gets a value indicating whether the browser can go back to the previous page in history.
            </summary>
            <seealso cref="M:Eto.Forms.WebView.IHandler.GoBack"/>
            <value><c>true</c> if the browser can go back; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Eto.Forms.WebView.IHandler.GoForward">
            <summary>
            Navigates the browser forward to the next page in history, if there is one.
            </summary>
            <seealso cref="P:Eto.Forms.WebView.IHandler.CanGoForward"/>
        </member>
        <member name="P:Eto.Forms.WebView.IHandler.CanGoForward">
            <summary>
            Gets a value indicating whether the browser can go forward to the next page.
            </summary>
            <seealso cref="M:Eto.Forms.WebView.IHandler.GoForward"/>
            <value><c>true</c> if the browser can go forward; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Eto.Forms.WebView.IHandler.Stop">
            <summary>
            Stops loading the current page.
            </summary>
            <remarks>
            You can determine if the page is finished loading by the <see cref="E:Eto.Forms.WebView.DocumentLoaded"/> event.
            </remarks>
        </member>
        <member name="M:Eto.Forms.WebView.IHandler.Reload">
            <summary>
            Reloads the current page
            </summary>
        </member>
        <member name="P:Eto.Forms.WebView.IHandler.DocumentTitle">
            <summary>
            Gets the document title of the current page.
            </summary>
            <value>The document title.</value>
        </member>
        <member name="M:Eto.Forms.WebView.IHandler.ExecuteScript(System.String)">
            <summary>
            Executes the specified javascript in the context of the current page, returning its result.
            </summary>
            <returns>The script to execute.</returns>
            <param name="script">Script result.</param>
        </member>
        <member name="M:Eto.Forms.WebView.IHandler.ShowPrintDialog">
            <summary>
            Shows the print dialog for the current page.
            </summary>
            <remarks>
            This prompts the browser to print its contents.
            </remarks>
        </member>
        <member name="P:Eto.Forms.WebView.IHandler.BrowserContextMenuEnabled">
            <summary>
            Gets or sets a value indicating whether the user can click to show the context menu.
            </summary>
            <remarks>
            This is useful when using a browser control with content that should not be changed.
            The context menu can show navigation items which may cause the page to reload so setting this
            value to false will ensure the user can only interact with the page as is.
            </remarks>
            <value><c>true</c> if the context menu is enabled; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Eto.Forms.CursorType">
            <summary>
            Enumeration of the cursor types supported by the <see cref="T:Eto.Forms.Cursor"/> object
            </summary>
        </member>
        <member name="F:Eto.Forms.CursorType.Default">
            <summary>
            Default cursor, which is usually an arrow but may be different depending on the control
            </summary>
        </member>
        <member name="F:Eto.Forms.CursorType.Arrow">
            <summary>
            Standard arrow cursor
            </summary>
        </member>
        <member name="F:Eto.Forms.CursorType.Crosshair">
            <summary>
            Cursor with a cross hair
            </summary>
        </member>
        <member name="F:Eto.Forms.CursorType.Pointer">
            <summary>
            Pointer cursor, which is usually a hand
            </summary>
        </member>
        <member name="F:Eto.Forms.CursorType.Move">
            <summary>
            All direction move cursor
            </summary>
        </member>
        <member name="F:Eto.Forms.CursorType.IBeam">
            <summary>
            I-beam cursor for selecting text or placing the text cursor
            </summary>
        </member>
        <member name="F:Eto.Forms.CursorType.VerticalSplit">
            <summary>
            Vertical sizing cursor
            </summary>
        </member>
        <member name="F:Eto.Forms.CursorType.HorizontalSplit">
            <summary>
            Horizontal sizing cursor
            </summary>
        </member>
        <member name="T:Eto.Forms.Cursor">
            <summary>
            Class for a particular Mouse cursor type
            </summary>
            <remarks>
            This can be used to specify a cursor for a particular control
            using <see cref="P:Eto.Forms.Control.Cursor"/>
            </remarks>
        </member>
        <member name="M:Eto.Forms.Cursor.#ctor(Eto.Forms.CursorType)">
            <summary>
            Initializes a new instance of the <see cref="T:Eto.Forms.Cursor"/> class with the specified <paramref name="type"/>.
            </summary>
            <param name="type">Type of cursor.</param>
        </member>
        <member name="T:Eto.Forms.Cursor.IHandler">
            <summary>
            Platform interface for the <see cref="T:Eto.Forms.Cursor"/> class
            </summary>
        </member>
        <member name="M:Eto.Forms.Cursor.IHandler.Create(Eto.Forms.CursorType)">
            <summary>
            Creates the cursor instance with the specified <paramref name="type"/>.
            </summary>
            <param name="type">Cursor type.</param>
        </member>
        <member name="T:Eto.Forms.Cursors">
            <summary>
            Provides direct access to a cached set of cursors for use within your application
            </summary>
            <remarks>
            This provides a preferred method of getting cursors as opposed to creating new instances directly via
            <see cref="T:Eto.Forms.Cursor"/>, as it will cache the cursors and only create one shared instance.
            </remarks>
        </member>
        <member name="M:Eto.Forms.Cursors.Cached(Eto.Forms.CursorType)">
            <summary>
            Gets a cached cursor with the specified <paramref name="type"/>
            </summary>
            <param name="type">Type of cursor to get</param>
            <returns>A cached instance of the specified cursor</returns>
        </member>
        <member name="M:Eto.Forms.Cursors.ClearCache">
            <summary>
            Clears the cursor cache
            </summary>
            <remarks>
            This is useful if you are using the <see cref="M:Eto.Forms.Cursors.Cached(Eto.Forms.CursorType)"/> method to cache pens and want to clear it
            to conserve memory or resources.
            </remarks>
        </member>
        <member name="P:Eto.Forms.Cursors.Default">
            <summary>
            Default cursor, which is usually an arrow but may be different depending on the control
            </summary>
        </member>
        <member name="P:Eto.Forms.Cursors.Arrow">
            <summary>
            Standard arrow cursor
            </summary>
        </member>
        <member name="P:Eto.Forms.Cursors.Crosshair">
            <summary>
            Cursor with a cross hair
            </summary>
        </member>
        <member name="P:Eto.Forms.Cursors.Pointer">
            <summary>
            Pointer cursor, which is usually a hand
            </summary>
        </member>
        <member name="P:Eto.Forms.Cursors.Move">
            <summary>
            All direction move cursor
            </summary>
        </member>
        <member name="P:Eto.Forms.Cursors.IBeam">
            <summary>
            I-beam cursor for selecting text or placing the text cursor
            </summary>
        </member>
        <member name="P:Eto.Forms.Cursors.VerticalSplit">
            <summary>
            Vertical sizing cursor
            </summary>
        </member>
        <member name="P:Eto.Forms.Cursors.HorizontalSplit">
            <summary>
            Horizontal sizing cursor
            </summary>
        </member>
        <member name="T:Eto.Forms.IDataObject">
            <summary>
            Interface to allow you to share common code with <see cref="T:Eto.Forms.Clipboard"/> and <see cref="T:Eto.Forms.DataObject"/>.
            </summary>
        </member>
        <member name="P:Eto.Forms.IDataObject.Types">
            <summary>
            Gets the type id's for each type of data in the data object.
            </summary>
            <value>The content types in the data object.</value>
        </member>
        <member name="M:Eto.Forms.IDataObject.SetString(System.String,System.String)">
            <summary>
            Sets a string into the data object with the specified type identifier.
            </summary>
            <remarks>
            This is useful when setting alternate string values into the data object that are not plain text.
            If you are storing plain text, use the <see cref="P:Eto.Forms.IDataObject.Text"/> property instead.
            </remarks>
            <seealso cref="M:Eto.Forms.IDataObject.GetString(System.String)"/>
            <param name="value">Value to set in the data object.</param>
            <param name="type">Type identifier that was used to store the data.</param>
        </member>
        <member name="M:Eto.Forms.IDataObject.SetData(System.Byte[],System.String)">
            <summary>
            sets a data array into the data object with the specified type identifier.
            </summary>
            <param name="value">Data to store in the data object.</param>
            <param name="type">Type identifier to store the data.</param>
        </member>
        <member name="M:Eto.Forms.IDataObject.GetString(System.String)">
            <summary>
            Gets a string from the data object with the specified type identifier.
            </summary>
            <returns>The string.</returns>
            <seealso cref="M:Eto.Forms.IDataObject.SetString(System.String,System.String)"/>
            <param name="type">Type identifier that was used to store the data.</param>
        </member>
        <member name="M:Eto.Forms.IDataObject.GetData(System.String)">
            <summary>
            Gets a data array from the data object with the specified type identifier.
            </summary>
            <returns>The data array, or null if not found in the data object.</returns>
            <seealso cref="M:Eto.Forms.IDataObject.SetData(System.Byte[],System.String)"/>
            <param name="type">Type identifier that was used to store the data.</param>
        </member>
        <member name="P:Eto.Forms.IDataObject.Text">
            <summary>
            Gets or sets the plain text in the data object.
            </summary>
            <value>The plain text in the data object, or null if no plain text string in the data object.</value>
        </member>
        <member name="P:Eto.Forms.IDataObject.Html">
            <summary>
            Gets or sets html text in the data object.
            </summary>
            <value>The html value in the data object, or null if no html in the data object.</value>
        </member>
        <member name="P:Eto.Forms.IDataObject.Image">
            <summary>
            Gets or sets an image in the data object.
            </summary>
            <value>The image in the data object, or null if no image is in the data object.</value>
        </member>
        <member name="P:Eto.Forms.IDataObject.Uris">
            <summary>
            Gets or sets the Uri's of the files in the data object.
            </summary>
            <value>The uris of the files, or null if no files are in the data object.</value>
        </member>
        <member name="M:Eto.Forms.IDataObject.Clear">
            <summary>
            Clears the data object completely of all values
            </summary>
        </member>
        <member name="T:Eto.Forms.DataObject">
            <summary>
            Drag/Drop action data.
            </summary>
        </member>
        <member name="M:Eto.Forms.DataObject.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Eto.Forms.DataObject"/> class.
            </summary>
        </member>
        <member name="M:Eto.Forms.DataObject.#ctor(Eto.Forms.DataObject.IHandler)">
            <summary>
            Initializes a new instance of the <see cref="T:Eto.Forms.DataObject"/> class.
            </summary>
            <param name="handler">Handler implementation.</param>
        </member>
        <member name="P:Eto.Forms.DataObject.Types">
            <summary>
            Gets the types of data in the data object to be used with <see cref="M:Eto.Forms.DataObject.GetString(System.String)"/> and <see cref="M:Eto.Forms.DataObject.GetData(System.String)"/>
            </summary>
            <value>The types.</value>
        </member>
        <member name="M:Eto.Forms.DataObject.SetString(System.String,System.String)">
            <summary>
            Sets a string into the data object with the specified custom type.
            </summary>
            <param name="value">Value to store.</param>
            <param name="type">Type of the data.</param>
        </member>
        <member name="M:Eto.Forms.DataObject.SetDataStream(System.IO.Stream,System.String)">
            <summary>
            Sets a data stream into the clipboard with the specified type identifier.
            </summary>
            <param name="stream">Stream to store in the clipboard.</param>
            <param name="type">Type identifier when retrieving the stream.</param>
        </member>
        <member name="M:Eto.Forms.DataObject.SetData(System.Byte[],System.String)">
            <summary>
            Sets a data array for the specified type identifier.
            </summary>
            <param name="value">byte array to set.</param>
            <param name="type">Type identifier.</param>
        </member>
        <member name="M:Eto.Forms.DataObject.GetString(System.String)">
            <summary>
            Gets a string from the data object with the specified type identifier.
            </summary>
            <returns>The string value, or null if it does not exist in the data object.</returns>
            <param name="type">Type identifier for the string.</param>
        </member>
        <member name="M:Eto.Forms.DataObject.GetDataStream(System.String)">
            <summary>
            Gets the data stream with the specified type identifier.
            </summary>
            <returns>The data stream if found, or null otherwise.</returns>
            <seealso cref="M:Eto.Forms.DataObject.SetDataStream(System.IO.Stream,System.String)"/>
            <param name="type">Type identifier that was used to store the data.</param>
        </member>
        <member name="M:Eto.Forms.DataObject.GetData(System.String)">
            <summary>
            Gets a byte array from the data object with the specified type identifier.
            </summary>
            <returns>The byte data.</returns>
            <param name="type">Type identifier to get the data for.</param>
        </member>
        <member name="P:Eto.Forms.DataObject.Text">
            <summary>
            Gets or sets the plain text in the data object.
            </summary>
            <value>The plain text in the data object, or null if the data object contains no text.</value>
        </member>
        <member name="P:Eto.Forms.DataObject.Html">
            <summary>
            Gets or sets html text in the data object.
            </summary>
            <value>The html value in the data object, or null if the data object contains no html.</value>
        </member>
        <member name="P:Eto.Forms.DataObject.Image">
            <summary>
            Gets or sets an image in the data object.
            </summary>
            <value>The image in the data object, or null if the data object contains no image.</value>
        </member>
        <member name="P:Eto.Forms.DataObject.Uris">
            <summary>
            Gets or sets the Uri's of the files in the data object
            </summary>
            <value>The uris of the files, or null if no files are in the data object.</value>
        </member>
        <member name="M:Eto.Forms.DataObject.Clear">
            <summary>
            Clears the data object
            </summary>
        </member>
        <member name="T:Eto.Forms.DataObject.IHandler">
            <summary>
            Handler interface for platform implementations of <see cref="T:Eto.Forms.DataObject"/>
            </summary>
        </member>
        <member name="T:Eto.Forms.DataStoreVirtualCollection`1">
            <summary>
            Translates an <see cref="T:Eto.Forms.IDataStore`1"/> to a read-only <see cref="T:System.Collections.Generic.IList`1"/>
            </summary>
            <remarks>
            This is typically used to pass the data store to controls that require a standard collection
            </remarks>
        </member>
        <member name="M:Eto.Forms.DataStoreVirtualCollection`1.#ctor(Eto.Forms.IDataStore{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Eto.Forms.DataStoreVirtualCollection`1"/> class.
            </summary>
            <param name="store">Store.</param>
        </member>
        <member name="M:Eto.Forms.DataStoreVirtualCollection`1.IndexOf(`0)">
            <summary>
            Determines the index of a specific item in the collection.
            </summary>
            <returns>The index of the item if found, or -1 if not found</returns>
            <param name="item">Item to find the index</param>
        </member>
        <member name="M:Eto.Forms.DataStoreVirtualCollection`1.Insert(System.Int32,`0)">
            <summary>
            Inserts an item at the specified index. This collection is read-only so this throws an exception.
            </summary>
            <param name="index">Index to add the item</param>
            <param name="item">Item to add</param>
        </member>
        <member name="M:Eto.Forms.DataStoreVirtualCollection`1.RemoveAt(System.Int32)">
            <summary>
            Removes the item at the specified index. This collection is read-only so this throws an exception.
            </summary>
            <param name="index">Index of the item to remove</param>
        </member>
        <member name="P:Eto.Forms.DataStoreVirtualCollection`1.Item(System.Int32)">
            <summary>
            Gets or sets the item at the specified index. This collection is read-only so setting the item throws an exception.
            </summary>
            <param name="index">Index.</param>
        </member>
        <member name="M:Eto.Forms.DataStoreVirtualCollection`1.Add(`0)">
            <summary>
            Adds an item to the current collection. This collection is read-only so this throws an exception.
            </summary>
            <param name="item">The item to add to the current collection.</param>
        </member>
        <member name="M:Eto.Forms.DataStoreVirtualCollection`1.Clear">
            <summary>
            Clears all items from the collection. This collection is read-only so this throws an exception.
            </summary>
        </member>
        <member name="M:Eto.Forms.DataStoreVirtualCollection`1.Contains(`0)">
            <Docs>The object to locate in the current collection.</Docs>
            <para>Determines whether the current collection contains a specific value.</para>
            <summary>
            Determines whether the current collection contains a specific value.
            </summary>
            <param name="item">The object to locate in the current collection.</param>
        </member>
        <member name="M:Eto.Forms.DataStoreVirtualCollection`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the contents of the collection to the specified array starting at the specified index
            </summary>
            <param name="array">Array to copy to</param>
            <param name="arrayIndex">Index in the array to start copying to</param>
        </member>
        <member name="P:Eto.Forms.DataStoreVirtualCollection`1.Count">
            <summary>
            Gets the count of items in this collection
            </summary>
            <value>The count.</value>
        </member>
        <member name="P:Eto.Forms.DataStoreVirtualCollection`1.IsReadOnly">
            <summary>
            Gets a value indicating whether this instance is read only.
            </summary>
            <value><c>true</c> if this instance is read only; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Eto.Forms.DataStoreVirtualCollection`1.Remove(`0)">
            <summary>
            Remove the specified item. This collection is read-only so this throws an exception.
            </summary>
            <param name="item">Item to remove</param>
        </member>
        <member name="M:Eto.Forms.DataStoreVirtualCollection`1.GetEnumerator">
            <summary>
            Gets the enumerator for the collection
            </summary>
            <returns>The enumerator.</returns>
        </member>
        <member name="M:Eto.Forms.DataStoreVirtualCollection`1.Add(System.Object)">
            <summary>
            Adds an item to the current collection.
            </summary>
            <param name="value">The item to add to the current collection</param>
        </member>
        <member name="M:Eto.Forms.DataStoreVirtualCollection`1.Contains(System.Object)">
            <summary>
            Determines whether the current collection contains a specific value.
            </summary>
            <param name="value">The object to locate in the current collection.</param>
        </member>
        <member name="M:Eto.Forms.DataStoreVirtualCollection`1.IndexOf(System.Object)">
            <summary>
            Determines the index of a specific item in the current instance.
            </summary>
            <returns>Index of the item if found, or -1 if not in the collection</returns>
            <param name="value">Value to find</param>
        </member>
        <member name="M:Eto.Forms.DataStoreVirtualCollection`1.Insert(System.Int32,System.Object)">
            <summary>
            Insert a value into the collection with the specified index
            </summary>
            <param name="index">Index to add the item</param>
            <param name="value">Value to add</param>
        </member>
        <member name="P:Eto.Forms.DataStoreVirtualCollection`1.IsFixedSize">
            <summary>
            Gets a value indicating whether this instance is fixed size.
            </summary>
            <value><c>true</c> if this instance is fixed size; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Eto.Forms.DataStoreVirtualCollection`1.Remove(System.Object)">
            <summary>
            Removes the first occurrence of an item from the current collection.
            </summary>
            <param name="value">The item to remove from the current collection.</param>
        </member>
        <member name="M:Eto.Forms.DataStoreVirtualCollection`1.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the contents of the collection to the specified array starting at the specified index
            </summary>
            <param name="array">Array to copy to</param>
            <param name="index">Index in the array to start copying to</param>
        </member>
        <member name="P:Eto.Forms.DataStoreVirtualCollection`1.IsSynchronized">
            <summary>
            Gets a value indicating whether this instance is synchronized.
            </summary>
            <value><c>true</c> if this instance is synchronized; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Eto.Forms.DataStoreVirtualCollection`1.SyncRoot">
            <summary>
            Gets the sync root.
            </summary>
            <value>The sync root.</value>
        </member>
        <member name="T:Eto.Forms.DialogDisplayMode">
            <summary>
            Hint to tell the platform how to display the dialog
            </summary>
            <remarks>
            This tells the platform how you prefer to display the dialog.  Each platform
            may support only certain modes and will choose the appropriate mode based on the hint
            given.
            </remarks>
        </member>
        <member name="F:Eto.Forms.DialogDisplayMode.Default">
            <summary>
            The default display mode for modal dialogs in the platform
            </summary>
            <remarks>
            This uses the ideal display mode given the state of the application and the owner window that is passed in
            </remarks>
        </member>
        <member name="F:Eto.Forms.DialogDisplayMode.Attached">
            <summary>
            Display the dialog attached to the owner window, if supported (e.g. OS X)
            </summary>
        </member>
        <member name="F:Eto.Forms.DialogDisplayMode.Separate">
            <summary>
            Display the dialog as a separate window (e.g. Windows/Linux only supports this mode)
            </summary>
        </member>
        <member name="F:Eto.Forms.DialogDisplayMode.Navigation">
            <summary>
            Display in navigation if available
            </summary>
        </member>
        <member name="T:Eto.Forms.Dialog`1">
            <summary>
            Custom modal dialog with a specified result type
            </summary>
            <remarks>
            This provides a way to show a modal dialog with custom contents to the user.
            A dialog will block user input from the owner form until the dialog is closed.
            </remarks>
            <seealso cref="T:Eto.Forms.Dialog"/>
            <typeparam name="T">Type result type of the dialog</typeparam>
        </member>
        <member name="P:Eto.Forms.Dialog`1.Result">
            <summary>
            Gets or sets the result of the dialog
            </summary>
            <value>The result.</value>
        </member>
        <member name="M:Eto.Forms.Dialog`1.ShowModal">
            <summary>
            Shows the dialog and blocks until the user closes the dialog
            </summary>
            <returns>The result of the modal dialog</returns>
        </member>
        <member name="M:Eto.Forms.Dialog`1.ShowModalAsync">
            <summary>
            Shows the dialog modally asynchronously
            </summary>
            <returns>The result of the modal dialog</returns>
        </member>
        <member name="M:Eto.Forms.Dialog`1.ShowModal(Eto.Forms.Control)">
            <summary>
            Shows the dialog and blocks until the user closes the dialog
            </summary>
            <remarks>
            The <paramref name="owner"/> specifies the control on the window that will be blocked from user input until
            the dialog is closed.
            </remarks>
            <returns>The result of the modal dialog</returns>
            <param name="owner">The owner control that is showing the form</param>
        </member>
        <member name="M:Eto.Forms.Dialog`1.ShowModalAsync(Eto.Forms.Control)">
            <summary>
            Shows the dialog modally asynchronously
            </summary>
            <remarks>
            The <paramref name="owner"/> specifies the control on the window that will be blocked from user input until
            the dialog is closed.
            </remarks>
            <param name="owner">The owner control that is showing the form</param>
        </member>
        <member name="M:Eto.Forms.Dialog`1.Close(`0)">
            <summary>
            Close the dialog with the specified result
            </summary>
            <param name="result">Result to return to the caller</param>
        </member>
        <member name="T:Eto.Forms.Dialog">
            <summary>
            Custom modal dialog
            </summary>
            <remarks>
            This provides a way to show a modal dialog with custom contents to the user.
            A dialog will block user input from the owner form until the dialog is closed.
            </remarks>
            <seealso cref="T:Eto.Forms.Form"/>
            <seealso cref="T:Eto.Forms.Dialog`1"/>
        </member>
        <member name="P:Eto.Forms.Dialog.DisplayMode">
            <summary>
            Gets or sets the display mode hint
            </summary>
            <value>The display mode.</value>
        </member>
        <member name="P:Eto.Forms.Dialog.AbortButton">
            <summary>
            Gets or sets the abort button.
            </summary>
            <remarks>
            On some platforms, the abort button would be called automatically if the user presses the escape key
            </remarks>
            <value>The abort button.</value>
        </member>
        <member name="P:Eto.Forms.Dialog.DefaultButton">
            <summary>
            Gets or sets the default button.
            </summary>
            <remarks>
            On some platforms, the abort button would be called automatically if the user presses the return key
            on the form
            </remarks>
            <value>The default button.</value>
        </member>
        <member name="P:Eto.Forms.Dialog.PositiveButtons">
            <summary>
            Gets the positive buttons list, these buttons are automatically added to the dialog.
            </summary>
            <remarks>
            Depending on the platform these buttons can be added on the left side or the right
            side. The lower the index the closer the button is to the edge.
            </remarks>
            <value>The positive buttons.</value>
        </member>
        <member name="P:Eto.Forms.Dialog.NegativeButtons">
            <summary>
            Gets the negative buttons list, these buttons are automatically added to the dialog.
            </summary>
            <remarks>
            Depending on the platform these buttons can be added on the left side or the right
            side. The lower the index the closer the button is to the edge.
            </remarks>
            <value>The negative buttons.</value>
        </member>
        <member name="M:Eto.Forms.Dialog.ShowModal(Eto.Forms.Control)">
            <summary>
            Shows the dialog modally, blocking the current thread until it is closed.
            </summary>
            <remarks>
            The <paramref name="owner"/> specifies the control on the window that will be blocked from user input until
            the dialog is closed.
            Calling this method is identical to setting the <see cref="P:Eto.Forms.Window.Owner"/> property and calling <see cref="M:Eto.Forms.Dialog.ShowModal"/>.
            </remarks>
            <param name="owner">The owner control that is showing the form</param>
        </member>
        <member name="M:Eto.Forms.Dialog.ShowModal">
            <summary>
            Shows the dialog modally, blocking the current thread until it is closed.
            </summary>
        </member>
        <member name="M:Eto.Forms.Dialog.ShowModalAsync(Eto.Forms.Control)">
            <summary>
            Shows the dialog modally asynchronously
            </summary>
            <remarks>
            The <paramref name="owner"/> specifies the control on the window that will be blocked from user input until
            the dialog is closed.
            Calling this method is identical to setting the <see cref="P:Eto.Forms.Window.Owner"/> property and calling <see cref="M:Eto.Forms.Dialog.ShowModalAsync"/>.
            </remarks>
            <param name="owner">The owner control that is showing the form</param>
        </member>
        <member name="M:Eto.Forms.Dialog.ShowModalAsync">
            <summary>
            Shows the dialog modally asynchronously
            </summary>
        </member>
        <member name="T:Eto.Forms.Dialog.IHandler">
            <summary>
            Handler interface for the <see cref="T:Eto.Forms.Dialog"/> class
            </summary>
        </member>
        <member name="P:Eto.Forms.Dialog.IHandler.DisplayMode">
            <summary>
            Gets or sets the display mode hint
            </summary>
            <value>The display mode.</value>
        </member>
        <member name="M:Eto.Forms.Dialog.IHandler.ShowModal">
            <summary>
            Shows the dialog modally, blocking the current thread until it is closed.
            </summary>
        </member>
        <member name="M:Eto.Forms.Dialog.IHandler.ShowModalAsync">
            <summary>
            Shows the dialog modally asynchronously
            </summary>
        </member>
        <member name="P:Eto.Forms.Dialog.IHandler.DefaultButton">
            <summary>
            Gets or sets the default button.
            </summary>
            <remarks>
            On some platforms, the abort button would be called automatically if the user presses the return key
            on the form
            </remarks>
            <value>The default button.</value>
        </member>
        <member name="P:Eto.Forms.Dialog.IHandler.AbortButton">
            <summary>
            Gets or sets the abort button.
            </summary>
            <remarks>
            On some platforms, the abort button would be called automatically if the user presses the escape key
            </remarks>
            <value>The abort button.</value>
        </member>
        <member name="M:Eto.Forms.Dialog.IHandler.InsertDialogButton(System.Boolean,System.Int32,Eto.Forms.Button)">
            <summary>
            Adds a positive or negative button to the specified position.
            </summary>
            <param name="positive">Positive or negative button.</param>
            <param name="index">Position to add it to,</param>
            <param name="item">The button itself.</param>
        </member>
        <member name="M:Eto.Forms.Dialog.IHandler.RemoveDialogButton(System.Boolean,System.Int32,Eto.Forms.Button)">
            <summary>
            Removes a positive or negative button from the specified position.
            </summary>
            <param name="positive">Positive or negative button.</param>
            <param name="index">Current position of the button.</param>
            <param name="item">The button that is being removed.</param>
        </member>
        <member name="T:Eto.Forms.DockPosition">
            <summary>
            Enumeration to define the dock position of a control, such as tabs in the <see cref="T:Eto.Forms.TabControl"/>
            </summary>
        </member>
        <member name="F:Eto.Forms.DockPosition.Top">
            <summary>
            Element is docked to the top of the content.
            </summary>
        </member>
        <member name="F:Eto.Forms.DockPosition.Left">
            <summary>
            Element is docked to the left of the content.
            </summary>
        </member>
        <member name="F:Eto.Forms.DockPosition.Right">
            <summary>
            Element is docked to the right of the content.
            </summary>
        </member>
        <member name="F:Eto.Forms.DockPosition.Bottom">
            <summary>
            Element is docked to the bottom of the content.
            </summary>
        </member>
        <member name="T:Eto.Forms.FileDialogFilter">
            <summary>
            Filter definition for a <see cref="T:Eto.Forms.FileDialog"/>
            </summary>
            <remarks>
            Each filter defines an option for the user to limit the selection of files in the dialog.
            </remarks>
        </member>
        <member name="M:Eto.Forms.FileDialogFilter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Eto.Forms.FileFilter"/> class.
            </summary>
        </member>
        <member name="M:Eto.Forms.FileDialogFilter.#ctor(System.String,System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:Eto.Forms.FileFilter"/> class.
            </summary>
            <param name="name">Name of the filter to display to the user</param>
            <param name="extensions">Extensions of the files to filter by, including the dot for each</param>
        </member>
        <member name="T:Eto.Forms.FileDialog">
            <summary>
            Base file dialog class
            </summary>
        </member>
        <member name="P:Eto.Forms.FileDialog.FileName">
            <summary>
            Gets or sets the full name and path of the file that is selected
            </summary>
            <value>The name of the file.</value>
        </member>
        <member name="P:Eto.Forms.FileDialog.Filters">
            <summary>
            Gets the collection of available file filters the user can select from.
            </summary>
            <remarks>
            Add entries to this collection to set the filters the user can select when the file dialog is shown.
            
            Some platforms may either disable (OS X) or hide (GTK/WinForms/WPF) files that do not match the currently selected filter.
            </remarks>
            <seealso cref="P:Eto.Forms.FileDialog.CurrentFilterIndex"/>
            <seealso cref="P:Eto.Forms.FileDialog.CurrentFilter"/>
            <value>The filters the user can select.</value>
        </member>
        <member name="P:Eto.Forms.FileDialog.CurrentFilterIndex">
            <summary>
            Gets or sets the index of the current filter in the <see cref="P:Eto.Forms.FileDialog.Filters"/> collection
            </summary>
            <seealso cref="P:Eto.Forms.FileDialog.Filters"/>
            <seealso cref="P:Eto.Forms.FileDialog.CurrentFilter"/>
            <value>The index of the current filter, or -1 if none is selected.</value>
        </member>
        <member name="P:Eto.Forms.FileDialog.CurrentFilter">
            <summary>
            Gets or sets the currently selected filter from the <see cref="P:Eto.Forms.FileDialog.Filters"/> collection.
            </summary>
            <remarks>
            This should always match an instance of a filter in the <see cref="P:Eto.Forms.FileDialog.Filters"/> collection, otherwise
            the current filter will be set to null.
            </remarks>
            <seealso cref="P:Eto.Forms.FileDialog.Filters"/>
            <value>The current filter.</value>
        </member>
        <member name="P:Eto.Forms.FileDialog.CheckFileExists">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Eto.Forms.FileDialog"/> checks if the file exists 
            before the user can close the dialog.
            </summary>
            <value><c>true</c> to check if the file exists; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Eto.Forms.FileDialog.Title">
            <summary>
            Gets or sets the title of the dialog.
            </summary>
            <value>The title.</value>
        </member>
        <member name="P:Eto.Forms.FileDialog.Directory">
            <summary>
            Gets or sets the directory the file dialog will show files.
            </summary>
            <remarks>
            You can use <see cref="M:Eto.EtoEnvironment.GetFolderPath(Eto.EtoSpecialFolder)"/> to set the initial value of the directory,
            though the user should be able to change the folder and keep it
            </remarks>
            <value>The directory.</value>
        </member>
        <member name="T:Eto.Forms.FileDialog.IHandler">
            <summary>
            Handler interface for the <see cref="T:Eto.Forms.FileDialog"/> based widgets
            </summary>
        </member>
        <member name="P:Eto.Forms.FileDialog.IHandler.FileName">
            <summary>
            Gets or sets the full name and path of the file that is selected
            </summary>
            <value>The name of the file.</value>
        </member>
        <member name="P:Eto.Forms.FileDialog.IHandler.CurrentFilterIndex">
            <summary>
            Gets or sets the index of the current filter in the <see cref="P:Eto.Forms.FileDialog.Filters"/> collection
            </summary>
            <value>The index of the current filter.</value>
        </member>
        <member name="P:Eto.Forms.FileDialog.IHandler.CheckFileExists">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Eto.Forms.FileDialog"/> checks if the file exists 
            before the user can close the dialog.
            </summary>
            <value><c>true</c> to check if the file exists; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Eto.Forms.FileDialog.IHandler.Title">
            <summary>
            Gets or sets the title of the dialog.
            </summary>
            <value>The title.</value>
        </member>
        <member name="P:Eto.Forms.FileDialog.IHandler.Directory">
            <summary>
            Gets or sets the directory the file dialog will show files.
            </summary>
            <value>The directory.</value>
        </member>
        <member name="M:Eto.Forms.FileDialog.IHandler.InsertFilter(System.Int32,Eto.Forms.FileFilter)">
            <summary>
            Inserts a filter at the specified index
            </summary>
            <param name="index">Index to insert the filter</param>
            <param name="filter">Filter to insert</param>
        </member>
        <member name="M:Eto.Forms.FileDialog.IHandler.RemoveFilter(System.Int32)">
            <summary>
            Removes a filter at the specified index
            </summary>
            <param name="index">Index of the filter to remove</param>
        </member>
        <member name="M:Eto.Forms.FileDialog.IHandler.ClearFilters">
            <summary>
            Clears all filters
            </summary>
        </member>
        <member name="T:Eto.Forms.FileFilter">
            <summary>
            Filter definition for <see cref="T:Eto.Forms.FilePicker"/> and <see cref="T:Eto.Forms.FileDialog"/>
            </summary>
            <remarks>
            Each filter defines an option for the user to limit the selection of files in the dialog.
            </remarks>
        </member>
        <member name="M:Eto.Forms.FileFilter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Eto.Forms.FileFilter"/> class.
            </summary>
        </member>
        <member name="M:Eto.Forms.FileFilter.#ctor(System.String,System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:Eto.Forms.FileFilter"/> class.
            </summary>
            <param name="name">Name of the filter to display to the user</param>
            <param name="extensions">Extensions of the files to filter by, including the dot for each</param>
        </member>
        <member name="P:Eto.Forms.FileFilter.Name">
            <summary>
            Gets or sets the name of the filter.
            </summary>
            <value>The name of the filter.</value>
        </member>
        <member name="P:Eto.Forms.FileFilter.Extensions">
            <summary>
            Gets or sets the extensions to filter the file list
            </summary>
            <remarks>Each extension should include the period. e.g. ".jpeg", ".png", etc.</remarks>
            <value>The extensions.</value>
        </member>
        <member name="M:Eto.Forms.FileFilter.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:Eto.Forms.FileFilter"/>.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents the current <see cref="T:Eto.Forms.FileFilter"/>.</returns>
        </member>
        <member name="M:Eto.Forms.FileFilter.GetHashCode">
            <summary>
            Serves as a hash function for a <see cref="T:Eto.Forms.FileFilter"/> object.
            </summary>
            <returns>A hash code for this instance that is suitable for use in hashing algorithms and data structures such as a hash table.</returns>
        </member>
        <member name="M:Eto.Forms.FileFilter.op_Implicit(System.String)~Eto.Forms.FileFilter">
            <summary>
            Converts a string representation of a filter in the form of "[name]|[ext];[ext];[ext]" to a FileDialogFilter.
            </summary>
            <param name="filter">String representation of the file dialog filter</param>
            <returns>A new file dialog filter with the name and extensions specified in the <paramref name="filter"/> argument</returns>
        </member>
        <member name="T:Eto.Forms.ISelectionPreserver">
            <summary>
            Interface for a control that can preserve selected items
            </summary>
            <remarks>
            A selection preserver is used to save and restore the selected items when the data store changes
            dramatically after a sort or server-side filtering.
            Controls should implement <see cref="T:Eto.Forms.ISelectableControl`1"/> to create instances of the selection preserver.
            </remarks>
        </member>
        <member name="P:Eto.Forms.ISelectionPreserver.SelectedItems">
            <summary>
            Gets or sets the selected items in the control.
            </summary>
            <value>The selected items.</value>
        </member>
        <member name="T:Eto.Forms.ISelectable`1">
            <summary>
            Interface for an object that can select multiple items and rows.
            </summary>
            <seealso cref="T:Eto.Forms.SelectableFilterCollection`1"/>
        </member>
        <member name="P:Eto.Forms.ISelectable`1.SelectedItems">
            <summary>
            Gets the selected items.
            </summary>
            <value>The selected items.</value>
        </member>
        <member name="P:Eto.Forms.ISelectable`1.SelectedRows">
            <summary>
            Gets or sets the selected rows.
            </summary>
            <value>The selected rows.</value>
        </member>
        <member name="M:Eto.Forms.ISelectable`1.SelectRow(System.Int32)">
            <summary>
            Selects the specified <paramref name="row"/>.
            </summary>
            <param name="row">Row to select.</param>
        </member>
        <member name="M:Eto.Forms.ISelectable`1.UnselectRow(System.Int32)">
            <summary>
            Unselects the specified <paramref name="row"/>.
            </summary>
            <param name="row">Row to unselected.</param>
        </member>
        <member name="M:Eto.Forms.ISelectable`1.SelectAll">
            <summary>
            Selects all rows represented in the data store.
            </summary>
        </member>
        <member name="M:Eto.Forms.ISelectable`1.UnselectAll">
            <summary>
            Unselects all rows.
            </summary>
        </member>
        <member name="T:Eto.Forms.ISelectableControl`1">
            <summary>
            Interface for a control that can preserve its selection.
            </summary>
        </member>
        <member name="P:Eto.Forms.ISelectableControl`1.SelectionPreserver">
            <summary>
            Gets a new instance of a selection preserver.
            </summary>
            <remarks>
            This returns a selection preserver that can be used to save the selected items of a control.
            Typically, this is used when the selection may encompass items that are not visible in the control.
            </remarks>
            <value>The selection preserver.</value>
        </member>
        <member name="E:Eto.Forms.ISelectableControl`1.SelectedItemsChanged">
            <summary>
            Occurs when the <see cref="P:Eto.Forms.ISelectable`1.SelectedItems"/> is changed.
            </summary>
        </member>
        <member name="T:Eto.Forms.SelectableFilterCollection`1">
            <summary>
            Collection that can filter/sort the items, and keep a selection of items in the original list. 
            </summary>
            <remarks>
            This collection is useful when you want the selection to act independant of the filter.
            This class will keep the selected items based on the original list, not based on the filtered view.
            
            For example, if you select an item and set the filter that eliminates the item from the view, 
            the <see cref="P:Eto.Forms.SelectableFilterCollection`1.SelectedItems"/> will still return the same selected item until it is unselected from the view
            or from this class directly.
            </remarks>
            <copyright>(c) 2014 by Curtis Wensley</copyright>
            <copyright>(c) 2014 by Vivek Jhaveri</copyright>
            <license type="BSD-3">See LICENSE for full terms</license>
        </member>
        <member name="P:Eto.Forms.SelectableFilterCollection`1.Parent">
            <summary>
            Gets the parent that this collection is attached to.
            </summary>
            <value>The parent selectable control.</value>
        </member>
        <member name="M:Eto.Forms.SelectableFilterCollection`1.#ctor(Eto.Forms.ISelectableControl{System.Object},System.Collections.Generic.IList{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Eto.Forms.SelectableFilterCollection`1"/> class.
            </summary>
            <param name="parent">Parent to attach this instance to.</param>
            <param name="collection">Collection for the source of this collection.</param>
        </member>
        <member name="M:Eto.Forms.SelectableFilterCollection`1.#ctor(Eto.Forms.ISelectableControl{System.Object},System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Eto.Forms.SelectableFilterCollection`1"/> class.
            </summary>
            <param name="parent">Parent to attach this instance to.</param>
            <param name="collection">Collection for the source of this collection.</param>
        </member>
        <member name="M:Eto.Forms.SelectableFilterCollection`1.#ctor(Eto.Forms.ISelectableControl{System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:Eto.Forms.SelectableFilterCollection`1"/> class.
            </summary>
            <param name="parent">Parent to attach this instance to.</param>
        </member>
        <member name="M:Eto.Forms.SelectableFilterCollection`1.Rebuild">
            <summary>
            Rebuilds the filtered/sorted view of this collection
            </summary>
        </member>
        <member name="E:Eto.Forms.SelectableFilterCollection`1.SelectionChanged">
            <summary>
            Occurs when the selection changes.
            </summary>
        </member>
        <member name="M:Eto.Forms.SelectableFilterCollection`1.OnSelectionChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Eto.Forms.SelectableFilterCollection`1.SelectionChanged"/> event.
            </summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="P:Eto.Forms.SelectableFilterCollection`1.SelectedItems">
            <summary>
            Gets the selected items.
            </summary>
            <value>The selected items.</value>
        </member>
        <member name="P:Eto.Forms.SelectableFilterCollection`1.SelectedRows">
            <summary>
            Gets or sets the selected rows in the underlying list.
            </summary>
            <value>The selected rows in the underlying list.</value>
        </member>
        <member name="M:Eto.Forms.SelectableFilterCollection`1.SelectRow(System.Int32)">
            <summary>
            Selects the specified <paramref name="row"/> in the underlying list.
            </summary>
            <param name="row">Row to select.</param>
        </member>
        <member name="M:Eto.Forms.SelectableFilterCollection`1.UnselectRow(System.Int32)">
            <summary>
            Unselects the specified <paramref name="row"/> in the underlying list.
            </summary>
            <param name="row">Row to unselect.</param>
        </member>
        <member name="M:Eto.Forms.SelectableFilterCollection`1.UnselectAll">
            <summary>
            Unselects all rows.
            </summary>
        </member>
        <member name="M:Eto.Forms.SelectableFilterCollection`1.SelectAll">
            <summary>
            Selects all rows in the underlying list.
            </summary>
        </member>
        <member name="M:Eto.Forms.SelectableFilterCollection`1.Clear">
            <summary>
            Clear this collection.
            </summary>
        </member>
        <member name="M:Eto.Forms.SelectableFilterCollection`1.Remove(`0)">
            <summary>
            Remove the specified item from this collection.
            </summary>
            <param name="item">Item to remove.</param>
        </member>
        <member name="M:Eto.Forms.SelectableFilterCollection`1.RemoveAt(System.Int32)">
            <summary>
            Removes the item at the specified <paramref name="index"/>.
            </summary>
            <param name="index">Index of the item to remove in this collection.</param>
        </member>
        <member name="T:Eto.Forms.FilterCollection`1">
            <summary>
            Collection that supports filtering and sorting
            </summary>
            <copyright>(c) 2014 by Curtis Wensley</copyright>
            <license type="BSD-3">See LICENSE for full terms</license>
        </member>
        <member name="P:Eto.Forms.FilterCollection`1.Items">
            <summary>
            Gets the underlying list of items that the filtered collection is based off.
            If you change this list, you must call <see cref="M:Eto.Forms.FilterCollection`1.Rebuild"/> to update the filtered collection.
            </summary>
            <value>The underlying items.</value>
        </member>
        <member name="P:Eto.Forms.FilterCollection`1.HasFilterOrSort">
            <summary>
            Gets a value indicating whether this instance has filtering or sorting.
            </summary>
            <value><c>true</c> if this instance is filtered or sorted; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Eto.Forms.FilterCollection`1.Change">
            <summary>
            Gets or sets the delegate to create a change object each time the collection is filtered.
            </summary>
            <remarks>
            This is used so you can perform operations before or after a change has been made to the collection.
            The return value of the delegate is disposed after the change, allowing the object to perform any operations
            afterwards.
            </remarks>
            <value>The change delegate.</value>
        </member>
        <member name="M:Eto.Forms.FilterCollection`1.CreateChange">
            <summary>
            Creates a change object before any change is made to the filter collection.
            </summary>
            <remarks>
            This should be disposed after the change is completed.
            </remarks>
            <returns>The change instance.</returns>
        </member>
        <member name="P:Eto.Forms.FilterCollection`1.Filter">
            <summary>
            Gets or sets the filter delegate for items in this collection.
            </summary>
            <remarks>
            This will update this collection to contain only items that match the specified filter from the underlying list.
            This triggers a collection changed event, so any control that is using this collection as its data store should
            automatically update to show the new results.
            </remarks>
            <value>The filter delegate.</value>
        </member>
        <member name="P:Eto.Forms.FilterCollection`1.Sort">
            <summary>
            Gets or sets the sort.
            </summary>
            <value>The sort.</value>
        </member>
        <member name="E:Eto.Forms.FilterCollection`1.CollectionChanged">
            <summary>
            Occurs when the collection is changed.
            </summary>
        </member>
        <member name="M:Eto.Forms.FilterCollection`1.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Raises the <see cref="E:Eto.Forms.FilterCollection`1.CollectionChanged"/> event.
            </summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:Eto.Forms.FilterCollection`1.Rebuild">
            <summary>
            Rebuilds the filtered/sorted view of this collection
            </summary>
        </member>
        <member name="M:Eto.Forms.FilterCollection`1.Refresh">
            <summary>
            Refreshes the list by applying the filter and sort to the contained items
            </summary>
            <remarks>
            This is useful when the state of the items change, or your filter delegate is dynamic and isn't set
            each time it changes.
            </remarks>
        </member>
        <member name="M:Eto.Forms.FilterCollection`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Eto.Forms.FilterCollection`1"/> class with the specified <paramref name="collection"/>.
            </summary>
            <param name="collection">Collection of items as the source of this collection.</param>
        </member>
        <member name="M:Eto.Forms.FilterCollection`1.#ctor(System.Collections.Generic.IList{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Eto.Forms.FilterCollection`1"/> class with the specified <paramref name="list"/>
            which will keep in sync with any changes to the filtered collection.
            </summary>
            <param name="list">List to keep in sync with this filtered collection.</param>
        </member>
        <member name="M:Eto.Forms.FilterCollection`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Eto.Forms.FilterCollection`1"/> class.
            </summary>
        </member>
        <member name="M:Eto.Forms.FilterCollection`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Adds the specified <paramref name="items"/> to the collection.
            </summary>
            <remarks>
            Any item that does not match the existing <see cref="P:Eto.Forms.FilterCollection`1.Filter"/> will be only added to the underlying collection
            and not be visible in the filtered collection.
            </remarks>
            <param name="items">Items to add to the collection.</param>
        </member>
        <member name="M:Eto.Forms.FilterCollection`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Inserts the <paramref name="items"/> to the collection at the specified <paramref name="index"/>.
            </summary>
            <remarks>
            Any item that does not match the existing <see cref="P:Eto.Forms.FilterCollection`1.Filter"/> will be only added to the underlying collection
            and not be visible in the filtered collection.
            </remarks>
            <param name="index">Index to start adding the items.</param>
            <param name="items">Items to add to the collection.</param>
        </member>
        <member name="M:Eto.Forms.FilterCollection`1.IndexOf(`0)">
            <summary>
            Determines the index of a specific item in the collection.
            </summary>
            <returns>Index of the item if found, or -1 if not found.</returns>
            <param name="item">Item to find the index of.</param>
        </member>
        <member name="M:Eto.Forms.FilterCollection`1.Insert(System.Int32,`0)">
            <summary>
            Insert the item at the specified index.
            </summary>
            <param name="index">Index to insert at.</param>
            <param name="item">Item to insert.</param>
        </member>
        <member name="M:Eto.Forms.FilterCollection`1.RemoveAt(System.Int32)">
            <summary>
            Removes the item at the specified index.
            </summary>
            <param name="index">Index of the item to remove.</param>
        </member>
        <member name="P:Eto.Forms.FilterCollection`1.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:Eto.Forms.FilterCollection`1"/> at the specified index.
            </summary>
            <param name="index">Index of the item to get/set.</param>
        </member>
        <member name="M:Eto.Forms.FilterCollection`1.Add(`0)">
            <summary>
            Add the specified item to the collection.
            </summary>
            <param name="item">Item to add.</param>
        </member>
        <member name="M:Eto.Forms.FilterCollection`1.Clear">
            <summary>
            Clears the items from the collection.
            </summary>
        </member>
        <member name="M:Eto.Forms.FilterCollection`1.Contains(`0)">
            <summary>
            Gets a value indicating that the specified <paramref name="item"/> is contained within this collection.
            </summary>
            <param name="item">Item to find.</param>
        </member>
        <member name="M:Eto.Forms.FilterCollection`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the current filtered collection to the specified array.
            </summary>
            <param name="array">Array to copy to.</param>
            <param name="arrayIndex">Index in the array to start copying to.</param>
        </member>
        <member name="M:Eto.Forms.FilterCollection`1.Remove(`0)">
            <summary>
            Remove the specified item from the collection.
            </summary>
            <param name="item">Item to remove.</param>
        </member>
        <member name="P:Eto.Forms.FilterCollection`1.Count">
            <summary>
            Gets the count of items in the collection.
            </summary>
            <value>The count of items.</value>
        </member>
        <member name="P:Eto.Forms.FilterCollection`1.IsReadOnly">
            <summary>
            Gets a value indicating whether this collection is read only.
            </summary>
            <value><c>true</c> if this collection is read only; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Eto.Forms.FilterCollection`1.GetEnumerator">
            <summary>
            Gets the enumerator for the collection.
            </summary>
            <returns>The enumerator.</returns>
        </member>
        <member name="T:Eto.Forms.FontDialog">
            <summary>
            Dialog for a user to pick a font and style
            </summary>
            <remarks>
            The font dialog on some platforms may run asynchronously, and return immediately after
            the <see cref="M:Eto.Forms.CommonDialog.ShowDialog(Eto.Forms.Control)"/> call. For example, on OS X the font dialog is a non-modal
            shared tool window that stays on the screen until the user dismisses it.
            
            You should always handle the <see cref="E:Eto.Forms.FontDialog.FontChanged"/> event to determine when the value has changed.
            </remarks>
        </member>
        <member name="F:Eto.Forms.FontDialog.FontChangedEvent">
            <summary>
            Identifier for handlers when attaching the <see cref="E:Eto.Forms.FontDialog.FontChanged"/> event.
            </summary>
        </member>
        <member name="E:Eto.Forms.FontDialog.FontChanged">
            <summary>
            Occurs when the <see cref="P:Eto.Forms.FontDialog.Font"/> is changed.
            </summary>
        </member>
        <member name="M:Eto.Forms.FontDialog.OnFontChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Eto.Forms.FontDialog.FontChanged"/> event.
            </summary>
            <param name="e">E.</param>
        </member>
        <member name="P:Eto.Forms.FontDialog.Font">
            <summary>
            Gets or sets the currently selected font.
            </summary>
            <value>The selected font.</value>
        </member>
        <member name="M:Eto.Forms.FontDialog.GetCallback">
            <summary>
            Gets an instance of an object used to perform callbacks to the widget from handler implementations
            </summary>
            <returns>The callback.</returns>
        </member>
        <member name="T:Eto.Forms.FontDialog.ICallback">
            <summary>
            Callback interface for handlers of the <see cref="T:Eto.Forms.FontDialog"/>.
            </summary>
        </member>
        <member name="M:Eto.Forms.FontDialog.ICallback.OnFontChanged(Eto.Forms.FontDialog,System.EventArgs)">
            <summary>
            Raises the font changed event.
            </summary>
        </member>
        <member name="T:Eto.Forms.FontDialog.Callback">
            <summary>
            Callback implementation for handlers of the <see cref="T:Eto.Forms.FontDialog"/>.
            </summary>
        </member>
        <member name="M:Eto.Forms.FontDialog.Callback.OnFontChanged(Eto.Forms.FontDialog,System.EventArgs)">
            <summary>
            Raises the font changed event.
            </summary>
        </member>
        <member name="T:Eto.Forms.FontDialog.IHandler">
            <summary>
            Handler interface for the <see cref="T:Eto.Forms.FontDialog"/>.
            </summary>
        </member>
        <member name="P:Eto.Forms.FontDialog.IHandler.Font">
            <summary>
            Gets or sets the currently selected font.
            </summary>
            <value>The selected font.</value>
        </member>
        <member name="T:Eto.Forms.Form">
            <summary>
            Non-modal form window
            </summary>
            <seealso cref="T:Eto.Forms.Dialog"/>
        </member>
        <member name="M:Eto.Forms.Form.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Eto.Forms.Form"/> class.
            </summary>
        </member>
        <member name="M:Eto.Forms.Form.#ctor(Eto.Forms.Form.IHandler)">
            <summary>
            Initializes a new instance of the <see cref="T:Eto.Forms.Form"/> class with the specified <paramref name="handler"/>
            </summary>
            <param name="handler">Handler to use as the implementation of the form.</param>
        </member>
        <member name="P:Eto.Forms.Form.ShowActivated">
            <summary>
            Gets or sets a value indicating that the form should be activated when initially shown.
            </summary>
            <remarks>
            When <c>true</c>, the form will become the active/focussed window when the <see cref="M:Eto.Forms.Form.Show"/> method is called.
            When <c>false</c>, the form will show but will not get focus until the user clicks on the form.
            </remarks>
            <seealso cref="P:Eto.Forms.Form.CanFocus"/>
        </member>
        <member name="P:Eto.Forms.Form.CanFocus">
            <summary>
            Gets or sets a value indicating that this form can get keyboard/input focus when the user clicks on it or any child control.
            </summary>
            <remarks>
            This is useful for windows that provide interaction but do not steal focus from the current window, such as a tooltip, popover, etc.
            </remarks>
            <value><c>true</c> if the form can get focus; otherwise, <c>false</c>.</value>
            <seealso cref="P:Eto.Forms.Form.ShowActivated"/>
        </member>
        <member name="M:Eto.Forms.Form.Show">
            <summary>
            Show the form
            </summary>
        </member>
        <member name="T:Eto.Forms.Form.IHandler">
            <summary>
            Interface handler for the <see cref="T:Eto.Forms.Form"/> control
            </summary>
        </member>
        <member name="M:Eto.Forms.Form.IHandler.Show">
            <summary>
            Show the form
            </summary>
        </member>
        <member name="P:Eto.Forms.Form.IHandler.ShowActivated">
            <summary>
            Gets or sets a value indicating that the form should be activated when initially shown.
            </summary>
            <remarks>
            When <c>true</c>, the form will become the active/focussed window when the <see cref="M:Eto.Forms.Form.IHandler.Show"/> method is called.
            When <c>false</c>, the form will show but will not get focus until the user clicks on the form.
            </remarks>
            <seealso cref="P:Eto.Forms.Form.IHandler.CanFocus"/>
        </member>
        <member name="P:Eto.Forms.Form.IHandler.CanFocus">
            <summary>
            Gets or sets a value indicating that this form can get keyboard/input focus when the user clicks on it or any child control.
            </summary>
            <remarks>
            This is useful for windows that provide interaction but do not steal focus from the current window, such as a tooltip, popover, etc.
            </remarks>
            <value><c>true</c> if the form can get focus; otherwise, <c>false</c>.</value>
            <seealso cref="P:Eto.Forms.Form.IHandler.ShowActivated"/>
        </member>
        <member name="T:Eto.Forms.IDataStore`1">
            <summary>
            Base data store interface to bind to a collection of objects of a particular type.
            </summary>
            <remarks>
            Note that you should use an <see cref="T:System.Collections.ObjectModel.ObservableCollection`1"/> if you want
            the control to respond to changes of the collection.
            </remarks>
        </member>
        <member name="P:Eto.Forms.IDataStore`1.Count">
            <summary>
            Gets the number of items in this data store.
            </summary>
            <value>The count of items.</value>
        </member>
        <member name="P:Eto.Forms.IDataStore`1.Item(System.Int32)">
            <summary>
            Gets the object at the specified index.
            </summary>
            <param name="index">Index of the item to get.</param>
        </member>
        <member name="T:Eto.Forms.DataStoreCollection`1">
            <summary>
            Collection of items that implements the <see cref="T:Eto.Forms.IDataStore`1"/> interface
            </summary>
        </member>
        <member name="M:Eto.Forms.DataStoreCollection`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Eto.Forms.DataStoreCollection`1"/> class.
            </summary>
        </member>
        <member name="M:Eto.Forms.DataStoreCollection`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Eto.Forms.DataStoreCollection`1"/> class with the specified items.
            </summary>
            <param name="items">Items to initialize the collection with.</param>
        </member>
        <member name="T:Eto.Forms.IKeyboardInputSource">
            <summary>
            Defines an interface for controls or classes that implement keyboard events.
            </summary>
        </member>
        <member name="E:Eto.Forms.IKeyboardInputSource.KeyUp">
            <summary>
            Occurs when a key was released
            </summary>
        </member>
        <member name="E:Eto.Forms.IKeyboardInputSource.KeyDown">
            <summary>
            Occurs when a key has been pressed and is down
            </summary>
        </member>
        <member name="E:Eto.Forms.IKeyboardInputSource.TextInput">
            <summary>
            Occurs when text is input for the control.
            </summary>
        </member>
        <member name="T:Eto.Forms.IMouseInputSource">
            <summary>
            Defines an interface for controls or classes that implement mouse events.
            </summary>
        </member>
        <member name="E:Eto.Forms.IMouseInputSource.MouseUp">
            <summary>
            Occurs when a mouse button is released
            </summary>
        </member>
        <member name="E:Eto.Forms.IMouseInputSource.MouseMove">
            <summary>
            Occurs when mouse moves within the bounds of the control, or when the mouse is captured
            </summary>
            <remarks>
            The mouse is captured after a <see cref="E:Eto.Forms.IMouseInputSource.MouseDown"/> event within the control, 
            and is released when the mouse button is released
            </remarks>
        </member>
        <member name="E:Eto.Forms.IMouseInputSource.MouseEnter">
            <summary>
            Occurs when the mouse enters the bounds of the control
            </summary>
        </member>
        <member name="E:Eto.Forms.IMouseInputSource.MouseLeave">
            <summary>
            Occurs when mouse leaves the bounds of the control
            </summary>
        </member>
        <member name="E:Eto.Forms.IMouseInputSource.MouseDown">
            <summary>
            Occurs when a mouse button has been pressed
            </summary>
            <remarks>
            Controls will typically capture the mouse after a mouse button is pressed and will be released
            only after the <see cref="E:Eto.Forms.IMouseInputSource.MouseUp"/> event.
            </remarks>
        </member>
        <member name="E:Eto.Forms.IMouseInputSource.MouseDoubleClick">
            <summary>
            Occurs when a mouse button is double clicked within the bounds of the control
            </summary>
            <remarks>
            If you do not set the <see cref="P:Eto.Forms.MouseEventArgs.Handled"/> property to true, and the default behaviour of
            the control does not accept double clicks, the <see cref="E:Eto.Forms.IMouseInputSource.MouseDown"/> event will be called for each click of
            the mouse button. 
            
            For example, if the user clicks twice in succession, the following will be called:
            1. MouseDown for the first click
            2. MouseDoubleClick for the second click
            3. If Handled has not been set in #2, MouseDown will be called a 2nd time
            </remarks>
        </member>
        <member name="E:Eto.Forms.IMouseInputSource.MouseWheel">
            <summary>
            Occurs when mouse wheel has been changed
            </summary>
        </member>
        <member name="T:Eto.Forms.Keys">
            <summary>
            Enumeration of values that correspond to physical keys on a keyboard
            </summary>
        </member>
        <member name="F:Eto.Forms.Keys.None">
            <summary>No key</summary>
        </member>
        <member name="F:Eto.Forms.Keys.A">
            <summary>The A key</summary>
        </member>
        <member name="F:Eto.Forms.Keys.B">
            <summary>The B key</summary>
        </member>
        <member name="F:Eto.Forms.Keys.C">
            <summary>The C key</summary>
        </member>
        <member name="F:Eto.Forms.Keys.D">
            <summary>The D key</summary>
        </member>
        <member name="F:Eto.Forms.Keys.E">
            <summary>The E key</summary>
        </member>
        <member name="F:Eto.Forms.Keys.F">
            <summary>The F key</summary>
        </member>
        <member name="F:Eto.Forms.Keys.G">
            <summary>The G key</summary>
        </member>
        <member name="F:Eto.Forms.Keys.H">
            <summary>The H key</summary>
        </member>
        <member name="F:Eto.Forms.Keys.I">
            <summary>The I key</summary>
        </member>
        <member name="F:Eto.Forms.Keys.J">
            <summary>The J key</summary>
        </member>
        <member name="F:Eto.Forms.Keys.K">
            <summary>The K key</summary>
        </member>
        <member name="F:Eto.Forms.Keys.L">
            <summary>The L key</summary>
        </member>
        <member name="F:Eto.Forms.Keys.M">
            <summary>The M key</summary>
        </member>
        <member name="F:Eto.Forms.Keys.N">
            <summary>The N key</summary>
        </member>
        <member name="F:Eto.Forms.Keys.O">
            <summary>The O key</summary>
        </member>
        <member name="F:Eto.Forms.Keys.P">
            <summary>The P key</summary>
        </member>
        <member name="F:Eto.Forms.Keys.Q">
            <summary>The Q key</summary>
        </member>
        <member name="F:Eto.Forms.Keys.R">
            <summary>The R key</summary>
        </member>
        <member name="F:Eto.Forms.Keys.S">
            <summary>The S key</summary>
        </member>
        <member name="F:Eto.Forms.Keys.T">
            <summary>The T key</summary>
        </member>
        <member name="F:Eto.Forms.Keys.U">
            <summary>The U key</summary>
        </member>
        <member name="F:Eto.Forms.Keys.V">
            <summary>The V key</summary>
        </member>
        <member name="F:Eto.Forms.Keys.W">
            <summary>The W key</summary>
        </member>
        <member name="F:Eto.Forms.Keys.X">
            <summary>The X key</summary>
        </member>
        <member name="F:Eto.Forms.Keys.Y">
            <summary>The Y key</summary>
        </member>
        <member name="F:Eto.Forms.Keys.Z">
            <summary>The Z key</summary>
        </member>
        <member name="F:Eto.Forms.Keys.F1">
            <summary>The F1 key</summary>
        </member>
        <member name="F:Eto.Forms.Keys.F2">
            <summary>The F2 key</summary>
        </member>
        <member name="F:Eto.Forms.Keys.F3">
            <summary>The F3 key</summary>
        </member>
        <member name="F:Eto.Forms.Keys.F4">
            <summary>The F4 key</summary>
        </member>
        <member name="F:Eto.Forms.Keys.F5">
            <summary>The F5 key</summary>
        </member>
        <member name="F:Eto.Forms.Keys.F6">
            <summary>The F6 key</summary>
        </member>
        <member name="F:Eto.Forms.Keys.F7">
            <summary>The F7 key</summary>
        </member>
        <member name="F:Eto.Forms.Keys.F8">
            <summary>The F8 key</summary>
        </member>
        <member name="F:Eto.Forms.Keys.F9">
            <summary>The F9 key</summary>
        </member>
        <member name="F:Eto.Forms.Keys.F10">
            <summary>The F10 key</summary>
        </member>
        <member name="F:Eto.Forms.Keys.F11">
            <summary>The F11 key</summary>
        </member>
        <member name="F:Eto.Forms.Keys.F12">
            <summary>The F12 key</summary>
        </member>
        <member name="F:Eto.Forms.Keys.D0">
            <summary>The 0 digit key</summary>
        </member>
        <member name="F:Eto.Forms.Keys.D1">
            <summary>The 1 digit key</summary>
        </member>
        <member name="F:Eto.Forms.Keys.D2">
            <summary>The 2 digit key</summary>
        </member>
        <member name="F:Eto.Forms.Keys.D3">
            <summary>The 3 digit key</summary>
        </member>
        <member name="F:Eto.Forms.Keys.D4">
            <summary>The 4 digit key</summary>
        </member>
        <member name="F:Eto.Forms.Keys.D5">
            <summary>The 5 digit key</summary>
        </member>
        <member name="F:Eto.Forms.Keys.D6">
            <summary>The 6 digit key</summary>
        </member>
        <member name="F:Eto.Forms.Keys.D7">
            <summary>The 7 digit key</summary>
        </member>
        <member name="F:Eto.Forms.Keys.D8">
            <summary>The 8 digit key</summary>
        </member>
        <member name="F:Eto.Forms.Keys.D9">
            <summary>The 9 digit key</summary>
        </member>
        <member name="F:Eto.Forms.Keys.Minus">
            <summary>The Minus '-' key</summary>
        </member>
        <member name="F:Eto.Forms.Keys.Plus">
            <summary>The Plus '+' Key, which usually produces an '=' when pressed without shift and is beside the backspace key.</summary>
        </member>
        <member name="F:Eto.Forms.Keys.Grave">
            <summary>The Grave '`' key</summary>
        </member>
        <member name="F:Eto.Forms.Keys.Insert">
            <summary>The Insert key</summary>
        </member>
        <member name="F:Eto.Forms.Keys.Home">
            <summary>The Home key</summary>
        </member>
        <member name="F:Eto.Forms.Keys.PageUp">
            <summary>The Page Up key</summary>
        </member>
        <member name="F:Eto.Forms.Keys.PageDown">
            <summary>The Page Down key</summary>
        </member>
        <member name="F:Eto.Forms.Keys.Delete">
            <summary>The Delete key</summary>
        </member>
        <member name="F:Eto.Forms.Keys.End">
            <summary>The End key</summary>
        </member>
        <member name="F:Eto.Forms.Keys.Divide">
            <summary>The Divide '/' key, usually on the keypad/number pad</summary>
        </member>
        <member name="F:Eto.Forms.Keys.Decimal">
            <summary>The Decimal '.' key, usually on the keypad/number pad</summary>
        </member>
        <member name="F:Eto.Forms.Keys.Backspace">
            <summary>The Backspace key</summary>
        </member>
        <member name="F:Eto.Forms.Keys.Up">
            <summary>The Up key</summary>
        </member>
        <member name="F:Eto.Forms.Keys.Down">
            <summary>The Down key</summary>
        </member>
        <member name="F:Eto.Forms.Keys.Left">
            <summary>The Left key</summary>
        </member>
        <member name="F:Eto.Forms.Keys.Right">
            <summary>The Right key</summary>
        </member>
        <member name="F:Eto.Forms.Keys.Tab">
            <summary>The Tab key</summary>
        </member>
        <member name="F:Eto.Forms.Keys.Space">
            <summary>The Space key</summary>
        </member>
        <member name="F:Eto.Forms.Keys.CapsLock">
            <summary>The Caps Lock key</summary>
        </member>
        <member name="F:Eto.Forms.Keys.ScrollLock">
            <summary>The Scroll Lock key</summary>
        </member>
        <member name="F:Eto.Forms.Keys.PrintScreen">
            <summary>The Print Screen key</summary>
        </member>
        <member name="F:Eto.Forms.Keys.NumberLock">
            <summary>The Number Lock key</summary>
        </member>
        <member name="F:Eto.Forms.Keys.Enter">
            <summary>The Enter key</summary>
        </member>
        <member name="F:Eto.Forms.Keys.Escape">
            <summary>The Escape key</summary>
        </member>
        <member name="F:Eto.Forms.Keys.Multiply">
            <summary>The Multiply '*' key, usually on the keypad/number pad</summary>
        </member>
        <member name="F:Eto.Forms.Keys.Add">
            <summary>The Add '+' key, usually on the keypad/number pad</summary>
        </member>
        <member name="F:Eto.Forms.Keys.Subtract">
            <summary>The Subtract '-' key, usually on the keypad/number pad</summary>
        </member>
        <member name="F:Eto.Forms.Keys.Help">
            <summary>The Help key</summary>
        </member>
        <member name="F:Eto.Forms.Keys.Pause">
            <summary>The Pause key</summary>
        </member>
        <member name="F:Eto.Forms.Keys.Clear">
            <summary>The Clear key</summary>
        </member>
        <member name="F:Eto.Forms.Keys.KeypadEqual">
            <summary>The Equal '=' key on the keypad/number pad</summary>
        </member>
        <member name="F:Eto.Forms.Keys.Menu">
            <summary>The menu (alt) key</summary>
        </member>
        <member name="F:Eto.Forms.Keys.Backslash">
            <summary>The Backslash '\' key</summary>
        </member>
        <member name="F:Eto.Forms.Keys.Equal">
            <summary>The Equal '=' key</summary>
        </member>
        <member name="F:Eto.Forms.Keys.Semicolon">
            <summary>The Semicolon ';' key</summary>
        </member>
        <member name="F:Eto.Forms.Keys.Quote">
            <summary>The Quote ''' key</summary>
        </member>
        <member name="F:Eto.Forms.Keys.Comma">
            <summary>The Comma ',' key</summary>
        </member>
        <member name="F:Eto.Forms.Keys.Period">
            <summary>The Period '.' key</summary>
        </member>
        <member name="F:Eto.Forms.Keys.ForwardSlash">
            <summary>The Forward Slash '/' key</summary>
        </member>
        <member name="F:Eto.Forms.Keys.Slash">
            <summary>The Slash '/' key</summary>
        </member>
        <member name="F:Eto.Forms.Keys.RightBracket">
            <summary>The Right Bracket ']' key</summary>
        </member>
        <member name="F:Eto.Forms.Keys.LeftBracket">
            <summary>The Left Bracket '['  key</summary>
        </member>
        <member name="F:Eto.Forms.Keys.ContextMenu">
            <summary>The context menu key</summary>
        </member>
        <member name="F:Eto.Forms.Keys.Keypad0">
            <summary>The keypad/number pad '0' key</summary>
        </member>
        <member name="F:Eto.Forms.Keys.Keypad1">
            <summary>The keypad/number pad '1' key</summary>
        </member>
        <member name="F:Eto.Forms.Keys.Keypad2">
            <summary>The keypad/number pad '2' key</summary>
        </member>
        <member name="F:Eto.Forms.Keys.Keypad3">
            <summary>The keypad/number pad '3' key</summary>
        </member>
        <member name="F:Eto.Forms.Keys.Keypad4">
            <summary>The keypad/number pad '4' key</summary>
        </member>
        <member name="F:Eto.Forms.Keys.Keypad5">
            <summary>The keypad/number pad '5' key</summary>
        </member>
        <member name="F:Eto.Forms.Keys.Keypad6">
            <summary>The keypad/number pad '6' key</summary>
        </member>
        <member name="F:Eto.Forms.Keys.Keypad7">
            <summary>The keypad/number pad '7' key</summary>
        </member>
        <member name="F:Eto.Forms.Keys.Keypad8">
            <summary>The keypad/number pad '8' key</summary>
        </member>
        <member name="F:Eto.Forms.Keys.Keypad9">
            <summary>The keypad/number pad '9' key</summary>
        </member>
        <member name="F:Eto.Forms.Keys.Shift">
            <summary>The Shift Key Modifier</summary>
        </member>
        <member name="F:Eto.Forms.Keys.Alt">
            <summary>The Alt Key Modifier</summary>
        </member>
        <member name="F:Eto.Forms.Keys.Control">
            <summary>The Control Key Modifier</summary>
        </member>
        <member name="F:Eto.Forms.Keys.Application">
            <summary>The Application/Windows Key Modifier</summary>
        </member>
        <member name="F:Eto.Forms.Keys.ModifierMask">
            <summary>The mask for the modifiers (<see cref="F:Eto.Forms.Keys.Shift"/>/<see cref="F:Eto.Forms.Keys.Alt"/>/<see cref="F:Eto.Forms.Keys.Control"/>/<see cref="F:Eto.Forms.Keys.Application"/>)</summary>
        </member>
        <member name="F:Eto.Forms.Keys.KeyMask">
            <summary>The mask for the key value without modifiers</summary>
        </member>
        <member name="T:Eto.Forms.KeysExtensions">
            <summary>
            Extensions for the <see cref="T:Eto.Forms.Keys"/> enumeration
            </summary>
        </member>
        <member name="M:Eto.Forms.KeysExtensions.ToShortcutString(Eto.Forms.Keys,System.String)">
            <summary>
            Converts the specified key to a shortcut string such as Ctrl+Alt+Z
            </summary>
            <param name="key">Key to convert</param>
            <param name="separator">Separator between each modifier and key</param>
            <returns>A human-readable string representing the key combination including modifiers</returns>
        </member>
        <member name="T:Eto.Forms.Keyboard">
            <summary>
            General keyboard methods
            </summary>
        </member>
        <member name="P:Eto.Forms.Keyboard.SupportedLockKeys">
            <summary>
            Gets an enumeration of all keys supported by the <see cref="M:Eto.Forms.Keyboard.IsKeyLocked(Eto.Forms.Keys)"/> method.
            </summary>
            <value>The supported lock keys.</value>
        </member>
        <member name="M:Eto.Forms.Keyboard.IsKeyLocked(Eto.Forms.Keys)">
            <summary>
            Determines if the specified <paramref name="key"/> is in a locked state, such as the <see cref="F:Eto.Forms.Keys.CapsLock"/>, 
            <see cref="F:Eto.Forms.Keys.ScrollLock"/>, <see cref="F:Eto.Forms.Keys.NumberLock"/>, or <see cref="F:Eto.Forms.Keys.Insert"/> key.
            </summary>
            <returns><c>true</c> if the specified key is locked; otherwise, <c>false</c>.</returns>
            <param name="key">Key to determine the state.</param>
        </member>
        <member name="P:Eto.Forms.Keyboard.Modifiers">
            <summary>
            Gets the current modifier state for keys such as <see cref="F:Eto.Forms.Keys.Control"/>, <see cref="F:Eto.Forms.Keys.Alt"/> and <see cref="F:Eto.Forms.Keys.Shift"/>.
            </summary>
            <remarks>
            This typically will only return a value for the current event, such as during a mouse or keyboard event.
            </remarks>
        </member>
        <member name="T:Eto.Forms.Keyboard.IHandler">
            <summary>
            Handler for platforms to implement the <see cref="T:Eto.Forms.Keyboard"/> functionality.
            </summary>
        </member>
        <member name="P:Eto.Forms.Keyboard.IHandler.SupportedLockKeys">
            <summary>
            Gets an enumeration of all keys supported by the <see cref="M:Eto.Forms.Keyboard.IHandler.IsKeyLocked(Eto.Forms.Keys)"/> method.
            </summary>
            <value>The supported lock keys.</value>
        </member>
        <member name="M:Eto.Forms.Keyboard.IHandler.IsKeyLocked(Eto.Forms.Keys)">
            <summary>
            Determines if the specified <paramref name="key"/> is in a locked state, such as the <see cref="F:Eto.Forms.Keys.CapsLock"/>, 
            <see cref="F:Eto.Forms.Keys.ScrollLock"/>, <see cref="F:Eto.Forms.Keys.NumberLock"/>, or <see cref="F:Eto.Forms.Keys.Insert"/> key.
            </summary>
            <returns><c>true</c> if the specified key is locked; otherwise, <c>false</c>.</returns>
            <param name="key">Key to determine the state.</param>
        </member>
        <member name="P:Eto.Forms.Keyboard.IHandler.Modifiers">
            <summary>
            Gets the current modifier state for keys such as <see cref="F:Eto.Forms.Keys.Control"/>, <see cref="F:Eto.Forms.Keys.Alt"/> and <see cref="F:Eto.Forms.Keys.Shift"/>.
            </summary>
            <remarks>
            This typically will only return a value for the current event, such as during a mouse or keyboard event.
            </remarks>
        </member>
        <member name="T:Eto.Forms.DynamicControl">
            <summary>
            Control item for the <see cref="T:Eto.Forms.DynamicLayout"/>
            </summary>
        </member>
        <member name="M:Eto.Forms.DynamicControl.Create(Eto.Forms.DynamicLayout)">
            <summary>
            Creates the content for this item
            </summary>
            <param name="layout">Top level layout the item is being created for</param>
        </member>
        <member name="P:Eto.Forms.DynamicControl.Control">
            <summary>
            Gets or sets the control that this item contains
            </summary>
            <value>The control.</value>
        </member>
        <member name="T:Eto.Forms.DynamicItem">
            <summary>
            Base item for the <see cref="T:Eto.Forms.DynamicLayout"/>
            </summary>
        </member>
        <member name="P:Eto.Forms.DynamicItem.XScale">
            <summary>
            Gets or sets the horizontal scale of the item
            </summary>
            <remarks>
            When true, the control takes up all remaining horizontal space available.
            If there is more than one item with this set to true, then they share the remaining space equally.
            </remarks>
            <value>The horizontal scale.</value>
        </member>
        <member name="P:Eto.Forms.DynamicItem.YScale">
            <summary>
            Gets or sets the vertical scale of the item
            </summary>
            <remarks>
            When true, the control takes up all remaining vertical space available.
            If there is more than one item with this set to true, then they share the remaining space equally.
            </remarks>
            <value>The vertical scale.</value>
        </member>
        <member name="M:Eto.Forms.DynamicItem.Create(Eto.Forms.DynamicLayout)">
            <summary>
            Creates the content for this item
            </summary>
            <param name="layout">Top level layout the item is being created for</param>
        </member>
        <member name="M:Eto.Forms.DynamicItem.Create(Eto.Forms.DynamicLayout,Eto.Forms.TableLayout,System.Int32,System.Int32)">
            <summary>
            Create the item and add to the specified layout and co-ordinates
            </summary>
            <param name="layout">Top level layout</param>
            <param name="parent">Parent table to add this item to</param>
            <param name="x">The x coordinate in the table to add to</param>
            <param name="y">The y coordinate in the table to add to</param>
        </member>
        <member name="M:Eto.Forms.DynamicItem.op_Implicit(Eto.Forms.Control)~Eto.Forms.DynamicItem">
            <summary>
            Converts a control to a DynamicItem implicitly
            </summary>
            <param name="control">Control to convert</param>
        </member>
        <member name="M:Eto.Forms.DynamicItem.op_Implicit(System.String)~Eto.Forms.DynamicItem">
            <summary>
            Converts a string to a DynamicItem with a Label implicitly
            </summary>
            <param name="label">Label string to convert to a DynamicItem.</param>
        </member>
        <member name="T:Eto.Forms.DynamicLayout">
            <summary>
            Dynamic and extensible layout
            </summary>
            <remarks>
            The dynamic layout allows you to build a complex structure of controls easily. The core functionality allows 
            you to build a hierarchical set of tables with rows and columns of controls.
            
            A vertical section begins a new table, whereas a horizontal section refers to a row in a table.
            The dynamic layout intrinsically starts with a vertical section.
            
            You can define your layout verbosely or succinctly as you see fit.  The Begin.../End... methods allow you define
            the vertical/horizontal sections individually with separate commands, whereas you can also create a layout entirely 
            with a constructor or initializer pattern using the <see cref="P:Eto.Forms.DynamicLayout.Rows"/>, <see cref="P:Eto.Forms.DynamicTable.Rows"/>, and <see cref="P:Eto.Forms.DynamicRow.Items"/>
            properties.
            
            To learn about how scaling works, see <see cref="T:Eto.Forms.TableLayout"/>
            </remarks>
            <example>
            This example uses the verbose methods creating sections in separate statements
            <code>
            	var layout = new DynamicLayout();
            	
            	layout.BeginHorizontal();
            	layout.Add(new Label { Text = "My Label" });
            	layout.Add(new TextBox());
            	layout.EndHorizontal();
            
            	layout.BeginHorizontal()
            	layout.Add(new Label { Text = "Vertical controls:" });
            	
            	layout.BeginVertical(padding: new Padding(10));
            	layout.Add(new TextBox());
            	layout.Add(new Label { Text = "Some text below the text box" });
            	layout.EndVertical();
            
            	layout.EndHorizontal();
            </code>
            
            This example uses the constructor method:
            <code>
            	var layout = new DynamicLayout(
            		new DynamicRow(
            			new Label { Text = "My Label" },
            			new TextBox()
            		),
            		new DynamicRow(
            			new Label { Text = "Vertical controls:" },
            			new DynamicTable(
            				new TextBox(),
            				new Label { Text = "Some text below the text box" }
            			) { Padding = new Padding(10) }
            		)
            	);
            </code>
            
            And finally the initializer pattern, which allows you to set other properties of rows/tables cleaner, such as padding/spacing/scaling:
            <code>
            	var layout = new DynamicLayout { Rows = {
            		new DynamicRow { Items = {
            			new Label { Text = "My Label" },
            			new TextBox()
            		} },
            		new DynamicRow { Items = {
            			new Label { Text = "Vertical controls:" },
            			new DynamicTable { Padding = new Padding(10), Rows = {
            				new TextBox(),
            				new Label { Text = "Some text below the text box" }
            			} }
            		} }
            	} };
            </code>
            </example>
        </member>
        <member name="P:Eto.Forms.DynamicLayout.Rows">
            <summary>
            Gets or sets the top level rows in the layout
            </summary>
            <value>The rows.</value>
        </member>
        <member name="P:Eto.Forms.DynamicLayout.IsCreated">
            <summary>
            Gets a value indicating whether the layout has been created
            </summary>
            <remarks>
            The layout automatically will be created during the <see cref="M:Eto.Forms.DynamicLayout.OnPreLoad(System.EventArgs)"/> or <see cref="M:Eto.Forms.DynamicLayout.OnLoad(System.EventArgs)"/>
            </remarks>
            <value><c>true</c> if the layout is created; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Eto.Forms.DynamicLayout.Padding">
            <summary>
            Gets or sets the padding around the entire content of the layout
            </summary>
            <value>The padding.</value>
            <seealso cref="P:Eto.Forms.DynamicLayout.DefaultPadding"/>
        </member>
        <member name="P:Eto.Forms.DynamicLayout.Spacing">
            <summary>
            Gets or sets the spacing between the first level of cells
            </summary>
            <seealso cref="P:Eto.Forms.DynamicLayout.DefaultSpacing"/>
            <value>The spacing.</value>
        </member>
        <member name="P:Eto.Forms.DynamicLayout.DefaultPadding">
            <summary>
            Gets or sets the default padding for all child <see cref="T:Eto.Forms.DynamicTable"/> instances (vertical sections)
            </summary>
            <value>The default padding for each vertical section.</value>
        </member>
        <member name="P:Eto.Forms.DynamicLayout.DefaultSpacing">
            <summary>
            Gets or sets the default spacing for all cells in the layout
            </summary>
            <value>The default spacing.</value>
        </member>
        <member name="P:Eto.Forms.DynamicLayout.Controls">
            <summary>
            Gets an enumeration of controls that are directly contained by this container
            </summary>
            <value>The contained controls.</value>
        </member>
        <member name="P:Eto.Forms.DynamicLayout.VisualControls">
            <summary>
            Gets an enumeration of controls that are in the visual tree.
            </summary>
            <remarks>This is used to specify which controls are contained by this instance that are part of the visual tree.
            This should include all controls including non-logical Eto controls used for layout.</remarks>
            <value>The visual controls.</value>
        </member>
        <member name="M:Eto.Forms.DynamicLayout.OnPreLoad(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Eto.Forms.Control.PreLoad"/> event, and creates the layout if it has not been created
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:Eto.Forms.DynamicLayout.OnLoad(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Eto.Forms.Control.Load"/> event, and creates the layout if it has not been created
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:Eto.Forms.DynamicLayout.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Eto.Forms.DynamicLayout"/> class.
            </summary>
        </member>
        <member name="M:Eto.Forms.DynamicLayout.#ctor(Eto.Forms.DynamicRow[])">
            <summary>
            Initializes a new instance of the <see cref="T:Eto.Forms.DynamicLayout"/> class with the specified rows
            </summary>
            <param name="rows">Rows to populate the layout</param>
        </member>
        <member name="M:Eto.Forms.DynamicLayout.#ctor(System.Collections.Generic.IEnumerable{Eto.Forms.DynamicRow})">
            <summary>
            Initializes a new instance of the <see cref="T:Eto.Forms.DynamicLayout"/> class with the specified rows
            </summary>
            <param name="rows">Rows to populate the layout.</param>
        </member>
        <member name="M:Eto.Forms.DynamicLayout.BeginVertical(System.Nullable{Eto.Drawing.Padding},System.Nullable{Eto.Drawing.Size},System.Nullable{System.Boolean},System.Nullable{System.Boolean})">
            <summary>
            Begins a new vertical section in the layout
            </summary>
            <remarks>
            After calling this method, each subsequent call to <see cref="M:Eto.Forms.DynamicLayout.Add(Eto.Forms.Control,System.Nullable{System.Boolean},System.Nullable{System.Boolean})"/> will add controls in a vertical orientation.
            
            When finished adding controls to the vertical section, call either <see cref="M:Eto.Forms.DynamicLayout.EndVertical"/> or <see cref="M:Eto.Forms.DynamicLayout.EndBeginVertical(System.Nullable{Eto.Drawing.Padding},System.Nullable{Eto.Drawing.Size},System.Nullable{System.Boolean},System.Nullable{System.Boolean})"/>.
            </remarks>
            <returns>A new DynamicTable instance used for the vertical section</returns>
            <param name="padding">Padding to apply around the vertical section, or null to use the <see cref="P:Eto.Forms.DynamicLayout.DefaultPadding"/></param>
            <param name="spacing">Spacing to apply to cells in the vertical section, or null to use the <see cref="P:Eto.Forms.DynamicLayout.DefaultSpacing"/></param>
            <param name="xscale">Xscale of the vertical section</param>
            <param name="yscale">Yscale of the vertical section</param>
        </member>
        <member name="M:Eto.Forms.DynamicLayout.EndVertical">
            <summary>
            Ends the current vertical section
            </summary>
            <remarks>
            This should be balanced with every call to <see cref="M:Eto.Forms.DynamicLayout.BeginVertical(System.Nullable{Eto.Drawing.Padding},System.Nullable{Eto.Drawing.Size},System.Nullable{System.Boolean},System.Nullable{System.Boolean})"/>.
            Alternatively, you can call <see cref="M:Eto.Forms.DynamicLayout.EndBeginVertical(System.Nullable{Eto.Drawing.Padding},System.Nullable{Eto.Drawing.Size},System.Nullable{System.Boolean},System.Nullable{System.Boolean})"/> to end the current vertical section and start a new one.
            </remarks>
        </member>
        <member name="M:Eto.Forms.DynamicLayout.EndBeginVertical(System.Nullable{Eto.Drawing.Padding},System.Nullable{Eto.Drawing.Size},System.Nullable{System.Boolean},System.Nullable{System.Boolean})">
            <summary>
            Ends the current vertical section, then begins a new vertical section
            </summary>
            <remarks>
            When finished adding controls to the vertical section, call <see cref="M:Eto.Forms.DynamicLayout.EndVertical"/>
            </remarks>
            <returns>A new DynamicTable instance used for the vertical section</returns>
            <param name="padding">Padding to apply around the vertical section, or null to use the <see cref="P:Eto.Forms.DynamicLayout.DefaultPadding"/></param>
            <param name="spacing">Spacing to apply to cells in the vertical section, or null to use the <see cref="P:Eto.Forms.DynamicLayout.DefaultSpacing"/></param>
            <param name="xscale">Xscale of the vertical section</param>
            <param name="yscale">Yscale of the vertical section</param>
        </member>
        <member name="M:Eto.Forms.DynamicLayout.BeginHorizontal(System.Nullable{System.Boolean})">
            <summary>
            Begins a new horizontal row section
            </summary>
            <remarks>
            After calling this method, each subsequent call to <see cref="M:Eto.Forms.DynamicLayout.Add(Eto.Forms.Control,System.Nullable{System.Boolean},System.Nullable{System.Boolean})"/> will add controls in a horizontal orientation.
            
            When finished adding controls to the horizontal section, call <see cref="M:Eto.Forms.DynamicLayout.EndHorizontal"/>
            </remarks>
            <returns>A new row to hold the horizontal controls</returns>
            <param name="yscale">YScale of the horizontal section</param>
        </member>
        <member name="M:Eto.Forms.DynamicLayout.EndHorizontal">
            <summary>
            Ends the current horizontal section
            </summary>
            <remarks>
            This should be balanced with every call to <see cref="M:Eto.Forms.DynamicLayout.BeginHorizontal(System.Nullable{System.Boolean})"/>.
            Alternatively, you can call <see cref="M:Eto.Forms.DynamicLayout.EndBeginHorizontal(System.Nullable{System.Boolean})"/> to end the current horizontal section and start a new one
            with a new row.
            </remarks>
        </member>
        <member name="M:Eto.Forms.DynamicLayout.EndBeginHorizontal(System.Nullable{System.Boolean})">
            <summary>
            Ends the current horizontal section, then begins a new horizontal section with a new row
            </summary>
            <remarks>
            When finished adding controls to the vertical section, call <see cref="M:Eto.Forms.DynamicLayout.EndHorizontal"/>
            </remarks>
            <returns>A new DynamicRow instance used to hold the horizontal controls</returns>
            <param name="yscale">Yscale of the horizontal section</param>
        </member>
        <member name="M:Eto.Forms.DynamicLayout.BeginCentered(System.Nullable{Eto.Drawing.Padding},System.Nullable{Eto.Drawing.Size},System.Nullable{System.Boolean},System.Nullable{System.Boolean})">
            <summary>
            Creates a new section where all controls will be centered together.
            </summary>
            <remarks>
            This is useful when you want to create a section that groups controls which align themselves together but are centered in the parent.
            When finished adding controls to the centered section, call <see cref="M:Eto.Forms.DynamicLayout.EndCentered"/>.
            To center vertically, set <paramref name="yscale"/> to <c>true</c>.
            </remarks>
            <param name="padding">Padding to apply around the controls, or null to use the <see cref="P:Eto.Forms.DynamicLayout.DefaultPadding"/></param>
            <param name="spacing">Spacing to apply to cells in the section, or null to use the <see cref="P:Eto.Forms.DynamicLayout.DefaultSpacing"/></param>
            <param name="xscale">Xscale of the vertical section</param>
            <param name="yscale">Yscale of the vertical section</param>
        </member>
        <member name="M:Eto.Forms.DynamicLayout.EndCentered">
            <summary>
            Ends the current centered section.
            </summary>
            <remarks>
            This should be balanced with every call to <see cref="M:Eto.Forms.DynamicLayout.BeginCentered(System.Nullable{Eto.Drawing.Padding},System.Nullable{Eto.Drawing.Size},System.Nullable{System.Boolean},System.Nullable{System.Boolean})"/>.
            </remarks>
        </member>
        <member name="M:Eto.Forms.DynamicLayout.BeginGroup(System.String,System.Nullable{Eto.Drawing.Padding},System.Nullable{Eto.Drawing.Size},System.Nullable{System.Boolean},System.Nullable{System.Boolean})">
            <summary>
            Begins a the group section in the dynamic layout with a title.
            </summary>
            <remarks>
            Should be balanced with a call to <see cref="M:Eto.Forms.DynamicLayout.EndGroup"/>.
            </remarks>
            <returns>The group instance.</returns>
            <param name="title">Title for the group, or null to have no title.</param>
            <param name="padding">Padding around the children of the group.</param>
            <param name="spacing">Spacing between the children of the group.</param>
            <param name="xscale">Xscale of the group itself.</param>
            <param name="yscale">Yscale of the group itself.</param>
        </member>
        <member name="M:Eto.Forms.DynamicLayout.EndGroup">
            <summary>
            Ends a group.
            </summary>
            <remarks>
            Should be balanced with a previous call to <see cref="M:Eto.Forms.DynamicLayout.BeginGroup(System.String,System.Nullable{Eto.Drawing.Padding},System.Nullable{Eto.Drawing.Size},System.Nullable{System.Boolean},System.Nullable{System.Boolean})"/>.
            </remarks>
        </member>
        <member name="M:Eto.Forms.DynamicLayout.Add(Eto.Forms.Control,System.Nullable{System.Boolean},System.Nullable{System.Boolean})">
            <summary>
            Add the control with the optional scaling
            </summary>
            <remarks>
            This will add either horizontally or vertically depending on whether <see cref="M:Eto.Forms.DynamicLayout.BeginVertical(System.Nullable{Eto.Drawing.Padding},System.Nullable{Eto.Drawing.Size},System.Nullable{System.Boolean},System.Nullable{System.Boolean})"/> or
            <see cref="M:Eto.Forms.DynamicLayout.BeginHorizontal(System.Nullable{System.Boolean})"/> was called last.
            
            The x/y scaling specified applies either to the entire column or row in the parent table that the control
            was added to, not just this individual control.
            </remarks>
            <param name="control">Control to add, or null to add blank space</param>
            <param name="xscale">Xscale for this control and any in the same column</param>
            <param name="yscale">Yscale for this control and any in the same row</param>
        </member>
        <member name="M:Eto.Forms.DynamicLayout.AddRange(System.Collections.Generic.IEnumerable{Eto.Forms.Control})">
            <summary>
            Adds a list of controls
            </summary>
            <remarks>
            This enumerates the collection and calls <see cref="M:Eto.Forms.DynamicLayout.Add(Eto.Forms.Control,System.Nullable{System.Boolean},System.Nullable{System.Boolean})"/> for each control.
            </remarks>
            <param name="controls">Controls to add.</param>
        </member>
        <member name="M:Eto.Forms.DynamicLayout.AddRange(Eto.Forms.Control[])">
            <summary>
            Adds a list of controls
            </summary>
            <remarks>
            This enumerates the collection and calls <see cref="M:Eto.Forms.DynamicLayout.Add(Eto.Forms.Control,System.Nullable{System.Boolean},System.Nullable{System.Boolean})"/> for each control.
            </remarks>
            <param name="controls">Controls to add.</param>
        </member>
        <member name="M:Eto.Forms.DynamicLayout.AddSeparateRow(Eto.Forms.Control[])">
            <summary>
            Adds a separate horizontal row of items in a new vertical section
            </summary>
            <remarks>
            This performs the same as the following, but in a single line:
            <code>
            	layout.BeginVertical();
            	layout.BeginHorizontal();
            	layout.Add(control1);
            	layout.Add(control2);
            	...
            	layout.EndHorizontal();
            	layout.EndVertical();
            </code>
            </remarks>
            <returns>The separate row.</returns>
            <param name="controls">Controls.</param>
        </member>
        <member name="M:Eto.Forms.DynamicLayout.AddSeparateRow(System.Nullable{Eto.Drawing.Padding},System.Nullable{Eto.Drawing.Size},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Collections.Generic.IEnumerable{Eto.Forms.Control})">
            <summary>
            Adds a separate horizontal row of items in a new vertical section
            </summary>
            <remarks>
            This performs the same as the following, but in a single line:
            <code>
            	layout.BeginVertical(padding, spacing, xscale, yscale);
            	layout.BeginHorizontal();
            	layout.Add(control1);
            	layout.Add(control2);
            	...
            	layout.EndHorizontal();
            	layout.EndVertical();
            </code>
            </remarks>
            <returns>The row added to contain the items</returns>
            <param name="padding">Padding for the vertical section</param>
            <param name="spacing">Spacing between each cell in the row</param>
            <param name="xscale">Xscale for the vertical section</param>
            <param name="yscale">Yscale for each of the controls in the row</param>
            <param name="controls">Controls to add initially</param>
        </member>
        <member name="M:Eto.Forms.DynamicLayout.AddSeparateColumn(Eto.Forms.Control[])">
            <summary>
            Adds a separate vertical column of items in a new vertical section
            </summary>
            <remarks>
            This performs the same as the following, but in a single line:
            <code>
            	layout.BeginVertical();
            	layout.Add(control1);
            	layout.Add(control2);
            	...
            	layout.EndVertical();
            </code>
            </remarks>
            <returns>The table added to contain the items</returns>
            <param name="controls">Controls to add initially</param>
        </member>
        <member name="M:Eto.Forms.DynamicLayout.AddSeparateColumn(System.Nullable{Eto.Drawing.Padding},System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Collections.Generic.IEnumerable{Eto.Forms.Control})">
            <summary>
            Adds a separate vertical column of items in a new vertical section
            </summary>
            <remarks>
            This performs the same as the following, but in a single line:
            <code>
            	layout.BeginVertical(padding, spacing, xscale, yscale);
            	layout.Add(control1);
            	layout.Add(control2);
            	...
            	layout.EndVertical();
            </code>
            </remarks>
            <returns>The table added to contain the items</returns>
            <param name="padding">Padding for the vertical section</param>
            <param name="spacing">Spacing between each cell in the column</param>
            <param name="xscale">Xscale for the vertical section</param>
            <param name="yscale">Yscale for the vertical section</param>
            <param name="controls">Controls to add initially</param>
        </member>
        <member name="M:Eto.Forms.DynamicLayout.AddRow(Eto.Forms.Control[])">
            <summary>
            Adds a new row of controls to the current vertical section
            </summary>
            <returns>A new instance of the row that was added</returns>
            <param name="controls">Controls to add to the row</param>
        </member>
        <member name="M:Eto.Forms.DynamicLayout.AddCentered(Eto.Forms.Control,System.Nullable{Eto.Drawing.Padding},System.Nullable{Eto.Drawing.Size},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Boolean,System.Boolean)">
            <summary>
            Adds a control centered in a new vertical section
            </summary>
            <remarks>
            This adds scaled blank space around the control, and sizes the control to its preferred size.
            This is similar to doing the following:
            <code>
            	layout.BeginVertical(padding, spacing, xscale, yscale);
            	layout.Add(null); // spacing at top
            
            	layout.BeginHorizontal();
            	layout.Add(null); // spacing to left
            	layout.Add(control);
            	layout.Add(null); // spacing to right
            	layout.EndHorizontal();
            
            	layout.Add(null); // spacing at bottom
            
            	layout.EndVertical();
            </code>
            </remarks>
            <seealso cref="M:Eto.Forms.DynamicLayout.AddAutoSized(Eto.Forms.Control,System.Nullable{Eto.Drawing.Padding},System.Nullable{Eto.Drawing.Size},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Boolean)"/>
            <param name="control">Control to add</param>
            <param name="padding">Padding around the vertical section</param>
            <param name="spacing">Spacing between cells</param>
            <param name="xscale">Xscale for the vertical section</param>
            <param name="yscale">Yscale for the vertical section</param>
            <param name="horizontalCenter">If set to <c>true</c> horizontally center the control</param>
            <param name="verticalCenter">If set to <c>true</c> vertically center the control</param>
        </member>
        <member name="M:Eto.Forms.DynamicLayout.AddAutoSized(Eto.Forms.Control,System.Nullable{Eto.Drawing.Padding},System.Nullable{Eto.Drawing.Size},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Boolean)">
            <summary>
            Adds a control to the layout with its preferred size instead of taking the entire space of the cell
            </summary>
            <seealso cref="M:Eto.Forms.DynamicLayout.AddCentered(Eto.Forms.Control,System.Nullable{Eto.Drawing.Padding},System.Nullable{Eto.Drawing.Size},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Boolean,System.Boolean)"/>
            <param name="control">Control to add</param>
            <param name="padding">Padding around the vertical section</param>
            <param name="spacing">Spacing between cells</param>
            <param name="xscale">Xscale for the vertical section</param>
            <param name="yscale">Yscale for the vertical section</param>
            <param name="centered">If set to <c>true</c> center the control.</param>
        </member>
        <member name="M:Eto.Forms.DynamicLayout.AddColumn(Eto.Forms.Control[])">
            <summary>
            Adds a column of controls in a new vertical section
            </summary>
            <remarks>
            This allows you to add columns of controls.
            
            If you are in a horizontal section, you can call this method repeatedly to add columns of controls that are
            sized independently from eachother.
            
            This is a shortcut for the following:
            <code>
            	layout.BeginVertical();
            	layout.Add(control1);
            	...
            	layout.EndVertical();
            </code>
            </remarks>
            <param name="controls">Controls to add</param>
        </member>
        <member name="M:Eto.Forms.DynamicLayout.AddSpace(System.Nullable{System.Boolean},System.Nullable{System.Boolean})">
            <summary>
            Adds an empty space.  Equivalent to calling Add(null);
            </summary>
            <returns>The item representing the space.</returns>
            <param name="xscale">Xscale for this control and any in the same column</param>
            <param name="yscale">Yscale for this control and any in the same row</param>
        </member>
        <member name="M:Eto.Forms.DynamicLayout.Create">
            <summary>
            Creates the layout content
            </summary>
            <remarks>
            This is called automatically during the PreLoad or Load event, but can be called manually if changes are made
            after initially created
            </remarks>
            <seealso cref="P:Eto.Forms.DynamicLayout.IsCreated"/>
        </member>
        <member name="M:Eto.Forms.DynamicLayout.Clear">
            <summary>
            Clears the layout so it can be recreated
            </summary>
            <remarks>
            You must call <see cref="M:Eto.Forms.DynamicLayout.Create"/> when done updating the layout
            </remarks>
        </member>
        <member name="T:Eto.Forms.DynamicRow">
            <summary>
            Represents a row for a <see cref="T:Eto.Forms.DynamicTable"/>
            </summary>
        </member>
        <member name="P:Eto.Forms.DynamicRow.Table">
            <summary>
            Gets the table this row is contained in
            </summary>
            <value>The table.</value>
        </member>
        <member name="P:Eto.Forms.DynamicRow.Items">
            <summary>
            Gets or sets the items on this row.
            </summary>
            <value>The items contained in this row</value>
        </member>
        <member name="M:Eto.Forms.DynamicRow.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Eto.Forms.DynamicRow"/> class.
            </summary>
        </member>
        <member name="M:Eto.Forms.DynamicRow.#ctor(Eto.Forms.DynamicItem[])">
            <summary>
            Initializes a new instance of the <see cref="T:Eto.Forms.DynamicRow"/> class.
            </summary>
            <param name="items">Items to initialize the row</param>
        </member>
        <member name="M:Eto.Forms.DynamicRow.#ctor(System.Collections.Generic.IEnumerable{Eto.Forms.DynamicItem})">
            <summary>
            Initializes a new instance of the <see cref="T:Eto.Forms.DynamicRow"/> class.
            </summary>
            <param name="items">Items to initialize the row</param>
        </member>
        <member name="M:Eto.Forms.DynamicRow.#ctor(System.Collections.Generic.IEnumerable{Eto.Forms.Control},System.Nullable{System.Boolean},System.Nullable{System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:Eto.Forms.DynamicRow"/> class.
            </summary>
            <param name="controls">Items to initialize the row</param>
            <param name="xscale">Xscale.</param>
            <param name="yscale">Yscale.</param>
        </member>
        <member name="M:Eto.Forms.DynamicRow.Add(Eto.Forms.Control[])">
            <summary>
            Add the specified controls to the row
            </summary>
            <param name="controls">Controls to add</param>
        </member>
        <member name="M:Eto.Forms.DynamicRow.Add(Eto.Forms.DynamicItem[])">
            <summary>
            Add the specified items to the row
            </summary>
            <param name="items">Items to add</param>
        </member>
        <member name="M:Eto.Forms.DynamicRow.Add(System.Collections.Generic.IEnumerable{Eto.Forms.DynamicItem})">
            <summary>
            Add the specified items to the row
            </summary>
            <param name="items">Items to add</param>
        </member>
        <member name="M:Eto.Forms.DynamicRow.Add(System.Collections.Generic.IEnumerable{Eto.Forms.Control},System.Nullable{System.Boolean},System.Nullable{System.Boolean})">
            <summary>
            Add the controls to the row, with specified xscale and yscale.
            </summary>
            <param name="controls">Controls to add</param>
            <param name="xscale">Horizontal scale for each control</param>
            <param name="yscale">Vertical scale for each control</param>
        </member>
        <member name="M:Eto.Forms.DynamicRow.op_Implicit(Eto.Forms.Control)~Eto.Forms.DynamicRow">
            <summary>
            Implicitly converts a control to a row to easily define layouts
            </summary>
            <param name="control">Control to convert from</param>
        </member>
        <member name="M:Eto.Forms.DynamicRow.InsertItem(System.Int32,Eto.Forms.DynamicItem)">
            <summary>
            Handles when an item is inserted into the collection
            </summary>
            <param name="index">Index for the inserted item</param>
            <param name="item">Item to insert</param>
        </member>
        <member name="M:Eto.Forms.DynamicRow.RemoveItem(System.Int32)">
            <summary>
            Handles when an item is removed from the collection
            </summary>
            <param name="index">Index of the item to remove.</param>
        </member>
        <member name="M:Eto.Forms.DynamicRow.ClearItems">
            <summary>
            Handles when the collection is cleared.
            </summary>
        </member>
        <member name="M:Eto.Forms.DynamicRow.SetItem(System.Int32,Eto.Forms.DynamicItem)">
            <summary>
            Handles when an item is changed
            </summary>
            <param name="index">Index of the item to change.</param>
            <param name="item">Item to change the item at the specified index to.</param>
        </member>
        <member name="T:Eto.Forms.DynamicTable">
            <summary>
            Table item for the <see cref="T:Eto.Forms.DynamicLayout"/>
            </summary>
            <remarks>
            This represents a table, which in a dynamic layout is used to represent a vertical section.
            The maximum number of items in the <see cref="P:Eto.Forms.DynamicTable.Rows"/> determines the columns of the table.
            </remarks>
        </member>
        <member name="P:Eto.Forms.DynamicTable.Rows">
            <summary>
            Gets or sets the collection of rows in the table
            </summary>
            <value>The rows in the table.</value>
        </member>
        <member name="P:Eto.Forms.DynamicTable.Table">
            <summary>
            Gets the table layout this item represents
            </summary>
            <value>The table.</value>
        </member>
        <member name="P:Eto.Forms.DynamicTable.Parent">
            <summary>
            Gets or sets the parent table
            </summary>
            <value>The parent.</value>
        </member>
        <member name="P:Eto.Forms.DynamicTable.Padding">
            <summary>
            Gets or sets the padding around the table cells
            </summary>
            <value>The padding.</value>
        </member>
        <member name="P:Eto.Forms.DynamicTable.Spacing">
            <summary>
            Gets or sets the spacing between the table cells
            </summary>
            <value>The spacing.</value>
        </member>
        <member name="P:Eto.Forms.DynamicTable.Visible">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Eto.Forms.DynamicTable"/> is visible.
            </summary>
            <value><c>true</c> if visible; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Eto.Forms.DynamicTable.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Eto.Forms.DynamicTable"/> class.
            </summary>
        </member>
        <member name="M:Eto.Forms.DynamicTable.#ctor(Eto.Forms.DynamicRow[])">
            <summary>
            Initializes a new instance of the <see cref="T:Eto.Forms.DynamicTable"/> class.
            </summary>
            <param name="rows">Rows.</param>
        </member>
        <member name="M:Eto.Forms.DynamicTable.#ctor(System.Collections.Generic.IEnumerable{Eto.Forms.DynamicRow})">
            <summary>
            Initializes a new instance of the <see cref="T:Eto.Forms.DynamicTable"/> class.
            </summary>
            <param name="rows">Rows.</param>
        </member>
        <member name="M:Eto.Forms.DynamicTable.Add(Eto.Forms.DynamicItem)">
            <summary>
            Add the specified item to the current row
            </summary>
            <param name="item">Item to add</param>
        </member>
        <member name="M:Eto.Forms.DynamicTable.AddRow(Eto.Forms.DynamicItem)">
            <summary>
            Adds the specified item to a new row
            </summary>
            <param name="item">Item to add to a new row</param>
        </member>
        <member name="M:Eto.Forms.DynamicTable.AddRow(Eto.Forms.DynamicRow)">
            <summary>
            Adds the specified row to the table
            </summary>
            <param name="row">Row to add</param>
        </member>
        <member name="M:Eto.Forms.DynamicTable.Create(Eto.Forms.DynamicLayout)">
            <summary>
            Creates the content for this item
            </summary>
            <param name="layout">Top level layout the item is being created for</param>
        </member>
        <member name="T:Eto.Forms.DynamicGroup">
            <summary>
            Used to easily insert a <see cref="P:Eto.Forms.DynamicGroup.GroupBox"/> into a dynamic layout
            </summary>
        </member>
        <member name="P:Eto.Forms.DynamicGroup.Title">
            <summary>
            Gets or sets the title of the group box.
            </summary>
            <value>The title of the groupbox.</value>
        </member>
        <member name="P:Eto.Forms.DynamicGroup.GroupBox">
            <summary>
            Gets the group box instance when the layout has been generated.
            </summary>
            <value>The group box instance.</value>
        </member>
        <member name="M:Eto.Forms.DynamicGroup.Create(Eto.Forms.DynamicLayout)">
            <summary>
            Creates the group box layout.
            </summary>
            <returns>The control created for this item.</returns>
            <param name="layout">Layout we are creating this item for.</param>
        </member>
        <member name="T:Eto.Forms.Layout">
            <summary>
            Base class for all layout-based containers
            </summary>
            <remarks>
            Layout based containers are used to position child controls, and provides extra functionality
            to update the layout manually.
            </remarks>
        </member>
        <member name="M:Eto.Forms.Layout.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Eto.Forms.Layout"/> class.
            </summary>
        </member>
        <member name="M:Eto.Forms.Layout.#ctor(Eto.Forms.Layout.IHandler)">
            <summary>
            Initializes a new instance of the <see cref="T:Eto.Forms.Layout"/> class with the specified handler.
            </summary>
            <param name="handler">Handler to use for the widget</param>
        </member>
        <member name="M:Eto.Forms.Layout.Update">
            <summary>
            Re-calculates the layout of the controls and re-positions them, if necessary
            </summary>
            <remarks>
            All layouts should theoretically work without having to manually update them, but in certain cases
            this may be necessary to be called.
            </remarks>
        </member>
        <member name="M:Eto.Forms.Layout.BeginInit">
            <summary>
            Begins the initialization when loading from xaml or other code generated scenarios
            </summary>
        </member>
        <member name="M:Eto.Forms.Layout.EndInit">
            <summary>
            Ends the initialization when loading from xaml or other code generated scenarios
            </summary>
        </member>
        <member name="T:Eto.Forms.Layout.IHandler">
            <summary>
            Platform handler interface for the the <see cref="T:Eto.Forms.Layout"/> class
            </summary>
        </member>
        <member name="M:Eto.Forms.Layout.IHandler.Update">
            <summary>
            Re-calculates the layout of the controls and re-positions them, if necessary
            </summary>
            <remarks>
            All layouts should theoretically work without having to manually update them, but in certain cases
            this may be necessary to be called.
            </remarks>
        </member>
        <member name="T:Eto.Forms.Layout.IPositionalLayoutHandler">
            <summary>
            Platform handler interface for positional layouts where controls are placed in an x, y grid
            </summary>
        </member>
        <member name="M:Eto.Forms.Layout.IPositionalLayoutHandler.Add(Eto.Forms.Control,System.Int32,System.Int32)">
            <summary>
            Adds the control to the layout given the specified co-ordinates
            </summary>
            <remarks>
            Adding a control typically will make it visible to the user immediately, assuming they can see the control
            in the current co-ordinates, and that the control's <see cref="P:Eto.Forms.Control.Visible"/> property is true
            </remarks>
            <param name="control">Child control to add to this layout</param>
            <param name="x">X co-ordinate</param>
            <param name="y">Y co-ordinate</param>
        </member>
        <member name="M:Eto.Forms.Layout.IPositionalLayoutHandler.Move(Eto.Forms.Control,System.Int32,System.Int32)">
            <summary>
            Moves the control to the specified co-ordinates
            </summary>
            <remarks>
            This assumes that the control is already a child of this layout
            </remarks>
            <param name="control">Child control to move</param>
            <param name="x">New X co-ordinate</param>
            <param name="y">New Y co-ordinate</param>
        </member>
        <member name="M:Eto.Forms.Layout.IPositionalLayoutHandler.Remove(Eto.Forms.Control)">
            <summary>
            Removes the specified child from this layout
            </summary>
            <remarks>
            This assumes that the control is already a child of this layout.  This will make the child control
            invisible to the user
            </remarks>
            <param name="control">Child control to remove</param>
        </member>
        <member name="T:Eto.Forms.PixelLayout">
            <summary>
            Layout to position controls by pixel coordinates
            </summary>
            <remarks>
            This layout can be used if you want to position controls based on pixel sizes.
            Note that controls will automatically size themselves and it is recommended to use
            a <see cref="T:Eto.Forms.DynamicLayout"/> or <see cref="T:Eto.Forms.TableLayout"/> instead, as this will better
            work across all platforms since each platform might have different standard sizes.
            </remarks>
        </member>
        <member name="P:Eto.Forms.PixelLayout.Controls">
            <summary>
            Gets an enumeration of controls that are directly contained by this container
            </summary>
            <value>The contained controls.</value>
        </member>
        <member name="P:Eto.Forms.PixelLayout.Contents">
            <summary>
            Gets a collection of controls that are contained by this layout
            </summary>
            <remarks>
            When adding children using this, you can position them using the <see cref="M:Eto.Forms.PixelLayout.SetLocation(Eto.Forms.Control,Eto.Drawing.Point)"/> static method.
            </remarks>
            <value>The contents of the container.</value>
        </member>
        <member name="M:Eto.Forms.PixelLayout.GetLocation(Eto.Forms.Control)">
            <summary>
            Gets the location of the control in the container
            </summary>
            <returns>The location.</returns>
            <param name="control">Control to get the location.</param>
        </member>
        <member name="M:Eto.Forms.PixelLayout.SetLocation(Eto.Forms.Control,Eto.Drawing.Point)">
            <summary>
            Sets the location of the specified control
            </summary>
            <param name="control">Control to set the location.</param>
            <param name="value">Location of the control</param>
        </member>
        <member name="M:Eto.Forms.PixelLayout.Add(Eto.Forms.Control,System.Int32,System.Int32)">
            <summary>
            Adds a control to the layout with the specified pixel coordinates
            </summary>
            <param name="control">Control to add</param>
            <param name="x">The x coordinate.</param>
            <param name="y">The y coordinate.</param>
        </member>
        <member name="M:Eto.Forms.PixelLayout.Add(Eto.Forms.Control,Eto.Drawing.Point)">
            <summary>
            Adds a control at the specified location
            </summary>
            <param name="control">Control to add</param>
            <param name="location">Location to position the control</param>
        </member>
        <member name="M:Eto.Forms.PixelLayout.Move(Eto.Forms.Control,System.Int32,System.Int32)">
            <summary>
            Moves the control to the specified coordinates
            </summary>
            <param name="control">Control to move</param>
            <param name="x">The x coordinate.</param>
            <param name="y">The y coordinate.</param>
        </member>
        <member name="M:Eto.Forms.PixelLayout.Move(Eto.Forms.Control,Eto.Drawing.Point)">
            <summary>
            Moves a control to the specified location.
            </summary>
            <param name="control">Control to move</param>
            <param name="location">Location to move to</param>
        </member>
        <member name="M:Eto.Forms.PixelLayout.Remove(Eto.Forms.Control)">
            <summary>
            Remove the specified child control.
            </summary>
            <param name="child">Child to remove</param>
        </member>
        <member name="M:Eto.Forms.PixelLayout.EndInit">
            <summary>
            Ends the initialization when loading from xaml or other code generated scenarios
            </summary>
        </member>
        <member name="T:Eto.Forms.PixelLayout.IHandler">
            <summary>
            Handler interface for the <see cref="T:Eto.Forms.PixelLayout"/> control
            </summary>
        </member>
        <member name="T:Eto.Forms.HorizontalAlignment">
            <summary>
            Horizontal alignment for controls
            </summary>
        </member>
        <member name="F:Eto.Forms.HorizontalAlignment.Left">
            <summary>
            Controls are aligned to the left of the container.
            </summary>
        </member>
        <member name="F:Eto.Forms.HorizontalAlignment.Center">
            <summary>
            Controls are centered.
            </summary>
        </member>
        <member name="F:Eto.Forms.HorizontalAlignment.Right">
            <summary>
            Controls are aligned to the right of the container.
            </summary>
        </member>
        <member name="F:Eto.Forms.HorizontalAlignment.Stretch">
            <summary>
            Controls stretch to fill the entire width of the container.
            </summary>
        </member>
        <member name="T:Eto.Forms.VerticalAlignment">
            <summary>
            Horizontal alignment for controls
            </summary>
        </member>
        <member name="F:Eto.Forms.VerticalAlignment.Top">
            <summary>
            Controls are aligned to the top of the container.
            </summary>
        </member>
        <member name="F:Eto.Forms.VerticalAlignment.Center">
            <summary>
            Controls are centered.
            </summary>
        </member>
        <member name="F:Eto.Forms.VerticalAlignment.Bottom">
            <summary>
            Controls are aligned to the bottom of the container.
            </summary>
        </member>
        <member name="F:Eto.Forms.VerticalAlignment.Stretch">
            <summary>
            Controls stretch to fill the entire height of the container.
            </summary>
        </member>
        <member name="T:Eto.Forms.StackLayoutItem">
            <summary>
            Item for a single control in a <see cref="T:Eto.Forms.StackLayout"/>.
            </summary>
        </member>
        <member name="P:Eto.Forms.StackLayoutItem.Control">
            <summary>
            Gets or sets the control for this item.
            </summary>
            <value>The item's control.</value>
        </member>
        <member name="P:Eto.Forms.StackLayoutItem.HorizontalAlignment">
            <summary>
            Gets or sets the horizontal alignment for the control for vertical stack layouts, or null to use <see cref="P:Eto.Forms.StackLayout.HorizontalContentAlignment"/>.
            </summary>
            <value>The horizontal alignment of the control.</value>
        </member>
        <member name="P:Eto.Forms.StackLayoutItem.VerticalAlignment">
            <summary>
            Gets or sets the vertical alignment for the control for horizontal stack layouts, or null to use <see cref="P:Eto.Forms.StackLayout.VerticalContentAlignment"/>.
            </summary>
            <value>The vertical alignment of the control.</value>
        </member>
        <member name="P:Eto.Forms.StackLayoutItem.Expand">
            <summary>
            Gets or sets a value indicating whether the control expands to available space in the direction of the layout.
            </summary>
            <value><c>true</c> to expand; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Eto.Forms.StackLayoutItem.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Eto.Forms.StackLayoutItem"/> class.
            </summary>
        </member>
        <member name="M:Eto.Forms.StackLayoutItem.#ctor(Eto.Forms.Control,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Eto.Forms.StackLayoutItem"/> class.
            </summary>
            <param name="control">Control for the item.</param>
            <param name="expand">Whether the control expands to fill space along the direction of the layout</param>
        </member>
        <member name="M:Eto.Forms.StackLayoutItem.#ctor(Eto.Forms.Control,System.Nullable{Eto.Forms.HorizontalAlignment},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Eto.Forms.StackLayoutItem"/> class when the StackLayout.Orientation is Vertical.
            </summary>
            <param name="control">Control for the item.</param>
            <param name="alignment">Horizontal alignment of the control for vertical layouts.</param>
            <param name="expand">Whether the control expands to fill space along the direction of the layout</param>
        </member>
        <member name="M:Eto.Forms.StackLayoutItem.#ctor(Eto.Forms.Control,System.Nullable{Eto.Forms.VerticalAlignment},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Eto.Forms.StackLayoutItem"/> class when the StackLayout.Orientation is Horizontal.
            </summary>
            <param name="control">Control for the item.</param>
            <param name="alignment">Vertical alignment of the control for horizontal layouts.</param>
            <param name="expand">Whether the control expands to fill space along the direction of the layout</param>
        </member>
        <member name="M:Eto.Forms.StackLayoutItem.op_Implicit(Eto.Forms.Control)~Eto.Forms.StackLayoutItem">
            <summary>
            Converts a control to a StackLayoutItem implicitly.
            </summary>
            <param name="control">Control to convert.</param>
        </member>
        <member name="M:Eto.Forms.StackLayoutItem.op_Implicit(System.String)~Eto.Forms.StackLayoutItem">
            <summary>
            Converts a string to a StackLayoutItem with a label control implicitly.
            </summary>
            <remarks>
            This provides an easy way to add labels to your layout through code, without having to create <see cref="T:Eto.Forms.Label"/> instances.
            </remarks>
            <param name="labelText">Text to convert to a Label control.</param>
        </member>
        <member name="M:Eto.Forms.StackLayoutItem.op_Implicit(Eto.Drawing.Image)~Eto.Forms.StackLayoutItem">
            <summary>
            Converts an <see cref="T:Eto.Drawing.Image"/> to a StackLayoutItem with an <see cref="T:Eto.Forms.ImageView"/> control implicitly.
            </summary>
            <remarks>
            This provides an easy way to add images to your layout through code, without having to create <see cref="T:Eto.Forms.ImageView"/> instances manually.
            </remarks>
            <param name="image">Image to convert to a StackLayoutItem with a ImageView control.</param>
        </member>
        <member name="T:Eto.Forms.StackLayout">
            <summary>
            Layout to stack controls horizontally or vertically, with the ability for each child to be aligned to a side
            of the layout.
            </summary>
        </member>
        <member name="P:Eto.Forms.StackLayout.Orientation">
            <summary>
            Gets or sets the orientation of the controls in the stack layout.
            </summary>
            <remarks>
            When the orientation is Horizontal, the <see cref="P:Eto.Forms.StackLayout.VerticalContentAlignment"/> specifies the default
            vertical alignment for child controls.
            When the orientation is Vertical, the <see cref="P:Eto.Forms.StackLayout.HorizontalContentAlignment"/> specifies the default 
            horizontal alignment for child controls.
            </remarks>
            <value>The orientation of the controls.</value>
        </member>
        <member name="P:Eto.Forms.StackLayout.Spacing">
            <summary>
            Gets or sets the spacing between each of the controls in the stack.
            </summary>
            <value>The spacing between each control.</value>
        </member>
        <member name="P:Eto.Forms.StackLayout.HorizontalContentAlignment">
            <summary>
            Gets or sets the default horizontal alignment of the child controls in the stack layout when the <see cref="P:Eto.Forms.StackLayout.Orientation"/> is Vertical.
            </summary>
            <remarks>
            The alignment can also be specified on a per-child basis with the <see cref="P:Eto.Forms.StackLayoutItem.HorizontalAlignment"/> property.
            </remarks>
            <value>The default child control alignment.</value>
        </member>
        <member name="P:Eto.Forms.StackLayout.VerticalContentAlignment">
            <summary>
            Gets or sets the default vertical alignment of the child controls in the stack layout when the <see cref="P:Eto.Forms.StackLayout.Orientation"/> is Horizontal.
            </summary>
            <remarks>
            The alignment can also be specified on a per-child basis with the <see cref="P:Eto.Forms.StackLayoutItem.VerticalAlignment"/> property.
            </remarks>
            <value>The default child control alignment.</value>
        </member>
        <member name="P:Eto.Forms.StackLayout.AlignLabels">
            <summary>
            Gets or sets a value indicating whether the Label's alignment will be changed to match the alignment of the StackLayout.
            </summary>
            <remarks>
            This is used so labels can be updated automatically to match the content alignment of the stack.
            For example, when <see cref="P:Eto.Forms.StackLayout.HorizontalContentAlignment"/> is Center, then all Labels will get their 
            <see cref="P:Eto.Forms.Label.TextAlignment"/> set to <see cref="F:Eto.Forms.TextAlignment.Center"/>.
            </remarks>
            <value><c>true</c> if to label alignment; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Eto.Forms.StackLayout.Items">
            <summary>
            Gets the collection of items in the stack layout.
            </summary>
            <value>The item collection.</value>
        </member>
        <member name="P:Eto.Forms.StackLayout.Controls">
            <summary>
            Gets the controls for the layout
            </summary>
            <remarks>
            This will return the list of controls in the stack layout when not created, and when it is,
            it will return the embedded TableLayout.
            </remarks>
        </member>
        <member name="P:Eto.Forms.StackLayout.VisualControls">
            <summary>
            Gets an enumeration of controls that are in the visual tree.
            </summary>
            <remarks>This is used to specify which controls are contained by this instance that are part of the visual tree.
            This should include all controls including non-logical Eto controls used for layout.</remarks>
            <value>The visual controls.</value>
        </member>
        <member name="M:Eto.Forms.StackLayout.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Eto.Forms.StackLayout"/> class.
            </summary>
        </member>
        <member name="M:Eto.Forms.StackLayout.OnPreLoad(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Eto.Forms.Control.PreLoad"/> event, and recurses to this container's children
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:Eto.Forms.StackLayout.OnLoad(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Eto.Forms.Control.Load"/> event, and recurses to this container's children
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:Eto.Forms.StackLayout.SuspendLayout">
            <summary>
            Suspends the layout of child controls
            </summary>
        </member>
        <member name="M:Eto.Forms.StackLayout.ResumeLayout">
            <summary>
            Resumes the layout after it has been suspended, and performs a layout
            </summary>
        </member>
        <member name="T:Eto.Forms.TableCell">
            <summary>
            Represents a cell in a <see cref="T:Eto.Forms.TableRow"/>
            </summary>
        </member>
        <member name="P:Eto.Forms.TableCell.ScaleWidth">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Eto.Forms.TableCell"/> will scale its width
            </summary>
            <remarks>
            All controls in the same column of this cell will get the same scaling value.
            Scaling will make the column expand to fit the rest of the width of the container, minus the preferred
            width of any non-scaled columns.
            
            If there are no columns with width scaling, the last column will automatically get scaled.
            
            With scaling turned off, cells in the column will fit the preferred size of the widest control.
            </remarks>
            <value><c>true</c> if scale width; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Eto.Forms.TableCell.Control">
            <summary>
            Gets or sets the control in this cell, or null for an empty space
            </summary>
            <value>The control.</value>
        </member>
        <member name="M:Eto.Forms.TableCell.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Eto.Forms.TableCell"/> class.
            </summary>
        </member>
        <member name="M:Eto.Forms.TableCell.#ctor(Eto.Forms.Control,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Eto.Forms.TableCell"/> class.
            </summary>
            <param name="control">Control for this cell</param>
            <param name="scaleWidth">Scale the width of the control if <c>true</c>, otherwise scale to the preferred size of the control.</param>
        </member>
        <member name="M:Eto.Forms.TableCell.op_Implicit(Eto.Forms.Control)~Eto.Forms.TableCell">
            <summary>
            Converts a control to a table cell
            </summary>
            <param name="control">Control to convert to a cell.</param>
        </member>
        <member name="M:Eto.Forms.TableCell.op_Implicit(Eto.Forms.TableCell[])~Eto.Forms.TableCell">
            <summary>
            Converts an array of cells to a new cell with a table of vertical cells in a new child TableLayout
            </summary>
            <param name="items">Items to convert.</param>
        </member>
        <member name="M:Eto.Forms.TableCell.op_Implicit(Eto.Forms.TableRow[])~Eto.Forms.TableCell">
            <summary>
            Converts an array of rows to a new cell with vertical rows in a new child TableLayout
            </summary>
            <param name="rows">Rows to convert.</param>
        </member>
        <member name="M:Eto.Forms.TableCell.op_Implicit(System.String)~Eto.Forms.TableCell">
            <summary>
            Converts a string to a TableCell with a label control implicitly.
            </summary>
            <remarks>
            This provides an easy way to add labels to your layout through code, without having to create <see cref="T:Eto.Forms.Label"/> instances.
            </remarks>
            <param name="labelText">Text to convert to a Label control.</param>
        </member>
        <member name="M:Eto.Forms.TableCell.op_Implicit(Eto.Drawing.Image)~Eto.Forms.TableCell">
            <summary>
            Converts an <see cref="T:Eto.Drawing.Image"/> to a TableCell with an <see cref="T:Eto.Forms.ImageView"/> control implicitly.
            </summary>
            <remarks>
            This provides an easy way to add images to your layout through code, without having to create <see cref="T:Eto.Forms.ImageView"/> instances manually.
            </remarks>
            <param name="image">Image to convert to a TableCell with an ImageView control.</param>
        </member>
        <member name="T:Eto.Forms.TableLayout">
            <summary>
            Layout for controls in a table
            </summary>
            <remarks>
            This is similar to an html table, though each control will fill its entire cell.
            </remarks>
        </member>
        <member name="P:Eto.Forms.TableLayout.Controls">
            <summary>
            Gets an enumeration of controls that are directly contained by this container
            </summary>
            <value>The contained controls.</value>
        </member>
        <member name="P:Eto.Forms.TableLayout.Rows">
            <summary>
            Gets the collection of rows in the table
            </summary>
            <value>The rows.</value>
        </member>
        <member name="P:Eto.Forms.TableLayout.Dimensions">
            <summary>
            Gets the dimensions of the table in cells.
            </summary>
            <value>The dimensions of the table.</value>
        </member>
        <member name="M:Eto.Forms.TableLayout.AutoSized(Eto.Forms.Control,System.Nullable{Eto.Drawing.Padding},System.Boolean)">
            <summary>
            Creates a table layout with an auto sized control.
            </summary>
            <remarks>
            Since controls fill an entire cell, you can use this method to create a layout that will ensure that the
            specified <paramref name="control"/> gets its preferred size instead of stretching to fill the container.
            
            By default, extra space will be added to the right and bottom, unless <paramref name="centered"/> is <c>true</c>,
            which will add equal space to the top/bottom, and left/right.
            </remarks>
            <returns>The table layout with the auto sized control.</returns>
            <param name="control">Control to auto size.</param>
            <param name="padding">Padding around the control</param>
            <param name="centered">If set to <c>true</c> center the control, otherwise control is upper left of the container.</param>
        </member>
        <member name="M:Eto.Forms.TableLayout.Horizontal(Eto.Forms.TableCell[])">
            <summary>
            Creates a horizontal table layout with the specified cells.
            </summary>
            <remarks>
            Since table layouts are by default vertical by defining the rows and the cells for each row,
            it is verbose to create nested tables when you want a horizontal table.  E.g. <code>new TableLayout(new TableRow(...))</code>.
            
            This method is used to easily create a single row table layout with a horizontal set of cells. E.g.
            <code>TableLayout.Horizontal(...)</code>
            </remarks>
            <param name="cells">Cells for the row</param>
            <returns>A new single row table layout with the specified cells</returns>
        </member>
        <member name="M:Eto.Forms.TableLayout.HorizontalScaled(Eto.Forms.TableCell[])">
            <summary>
            Creates a horizontal table layout with the specified cells scaled equally.
            </summary>
            <remarks>
            Since table layouts are by default vertical by defining the rows and the cells for each row,
            it is verbose to create nested tables when you want a horizontal table.  E.g. <code>new TableLayout(new TableRow(...))</code>.
            
            This method is used to easily create a single row table layout with a horizontal set of cells. E.g.
            <code>TableLayout.HorizontalScaled(...)</code>
            
            The difference between Horizontal and HorizontalScaled is that this method sets
            ScaleWidth on each cell.
            </remarks>
            <param name="cells">Cells for the row</param>
            <returns>A new single row table layout with the specified cells</returns>
        </member>
        <member name="M:Eto.Forms.TableLayout.Horizontal(System.Int32,Eto.Forms.TableCell[])">
            <summary>
            Creates a horizontal table layout with the specified cells.
            </summary>
            <remarks>
            Since table layouts are by default vertical by defining the rows and the cells for each row,
            it is verbose to create nested tables when you want a horizontal table.  E.g. <code>new TableLayout(new TableRow(...))</code>.
            
            This method is used to easily create a single row table layout with a horizontal set of cells. E.g.
            <code>TableLayout.Horizontal(...)</code>
            </remarks>
            <param name="spacing">Spacing between cells</param>
            <param name="cells">Cells for the row</param>
            <returns>A new single row table layout with the specified cells</returns>
        </member>
        <member name="M:Eto.Forms.TableLayout.HorizontalScaled(System.Int32,Eto.Forms.TableCell[])">
            <summary>
            Creates a horizontal table layout with the specified cells scaled equally.
            </summary>
            <remarks>
            Since table layouts are by default vertical by defining the rows and the cells for each row,
            it is verbose to create nested tables when you want a horizontal table.  E.g. <code>new TableLayout(new TableRow(...))</code>.
            
            This method is used to easily create a single row table layout with a horizontal set of cells. E.g.
            <code>TableLayout.HorizontalScaled(...)</code>
            
            The difference between Horizontal and HorizontalScaled is that this method sets
            ScaleWidth on each cell.
            </remarks>
            <param name="spacing">Spacing between cells</param>
            <param name="cells">Cells for the row</param>
            <returns>A new single row table layout with the specified cells</returns>
        </member>
        <member name="M:Eto.Forms.TableLayout.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Eto.Forms.TableLayout"/> class.
            </summary>
        </member>
        <member name="M:Eto.Forms.TableLayout.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Eto.Forms.TableLayout"/> class with the specified number of columns and rows.
            </summary>
            <param name="columns">Number of columns in the table.</param>
            <param name="rows">Number of rows in the table.</param>
        </member>
        <member name="M:Eto.Forms.TableLayout.#ctor(Eto.Drawing.Size)">
            <summary>
            Initializes a new instance of the <see cref="T:Eto.Forms.TableLayout"/> class with the specified dimensions.
            </summary>
            <param name="dimensions">Dimensions of the table.</param>
        </member>
        <member name="M:Eto.Forms.TableLayout.#ctor(Eto.Forms.TableRow[])">
            <summary>
            Initializes a new instance of the <see cref="T:Eto.Forms.TableLayout"/> class with the specified rows.
            </summary>
            <param name="rows">Rows to populate the table.</param>
        </member>
        <member name="M:Eto.Forms.TableLayout.#ctor(System.Collections.Generic.IEnumerable{Eto.Forms.TableRow})">
            <summary>
            Initializes a new instance of the <see cref="T:Eto.Forms.TableLayout"/> class with the specified rows.
            </summary>
            <param name="rows">Rows to populate the table.</param>
        </member>
        <member name="M:Eto.Forms.TableLayout.#ctor(System.Boolean,Eto.Forms.TableRow[])">
            <summary>
            Initializes a new instance of the <see cref="T:Eto.Forms.TableLayout"/> class with the specified rows.
            </summary>
            <param name="yscale">Scale all rows</param>
            <param name="rows">Rows to populate the table.</param>
        </member>
        <member name="M:Eto.Forms.TableLayout.SetColumnScale(System.Int32,System.Boolean)">
            <summary>
            Sets the scale for the specified column.
            </summary>
            <param name="column">Column to set the scale for.</param>
            <param name="scale">If set to <c>true</c> scale, otherwise size to preferred size of controls in the column.</param>
        </member>
        <member name="M:Eto.Forms.TableLayout.GetColumnScale(System.Int32)">
            <summary>
            Gets the scale for the specified column.
            </summary>
            <returns><c>true</c>, if column is scaled, <c>false</c> otherwise.</returns>
            <param name="column">Column to retrieve the scale.</param>
        </member>
        <member name="M:Eto.Forms.TableLayout.SetRowScale(System.Int32,System.Boolean)">
            <summary>
            Sets the scale for the specified row.
            </summary>
            <param name="row">Row to set the scale for.</param>
            <param name="scale">If set to <c>true</c> scale, otherwise size to preferred size of controls in the row.</param>
        </member>
        <member name="M:Eto.Forms.TableLayout.GetRowScale(System.Int32)">
            <summary>
            Gets the scale for the specified row.
            </summary>
            <returns><c>true</c>, if row is scaled, <c>false</c> otherwise.</returns>
            <param name="row">Row to retrieve the scale.</param>
        </member>
        <member name="M:Eto.Forms.TableLayout.Add(Eto.Forms.Control,System.Int32,System.Int32)">
            <summary>
            Adds a control to the specified x &amp; y coordinates.
            </summary>
            <remarks>
            If a control already exists in the location, it is replaced. Only one control can exist in a cell.
            </remarks>
            <param name="control">Control to add.</param>
            <param name="x">The x coordinate.</param>
            <param name="y">The y coordinate.</param>
        </member>
        <member name="M:Eto.Forms.TableLayout.Add(Eto.Forms.Control,System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Adds a control to the specified x &amp; y coordinates.
            </summary>
            <remarks>
            If a control already exists in the location, it is replaced. Only one control can exist in a cell.
            The <paramref name="xscale"/> and <paramref name="yscale"/> parameters are to easily set the scaling
            for the current row/column while adding the control.
            </remarks>
            <param name="control">Control to add.</param>
            <param name="x">The x coordinate.</param>
            <param name="y">The y coordinate.</param>
            <param name="xscale">If set to <c>true</c> xscale.</param>
            <param name="yscale">If set to <c>true</c> yscale.</param>
        </member>
        <member name="M:Eto.Forms.TableLayout.Add(Eto.Forms.Control,Eto.Drawing.Point)">
            <summary>
            Adds a control to the specified location.
            </summary>
            <remarks>
            If a control already exists in the location, it is replaced. Only one control can exist in a cell.
            </remarks>
            <param name="control">Control to add.</param>
            <param name="location">The location of the control.</param>
        </member>
        <member name="M:Eto.Forms.TableLayout.Move(Eto.Forms.Control,System.Int32,System.Int32)">
            <summary>
            Moves the specified control to the new x and y coordinates.
            </summary>
            <remarks>
            If a control already exists in the new location, it will be replaced. Only one control can exist in a cell.
            The old location of the control will have an empty space.
            </remarks>
            <param name="control">Control to move.</param>
            <param name="x">The new x coordinate.</param>
            <param name="y">The new y coordinate.</param>
        </member>
        <member name="M:Eto.Forms.TableLayout.Move(Eto.Forms.Control,Eto.Drawing.Point)">
            <summary>
            Move the specified control to a new location.
            </summary>
            <remarks>
            If a control already exists in the new location, it will be replaced. Only one control can exist in a cell.
            The old location of the control will have an empty space.
            </remarks>
            <param name="control">Control to move.</param>
            <param name="location">New location of the control.</param>
        </member>
        <member name="M:Eto.Forms.TableLayout.Remove(Eto.Forms.Control)">
            <summary>
            Remove the specified child control.
            </summary>
            <param name="child">Child control to remove.</param>
        </member>
        <member name="P:Eto.Forms.TableLayout.Spacing">
            <summary>
            Gets or sets the horizontal and vertical spacing between each of the cells of the table.
            </summary>
            <value>The spacing between the cells.</value>
        </member>
        <member name="P:Eto.Forms.TableLayout.Padding">
            <summary>
            Gets or sets the padding bordering the table.
            </summary>
            <value>The padding bordering the table.</value>
        </member>
        <member name="M:Eto.Forms.TableLayout.EndInit">
            <summary>
            Ends the initialization when loading from xaml or other code generated scenarios
            </summary>
        </member>
        <member name="M:Eto.Forms.TableLayout.OnPreLoad(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Eto.Forms.Control.PreLoad"/> event, and recurses to this container's children
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:Eto.Forms.TableLayout.OnLoad(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Eto.Forms.Control.Load"/> event, and recursed to this container's children
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="T:Eto.Forms.TableLayout.IHandler">
            <summary>
            Handler interface for <see cref="T:Eto.Forms.TableLayout"/>
            </summary>
            <remarks>
            Currently, TableLayout handlers only need to set its size while created and cannot be resized.
            </remarks>
        </member>
        <member name="M:Eto.Forms.TableLayout.IHandler.CreateControl(System.Int32,System.Int32)">
            <summary>
            Creates the control with the specified dimensions.
            </summary>
            <param name="columns">Number of columns for the table.</param>
            <param name="rows">Number of rows for the table.</param>
        </member>
        <member name="M:Eto.Forms.TableLayout.IHandler.GetColumnScale(System.Int32)">
            <summary>
            Gets the scale for the specified column.
            </summary>
            <returns><c>true</c>, if column is scaled, <c>false</c> otherwise.</returns>
            <param name="column">Column to retrieve the scale.</param>
        </member>
        <member name="M:Eto.Forms.TableLayout.IHandler.SetColumnScale(System.Int32,System.Boolean)">
            <summary>
            Sets the scale for the specified column.
            </summary>
            <param name="column">Column to set the scale for.</param>
            <param name="scale">If set to <c>true</c> scale, otherwise size to preferred size of controls in the column.</param>
        </member>
        <member name="M:Eto.Forms.TableLayout.IHandler.GetRowScale(System.Int32)">
            <summary>
            Gets the scale for the specified row.
            </summary>
            <returns><c>true</c>, if row is scaled, <c>false</c> otherwise.</returns>
            <param name="row">Row to retrieve the scale.</param>
        </member>
        <member name="M:Eto.Forms.TableLayout.IHandler.SetRowScale(System.Int32,System.Boolean)">
            <summary>
            Sets the scale for the specified row.
            </summary>
            <param name="row">Row to set the scale for.</param>
            <param name="scale">If set to <c>true</c> scale, otherwise size to preferred size of controls in the row.</param>
        </member>
        <member name="P:Eto.Forms.TableLayout.IHandler.Spacing">
            <summary>
            Gets or sets the horizontal and vertical spacing between each of the cells of the table.
            </summary>
            <value>The spacing between the cells.</value>
        </member>
        <member name="P:Eto.Forms.TableLayout.IHandler.Padding">
            <summary>
            Gets or sets the padding bordering the table.
            </summary>
            <value>The padding bordering the table.</value>
        </member>
        <member name="M:Eto.Forms.TableLayout.op_Implicit(Eto.Forms.TableRow[])~Eto.Forms.TableLayout">
            <summary>
            Implicitly converts an array of rows to a vertical TableLayout
            </summary>
            <param name="rows">Rows to convert.</param>
        </member>
        <member name="T:Eto.Forms.TableRow">
            <summary>
            Represents the contents of a row in a <see cref="T:Eto.Forms.TableLayout"/> 
            </summary>
        </member>
        <member name="P:Eto.Forms.TableRow.ScaleHeight">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Eto.Forms.TableCell"/> will scale its height
            </summary>
            <remarks>
            All controls in the same row of this cell will get the same scaling value.
            Scaling will make the row expand to fit the rest of the height of the container, minus the preferred
            height of any non-scaled rows.
            
            If there are no rows with height scaling, the last row will automatically get scaled.
            
            With scaling turned off, cells in the row will fit the preferred size of the tallest control.
            </remarks>
            <value><c>true</c> if scale height; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Eto.Forms.TableRow.Cells">
            <summary>
            Gets or sets the cells in this row.
            </summary>
            <value>The cells in the row.</value>
        </member>
        <member name="M:Eto.Forms.TableRow.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Eto.Forms.TableRow"/> class.
            </summary>
        </member>
        <member name="M:Eto.Forms.TableRow.#ctor(Eto.Forms.TableCell[])">
            <summary>
            Initializes a new instance of the <see cref="T:Eto.Forms.TableRow"/> class with the specified cells.
            </summary>
            <param name="cells">Cells to populate the row.</param>
        </member>
        <member name="M:Eto.Forms.TableRow.#ctor(System.Collections.Generic.IEnumerable{Eto.Forms.TableCell})">
            <summary>
            Initializes a new instance of the <see cref="T:Eto.Forms.TableRow"/> class with the specified cells.
            </summary>
            <param name="cells">Cells to populate the row.</param>
        </member>
        <member name="M:Eto.Forms.TableRow.op_Implicit(Eto.Forms.Control)~Eto.Forms.TableRow">
            <summary>
            Implicitly converts a control to a TableRow
            </summary>
            <remarks>
            Used to make defining a table's contents easier by allowing you to pass a control as a table row
            </remarks>
            <param name="control">Control to convert.</param>
        </member>
        <member name="M:Eto.Forms.TableRow.op_Implicit(Eto.Forms.TableCell[])~Eto.Forms.TableRow">
            <summary>
            Implicitly converts an array of cells to a TableRow
            </summary>
            <param name="cells">Cells to convert.</param>
        </member>
        <member name="M:Eto.Forms.TableRow.op_Implicit(System.String)~Eto.Forms.TableRow">
            <summary>
            Converts a string to a TableRow with a label control implicitly.
            </summary>
            <remarks>
            This provides an easy way to add labels to your layout through code, without having to create <see cref="T:Eto.Forms.Label"/> instances.
            </remarks>
            <param name="labelText">Text to convert to a Label control.</param>
        </member>
        <member name="M:Eto.Forms.TableRow.op_Implicit(Eto.Drawing.Image)~Eto.Forms.TableRow">
            <summary>
            Converts an <see cref="T:Eto.Drawing.Image"/> to a TableRow with a <see cref="T:Eto.Forms.ImageView"/> control implicitly.
            </summary>
            <remarks>
            This provides an easy way to add images to your layout through code, without having to create <see cref="T:Eto.Forms.ImageView"/> instances manually.
            </remarks>
            <param name="image">Image to convert to a TableRow with an ImageView control.</param>
        </member>
        <member name="M:Eto.Forms.TableRow.op_Implicit(Eto.Forms.TableRow)~Eto.Forms.Control">
            <summary>
            Implicitly converts a TableRow to a control
            </summary>
            <remarks>
            Used to make defining a table's contents easier by allowing you to pass a table row as a control.
            </remarks>
            <param name="row">Row to convert.</param>
        </member>
        <member name="M:Eto.Forms.TableRow.op_Implicit(Eto.Forms.TableRow)~Eto.Forms.TableCell">
            <summary>
            Implicitly converts a TableRow to a cell
            </summary>
            <remarks>
            Used to make defining a table's contents easier by allowing you to pass a table row as a cell
            without having to create a table layout and cell manually.
            </remarks>
            <param name="row">Row to convert.</param>
        </member>
        <member name="T:Eto.Forms.IListItem">
            <summary>
            Interface for an item in a list control.
            </summary>
            <remarks>
            If you have a list of your own objects, it is more efficient to use them directly with the list control by 
            passing a collection to the DataStore property, and using TextBinding/KeyBinding to specify how to get/set the
            Text and Key properties.
            
            Otherwise, use <see cref="T:Eto.Forms.ListItem"/> to define items.  This may be depricated in the future.
            </remarks>
        </member>
        <member name="P:Eto.Forms.IListItem.Text">
            <summary>
            Gets or sets the text of the item.
            </summary>
            <value>The text.</value>
        </member>
        <member name="P:Eto.Forms.IListItem.Key">
            <summary>
            Gets or sets the unique key of the item.
            </summary>
            <remarks>
            The key is typically used to identify each item uniquely.  If no key is specified, the <see cref="P:Eto.Forms.IListItem.Text"/>
            is used as the key.
            </remarks>
            <value>The key of the item.</value>
        </member>
        <member name="T:Eto.Forms.ListItem">
            <summary>
            Represents an item for list controls.
            </summary>
            <remarks>
            If you have a list of your own objects, it is more efficient to use them directly with the list control by 
            passing a collection to the DataStore property, and use <see cref="P:Eto.Forms.ListControl.ItemTextBinding"/> and <see cref="P:Eto.Forms.ListControl.ItemKeyBinding"/> instead.
            </remarks>
            <seealso cref="T:Eto.Forms.ListItemCollection"/>
        </member>
        <member name="P:Eto.Forms.ListItem.Text">
            <summary>
            Gets or sets the text of the item.
            </summary>
            <value>The text.</value>
        </member>
        <member name="P:Eto.Forms.ListItem.Key">
            <summary>
            Gets or sets the unique key of the item.
            </summary>
            <remarks>
            The key is typically used to identify each item uniquely.  If no key is specified, the <see cref="P:Eto.Forms.ListItem.Text"/>
            is used as the key.
            </remarks>
            <value>The key of the item.</value>
        </member>
        <member name="P:Eto.Forms.ListItem.Tag">
            <summary>
            Gets or sets custom data for the item.
            </summary>
            <value>The custom data.</value>
        </member>
        <member name="M:Eto.Forms.ListItem.ToString">
            <summary>
            Gets the listItem's string
            </summary>
            <returns>The string</returns>
        </member>
        <member name="M:Eto.Forms.ListItem.op_Implicit(System.String)~Eto.Forms.ListItem">
            <summary>>
            Converts a string to a list item implicitly
            </summary>
            <remarks>
            This is so you can initialize an array of ListItem objects by using string constant values.
            </remarks>
            <param name="text">Text to create the list item with</param>
        </member>
        <member name="T:Eto.Forms.ImageListItem">
            <summary>
            List item for list controls that accept an image (e.g. <see cref="T:Eto.Forms.ListBox"/>)
            </summary>
            <remarks>
            If you have a list of your own objects, it is more efficient to use them directly with the list control by 
            passing a collection to the DataStore property, and use <see cref="P:Eto.Forms.ListControl.ItemTextBinding"/>, <see cref="P:Eto.Forms.ListControl.ItemKeyBinding"/>,
            and <see cref="P:Eto.Forms.ListBox.ItemImageBinding"/>.
            </remarks>
        </member>
        <member name="P:Eto.Forms.ImageListItem.Image">
            <summary>
            Gets or sets the image for this item.
            </summary>
            <value>The item's image.</value>
        </member>
        <member name="T:Eto.Forms.FixedMaskedTextProvider`1">
            <summary>
            Implements a fixed masked text provider that converts to the specified type of <typeparamref name="T"/>, using the standard System.ComponentModel.MaskedTextProvider.
            </summary>
        </member>
        <member name="P:Eto.Forms.FixedMaskedTextProvider`1.ConvertToValue">
            <summary>
            Gets or sets a delegate to convert the mask string to a value of type <typeparamref name="T"/>
            </summary>
            <value>The delegate to convert text to the value.</value>
        </member>
        <member name="P:Eto.Forms.FixedMaskedTextProvider`1.ConvertToText">
            <summary>
            Gets or sets a delegate to convert the a value of type <typeparamref name="T"/> to the mask string.
            </summary>
            <value>The delegate to convert the value to text.</value>
        </member>
        <member name="M:Eto.Forms.FixedMaskedTextProvider`1.#ctor(System.String,System.Globalization.CultureInfo,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Eto.Forms.FixedMaskedTextProvider`1"/> class.
            </summary>
            <param name="mask">Mask for the input. See <see cref="P:Eto.Forms.FixedMaskedTextProvider.Mask"/> for mask format.</param>
            <param name="culture">Culture to format date/time separators and numeric placeholders.</param>
            <param name="allowPromptAsInput">If set to <c>true</c>, then allow the <see cref="P:Eto.Forms.FixedMaskedTextProvider.PromptChar"/> as valid input.</param>
            <param name="restrictToAscii">If set to <c>true</c>, restrict input characters to ASCII only (a-z or A-Z).</param>
        </member>
        <member name="P:Eto.Forms.FixedMaskedTextProvider`1.Value">
            <summary>
            Gets or sets the translated value of the mask.
            </summary>
            <value>The value of the mask.</value>
        </member>
        <member name="T:Eto.Forms.FixedMaskedTextProvider">
            <summary>
            Implements a fixed masked text provider, using the standard System.ComponentModel.MaskedTextProvider.
            </summary>
            <remarks>
            This wraps the standard provider in an interface used by the <see cref="T:Eto.Forms.MaskedTextBox"/> so that we can provide
            different implementations of masked text providers.
            
            The implementation of this is defined in each platform assembly so that we can use this from a PCL assembly.
            </remarks>
        </member>
        <member name="P:Eto.Forms.FixedMaskedTextProvider.Culture">
            <summary>
            Gets the culture for the mask, as specified in the constructor.
            </summary>
            <value>The culture for the mask.</value>
        </member>
        <member name="P:Eto.Forms.FixedMaskedTextProvider.Mask">
            <summary>
            Gets the mask for this provider, as specified in the constructor.
            </summary>
            <remarks>
            The mask format can consist of the following characters:
            
            0 - Required digit from 0-9.
            9 - Optional digit or space.
            # - Optional digit, space, or sign (+/-).  If blank, then it is output as a space in the Text value.
            L - Required upper or lowercase letter.
            ? - Optional upper or lowercase letter.
            &amp; - Required character. If <see cref="P:Eto.Forms.FixedMaskedTextProvider.AsciiOnly"/> is true, then behaves like L.
            C - Optional character. If <see cref="P:Eto.Forms.FixedMaskedTextProvider.AsciiOnly"/> is true, then behaves like ?.
            A - Required alphanumeric character. If <see cref="P:Eto.Forms.FixedMaskedTextProvider.AsciiOnly"/> is true, then behaves like L.
            a - Optional alphanumeric. If <see cref="P:Eto.Forms.FixedMaskedTextProvider.AsciiOnly"/> is true, then behaves like ?.
            . - Decimal placeholder based on the specified <see cref="P:Eto.Forms.FixedMaskedTextProvider.Culture"/> for the mask.
            , - Thousands placeholder based on the specified <see cref="P:Eto.Forms.FixedMaskedTextProvider.Culture"/> for the mask.
            : - Time separator based on the specified <see cref="P:Eto.Forms.FixedMaskedTextProvider.Culture"/> for the mask.
            / - Date separator based on the specified <see cref="P:Eto.Forms.FixedMaskedTextProvider.Culture"/> for the mask.
            $ - Currency symbol based on the specified <see cref="P:Eto.Forms.FixedMaskedTextProvider.Culture"/> for the mask.
            &lt; - Shift all characters that follow to lower case.
            &gt; - Shift all characters that follow to upper case.
            | - Disables a previous shift to upper or lower case.
            \ - Escape the following character into a literal.
            All other characters are treated as literal and cannot be moved or deleted.
            </remarks>
            <value>The text mask.</value>
        </member>
        <member name="P:Eto.Forms.FixedMaskedTextProvider.AllowPromptAsInput">
            <summary>
            Gets a value indicating whether the <see cref="P:Eto.Forms.FixedMaskedTextProvider.PromptChar"/> can be a valid input character by the user.
            </summary>
            <value><c>true</c> to allow prompt as input; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Eto.Forms.FixedMaskedTextProvider.PromptChar">
            <summary>
            Gets or sets the character to show for each unfilled edit position in the mask.
            </summary>
            <value>The prompt character.</value>
        </member>
        <member name="P:Eto.Forms.FixedMaskedTextProvider.PasswordChar">
            <summary>
            In password mode, gets or sets the character to show for filled edit characters in the mask.
            </summary>
            <value>The password character.</value>
        </member>
        <member name="P:Eto.Forms.FixedMaskedTextProvider.AsciiOnly">
            <summary>
            Gets a value indicating whether the input only accepts ascii characters A-Z or a-z.
            </summary>
            <value><c>true</c> if only ASCII characters are accepted; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Eto.Forms.FixedMaskedTextProvider.#ctor(System.String,System.Globalization.CultureInfo,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Eto.Forms.FixedMaskedTextProvider"/> class.
            </summary>
            <param name="mask">Mask for the input. See <see cref="P:Eto.Forms.FixedMaskedTextProvider.Mask"/> for mask format.</param>
            <param name="culture">Culture to format date/time separators and numeric placeholders.</param>
            <param name="allowPromptAsInput">If set to <c>true</c>, then allow the <see cref="P:Eto.Forms.FixedMaskedTextProvider.PromptChar"/> as valid input.</param>
            <param name="restrictToAscii">If set to <c>true</c>, restrict input characters to ASCII only (a-z or A-Z).</param>
        </member>
        <member name="M:Eto.Forms.FixedMaskedTextProvider.Insert(System.Char,System.Int32@)">
            <summary>
            Called to insert a character at the specified position in the masked text.
            </summary>
            <param name="character">Character to insert.</param>
            <param name="position">Position to insert at.</param>
            <returns><c>true</c> when the insertion was successful, or <c>false</c> if it failed.</returns>
        </member>
        <member name="M:Eto.Forms.FixedMaskedTextProvider.Replace(System.Char,System.Int32@)">
            <summary>
            Called to replace a character at the specified position in the masked text.
            </summary>
            <param name="character">Character to insert.</param>
            <param name="position">Position to insert at.</param>
            <returns><c>true</c> when the replacement was successful, or <c>false</c> if it failed.</returns>
        </member>
        <member name="M:Eto.Forms.FixedMaskedTextProvider.Delete(System.Int32@,System.Int32,System.Boolean)">
            <summary>
            Called to delete a range of characters at the specified position in the masked text.
            </summary>
            <param name="position">Position to delete at.</param>
            <param name="length">Length of text (in the mask) to delete</param> 
            <param name="forward"><c>true</c> to delete the text forward, or <c>false</c> to delete backward</param>
            <returns><c>true</c> when the deletion was successful, or <c>false</c> if it failed.</returns>
        </member>
        <member name="M:Eto.Forms.FixedMaskedTextProvider.Clear(System.Int32@,System.Int32,System.Boolean)">
            <summary>
            Called to clear a range of characters at the specified position in the masked text.
            </summary>
            <remarks>
            The cleared characters usually show the prompt character after cleared.
            This is useful for fixed length mask providers.  For variable length, this is usually the same
            as calling <see cref="M:Eto.Forms.FixedMaskedTextProvider.Delete(System.Int32@,System.Int32,System.Boolean)"/>.
            </remarks>
            <param name="position">Position to clear at.</param>
            <param name="length">Length of text (in the mask) to clear</param> 
            <param name="forward"><c>true</c> to delete the text forward, or <c>false</c> to delete backward</param>
            <returns><c>true</c> when the deletion was successful, or <c>false</c> if it failed.</returns>
        </member>
        <member name="P:Eto.Forms.FixedMaskedTextProvider.DisplayText">
            <summary>
            Gets the display text, including prompt characters.
            </summary>
            <value>The display text.</value>
        </member>
        <member name="P:Eto.Forms.FixedMaskedTextProvider.Text">
            <summary>
            Gets or sets the text, usually excluding prompt or literal characters depending on the mask provider.
            </summary>
            <value>The text value for the mask.</value>
        </member>
        <member name="P:Eto.Forms.FixedMaskedTextProvider.MaskCompleted">
            <summary>
            Gets a value indicating whether the mask has all required text to pass its validation.
            </summary>
        </member>
        <member name="P:Eto.Forms.FixedMaskedTextProvider.IsPassword">
            <summary>
            Gets or sets a value indicating whether the mask should be password protected.
            </summary>
            <value><c>true</c> if this instance is password; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Eto.Forms.FixedMaskedTextProvider.IncludeLiterals">
            <summary>
            Gets or sets a value indicating that the <see cref="P:Eto.Forms.FixedMaskedTextProvider.Text"/> property includes literals in the mask.
            </summary>
            <value><c>true</c> to include literals; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Eto.Forms.FixedMaskedTextProvider.IncludePrompt">
            <summary>
            Gets or sets a value indicating that the <see cref="P:Eto.Forms.FixedMaskedTextProvider.Text"/> property includes prompt characters for each
            edit position in the mask.
            </summary>
            <value><c>true</c> to include prompt; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Eto.Forms.FixedMaskedTextProvider.SkipLiterals">
            <summary>
            Gets or sets a value indicating that the user can type literals to skip them in the mask.
            </summary>
            <value><c>true</c> to allow the user to enter literals to skip them; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Eto.Forms.FixedMaskedTextProvider.AutoAdvance">
            <summary>
            Gets or sets a value indicating that the cursor position will advance past literals to the next available 
            edit position automatically.
            </summary>
            <value><c>true</c> to auto advance past literals; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Eto.Forms.FixedMaskedTextProvider.EditPositions">
            <summary>
            Gets an enumeration of all valid edit positions in the mask.
            </summary>
            <value>The valid edit positions.</value>
        </member>
        <member name="P:Eto.Forms.FixedMaskedTextProvider.IsEmpty">
            <summary>
            Gets a value indicating the mask is empty with no characters filled out.
            </summary>
        </member>
        <member name="P:Eto.Forms.FixedMaskedTextProvider.MaskFull">
            <summary>
            Gets a value indicating that all available edit positions in the mask have been filled out.
            </summary>
            <value><c>true</c> if mask the mask is full; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Eto.Forms.FixedMaskedTextProvider.IHandler">
            <summary>
            Handler interface for implementations of the <see cref="T:Eto.Forms.FixedMaskedTextProvider"/>.
            </summary>
        </member>
        <member name="M:Eto.Forms.FixedMaskedTextProvider.IHandler.Create(System.String,System.Globalization.CultureInfo,System.Boolean,System.Boolean)">
            <summary>
            Called when a new instance of the <see cref="T:Eto.Forms.FixedMaskedTextProvider"/> is created
            </summary>
            <param name="mask">Mask for the input. See <see cref="P:Eto.Forms.FixedMaskedTextProvider.IHandler.Mask"/> for mask format.</param>
            <param name="culture">Culture to format date/time separators and numeric placeholders.</param>
            <param name="allowPromptAsInput">If set to <c>true</c>, then allow the <see cref="P:Eto.Forms.FixedMaskedTextProvider.IHandler.PromptChar"/> as valid input.</param>
            <param name="restrictToAscii">If set to <c>true</c>, restrict input characters to ASCII only (a-z or A-Z).</param>
        </member>
        <member name="P:Eto.Forms.FixedMaskedTextProvider.IHandler.Culture">
            <summary>
            Gets the culture for the mask, as specified in the constructor.
            </summary>
            <value>The culture for the mask.</value>
        </member>
        <member name="P:Eto.Forms.FixedMaskedTextProvider.IHandler.Mask">
            <summary>
            Gets the mask for this provider, as specified in the constructor.
            </summary>
        </member>
        <member name="P:Eto.Forms.FixedMaskedTextProvider.IHandler.AllowPromptAsInput">
            <summary>
            Gets a value indicating whether the <see cref="P:Eto.Forms.FixedMaskedTextProvider.IHandler.PromptChar"/> can be a valid input character by the user.
            </summary>
            <value><c>true</c> to allow prompt as input; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Eto.Forms.FixedMaskedTextProvider.IHandler.AsciiOnly">
            <summary>
            Gets a value indicating whether the input only accepts ascii characters A-Z or a-z.
            </summary>
            <value><c>true</c> if only ASCII characters are accepted; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Eto.Forms.FixedMaskedTextProvider.IHandler.IsPassword">
            <summary>
            Gets or sets a value indicating whether the mask should be password protected.
            </summary>
            <value><c>true</c> if this instance is password; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Eto.Forms.FixedMaskedTextProvider.IHandler.PromptChar">
            <summary>
            Gets or sets the character to show for each unfilled edit position in the mask.
            </summary>
            <value>The prompt character.</value>
        </member>
        <member name="P:Eto.Forms.FixedMaskedTextProvider.IHandler.PasswordChar">
            <summary>
            In password mode, gets or sets the character to show for filled edit characters in the mask.
            </summary>
            <value>The password character.</value>
        </member>
        <member name="P:Eto.Forms.FixedMaskedTextProvider.IHandler.IncludeLiterals">
            <summary>
            Gets or sets a value indicating that the <see cref="P:Eto.Forms.FixedMaskedTextProvider.Text"/> property includes literals in the mask.
            </summary>
            <value><c>true</c> to include literals; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Eto.Forms.FixedMaskedTextProvider.IHandler.IncludePrompt">
            <summary>
            Gets or sets a value indicating that the <see cref="P:Eto.Forms.FixedMaskedTextProvider.Text"/> property includes prompt characters for each
            edit position in the mask.
            </summary>
            <value><c>true</c> to include prompt; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Eto.Forms.FixedMaskedTextProvider.IHandler.SkipLiterals">
            <summary>
            Gets or sets a value indicating that the user can type literals to skip them in the mask.
            </summary>
            <value><c>true</c> to allow the user to enter literals to skip them; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Eto.Forms.FixedMaskedTextProvider.IHandler.AutoAdvance">
            <summary>
            Gets or sets a value indicating that the cursor position will advance past literals to the next available 
            edit position automatically.
            </summary>
            <value><c>true</c> to auto advance past literals; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Eto.Forms.FixedMaskedTextProvider.IHandler.MaskFull">
            <summary>
            Gets a value indicating that all available edit positions in the mask have been filled out.
            </summary>
            <value><c>true</c> if mask the mask is full; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Eto.Forms.IMaskedTextProvider">
            <summary>
            Interface for a masked text provider that can be used with <see cref="T:Eto.Forms.MaskedTextBox"/>.
            </summary>
            <remarks>
            This defines the interface that the <see cref="T:Eto.Forms.MaskedTextBox"/> uses when inserting, deleting, and clearing characters
            from a masked string.
            
            This can be implemented by both variable and fixed masks (unlike the standard System.ComponentModel.MaskedTextProvider), 
            and provides a way to create your own completely custom masks.
            You can also use the <see cref="T:Eto.Forms.VariableMaskedTextProvider"/> as a base for custom masks to implement the default functionality.
            </remarks>
        </member>
        <member name="M:Eto.Forms.IMaskedTextProvider.Insert(System.Char,System.Int32@)">
            <summary>
            Called to insert a character at the specified position in the masked text.
            </summary>
            <param name="character">Character to insert.</param>
            <param name="position">Position to insert at.</param>
            <returns><c>true</c> when the insertion was successful, or <c>false</c> if it failed.</returns>
        </member>
        <member name="M:Eto.Forms.IMaskedTextProvider.Replace(System.Char,System.Int32@)">
            <summary>
            Called to replace a character at the specified position in the masked text.
            </summary>
            <param name="character">Character to insert.</param>
            <param name="position">Position to insert at.</param>
            <returns><c>true</c> when the replacement was successful, or <c>false</c> if it failed.</returns>
        </member>
        <member name="M:Eto.Forms.IMaskedTextProvider.Delete(System.Int32@,System.Int32,System.Boolean)">
            <summary>
            Called to delete a range of characters at the specified position in the masked text.
            </summary>
            <param name="position">Position to delete at.</param>
            <param name="length">Length of text (in the mask) to delete</param> 
            <param name="forward"><c>true</c> to delete the text forward, or <c>false</c> to delete backward</param>
            <returns><c>true</c> when the deletion was successful, or <c>false</c> if it failed.</returns>
        </member>
        <member name="M:Eto.Forms.IMaskedTextProvider.Clear(System.Int32@,System.Int32,System.Boolean)">
            <summary>
            Called to clear a range of characters at the specified position in the masked text.
            </summary>
            <remarks>
            The cleared characters usually show the prompt character after cleared.
            This is useful for fixed length mask providers.  For variable length, this is usually the same
            as calling <see cref="M:Eto.Forms.IMaskedTextProvider.Delete(System.Int32@,System.Int32,System.Boolean)"/>.
            </remarks>
            <param name="position">Position to clear at.</param>
            <param name="length">Length of text (in the mask) to clear</param> 
            <param name="forward"><c>true</c> to delete the text forward, or <c>false</c> to delete backward</param>
            <returns><c>true</c> when the deletion was successful, or <c>false</c> if it failed.</returns>
        </member>
        <member name="P:Eto.Forms.IMaskedTextProvider.DisplayText">
            <summary>
            Gets the display text, including prompt characters.
            </summary>
            <value>The display text.</value>
        </member>
        <member name="P:Eto.Forms.IMaskedTextProvider.Text">
            <summary>
            Gets or sets the text, usually excluding prompt or literal characters depending on the mask provider.
            </summary>
            <value>The text.</value>
        </member>
        <member name="P:Eto.Forms.IMaskedTextProvider.MaskCompleted">
            <summary>
            Gets a value indicating whether the mask has all required text to pass its validation.
            </summary>
            <value><c>true</c> if mask is completed; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Eto.Forms.IMaskedTextProvider.EditPositions">
            <summary>
            Gets an enumeration of all valid edit positions in the mask.
            </summary>
            <value>The valid edit positions.</value>
        </member>
        <member name="P:Eto.Forms.IMaskedTextProvider.IsEmpty">
            <summary>
            Gets a value indicating the mask is empty with no characters filled out.
            </summary>
            <value><c>true</c> if the mask value is empty; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Eto.Forms.IMaskedTextProvider`1">
            <summary>
            Interface for a masked text provider that can be translated to a specific value.
            </summary>
        </member>
        <member name="P:Eto.Forms.IMaskedTextProvider`1.Value">
            <summary>
            Gets or sets the translated value of the mask.
            </summary>
            <value>The value of the mask.</value>
        </member>
        <member name="T:Eto.Forms.NumericMaskedTextProvider`1">
            <summary>
            Masked text provider for numeric input of the specified type.
            </summary>
        </member>
        <member name="M:Eto.Forms.NumericMaskedTextProvider`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Eto.Forms.NumericMaskedTextProvider`1"/> class.
            </summary>
        </member>
        <member name="P:Eto.Forms.NumericMaskedTextProvider`1.Value">
            <summary>
            Gets or sets the translated value of the mask.
            </summary>
            <value>The value of the mask.</value>
        </member>
        <member name="T:Eto.Forms.NumericMaskedTextProvider">
            <summary>
            Masked text provider for numeric input.
            </summary>
        </member>
        <member name="P:Eto.Forms.NumericMaskedTextProvider.AllowDecimal">
            <summary>
            Gets or sets a value indicating that the mask can optionally include a decimal, as specified by the <see cref="P:Eto.Forms.NumericMaskedTextProvider.DecimalCharacter"/>.
            </summary>
            <value><c>true</c> to allow the decimal; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Eto.Forms.NumericMaskedTextProvider.AllowSign">
            <summary>
            Gets or sets a value indicating that the mask can optionally include the sign, as specified by <see cref="P:Eto.Forms.NumericMaskedTextProvider.SignCharacters"/>.
            </summary>
            <value><c>true</c> to allow a sign character; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Eto.Forms.NumericMaskedTextProvider.SignCharacters">
            <summary>
            Gets or sets the sign characters when <see cref="P:Eto.Forms.NumericMaskedTextProvider.AllowSign"/> is <c>true</c>. Default is '+' and '-'.
            </summary>
            <value>The sign characters.</value>
        </member>
        <member name="P:Eto.Forms.NumericMaskedTextProvider.Validate">
            <summary>
            Gets or sets a delegate used to validate the mask.
            </summary>
            <value>The validation delegate.</value>
        </member>
        <member name="P:Eto.Forms.NumericMaskedTextProvider.DecimalCharacter">
            <summary>
            Gets or sets the decimal character when <see cref="P:Eto.Forms.NumericMaskedTextProvider.AllowDecimal"/> is <c>true</c>. Default is '.'.
            </summary>
            <value>The decimal character.</value>
        </member>
        <member name="M:Eto.Forms.NumericMaskedTextProvider.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Eto.Forms.NumericMaskedTextProvider"/> class.
            </summary>
        </member>
        <member name="P:Eto.Forms.NumericMaskedTextProvider.MaskCompleted">
            <summary>
            Gets a value indicating whether the mask has all required text to pass its validation.
            </summary>
            <value><c>true</c> if mask is completed; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Eto.Forms.NumericMaskedTextProvider.Replace(System.Char,System.Int32@)">
            <summary>
            Called to replace a character at the specified position in the masked text.
            </summary>
            <param name="character">Character to insert.</param>
            <param name="position">Position to insert at.</param>
            <returns><c>true</c> when the replacement was successful, or <c>false</c> if it failed.</returns>
        </member>
        <member name="M:Eto.Forms.NumericMaskedTextProvider.Insert(System.Char,System.Int32@)">
            <summary>
            Called to insert a character at the specified position in the masked text.
            </summary>
            <param name="character">Character to insert.</param>
            <param name="position">Position to insert at.</param>
            <returns><c>true</c> when the insertion was successful, or <c>false</c> if it failed.</returns>
        </member>
        <member name="T:Eto.Forms.VariableMaskedTextProvider">
            <summary>
            Base masked text provider that can be used for variable length masks.
            </summary>
        </member>
        <member name="P:Eto.Forms.VariableMaskedTextProvider.Builder">
            <summary>
            Gets the underlying string builder for the current mask text value.
            </summary>
            <value>The string builder builder.</value>
        </member>
        <member name="M:Eto.Forms.VariableMaskedTextProvider.Insert(System.Char,System.Int32@)">
            <summary>
            Called to insert a character at the specified position in the masked text.
            </summary>
            <param name="character">Character to insert.</param>
            <param name="position">Position to insert at.</param>
            <returns><c>true</c> when the insertion was successful, or <c>false</c> if it failed.</returns>
        </member>
        <member name="M:Eto.Forms.VariableMaskedTextProvider.Replace(System.Char,System.Int32@)">
            <summary>
            Called to replace a character at the specified position in the masked text.
            </summary>
            <param name="character">Character to insert.</param>
            <param name="position">Position to insert at.</param>
            <returns><c>true</c> when the replacement was successful, or <c>false</c> if it failed.</returns>
        </member>
        <member name="M:Eto.Forms.VariableMaskedTextProvider.Delete(System.Int32@,System.Int32,System.Boolean)">
            <summary>
            Called to delete a range of characters at the specified position in the masked text.
            </summary>
            <param name="position">Position to delete at.</param>
            <param name="length">Length of text (in the mask) to delete</param> 
            <param name="forward"><c>true</c> to delete the text forward, or <c>false</c> to delete backward</param>
            <returns><c>true</c> when the deletion was successful, or <c>false</c> if it failed.</returns>
        </member>
        <member name="M:Eto.Forms.VariableMaskedTextProvider.Clear(System.Int32@,System.Int32,System.Boolean)">
            <summary>
            Called to clear a range of characters at the specified position in the masked text.
            </summary>
            <remarks>
            The cleared characters usually show the prompt character after cleared.
            This is useful for fixed length mask providers.  For variable length, this is usually the same
            as calling <see cref="M:Eto.Forms.VariableMaskedTextProvider.Delete(System.Int32@,System.Int32,System.Boolean)"/>.
            </remarks>
            <param name="position">Position to clear at.</param>
            <param name="length">Length of text (in the mask) to clear</param> 
            <param name="forward"><c>true</c> to delete the text forward, or <c>false</c> to delete backward</param>
            <returns><c>true</c> when the deletion was successful, or <c>false</c> if it failed.</returns>
        </member>
        <member name="P:Eto.Forms.VariableMaskedTextProvider.MaskCompleted">
            <summary>
            Gets a value indicating whether the mask has all required text to pass its validation.
            </summary>
            <value><c>true</c> if mask is completed; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Eto.Forms.VariableMaskedTextProvider.DisplayText">
            <summary>
            Gets the display text, including prompt characters.
            </summary>
            <value>The display text.</value>
        </member>
        <member name="P:Eto.Forms.VariableMaskedTextProvider.Text">
            <summary>
            Gets or sets the text, usually excluding prompt or literal characters depending on the mask provider.
            </summary>
            <value>The text.</value>
        </member>
        <member name="P:Eto.Forms.VariableMaskedTextProvider.EditPositions">
            <summary>
            Gets an enumeration of all valid edit positions in the mask.
            </summary>
            <value>The valid edit positions.</value>
        </member>
        <member name="P:Eto.Forms.VariableMaskedTextProvider.IsEmpty">
            <summary>
            Gets a value indicating the mask is empty with no characters filled out.
            </summary>
            <value><c>true</c> if the mask value is empty; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Eto.Forms.ButtonMenuItem">
            <summary>
            Menu item for a button / submenu
            </summary>
            <copyright>(c) 2014 by Curtis Wensley</copyright>
            <license type="BSD-3">See LICENSE for full terms</license>
        </member>
        <member name="P:Eto.Forms.ButtonMenuItem.Items">
            <summary>
            Gets the collection of menu items.
            </summary>
            <value>The items.</value>
        </member>
        <member name="P:Eto.Forms.ButtonMenuItem.Trim">
            <summary>
            Gets a value indicating whether this sub menu should trim its child menu items when loaded onto a form
            </summary>
            <remarks>Trimming will collapse any duplicate splitter items. This is done so that you can easily merge your menus.</remarks>
        </member>
        <member name="M:Eto.Forms.ButtonMenuItem.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Eto.Forms.ButtonMenuItem"/> class.
            </summary>
        </member>
        <member name="M:Eto.Forms.ButtonMenuItem.#ctor(System.EventHandler{System.EventArgs})">
            <summary>
            Initializes a new instance of the <see cref="T:Eto.Forms.ButtonMenuItem"/> class with the specified <paramref name="click"/> handler.
            </summary>
            <remarks>
            This is a convenience constructor to set up the click event.
            </remarks>
            <param name="click">Delegate to handle when the menu item is clicked.</param>
        </member>
        <member name="M:Eto.Forms.ButtonMenuItem.#ctor(Eto.Forms.Command)">
            <summary>
            Initializes a new instance of the <see cref="T:Eto.Forms.ButtonMenuItem"/> class with the specified command.
            </summary>
            <param name="command">Command to initialize the menu item with.</param>
        </member>
        <member name="P:Eto.Forms.ButtonMenuItem.Image">
            <summary>
            Gets or sets the image to show for the menu item.
            </summary>
            <remarks>
            Some platforms (e.g. OS X) will not show an image by default, but can be enabled using the handler implementation
            via styles.
            </remarks>
            <value>The image for the menu item.</value>
        </member>
        <member name="M:Eto.Forms.ButtonMenuItem.OnLoad(System.EventArgs)">
            <summary>
            Called when the menu is assigned to a control/window
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:Eto.Forms.ButtonMenuItem.OnUnLoad(System.EventArgs)">
            <summary>
            Called when the menu is removed from a control/window
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:Eto.Forms.ButtonMenuItem.OnDataContextChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Eto.Forms.BindableWidget.DataContextChanged"/> event
            </summary>
            <remarks>
            Implementors may override this to fire this event on child widgets in a heirarchy. 
            This allows a control to be bound to its own <see cref="P:Eto.Forms.BindableWidget.DataContext"/>, which would be set
            on one of the parent control(s).
            </remarks>
            <param name="e">Event arguments</param>
        </member>
        <member name="T:Eto.Forms.ButtonMenuItem.IHandler">
            <summary>
            Handler interface for the <see cref="T:Eto.Forms.ButtonMenuItem"/>.
            </summary>
        </member>
        <member name="P:Eto.Forms.ButtonMenuItem.IHandler.Image">
            <summary>
            Gets or sets the image to show for the menu item.
            </summary>
            <remarks>
            Some platforms (e.g. OS X) will not show an image by default, but can be enabled using the handler implementation
            via styles.
            </remarks>
            <value>The image for the menu item.</value>
        </member>
        <member name="T:Eto.Forms.CheckMenuItem">
            <summary>
            Menu item that can be toggled on and off
            </summary>
            <remarks>
            Most platforms show a check box next to the item when selected.  Some platforms may not show the item's image.
            </remarks>
            <copyright>(c) 2014 by Curtis Wensley</copyright>
            <license type="BSD-3">See LICENSE for full terms</license>
        </member>
        <member name="M:Eto.Forms.CheckMenuItem.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Eto.Forms.CheckMenuItem"/> class.
            </summary>
        </member>
        <member name="M:Eto.Forms.CheckMenuItem.#ctor(Eto.Forms.CheckCommand)">
            <summary>
            Initializes a new instance of the <see cref="T:Eto.Forms.CheckMenuItem"/> class with the specified command.
            </summary>
            <param name="command">Command to initialize the menu with.</param>
        </member>
        <member name="F:Eto.Forms.CheckMenuItem.CheckedChangedEvent">
            <summary>
            Event identifier for the <see cref="E:Eto.Forms.CheckMenuItem.CheckedChanged"/> event.
            </summary>
        </member>
        <member name="E:Eto.Forms.CheckMenuItem.CheckedChanged">
            <summary>
            Event to handle when the <see cref="P:Eto.Forms.CheckMenuItem.Checked"/> property changes.
            </summary>
        </member>
        <member name="M:Eto.Forms.CheckMenuItem.OnCheckedChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Eto.Forms.CheckMenuItem.CheckedChanged"/> event.
            </summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:Eto.Forms.CheckMenuItem.GetCallback">
            <summary>
            Gets an instance of an object used to perform callbacks to the widget from handler implementations
            </summary>
            <returns>The callback.</returns>
        </member>
        <member name="T:Eto.Forms.CheckMenuItem.ICallback">
            <summary>
            Callback interface for the <see cref="T:Eto.Forms.CheckMenuItem"/> class.
            </summary>
        </member>
        <member name="M:Eto.Forms.CheckMenuItem.ICallback.OnCheckedChanged(Eto.Forms.CheckMenuItem,System.EventArgs)">
            <summary>
            Raises the checked changed event.
            </summary>
        </member>
        <member name="T:Eto.Forms.CheckMenuItem.Callback">
            <summary>
            Callback implementation for the <see cref="T:Eto.Forms.CheckMenuItem"/>.
            </summary>
        </member>
        <member name="M:Eto.Forms.CheckMenuItem.Callback.OnCheckedChanged(Eto.Forms.CheckMenuItem,System.EventArgs)">
            <summary>
            Raises the checked changed event.
            </summary>
        </member>
        <member name="M:Eto.Forms.CheckMenuItem.PerformClick">
            <summary>
            Performs the click handler for this item which toggles the check state.
            </summary>
            <remarks>
            This performs the click by calling <see cref="M:Eto.Forms.MenuItem.OnClick(System.EventArgs)"/> which triggers the <see cref="E:Eto.Forms.MenuItem.Click"/> event.
            The <see cref="P:Eto.Forms.CheckMenuItem.Checked"/> state will also be toggled.
            </remarks>
        </member>
        <member name="P:Eto.Forms.CheckMenuItem.Checked">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Eto.Forms.CheckMenuItem"/> is checked.
            </summary>
            <value><c>true</c> if checked; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Eto.Forms.CheckMenuItem.IHandler">
            <summary>
            Handler interface for the <see cref="T:Eto.Forms.CheckMenuItem"/>.
            </summary>
        </member>
        <member name="P:Eto.Forms.CheckMenuItem.IHandler.Checked">
            <summary>
            Gets or sets a value indicating whether the menu item is checked.
            </summary>
            <value><c>true</c> if checked; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Eto.Forms.IContextMenuHost">
            <summary>
            Interface for widgets/handlers that implement a context menu
            </summary>
            <copyright>(c) 2014 by Curtis Wensley</copyright>
            <license type="BSD-3">See LICENSE for full terms</license>
        </member>
        <member name="P:Eto.Forms.IContextMenuHost.ContextMenu">
            <summary>
            Gets or sets the context menu to show when the user right clicks or presses the menu key
            </summary>
            <value>The context menu to show, or null to have no menu</value>
        </member>
        <member name="T:Eto.Forms.ContextMenu">
            <summary>
            Represents a context menu that can be shown typically when users right click or press the menu key on a control
            </summary>
            <copyright>(c) 2014 by Curtis Wensley</copyright>
            <license type="BSD-3">See LICENSE for full terms</license>
        </member>
        <member name="P:Eto.Forms.ContextMenu.Items">
            <summary>
            Gets the menu items in the context menu
            </summary>
            <value>The items.</value>
        </member>
        <member name="P:Eto.Forms.ContextMenu.Trim">
            <summary>
            Gets a value indicating whether this sub menu should trim its child menu items when loaded onto a form
            </summary>
            <remarks>Trimming will collapse any duplicate splitter items. This is done so that you can easily merge your menus.</remarks>
            <value><c>true</c> to trim the child menu items; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Eto.Forms.ContextMenu.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Eto.Forms.ContextMenu"/> class.
            </summary>
        </member>
        <member name="M:Eto.Forms.ContextMenu.#ctor(System.Collections.Generic.IEnumerable{Eto.Forms.MenuItem})">
            <summary>
            Initializes a new instance of the <see cref="T:Eto.Forms.ContextMenu"/> class.
            </summary>
            <param name="items">Items to populate the menu</param>
        </member>
        <member name="M:Eto.Forms.ContextMenu.#ctor(Eto.Forms.MenuItem[])">
            <summary>
            Initializes a new instance of the <see cref="T:Eto.Forms.ContextMenu"/> class.
            </summary>
            <param name="items">Items to populate the menu</param>
        </member>
        <member name="M:Eto.Forms.ContextMenu.Show(Eto.Forms.Control)">
            <summary>
            Show the context menu relative to the specified control
            </summary>
            <param name="relativeTo">Control to show the menu relative to</param>
        </member>
        <member name="M:Eto.Forms.ContextMenu.OnLoad(System.EventArgs)">
            <summary>
            Called when the menu is assigned to a control/window
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:Eto.Forms.ContextMenu.OnUnLoad(System.EventArgs)">
            <summary>
            Called when the menu is removed from a control/window
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="F:Eto.Forms.ContextMenu.OpeningEvent">
            <summary>
            Event identifier for handlers when attaching the <see cref="E:Eto.Forms.ContextMenu.Opening"/> event.
            </summary>
        </member>
        <member name="E:Eto.Forms.ContextMenu.Opening">
            <summary>
            Occurs when the context menu is opening, before it is shown.
            </summary>
        </member>
        <member name="M:Eto.Forms.ContextMenu.OnOpening(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Eto.Forms.ContextMenu.Opening"/> event.
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="F:Eto.Forms.ContextMenu.ClosedEvent">
            <summary>
            Event identifier for handlers when attaching the <see cref="E:Eto.Forms.ContextMenu.Closed"/> event.
            </summary>
        </member>
        <member name="E:Eto.Forms.ContextMenu.Closed">
            <summary>
            Occurs when the context menu is closed/dismissed.
            </summary>
        </member>
        <member name="M:Eto.Forms.ContextMenu.OnClosed(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Eto.Forms.ContextMenu.Closed"/> event.
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:Eto.Forms.ContextMenu.GetCallback">
            <summary>
            Gets an instance of an object used to perform callbacks to the widget from handler implementations
            </summary>
            <returns>The callback instance to use for this widget</returns>
        </member>
        <member name="T:Eto.Forms.ContextMenu.ICallback">
            <summary>
            Callback interface for instances of <see cref="T:Eto.Forms.ContextMenu"/>
            </summary>
        </member>
        <member name="M:Eto.Forms.ContextMenu.ICallback.OnOpening(Eto.Forms.ContextMenu,System.EventArgs)">
            <summary>
            Raises the <see cref="E:Eto.Forms.ContextMenu.Opening"/> event.
            </summary>
        </member>
        <member name="M:Eto.Forms.ContextMenu.ICallback.OnClosed(Eto.Forms.ContextMenu,System.EventArgs)">
            <summary>
            Raises the <see cref="E:Eto.Forms.ContextMenu.Closed"/> event.
            </summary>
        </member>
        <member name="T:Eto.Forms.ContextMenu.Callback">
            <summary>
            Callback implementation for handlers of the <see cref="T:Eto.Forms.ContextMenu"/>
            </summary>
        </member>
        <member name="M:Eto.Forms.ContextMenu.Callback.OnOpening(Eto.Forms.ContextMenu,System.EventArgs)">
            <summary>
            Raises the <see cref="E:Eto.Forms.ContextMenu.Opening"/> event.
            </summary>
        </member>
        <member name="M:Eto.Forms.ContextMenu.Callback.OnClosed(Eto.Forms.ContextMenu,System.EventArgs)">
            <summary>
            Raises the <see cref="E:Eto.Forms.ContextMenu.Closed"/> event.
            </summary>
        </member>
        <member name="T:Eto.Forms.ContextMenu.IHandler">
            <summary>
            Handler interface for the <see cref="T:Eto.Forms.ContextMenu"/>
            </summary>
        </member>
        <member name="M:Eto.Forms.ContextMenu.IHandler.Show(Eto.Forms.Control)">
            <summary>
            Show the context menu relative to the specified control
            </summary>
            <param name="relativeTo">Control to show the menu relative to</param>
        </member>
        <member name="T:Eto.Forms.Menu">
            <summary>
            Base class for menu items
            </summary>
            <copyright>(c) 2014 by Curtis Wensley</copyright>
            <license type="BSD-3">See LICENSE for full terms</license>
        </member>
        <member name="M:Eto.Forms.Menu.OnPreLoad(System.EventArgs)">
            <summary>
            Called before the menu is assigned to a control/window
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:Eto.Forms.Menu.OnLoad(System.EventArgs)">
            <summary>
            Called when the menu is assigned to a control/window
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:Eto.Forms.Menu.OnUnLoad(System.EventArgs)">
            <summary>
            Called when the menu is removed from a control/window
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="T:Eto.Forms.Menu.ISubmenuHandler">
            <summary>
            Handler interface for menus that implement a submenu
            </summary>
            <remarks>
            This is used by the <see cref="T:Eto.Forms.MenuItemCollection"/> to add/remove/clear menu items
            </remarks>
        </member>
        <member name="M:Eto.Forms.Menu.ISubmenuHandler.AddMenu(System.Int32,Eto.Forms.MenuItem)">
            <summary>
            Adds the menu item
            </summary>
            <param name="index">Index to add the item</param>
            <param name="item">Item to add</param>
        </member>
        <member name="M:Eto.Forms.Menu.ISubmenuHandler.RemoveMenu(Eto.Forms.MenuItem)">
            <summary>
            Removes the specified menu item
            </summary>
            <param name="item">Item to remove</param>
        </member>
        <member name="M:Eto.Forms.Menu.ISubmenuHandler.Clear">
            <summary>
            Clears the menu of all items
            </summary>
        </member>
        <member name="T:Eto.Forms.MenuBarSystemItems">
            <summary>
            Flags for the groups of system <see cref="T:Eto.Forms.MenuBar"/> items
            </summary>
        </member>
        <member name="F:Eto.Forms.MenuBarSystemItems.None">
            <summary>
            Do not add any system items to the menu
            </summary>
        </member>
        <member name="F:Eto.Forms.MenuBarSystemItems.Common">
            <summary>
            Add common menu items
            </summary>
        </member>
        <member name="F:Eto.Forms.MenuBarSystemItems.Quit">
            <summary>
            Add a Quit menu item, if one is not specified by <see cref="P:Eto.Forms.MenuBar.QuitItem"/>
            </summary>
        </member>
        <member name="F:Eto.Forms.MenuBarSystemItems.All">
            <summary>
            Add all system-defined menu bar items
            </summary>
        </member>
        <member name="T:Eto.Forms.MenuBar">
            <summary>
            Menu bar for a form
            </summary>
            <copyright>(c) 2014 by Curtis Wensley</copyright>
            <license type="BSD-3">See LICENSE for full terms</license>
        </member>
        <member name="P:Eto.Forms.MenuBar.Trim">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Eto.Forms.MenuBar"/> will trim the items when set to a form
            </summary>
            <remarks>
            You may wish to turn this off if you are setting the menu regularily based on the context of your app, since
            it can effect performance.
            </remarks>
            <value><c>true</c> to auto trim; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Eto.Forms.MenuBar.IncludeSystemItems">
            <summary>
            Gets or sets which system items will be automatically included with the menu.
            </summary>
            <remarks>
            Some operating systems, such as OS X require you to create your own standard items to enable the ability to do things
            such as close a window, cut/paste, hide apps, quit an app, etc.  By default, the menu will be merged with your
            custom menu so that all of these system functions will work.
            
            For Quit and About menu items, use the <see cref="P:Eto.Forms.MenuBar.QuitItem"/> and <see cref="P:Eto.Forms.MenuBar.AboutItem"/> instead so that they are placed
            in the correct/expected location on every platform.
            </remarks>
            <value>The include system items.</value>
        </member>
        <member name="P:Eto.Forms.MenuBar.SystemCommands">
            <summary>
            Gets the system commands for the menu.
            </summary>
            <remarks>
            These system commands are used for any of the items added when <see cref="P:Eto.Forms.MenuBar.IncludeSystemItems"/> is set to anything other than <see cref="F:Eto.Forms.MenuBarSystemItems.None"/>.
            You can modify this collection to remove items from the system menu, or update which items should be used instead.
            This is only needed for advanced scenarios and should not be required to be used in normal circumstances.
            </remarks>
            <value>The system commands.</value>
        </member>
        <member name="P:Eto.Forms.MenuBar.Items">
            <summary>
            Gets the collection of menu items
            </summary>
            <value>The menu items</value>
        </member>
        <member name="P:Eto.Forms.MenuBar.QuitItem">
            <summary>
            Gets or sets the quit item for the application.
            </summary>
            <remarks>
            This allows you to set the quit item for the application.  Some platforms (OS X) may add a quit item
            to the menu even if one is not defined as it is standard practice to allow users to quit the application with
             a menu item.
            This will be in the File menu for most platforms, and the Application menu for OS X.
            </remarks>
            <value>The quit item on the menu.</value>
        </member>
        <member name="P:Eto.Forms.MenuBar.AboutItem">
            <summary>
            Gets or sets the item to show an about dialog for the application
            </summary>
            <remarks>
            This allows you to set an item to show an about dialog for the application.
            OS X will place this in the Application menu, other platforms place this at the bottom of the Help menu.
            </remarks>
            <value>The about item on the menu.</value>
        </member>
        <member name="P:Eto.Forms.MenuBar.ApplicationMenu">
            <summary>
            Gets the menu that contains application-level items.
            </summary>
            <remarks>
            This allows you to change the application menu's text (File for most platforms, Application menu for OS X)
            </remarks>
            <value>The application menu.</value>
        </member>
        <member name="P:Eto.Forms.MenuBar.ApplicationItems">
            <summary>
            Gets the item collection for the <see cref="P:Eto.Forms.MenuBar.ApplicationMenu"/>, to easily add items declaratively/programatically.
            </summary>
            <seealso cref="P:Eto.Forms.MenuBar.ApplicationMenu"/>
            <value>The application items collection.</value>
        </member>
        <member name="P:Eto.Forms.MenuBar.HelpMenu">
            <summary>
            Gets the help menu for the application for showing help items
            </summary>
            <remarks>
            This allows you to change the help menu's text ('Help' by default on all platforms). This is usually used
            for the <see cref="P:Eto.Forms.MenuBar.AboutItem"/> on most platforms, other than OS X.
            </remarks>
            <value>The help menu.</value>
        </member>
        <member name="P:Eto.Forms.MenuBar.HelpItems">
            <summary>
            Gets the item collection for the <see cref="P:Eto.Forms.MenuBar.HelpMenu"/>, to easily add items declaratively/programatically.
            </summary>
            <value>The help items collection.</value>
        </member>
        <member name="M:Eto.Forms.MenuBar.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Eto.Forms.MenuBar"/> class.
            </summary>
        </member>
        <member name="M:Eto.Forms.MenuBar.#ctor(System.Collections.Generic.IEnumerable{Eto.Forms.MenuItem})">
            <summary>
            Initializes a new instance of the <see cref="T:Eto.Forms.MenuBar"/> class with the specified items.
            </summary>
            <param name="items">Items to add to the menu bar initially.</param>
        </member>
        <member name="M:Eto.Forms.MenuBar.#ctor(Eto.Forms.MenuItem[])">
            <summary>
            Initializes a new instance of the <see cref="T:Eto.Forms.MenuBar"/> class with the specified items.
            </summary>
            <param name="items">Items to add to the menu bar initially.</param>
        </member>
        <member name="M:Eto.Forms.MenuBar.OnPreLoad(System.EventArgs)">
            <summary>
            Called before the menu is assigned to a control/window
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:Eto.Forms.MenuBar.OnLoad(System.EventArgs)">
            <summary>
            Called when the menu is assigned to a control/window
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:Eto.Forms.MenuBar.OnUnLoad(System.EventArgs)">
            <summary>
            Called when the menu is removed from a control/window
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:Eto.Forms.MenuBar.OnDataContextChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Eto.Forms.BindableWidget.DataContextChanged"/> event
            </summary>
            <remarks>
            Implementors may override this to fire this event on child widgets in a heirarchy. 
            This allows a control to be bound to its own <see cref="P:Eto.Forms.BindableWidget.DataContext"/>, which would be set
            on one of the parent control(s).
            </remarks>
            <param name="e">Event arguments</param>
        </member>
        <member name="T:Eto.Forms.MenuBar.IHandler">
            <summary>
            Handler interface for the <see cref="T:Eto.Forms.MenuBar"/>
            </summary>
        </member>
        <member name="P:Eto.Forms.MenuBar.IHandler.ApplicationMenu">
            <summary>
            Gets the menu that contains application-level items.
            </summary>
            <remarks>
            This allows you to change the application menu's text (File for most platforms, Application menu for OS X)
            </remarks>
            <value>The application menu.</value>
        </member>
        <member name="P:Eto.Forms.MenuBar.IHandler.HelpMenu">
            <summary>
            Gets the help menu for the application for showing help items
            </summary>
            <remarks>
            This allows you to change the help menu's text ('Help' by default on all platforms). This is usually used
            for the <see cref="P:Eto.Forms.MenuBar.AboutItem"/> on most platforms, other than OS X.
            </remarks>
            <value>The help menu.</value>
        </member>
        <member name="M:Eto.Forms.MenuBar.IHandler.SetQuitItem(Eto.Forms.MenuItem)">
            <summary>
            Gets or sets the quit item for the application.
            </summary>
            <remarks>
            This allows you to set the quit item for the application.  Some platforms (OS X) may add a quit item
            to the menu even if one is not defined as it is standard practice to allow users to quit the application with
             a menu item.
            This will be in the File menu for most platforms, and the Application menu for OS X.
            </remarks>
            <value>The quit item on the menu.</value>
        </member>
        <member name="M:Eto.Forms.MenuBar.IHandler.SetAboutItem(Eto.Forms.MenuItem)">
            <summary>
            Gets or sets the item to show an about dialog for the application
            </summary>
            <remarks>
            This allows you to set an item to show an about dialog for the application.
            OS X will place this in the Application menu, other platforms place this at the bottom of the Help menu.
            </remarks>
            <value>The about item on the menu.</value>
        </member>
        <member name="M:Eto.Forms.MenuBar.IHandler.CreateSystemMenu">
            <summary>
            Creates the system menu when it is loaded onto a window for the first time.
            </summary>
            <remarks>
            This is called only once for a menu bar, when it is first set using <see cref="P:Eto.Forms.Window.Menu"/>.
            </remarks>
        </member>
        <member name="M:Eto.Forms.MenuBar.IHandler.CreateLegacySystemMenu">
            <summary>
            Obsolete version to create a system menu using legacy symantics.
            </summary>
            <remarks>
            For OS X, this means it uses the <see cref="P:Eto.Forms.Application.Name"/> instead of "Application". The new symantics
            uses "Application" always (OS X automatically shows the app's local name regardless of the name of the menu item).
            </remarks>
        </member>
        <member name="M:Eto.Forms.MenuBar.IHandler.GetSystemCommands">
            <summary>
            Gets the system commands for the menu bar.
            </summary>
            <remarks>
            The system commands should be used by the <see cref="M:Eto.Forms.MenuBar.IHandler.CreateSystemMenu"/> implementation by ID.
            Note that the commands may or may not exist in the collection of <see cref="P:Eto.Forms.MenuBar.SystemCommands"/>, as
            the collection can be modified to remove or modify commands before the menu is created.
            </remarks>
            <returns>The system commands to use when creating the system menu.</returns>
        </member>
        <member name="T:Eto.Forms.ICommandItem">
            <summary>
            Interface to access common properties of both <see cref="T:Eto.Forms.MenuItem"/> and <see cref="T:Eto.Forms.ToolItem"/>.
            </summary>
            <copyright>(c) 2014 by Curtis Wensley</copyright>
            <license type="BSD-3">See LICENSE for full terms</license>
        </member>
        <member name="E:Eto.Forms.ICommandItem.Click">
            <summary>
            Occurs when the user clicks on the item.
            </summary>
        </member>
        <member name="P:Eto.Forms.ICommandItem.Text">
            <summary>
            Gets or sets the text of the item, with mnemonic.
            </summary>
            <value>The text.</value>
        </member>
        <member name="P:Eto.Forms.ICommandItem.ToolTip">
            <summary>
            Gets or sets the tool tip to show when hovering the mouse over the item.
            </summary>
            <value>The tool tip.</value>
        </member>
        <member name="P:Eto.Forms.ICommandItem.Enabled">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Eto.Forms.ICommandItem"/> is enabled.
            </summary>
            <value><c>true</c> if enabled; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Eto.Forms.MenuItem">
            <summary>
            Base class for items in a menu
            </summary>
            <copyright>(c) 2014 by Curtis Wensley</copyright>
            <license type="BSD-3">See LICENSE for full terms</license>
        </member>
        <member name="P:Eto.Forms.MenuItem.Order">
            <summary>
            Gets or sets the order that the menu item should use when inserted into a submenu.
            </summary>
            <remarks>
            The order can be used to sort your menu items when added in a different order.
            
            This is useful when you have menu items added from different areas of your program.
            </remarks>
            <value>The order to use when inserting into the submenu.</value>
        </member>
        <member name="P:Eto.Forms.MenuItem.Command">
            <summary>
            Gets or sets the command to invoke when the menu item is pressed.
            </summary>
            <remarks>
            This will invoke the specified command when the menu item is pressed.
            The <see cref="M:System.Windows.Input.ICommand.CanExecute(System.Object)"/> will also used to set the enabled/disabled state of the menu item.
            </remarks>
            <value>The command to invoke.</value>
        </member>
        <member name="P:Eto.Forms.MenuItem.CommandParameter">
            <summary>
            Gets or sets the parameter to pass to the <see cref="P:Eto.Forms.MenuItem.Command"/> when executing or determining its CanExecute state.
            </summary>
            <value>The command parameter.</value>
        </member>
        <member name="E:Eto.Forms.MenuItem.Click">
            <summary>
            Occurs when the user clicks or selects the menu item.
            </summary>
        </member>
        <member name="M:Eto.Forms.MenuItem.OnClick(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Eto.Forms.MenuItem.Click"/> event.
            </summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="F:Eto.Forms.MenuItem.ValidateEvent">
            <summary>
            Identifier for handlers when attaching the <see cref="E:Eto.Forms.MenuItem.Validate"/> event.
            </summary>
        </member>
        <member name="E:Eto.Forms.MenuItem.Validate">
            <summary>
            Occurs when the menu item is validated.
            </summary>
            <remarks>
            This is used to allow enabling/disabling items before they are shown to the user.
            Usually, platforms will call validate on all items each time they are shown in a submenu or context menu.
            </remarks>
        </member>
        <member name="M:Eto.Forms.MenuItem.OnValidate(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Eto.Forms.MenuItem.Validate"/> event.
            </summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:Eto.Forms.MenuItem.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Eto.Forms.MenuItem"/> class.
            </summary>
        </member>
        <member name="M:Eto.Forms.MenuItem.#ctor(Eto.Forms.Command)">
            <summary>
            Initializes a new instance of the <see cref="T:Eto.Forms.MenuItem"/> class with the specified command.
            </summary>
            <remarks>
            This links the menu item with the specified command, and will trigger <see cref="M:Eto.Forms.Command.Execute"/>
            when the user clicks the item, and enable/disable the menu item based on <see cref="P:Eto.Forms.Command.Enabled"/>.
            
            This is not a weak link, so you should not re-use the Command instance for other menu items if you are disposing
            this menu item.
            </remarks>
            <param name="command">Command to initialize the menu item with.</param>
        </member>
        <member name="P:Eto.Forms.MenuItem.Text">
            <summary>
            Gets or sets the text of the menu item, with mnemonics identified with &amp;.
            </summary>
            <value>The text with mnemonic of the menu item.</value>
        </member>
        <member name="P:Eto.Forms.MenuItem.Tag">
            <summary>
            Gets or sets a user-defined tag for the menu item.
            </summary>
            <value>The user-defined tag.</value>
        </member>
        <member name="P:Eto.Forms.MenuItem.ToolTip">
            <summary>
            Gets or sets the tool tip of the item.
            </summary>
            <value>The tool tip.</value>
        </member>
        <member name="P:Eto.Forms.MenuItem.Enabled">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Eto.Forms.MenuItem"/> is enabled.
            </summary>
            <value><c>true</c> if enabled; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Eto.Forms.MenuItem.Shortcut">
            <summary>
            Gets or sets the shortcut key the user can press to activate the menu item.
            </summary>
            <value>The shortcut key.</value>
        </member>
        <member name="M:Eto.Forms.MenuItem.PerformClick">
            <summary>
            Performs the click handler for this item.
            </summary>
            <remarks>
            This performs the click by calling <see cref="M:Eto.Forms.MenuItem.OnClick(System.EventArgs)"/> which triggers the <see cref="E:Eto.Forms.MenuItem.Click"/> event.
            </remarks>
        </member>
        <member name="T:Eto.Forms.MenuItem.ICallback">
            <summary>
            Callback interface for the <see cref="T:Eto.Forms.MenuItem"/>
            </summary>
        </member>
        <member name="M:Eto.Forms.MenuItem.ICallback.OnClick(Eto.Forms.MenuItem,System.EventArgs)">
            <summary>
            Raises the click event.
            </summary>
        </member>
        <member name="M:Eto.Forms.MenuItem.ICallback.OnValidate(Eto.Forms.MenuItem,System.EventArgs)">
            <summary>
            Raises the validate event.
            </summary>
        </member>
        <member name="T:Eto.Forms.MenuItem.Callback">
            <summary>
            Callback implementation for the <see cref="T:Eto.Forms.MenuItem"/>
            </summary>
        </member>
        <member name="M:Eto.Forms.MenuItem.Callback.OnClick(Eto.Forms.MenuItem,System.EventArgs)">
            <summary>
            Raises the click event.
            </summary>
        </member>
        <member name="M:Eto.Forms.MenuItem.Callback.OnValidate(Eto.Forms.MenuItem,System.EventArgs)">
            <summary>
            Raises the validate event.
            </summary>
        </member>
        <member name="M:Eto.Forms.MenuItem.GetCallback">
            <summary>
            Gets an instance of an object used to perform callbacks to the widget from handler implementations
            </summary>
            <returns>The callback.</returns>
        </member>
        <member name="T:Eto.Forms.MenuItem.IHandler">
            <summary>
            Handler interface for the <see cref="T:Eto.Forms.MenuItem"/>
            </summary>
        </member>
        <member name="P:Eto.Forms.MenuItem.IHandler.Shortcut">
            <summary>
            Gets or sets the shortcut key the user can press to activate the menu item.
            </summary>
            <value>The shortcut key.</value>
        </member>
        <member name="M:Eto.Forms.MenuItem.IHandler.CreateFromCommand(Eto.Forms.Command)">
            <summary>
            Called when creating the menu item from a command.
            </summary>
            <remarks>
            This is used primarily when creating menu items for system commands that the platform returns
            via <see cref="P:Eto.Forms.MenuBar.SystemCommands"/>.
            </remarks>
            <param name="command">Command the menu item is created with.</param>
        </member>
        <member name="P:Eto.Forms.MenuItem.IHandler.Text">
            <summary>
            Gets or sets the text of the menu item, with mnemonics identified with &amp;.
            </summary>
            <value>The text with mnemonic of the menu item.</value>
        </member>
        <member name="P:Eto.Forms.MenuItem.IHandler.ToolTip">
            <summary>
            Gets or sets the tool tip of the item.
            </summary>
            <value>The tool tip.</value>
        </member>
        <member name="P:Eto.Forms.MenuItem.IHandler.Enabled">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Eto.Forms.MenuItem"/> is enabled.
            </summary>
            <value><c>true</c> if enabled; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Eto.Forms.MenuItemCollection">
            <summary>
            Collection for menu items.
            </summary>
            <copyright>(c) 2014 by Curtis Wensley</copyright>
            <license type="BSD-3">See LICENSE for full terms</license>
        </member>
        <member name="M:Eto.Forms.MenuItemCollection.InsertItem(System.Int32,Eto.Forms.MenuItem)">
            <summary>
            Inserts an menu item at the specified index
            </summary>
            <param name="index">Index to add the item.</param>
            <param name="item">Item to add.</param>
        </member>
        <member name="M:Eto.Forms.MenuItemCollection.RemoveItem(System.Int32)">
            <summary>
            Removes the item at the specified index.
            </summary>
            <param name="index">Index of the item to remove.</param>
        </member>
        <member name="M:Eto.Forms.MenuItemCollection.ClearItems">
            <summary>
            Clears the items.
            </summary>
        </member>
        <member name="M:Eto.Forms.MenuItemCollection.Trim">
            <summary>
            Trims the items in this collection and all submenus.
            </summary>
        </member>
        <member name="M:Eto.Forms.MenuItemCollection.Add(Eto.Forms.MenuItem)">
            <summary>
            Adds a menu item to the specified collection based on its Order.
            </summary>
            <param name="item">Menu item to add</param>
        </member>
        <member name="M:Eto.Forms.MenuItemCollection.Add(Eto.Forms.Command,System.Int32)">
            <summary>
            Add the specified command with the specified order.
            </summary>
            <param name="command">Command to add.</param>
            <param name="order">Order of the command to add.</param>
        </member>
        <member name="M:Eto.Forms.MenuItemCollection.AddSeparator(System.Int32)">
            <summary>
            Adds the separator with the specified order.
            </summary>
            <param name="order">Order of the separator to add.</param>
        </member>
        <member name="M:Eto.Forms.MenuItemCollection.AddRange(System.Collections.Generic.IEnumerable{Eto.Forms.MenuItem})">
            <summary>
            Adds the specified menu items to the collection.
            </summary>
            <param name="items">Items to add.</param>
        </member>
        <member name="M:Eto.Forms.MenuItemCollection.AddRange(System.Collections.Generic.IEnumerable{Eto.Forms.Command},System.Int32)">
            <summary>
            Adds the specified commands to the collection starting at the specified order.
            </summary>
            <param name="commands">Commands to add.</param>
            <param name="order">Order of the items to add.</param>
        </member>
        <member name="M:Eto.Forms.MenuItemCollection.GetSubmenu(System.String,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Gets the submenu from the collection with the specified text, optionally creating one if not found.
            </summary>
            <returns>The submenu instance if found, or a new submenu instance added at the specified order.</returns>
            <param name="submenuText">Text of the submenu to find or add.</param>
            <param name="order">Order of the submenu item to add. Not used if there is already a submenu with the specified text.</param>
            <param name="plaintextMatch">If set to <c>true</c>, matches excluding any mnemonic symbol idenfifiers.</param>
            <param name="create">If set to <c>true</c>, creates the menu if it doesn't exist in the collection, otherwise <c>false</c>.</param>
        </member>
        <member name="T:Eto.Forms.RadioMenuItem">
            <summary>
            Menu item to choose from a set of options
            </summary>
            <remarks>
            The RadioMenuItem works with other radio items to present a list of options that the user can select from.
            When a radio button is toggled on, all others that are linked together will be toggled off.
            
            To link radio buttons together, use the <see cref="C:Eto.Forms.RadioMenuItem(RadioMenuItem)"/> constructor
            to specify the controller radio item, which can be created with the default constructor.
            </remarks>
            <copyright>(c) 2014 by Curtis Wensley</copyright>
            <license type="BSD-3">See LICENSE for full terms</license>
        </member>
        <member name="M:Eto.Forms.RadioMenuItem.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Eto.Forms.RadioMenuItem"/> class.
            </summary>
        </member>
        <member name="M:Eto.Forms.RadioMenuItem.#ctor(Eto.Forms.RadioMenuItem)">
            <summary>
            Initializes a new instance of the <see cref="T:Eto.Forms.RadioMenuItem"/> class.
            </summary>
            <param name="controller">Controller radio menu item to link to, or null if no controller.</param>
        </member>
        <member name="M:Eto.Forms.RadioMenuItem.#ctor(Eto.Forms.RadioCommand,Eto.Forms.RadioMenuItem)">
            <summary>
            Initializes a new instance of the <see cref="T:Eto.Forms.RadioMenuItem"/> class with the specified command and controller.
            </summary>
            <param name="command">Command to initialize the menu item with.</param>
            <param name="controller">Controller radio menu item to link to, or null if no controller.</param>
        </member>
        <member name="P:Eto.Forms.RadioMenuItem.Checked">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Eto.Forms.RadioMenuItem"/> is checked.
            </summary>
            <value><c>true</c> if checked; otherwise, <c>false</c>.</value>
        </member>
        <member name="F:Eto.Forms.RadioMenuItem.CheckedChangedEvent">
            <summary>
            Event identifier for the <see cref="E:Eto.Forms.RadioMenuItem.CheckedChanged"/> event.
            </summary>
        </member>
        <member name="E:Eto.Forms.RadioMenuItem.CheckedChanged">
            <summary>
            Event to handle when the <see cref="P:Eto.Forms.RadioMenuItem.Checked"/> property changes.
            </summary>
        </member>
        <member name="M:Eto.Forms.RadioMenuItem.OnCheckedChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Eto.Forms.RadioMenuItem.CheckedChanged"/> event.
            </summary>
            <param name="e">E.</param>
        </member>
        <member name="M:Eto.Forms.RadioMenuItem.PerformClick">
            <summary>
            Performs the click handler for this item which sets the check state to true.
            </summary>
            <remarks>
            This performs the click by calling <see cref="M:Eto.Forms.MenuItem.OnClick(System.EventArgs)"/> which triggers the <see cref="E:Eto.Forms.MenuItem.Click"/> event.
            The <see cref="P:Eto.Forms.RadioMenuItem.Checked"/> state will also be set to true.
            </remarks>
        </member>
        <member name="M:Eto.Forms.RadioMenuItem.GetCallback">
            <summary>
            Gets an instance of an object used to perform callbacks to the widget from handler implementations
            </summary>
            <returns>The callback.</returns>
        </member>
        <member name="T:Eto.Forms.RadioMenuItem.ICallback">
            <summary>
            Callback interface for the <see cref="T:Eto.Forms.RadioMenuItem"/>.
            </summary>
        </member>
        <member name="M:Eto.Forms.RadioMenuItem.ICallback.OnCheckedChanged(Eto.Forms.RadioMenuItem,System.EventArgs)">
            <summary>
            Raises the checked changed event.
            </summary>
        </member>
        <member name="T:Eto.Forms.RadioMenuItem.Callback">
            <summary>
            Callback implementation for the <see cref="T:Eto.Forms.RadioMenuItem"/>.
            </summary>
        </member>
        <member name="M:Eto.Forms.RadioMenuItem.Callback.OnCheckedChanged(Eto.Forms.RadioMenuItem,System.EventArgs)">
            <summary>
            Raises the checked changed event.
            </summary>
        </member>
        <member name="T:Eto.Forms.RadioMenuItem.IHandler">
            <summary>
            Handler interface for the <see cref="T:Eto.Forms.RadioMenuItem"/>.
            </summary>
        </member>
        <member name="M:Eto.Forms.RadioMenuItem.IHandler.Create(Eto.Forms.RadioMenuItem)">
            <summary>
            Creates the menu item with the specified controller.
            </summary>
            <param name="controller">Controller radio menu item to link to, or null if no controller.</param>
        </member>
        <member name="P:Eto.Forms.RadioMenuItem.IHandler.Checked">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Eto.Forms.RadioMenuItem"/> is checked.
            </summary>
            <value><c>true</c> if checked; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Eto.Forms.SeparatorMenuItem">
            <summary>
            Menu item to separate menu items
            </summary>
            <copyright>(c) 2014 by Curtis Wensley</copyright>
            <license type="BSD-3">See LICENSE for full terms</license>
        </member>
        <member name="T:Eto.Forms.SeparatorMenuItem.IHandler">
            <summary>
            Handler interface for the <see cref="T:Eto.Forms.SeparatorMenuItem"/>
            </summary>
        </member>
        <member name="T:Eto.Forms.ISubmenu">
            <summary>
            Interface for submenus to access common Items properties
            </summary>
            <copyright>(c) 2014 by Curtis Wensley</copyright>
            <license type="BSD-3">See LICENSE for full terms</license>
        </member>
        <member name="P:Eto.Forms.ISubmenu.Items">
            <summary>
            Gets the collection of menu items to show in the submenu.
            </summary>
            <value>The menu items.</value>
        </member>
        <member name="P:Eto.Forms.ISubmenu.Trim">
            <summary>
            Gets a value indicating whether this sub menu should trim its child menu items when loaded onto a form
            </summary>
            <remarks>
            Trimming will collapse any duplicate splitter items.  This is done so that you can easily merge your menus.
            </remarks>
            <value><c>true</c> to trim the child menu items; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Eto.Forms.SubmenuExtensions">
            <summary>
            Extensions for the <see cref="T:Eto.Forms.ISubmenu"/> interface.
            </summary>
        </member>
        <member name="M:Eto.Forms.SubmenuExtensions.GetChildren(Eto.Forms.ISubmenu)">
            <summary>
            Gets an enumeration of all children of the specified submenu.
            </summary>
            <remarks>
            This traverses all items of the submenu, and any children of those items if they implement <see cref="T:Eto.Forms.ISubmenu"/>
            as well.
            </remarks>
            <param name="submenu">Submenu to get all child menu items for.</param>
            <returns>Enumeration of all child menu items of the specified submenu.</returns>
        </member>
        <member name="T:Eto.Forms.MessageBoxButtons">
            <summary>
            Message box buttons for methods of <see cref="T:Eto.Forms.MessageBox"/>
            </summary>
            <remarks>
            This defined which buttons to show on the message box. 
            If there are different buttons you require, you can use <see cref="T:Eto.Forms.Dialog"/> instead to create your own.
            </remarks>
        </member>
        <member name="F:Eto.Forms.MessageBoxButtons.OK">
            <summary>
            Only a single OK button
            </summary>
        </member>
        <member name="F:Eto.Forms.MessageBoxButtons.OKCancel">
            <summary>
            OK and Cancel buttons
            </summary>
        </member>
        <member name="F:Eto.Forms.MessageBoxButtons.YesNo">
            <summary>
            Yes and no buttons
            </summary>
        </member>
        <member name="F:Eto.Forms.MessageBoxButtons.YesNoCancel">
            <summary>
            Yes, no, and cancel buttons
            </summary>
        </member>
        <member name="T:Eto.Forms.MessageBoxType">
            <summary>
            Message box type, to define the appearance of a <see cref="T:Eto.Forms.MessageBox"/>
            </summary>
            <remarks>
            Usually the icon shown on the message box will change depending on this value.
            </remarks>
        </member>
        <member name="F:Eto.Forms.MessageBoxType.Information">
            <summary>
            Informational message box, usually signified a lower case 'i' icon
            </summary>
        </member>
        <member name="F:Eto.Forms.MessageBoxType.Warning">
            <summary>
            Warning message box, usually signified by an exclamation mark icon
            </summary>
        </member>
        <member name="F:Eto.Forms.MessageBoxType.Error">
            <summary>
            Error message box, usually signified by a stop sign
            </summary>
        </member>
        <member name="F:Eto.Forms.MessageBoxType.Question">
            <summary>
            Question message box, usually signified by a question mark icon
            </summary>
        </member>
        <member name="T:Eto.Forms.MessageBoxDefaultButton">
            <summary>
            Message box default button selection for a <see cref="T:Eto.Forms.MessageBox"/>
            </summary>
            <remarks>
            This enumeration specifies the default button of the message box, which is usually focussed when the message
            box is shown, and selectable when the user presses the Return key.
            </remarks>
        </member>
        <member name="F:Eto.Forms.MessageBoxDefaultButton.Default">
            <summary>
            Automatically select the default button, preferring the negative form first such as <see cref="F:Eto.Forms.MessageBoxDefaultButton.Cancel"/>, then <see cref="F:Eto.Forms.MessageBoxDefaultButton.No"/>.
            </summary>
        </member>
        <member name="F:Eto.Forms.MessageBoxDefaultButton.OK">
            <summary>
            The OK button is default
            </summary>
        </member>
        <member name="F:Eto.Forms.MessageBoxDefaultButton.Yes">
            <summary>
            The Yes button is default
            </summary>
        </member>
        <member name="F:Eto.Forms.MessageBoxDefaultButton.No">
            <summary>
            The No button is default
            </summary>
        </member>
        <member name="F:Eto.Forms.MessageBoxDefaultButton.Cancel">
            <summary>
            The Cancel button is default
            </summary>
        </member>
        <member name="T:Eto.Forms.MessageBox">
            <summary>
            Methods to show a standard message box with display text, buttons, and typically an icon indicating the type
            </summary>
        </member>
        <member name="M:Eto.Forms.MessageBox.Show(System.String,Eto.Forms.MessageBoxType)">
            <summary>
            Shows a message box, blocking input to all windows of the application until closed
            </summary>
            <param name="text">Text for the body of the message box</param>
            <param name="type">Type of message box</param>
        </member>
        <member name="M:Eto.Forms.MessageBox.Show(System.String,System.String,Eto.Forms.MessageBoxType)">
            <summary>
            Shows a message box, blocking input to all windows of the application until closed
            </summary>
            <param name="text">Text for the body of the message box</param>
            <param name="caption">Caption for the title bar or heading of the message box</param>
            <param name="type">Type of message box</param>
        </member>
        <member name="M:Eto.Forms.MessageBox.Show(Eto.Forms.Control,System.String,Eto.Forms.MessageBoxType)">
            <summary>
            Shows a message box, blocking only the window of the specified <paramref name="parent"/> 
            </summary>
            <param name="parent">Parent control that triggered the message box</param>
            <param name="text">Text for the body of the message box</param>
            <param name="type">Type of message box</param>
        </member>
        <member name="M:Eto.Forms.MessageBox.Show(Eto.Forms.Control,System.String,System.String,Eto.Forms.MessageBoxType)">
            <summary>
            Shows a message box, blocking only the window of the specified <paramref name="parent"/> 
            </summary>
            <param name="parent">Parent control that triggered the message box</param>
            <param name="text">Text for the body of the message box</param>
            <param name="type">Type of message box</param>
            <param name="caption">Caption for the title bar or heading of the message box</param>
        </member>
        <member name="M:Eto.Forms.MessageBox.Show(System.String,Eto.Forms.MessageBoxButtons,Eto.Forms.MessageBoxType,Eto.Forms.MessageBoxDefaultButton)">
            <summary>
            Shows a message box, blocking input to all windows of the application until closed
            </summary>
            <param name="text">Text for the body of the message box</param>
            <param name="type">Type of message box</param>
            <param name="buttons">Buttons to show on the message box</param>
            <param name="defaultButton">Button to set focus to by default</param>
        </member>
        <member name="M:Eto.Forms.MessageBox.Show(System.String,System.String,Eto.Forms.MessageBoxButtons,Eto.Forms.MessageBoxType,Eto.Forms.MessageBoxDefaultButton)">
            <summary>
            Shows a message box, blocking input to all windows of the application until closed
            </summary>
            <param name="text">Text for the body of the message box</param>
            <param name="type">Type of message box</param>
            <param name="buttons">Buttons to show on the message box</param>
            <param name="defaultButton">Button to set focus to by default</param>
            <param name="caption">Caption for the title bar or heading of the message box</param>
        </member>
        <member name="M:Eto.Forms.MessageBox.Show(Eto.Forms.Control,System.String,Eto.Forms.MessageBoxButtons,Eto.Forms.MessageBoxType,Eto.Forms.MessageBoxDefaultButton)">
            <summary>
            Shows a message box, blocking only the window of the specified <paramref name="parent"/> 
            </summary>
            <param name="parent">Parent control that triggered the message box</param>
            <param name="text">Text for the body of the message box</param>
            <param name="type">Type of message box</param>
            <param name="buttons">Buttons to show on the message box</param>
            <param name="defaultButton">Button to set focus to by default</param>
        </member>
        <member name="M:Eto.Forms.MessageBox.Show(Eto.Forms.Control,System.String,System.String,Eto.Forms.MessageBoxButtons,Eto.Forms.MessageBoxType,Eto.Forms.MessageBoxDefaultButton)">
            <summary>
            Shows a message box, blocking only the window of the specified <paramref name="parent"/> 
            </summary>
            <param name="parent">Parent control that triggered the message box</param>
            <param name="text">Text for the body of the message box</param>
            <param name="caption">Caption for the title bar or heading of the message box</param>
            <param name="type">Type of message box</param>
            <param name="buttons">Buttons to show on the message box</param>
            <param name="defaultButton">Button to set focus to by default</param>
        </member>
        <member name="T:Eto.Forms.MessageBox.IHandler">
            <summary>
            Handler interface for the <see cref="T:Eto.Forms.MessageBox"/>
            </summary>
        </member>
        <member name="P:Eto.Forms.MessageBox.IHandler.Text">
            <summary>
            Gets or sets the body text of the message box.
            </summary>
            <value>The body text.</value>
        </member>
        <member name="P:Eto.Forms.MessageBox.IHandler.Caption">
            <summary>
            Gets or sets the caption for the title bar or heading of the message box.
            </summary>
            <value>The caption.</value>
        </member>
        <member name="P:Eto.Forms.MessageBox.IHandler.Type">
            <summary>
            Gets or sets the type of message box, usually changing the icon displayed.
            </summary>
            <value>The type of message box.</value>
        </member>
        <member name="P:Eto.Forms.MessageBox.IHandler.Buttons">
            <summary>
            Gets or sets which buttons to show on the message box.
            </summary>
            <value>The buttons to show.</value>
        </member>
        <member name="P:Eto.Forms.MessageBox.IHandler.DefaultButton">
            <summary>
            Gets or sets the default button, or <see cref="F:Eto.Forms.MessageBoxDefaultButton.Default"/> to automatically select either Cancel or No if displayed.
            </summary>
            <value>The default button.</value>
        </member>
        <member name="M:Eto.Forms.MessageBox.IHandler.ShowDialog(Eto.Forms.Control)">
            <summary>
            Shows the dialog.
            </summary>
            <returns>The dialog result.</returns>
            <param name="parent">Optional parent. If specified, the parent's window should be blocked from input. If null, all windows should be blocked.</param>
        </member>
        <member name="T:Eto.Forms.Mouse">
            <summary>
            Static methods to get the current mouse state
            </summary>
        </member>
        <member name="P:Eto.Forms.Mouse.IsSupported">
            <summary>
            Gets a value indicating whether the current platform supports mouse functions in this class
            </summary>
            <value><c>true</c> if is supported; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Eto.Forms.Mouse.Position">
            <summary>
            Gets or sets the current mouse position in screen coordinates
            </summary>
            <returns>The mouse position.</returns>
        </member>
        <member name="P:Eto.Forms.Mouse.Buttons">
            <summary>
            Gets the current state of the mouse buttons
            </summary>
            <returns>The mouse button state.</returns>
        </member>
        <member name="M:Eto.Forms.Mouse.IsAnyButtonPressed(Eto.Forms.MouseButtons)">
            <summary>
            Returns true if any of the specified mouse buttons is pressed.
            </summary>
            <param name="buttons"></param>
            <returns></returns>
        </member>
        <member name="T:Eto.Forms.Mouse.IHandler">
            <summary>
            Handler interface for the <see cref="T:Eto.Forms.Mouse"/> class
            </summary>
        </member>
        <member name="P:Eto.Forms.Mouse.IHandler.Position">
            <summary>
            Gets the current mouse position in screen coordinates
            </summary>
            <value>The mouse position.</value>
        </member>
        <member name="P:Eto.Forms.Mouse.IHandler.Buttons">
            <summary>
            Gets the current state of the mouse buttons
            </summary>
            <value>The mouse button state.</value>
        </member>
        <member name="T:Eto.Forms.Notification">
            <summary>
            System toast notification.
            </summary>
            <remarks>
            Create a new instance of this class for each notification sent as they are not reusable. 
            The ID and <see cref="P:Eto.Forms.Notification.UserData"/> should be used to specify what action would happen when the user
            clicks the notification (if applicable).
            
            All notifications should be handled by the <see cref="E:Eto.Forms.Application.NotificationActivated"/> event.
            
            Note that in some platforms (e.g. macOS), the application may have a notification clicked when
            the application isn't even started.  In this case, the application is started an then sent the notification
            to the <see cref="E:Eto.Forms.Application.NotificationActivated"/> immediately.
            </remarks>
        </member>
        <member name="P:Eto.Forms.Notification.Icon">
            <summary>
            Gets or sets the icon for the <see cref="T:Eto.Forms.Notification"/>.
            </summary>
            <remarks>
            Currently does nothing on WPF and WinForms.
            </remarks>
            <value>The icon of the <see cref="T:Eto.Forms.Notification"/>.</value>
        </member>
        <member name="P:Eto.Forms.Notification.ContentImage">
            <summary>
            Gets or sets the content image of the notification
            </summary>
            <remarks>
            This is used to provide context to the user for what the notification is for.
            </remarks>
        </member>
        <member name="P:Eto.Forms.Notification.Message">
            <summary>
            Gets or sets the message of the <see cref="T:Eto.Forms.Notification"/>.
            </summary>
            <value>The message of the <see cref="T:Eto.Forms.Notification"/>.</value>
        </member>
        <member name="P:Eto.Forms.Notification.RequiresTrayIndicator">
            <summary>
            Gets a value indicating whether this <see cref="T:Eto.Forms.Notification"/>
            requires a <see cref="T:Eto.Forms.TrayIndicator"/> to be displayed.
            </summary>
            <remarks>
            Usually if a tray is required but not provided, one will be created for the purposes of
            showing the notification with the same icon as the <see cref="P:Eto.Forms.Application.MainForm"/>.
            </remarks>
            <value><c>true</c> if <see cref="T:Eto.Forms.TrayIndicator"/> is required; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Eto.Forms.Notification.Title">
            <summary>
            Gets or sets the title for the <see cref="T:Eto.Forms.Notification"/>.
            </summary>
            <value>The title for the <see cref="T:Eto.Forms.Notification"/>.</value>
        </member>
        <member name="P:Eto.Forms.Notification.UserData">
            <summary>
            Gets or sets user data for the notification.
            </summary>
            <remarks>
            Use this to store application-specific data that would be useful for knowing what caused the notification.
            
            The data you store would usually determine what action to perform in the application.
            
            This is returned via <see cref="E:Eto.Forms.Application.NotificationActivated"/> via the <see cref="T:Eto.Forms.NotificationEventArgs"/>.
            </remarks>
        </member>
        <member name="M:Eto.Forms.Notification.Show(Eto.Forms.TrayIndicator)">
            <summary>
            Shows the current notification.
            </summary>
            <remarks>
            On some platforms like Gtk and Windows 10 the indicator
            is not needed, while on the others like Windows 7 it's required.
            
            You can find out if the indicator is needed by
            looking at <see cref="P:Eto.Forms.Notification.RequiresTrayIndicator"/> property.
            </remarks>
            <param name="indicator">Indicator to use to show the notification.</param>
        </member>
        <member name="T:Eto.Forms.Notification.IHandler">
            <summary>
            Handler interface for the <see cref="T:Eto.Forms.Notification"/> control
            </summary>
        </member>
        <member name="P:Eto.Forms.Notification.IHandler.Title">
            <summary>
            Gets or sets the title for the <see cref="T:Eto.Forms.Notification"/>.
            </summary>
            <value>The title for the <see cref="T:Eto.Forms.Notification"/>.</value>
        </member>
        <member name="P:Eto.Forms.Notification.IHandler.UserData">
            <summary>
            Gets or sets user data for the notification.
            </summary>
            <remarks>
            Use this to store application-specific data that would be useful for knowing what caused the notification.
            
            The data you store would usually determine what action to perform in the application.
            
            This is returned via <see cref="E:Eto.Forms.Application.NotificationActivated"/> via the <see cref="T:Eto.Forms.NotificationEventArgs"/>.
            </remarks>
        </member>
        <member name="P:Eto.Forms.Notification.IHandler.Message">
            <summary>
            Gets or sets the message of the <see cref="T:Eto.Forms.Notification"/>.
            </summary>
            <value>The message of the <see cref="T:Eto.Forms.Notification"/>.</value>
        </member>
        <member name="P:Eto.Forms.Notification.IHandler.RequiresTrayIndicator">
            <summary>
            Gets a value indicating whether this <see cref="T:Eto.Forms.Notification"/>
            requires a <see cref="T:Eto.Forms.TrayIndicator"/> to be displayed.
            </summary>
            <value><c>true</c> if <see cref="T:Eto.Forms.TrayIndicator"/> is required; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Eto.Forms.Notification.IHandler.ContentImage">
            <summary>
            Gets or sets the content image of the notification
            </summary>
            <remarks>
            This is used to provide context to the user for what the notification is for.
            </remarks>
        </member>
        <member name="M:Eto.Forms.Notification.IHandler.Show(Eto.Forms.TrayIndicator)">
            <summary>
            Shows the current notification.
            </summary>
            <param name="indicator">Indicator to use to show the notification.</param>
        </member>
        <member name="F:Eto.Forms.Notification.ActivatedEvent">
            <summary>
            Event identifier for handlers when attaching the <see cref="E:Eto.Forms.Notification.Activated"/> event.
            </summary>
        </member>
        <member name="E:Eto.Forms.Notification.Activated">
            <summary>
            Event to handle when the user left click the <see cref="T:Eto.Forms.Notification"/>.
            </summary>
        </member>
        <member name="M:Eto.Forms.Notification.OnActivated(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Eto.Forms.Notification.Activated"/> event.
            </summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="T:Eto.Forms.NotificationEventArgs">
            <summary>
            Event arguments when handling a notification event
            </summary>
        </member>
        <member name="P:Eto.Forms.NotificationEventArgs.ID">
            <summary>
            Identifier of the notification that was sent
            </summary>
        </member>
        <member name="P:Eto.Forms.NotificationEventArgs.UserData">
            <summary>
            Custom user data of the notification
            </summary>
        </member>
        <member name="M:Eto.Forms.NotificationEventArgs.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the NotificationEventArgs class
            </summary>
            <param name="id">Identifier of the notification that was sent</param>
            <param name="userData">Custom user data of the notification</param>
        </member>
        <member name="T:Eto.Forms.OpenFileDialog">
            <summary>
            Dialog to select a file (or files) from the file system to open in the application
            </summary>
        </member>
        <member name="P:Eto.Forms.OpenFileDialog.MultiSelect">
            <summary>
            Gets or sets a value indicating whether the user can select multiple files, or a single file.
            </summary>
            <value><c>true</c> if the user can select multiple files; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Eto.Forms.OpenFileDialog.Filenames">
            <summary>
            Gets the full path of the files selected by the user, when <see cref="P:Eto.Forms.OpenFileDialog.MultiSelect"/> is true.
            </summary>
            <remarks>
            This will return a single file name if <see cref="P:Eto.Forms.OpenFileDialog.MultiSelect"/> is false.
            </remarks>
            <value>The full path of the files selected, or a single file if <see cref="P:Eto.Forms.OpenFileDialog.MultiSelect"/> is false.</value>
        </member>
        <member name="T:Eto.Forms.OpenFileDialog.IHandler">
            <summary>
            Handler interface for the <see cref="T:Eto.Forms.OpenFileDialog"/>
            </summary>
        </member>
        <member name="P:Eto.Forms.OpenFileDialog.IHandler.MultiSelect">
            <summary>
            Gets or sets a value indicating whether the user can select multiple files, or a single file.
            </summary>
            <value><c>true</c> if the user can select multiple files; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Eto.Forms.OpenFileDialog.IHandler.Filenames">
            <summary>
            Gets the full path of the files selected by the user, when <see cref="P:Eto.Forms.OpenFileDialog.IHandler.MultiSelect"/> is true.
            </summary>
            <remarks>
            This will return a single file name if <see cref="P:Eto.Forms.OpenFileDialog.IHandler.MultiSelect"/> is false.
            </remarks>
            <value>The full path of the files selected, or a single file if <see cref="P:Eto.Forms.OpenFileDialog.IHandler.MultiSelect"/> is false.</value>
        </member>
        <member name="T:Eto.Forms.OpenWithDialog">
            <summary>
            Dialog for a user to pick the default application for the given file.
            </summary>
            <remarks>
            The OpenWithDialog on some platforms may run asynchronously, and return immediately after
            the <see cref="M:Eto.Forms.CommonDialog.ShowDialog(Eto.Forms.Control)"/> call. On some platforms, like Windows,
            it might not even look like a standard dialog.
            </remarks>
        </member>
        <member name="M:Eto.Forms.OpenWithDialog.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Eto.Forms.OpenWithDialog"/> class.
            </summary>
            <param name="filepath">File path of the file that should be opened.</param>
        </member>
        <member name="T:Eto.Forms.OpenWithDialog.IHandler">
            <summary>
            Handler interface for the <see cref="T:Eto.Forms.OpenWithDialog"/>.
            </summary>
        </member>
        <member name="P:Eto.Forms.OpenWithDialog.IHandler.FilePath">
            <summary>
            Gets or sets the file path of the file that should be opened.
            </summary>
            <value>The file path of the file that should be opened.</value>
        </member>
        <member name="T:Eto.Forms.Orientation">
            <summary>
            Represents either horizontal or vertical orientation for controls.
            </summary>
        </member>
        <member name="F:Eto.Forms.Orientation.Horizontal">
            <summary>
            The control or layout should be oriented horizontally.
            </summary>
        </member>
        <member name="F:Eto.Forms.Orientation.Vertical">
            <summary>
            The control or layout should be oriented vertically.
            </summary>
        </member>
        <member name="T:Eto.Forms.PageSettings">
            <summary>
            Settings for a single printed page. Not currently mapped to any platform.
            </summary>
        </member>
        <member name="P:Eto.Forms.PageSettings.PrintableArea">
            <summary>
            Gets the printable area for the page
            </summary>
            <value>The printable area.</value>
        </member>
        <member name="T:Eto.Forms.PageSettings.IHandler">
            <summary>
            Handler interface for the <see cref="T:Eto.Forms.PageSettings"/> control
            </summary>
        </member>
        <member name="P:Eto.Forms.PageSettings.IHandler.PrintableArea">
            <summary>
            Gets the printable area for the page
            </summary>
            <value>The printable area.</value>
        </member>
        <member name="T:Eto.Forms.PrintDialog">
            <summary>
            Dialog to show when printing a document or adjusting print settings
            </summary>
        </member>
        <member name="P:Eto.Forms.PrintDialog.PrintSettings">
            <summary>
            Gets or sets the print settings the print dialog is modifying.
            </summary>
            <value>The print settings.</value>
        </member>
        <member name="P:Eto.Forms.PrintDialog.AllowSelection">
            <summary>
            Gets or sets a value indicating whether the user can select to print the current selection.
            </summary>
            <remarks>
            If this is true, the <see cref="P:Eto.Forms.PrintSettings.PrintSelection"/> can be set by the user to <see cref="F:Eto.Forms.PrintSelection.Selection"/>.
            You must handle this case and only generate the pages for your selected content.
            </remarks>
            <value><c>true</c> if the user can select to print the selection; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Eto.Forms.PrintDialog.AllowPageRange">
            <summary>
            Gets or sets a value indicating whether the user can select the page range.
            </summary>
            <value><c>true</c> to allow the user to select the page range; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Eto.Forms.PrintDialog.ShowDialog(Eto.Forms.Control,Eto.Forms.PrintDocument)">
            <summary>
            Shows the print dialog for the specified <paramref name="document"/>, printing after closed if the user selects to print.
            </summary>
            <returns>The result.</returns>
            <param name="parent">Parent of the dialog to make modal.</param>
            <param name="document">Document to print.</param>
        </member>
        <member name="T:Eto.Forms.PrintDialog.IHandler">
            <summary>
            Handler for the <see cref="T:Eto.Forms.PrintDialog"/>.
            </summary>
        </member>
        <member name="P:Eto.Forms.PrintDialog.IHandler.Document">
            <summary>
            Gets or sets the document that is being printed.
            </summary>
            <value>The document to print.</value>
        </member>
        <member name="P:Eto.Forms.PrintDialog.IHandler.PrintSettings">
            <summary>
            Gets or sets the print settings the print dialog is modifying.
            </summary>
            <remarks>
            This should always return an instance, and is not required to be set by the user.
            </remarks>
            <value>The print settings.</value>
        </member>
        <member name="P:Eto.Forms.PrintDialog.IHandler.AllowPageRange">
            <summary>
            Gets or sets a value indicating whether the user can select the page range.
            </summary>
            <value><c>true</c> to allow the user to select the page range; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Eto.Forms.PrintDialog.IHandler.AllowSelection">
            <summary>
            Gets or sets a value indicating whether the user can select to print the current selection.
            </summary>
            <remarks>
            If this is true, the <see cref="P:Eto.Forms.PrintSettings.PrintSelection"/> can be set by the user to <see cref="F:Eto.Forms.PrintSelection.Selection"/>.
            You must handle this case and only generate the pages for your selected content.
            </remarks>
            <value><c>true</c> if the user can select to print the selection; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Eto.Forms.PrintDocument">
            <summary>
            Represents a document that can be printed
            </summary>
            <remarks>
            A print document uses the <see cref="T:Eto.Drawing.Graphics"/> to render its output via the
            <see cref="E:Eto.Forms.PrintDocument.PrintPage"/> event.
            </remarks>
        </member>
        <member name="F:Eto.Forms.PrintDocument.PrintingEvent">
            <summary>
            Identifier for handlers when attaching the <see cref="E:Eto.Forms.PrintDocument.Printing"/> event
            </summary>
        </member>
        <member name="E:Eto.Forms.PrintDocument.Printing">
            <summary>
            Occurs before printing has started
            </summary>
        </member>
        <member name="M:Eto.Forms.PrintDocument.OnPrinting(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Eto.Forms.PrintDocument.Printing"/> event.
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="F:Eto.Forms.PrintDocument.PrintedEvent">
            <summary>
            Identifier for handlers when attaching the <see cref="E:Eto.Forms.PrintDocument.Printed"/> event
            </summary>
        </member>
        <member name="E:Eto.Forms.PrintDocument.Printed">
            <summary>
            Occurs after the document has been printed
            </summary>
        </member>
        <member name="M:Eto.Forms.PrintDocument.OnPrinted(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Eto.Forms.PrintDocument.Printed"/> event.
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="F:Eto.Forms.PrintDocument.PrintPageEvent">
            <summary>
            Identifier for handlers when attaching the <see cref="E:Eto.Forms.PrintDocument.PrintPage"/> event
            </summary>
        </member>
        <member name="E:Eto.Forms.PrintDocument.PrintPage">
            <summary>
            Occurs for each printed page
            </summary>
        </member>
        <member name="M:Eto.Forms.PrintDocument.OnPrintPage(Eto.Forms.PrintPageEventArgs)">
            <summary>
            Raises the <see cref="E:Eto.Forms.PrintDocument.PrintPage"/> event.
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="P:Eto.Forms.PrintDocument.Name">
            <summary>
            Gets or sets the name of the document to show in the printer queue
            </summary>
            <value>The name of the document</value>
        </member>
        <member name="M:Eto.Forms.PrintDocument.Print">
            <summary>
            Prints this document immediately using the current <see cref="P:Eto.Forms.PrintDocument.PrintSettings"/>
            </summary>
            <remarks>
            This skips the print dialog, so if you want the user to adjust settings before printing, use
            <see cref="M:Eto.Forms.PrintDialog.ShowDialog(Eto.Forms.Control,Eto.Forms.PrintDocument)"/>.
            </remarks>
        </member>
        <member name="P:Eto.Forms.PrintDocument.PrintSettings">
            <summary>
            Gets or sets the print settings for the document when printing.
            </summary>
            <remarks>
            You can adjust the settings using the <see cref="T:Eto.Forms.PrintDialog"/>, or use <see cref="M:Eto.Forms.PrintDialog.ShowDialog(Eto.Forms.Control,Eto.Forms.PrintDocument)"/>
            to allow the user to adjust the settings before printing.
            </remarks>
            <value>The print settings.</value>
        </member>
        <member name="P:Eto.Forms.PrintDocument.PageCount">
            <summary>
            Gets or sets the total number of pages available to be printed in this document.
            </summary>
            <remarks>
            This must be set to the number of pages your document contains before printing or showing the print dialog.
            </remarks>
            <value>The page count.</value>
        </member>
        <member name="M:Eto.Forms.PrintDocument.GetCallback">
            <summary>
            Gets an instance of an object used to perform callbacks to the widget from handler implementations
            </summary>
            <returns>The callback instance to use for this widget</returns>
        </member>
        <member name="T:Eto.Forms.PrintDocument.ICallback">
            <summary>
            Interface for handlers to trigger events
            </summary>
        </member>
        <member name="M:Eto.Forms.PrintDocument.ICallback.OnPrinting(Eto.Forms.PrintDocument,System.EventArgs)">
            <summary>
            Raises the printing event, which should occur before the document is printed.
            </summary>
        </member>
        <member name="M:Eto.Forms.PrintDocument.ICallback.OnPrinted(Eto.Forms.PrintDocument,System.EventArgs)">
            <summary>
            Raises the printed event, which should occur after the document is fully printed.
            </summary>
        </member>
        <member name="M:Eto.Forms.PrintDocument.ICallback.OnPrintPage(Eto.Forms.PrintDocument,Eto.Forms.PrintPageEventArgs)">
            <summary>
            Raises the print page event, which should be called for each page in the selected page range to render its contents.
            </summary>
        </member>
        <member name="T:Eto.Forms.PrintDocument.Callback">
            <summary>
            Callback methods for handlers of <see cref="T:Eto.Forms.PrintDocument"/>
            </summary>
        </member>
        <member name="M:Eto.Forms.PrintDocument.Callback.OnPrinting(Eto.Forms.PrintDocument,System.EventArgs)">
            <summary>
            Raises the printing event.
            </summary>
        </member>
        <member name="M:Eto.Forms.PrintDocument.Callback.OnPrinted(Eto.Forms.PrintDocument,System.EventArgs)">
            <summary>
            Raises the printed event.
            </summary>
        </member>
        <member name="M:Eto.Forms.PrintDocument.Callback.OnPrintPage(Eto.Forms.PrintDocument,Eto.Forms.PrintPageEventArgs)">
            <summary>
            Raises the print page event.
            </summary>
        </member>
        <member name="T:Eto.Forms.PrintDocument.IHandler">
            <summary>
            Handler interface for the <see cref="T:Eto.Forms.PrintDocument"/> widget
            </summary>
        </member>
        <member name="M:Eto.Forms.PrintDocument.IHandler.Print">
            <summary>
            Prints this document immediately using the current <see cref="P:Eto.Forms.PrintDocument.IHandler.PrintSettings"/>
            </summary>
            <remarks>
            This should not show a print dialog, and should add the document to the print queue immediately using
            the current <see cref="P:Eto.Forms.PrintDocument.IHandler.PrintSettings"/>
            </remarks>
        </member>
        <member name="P:Eto.Forms.PrintDocument.IHandler.Name">
            <summary>
            Gets or sets the name of the document to show in the printer queue
            </summary>
            <value>The name of the document</value>
        </member>
        <member name="P:Eto.Forms.PrintDocument.IHandler.PrintSettings">
            <summary>
            Gets or sets the print settings for the document when printing.
            </summary>
            <value>The print settings.</value>
        </member>
        <member name="P:Eto.Forms.PrintDocument.IHandler.PageCount">
            <summary>
            Gets or sets the total number of pages available to be printed in this document.
            </summary>
            <remarks>
            This will be set to the number of pages your document contains before printing or showing the print dialog.
            </remarks>
            <value>The page count.</value>
        </member>
        <member name="T:Eto.Forms.PrintPageEventArgs">
            <summary>
            Event arguments when printing a page.
            </summary>
        </member>
        <member name="P:Eto.Forms.PrintPageEventArgs.Graphics">
            <summary>
            Gets the graphics context to draw the page's content.
            </summary>
            <value>The graphics context.</value>
        </member>
        <member name="P:Eto.Forms.PrintPageEventArgs.PageSize">
            <summary>
            Gets the size of the page, in device units.
            </summary>
            <remarks>
            This should be used to position elements on the page when using the <see cref="P:Eto.Forms.PrintPageEventArgs.Graphics"/> to draw the page's
            content.
            </remarks>
            <value>The size of the page.</value>
        </member>
        <member name="P:Eto.Forms.PrintPageEventArgs.CurrentPage">
            <summary>
            Gets the current page that is being printed.
            </summary>
            <value>The current page.</value>
        </member>
        <member name="M:Eto.Forms.PrintPageEventArgs.#ctor(Eto.Drawing.Graphics,Eto.Drawing.SizeF,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Eto.Forms.PrintPageEventArgs"/> class.
            </summary>
            <param name="graphics">Graphics context to paint the page.</param>
            <param name="pageSize">Size of the page in device units.</param>
            <param name="currentPage">Current page that is being printed.</param>
        </member>
        <member name="T:Eto.Forms.PageOrientation">
            <summary>
            Orientation of the printed page.
            </summary>
        </member>
        <member name="F:Eto.Forms.PageOrientation.Portrait">
            <summary>
            Print the page in portrait mode.
            </summary>
        </member>
        <member name="F:Eto.Forms.PageOrientation.Landscape">
            <summary>
            Print the page in landscape mode.
            </summary>
        </member>
        <member name="T:Eto.Forms.PrintSelection">
            <summary>
            Selection mode when printing
            </summary>
        </member>
        <member name="F:Eto.Forms.PrintSelection.AllPages">
            <summary>
            Print all pages
            </summary>
        </member>
        <member name="F:Eto.Forms.PrintSelection.Selection">
            <summary>
            Print the selection (defined by the application)
            </summary>
        </member>
        <member name="F:Eto.Forms.PrintSelection.SelectedPages">
            <summary>
            Print the selected pages from <see cref="P:Eto.Forms.PrintSettings.SelectedPageRange"/>
            </summary>
        </member>
        <member name="T:Eto.Forms.PrintSettings">
            <summary>
            Settings for printing a <see cref="T:Eto.Forms.PrintDocument"/>
            </summary>
            <remarks>
            This defines the parameters for printing such as how many copies, page range, orientation, etc.
            </remarks>
        </member>
        <member name="M:Eto.Forms.PrintSettings.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Eto.Forms.PrintSettings"/> class.
            </summary>
        </member>
        <member name="M:Eto.Forms.PrintSettings.#ctor(Eto.Forms.PrintSettings.IHandler)">
            <summary>
            Initializes a new instance of the <see cref="T:Eto.Forms.PrintSettings"/> class.
            </summary>
            <param name="handler">Handler.</param>
        </member>
        <member name="P:Eto.Forms.PrintSettings.Copies">
            <summary>
            Gets or sets the number of copies to print.
            </summary>
            <value>The number of copies.</value>
        </member>
        <member name="P:Eto.Forms.PrintSettings.MaximumPageRange">
            <summary>
            Gets or sets the maximum page range the user can select.
            </summary>
            <value>The maximum page range.</value>
        </member>
        <member name="P:Eto.Forms.PrintSettings.SelectedPageRange">
            <summary>
            Gets or sets the user's selected page range.
            </summary>
            <remarks>
            This will control which pages get rendered with the <see cref="E:Eto.Forms.PrintDocument.PrintPage"/>
            </remarks>
            <value>The selected page range.</value>
        </member>
        <member name="P:Eto.Forms.PrintSettings.Orientation">
            <summary>
            Gets or sets the orientation of the page when printing
            </summary>
            <value>The page orientation.</value>
        </member>
        <member name="P:Eto.Forms.PrintSettings.PrintSelection">
            <summary>
            Gets or sets the print selection mode
            </summary>
            <value>The print selection.</value>
        </member>
        <member name="P:Eto.Forms.PrintSettings.Collate">
            <summary>
            Gets or sets a value indicating whether to collate the copies.
            </summary>
            <remarks>
            When <c>true</c>, all pages of the document will be printed together for each copy. e.g. 123, 123, 123.
            When <c>false</c>, each page will print all copies together, e.g. 111, 222, 333.
            </remarks>
            <value><c>true</c> if collate; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Eto.Forms.PrintSettings.Reverse">
            <summary>
            Gets or sets a value indicating whether to print in reverse.
            </summary>
            <remarks>
            Printing in reverse will typically finish the job with the first page of the document at the top, since most
            printers stack the pages from bottom to top.
            </remarks>
            <value><c>true</c> to print in reverse; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Eto.Forms.PrintSettings.IHandler">
            <summary>
            Handler interface for the <see cref="T:Eto.Forms.PrintSettings"/> class.
            </summary>
        </member>
        <member name="P:Eto.Forms.PrintSettings.IHandler.Copies">
            <summary>
            Gets or sets the number of copies to print.
            </summary>
            <value>The copies.</value>
        </member>
        <member name="P:Eto.Forms.PrintSettings.IHandler.MaximumPageRange">
            <summary>
            Gets or sets the maximum page range the user can select.
            </summary>
            <value>The maximum page range.</value>
        </member>
        <member name="P:Eto.Forms.PrintSettings.IHandler.SelectedPageRange">
            <summary>
            Gets or sets the user's selected page range.
            </summary>
            <value>The selected page range.</value>
        </member>
        <member name="P:Eto.Forms.PrintSettings.IHandler.PrintSelection">
            <summary>
            Gets or sets the print selection mode
            </summary>
            <value>The print selection.</value>
        </member>
        <member name="P:Eto.Forms.PrintSettings.IHandler.Orientation">
            <summary>
            Gets or sets the orientation of the page when printing
            </summary>
            <value>The page orientation.</value>
        </member>
        <member name="P:Eto.Forms.PrintSettings.IHandler.Collate">
            <summary>
            Gets or sets a value indicating whether to collate the copies.
            </summary>
            <remarks>
            When <c>true</c>, all pages of the document will be printed together for each copy. e.g. 123, 123, 123.
            When <c>false</c>, each page will print all copies together, e.g. 111, 222, 333.
            </remarks>
            <value><c>true</c> if collate; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Eto.Forms.PrintSettings.IHandler.Reverse">
            <summary>
            Gets or sets a value indicating whether to print in reverse.
            </summary>
            <remarks>
            Printing in reverse will typically finish the job with the first page of the document at the top, since most
            printers stack the pages from bottom to top.
            
            Each platform can have a different default for this, depending on the system settings or usual defaults of other applications.
            </remarks>
            <value><c>true</c> to print in reverse; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Eto.Forms.Range`1">
            <summary>
            Represents an immutable, inclusive start/end range of <see cref="T:System.IComparable`1"/> values
            </summary>
            <copyright>(c) 2014 by Curtis Wensley</copyright>
            <license type="BSD-3">See LICENSE for full terms</license>
        </member>
        <member name="P:Eto.Forms.Range`1.Start">
            <summary>
            Gets the start value of the range
            </summary>
            <value>The start of the range.</value>
        </member>
        <member name="P:Eto.Forms.Range`1.End">
            <summary>
            Gets the end value of the range.
            </summary>
            <value>The end of the range.</value>
        </member>
        <member name="M:Eto.Forms.Range`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Eto.Forms.Range`1"/> struct with a value for both the start and end.
            </summary>
            <param name="value">Value for the start and end of the range.</param>
        </member>
        <member name="M:Eto.Forms.Range`1.#ctor(`0,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Eto.Forms.Range`1"/> struct.
            </summary>
            <param name="start">Start of the range (inclusive).</param>
            <param name="end">End of the range (inclusive).</param>
        </member>
        <member name="M:Eto.Forms.Range`1.WithStart(`0)">
            <summary>
            Creates a copy of the current range with a different start value.
            </summary>
            <returns>A new instance of the range with the specified start value.</returns>
            <param name="start">Start of the new range.</param>
        </member>
        <member name="M:Eto.Forms.Range`1.WithEnd(`0)">
            <summary>
            Creates a copy of the current range with a different end value.
            </summary>
            <returns>A new instance of the range with the specified end value.</returns>
            <param name="end">End of the new range.</param>
        </member>
        <member name="M:Eto.Forms.Range`1.Contains(`0)">
            <summary>
            Determines if the specified <paramref name="value"/> is between or equal to the <see cref="P:Eto.Forms.Range`1.Start"/> and <see cref="P:Eto.Forms.Range`1.End"/> of this range.
            </summary>
            <param name="value">Value to check if it is within this range.</param>
        </member>
        <member name="M:Eto.Forms.Range`1.Iterate(System.Func{`0,`0})">
            <summary>
            Iterates the range between the start and end values.
            </summary>
            <remarks>
            This can be used to return an enumerable that iterates between the start and end of the range given the
            specified <paramref name="increment"/> function.
            </remarks>
            <example>
            <code>
            // iterate over an int range
            var intRange = new Range&lt;int&gt;(1, 200);
            foreach (var item in intRange.Iterate(i => i + 1))
            {
            	// logic
            }
            
            // iterate over a date range by minute
            var dateRange = new Range&lt;DateTime&gt;(DateTime.Today, DateTime.Today.AddDays(2));
            foreach (var item in dateRange.Iterate(i => i.AddMinutes(1)))
            {
            	// logic
            }
            </code>
            </example>
            <param name="increment">Delegate to increment the value for each iteration of the enumerable.</param>
        </member>
        <member name="M:Eto.Forms.Range`1.Touches(Eto.Forms.Range{`0},System.Func{`0,`0})">
            <summary>
            Determines if the specified <paramref name="range"/> touches (but doesn't intersect) this instance.
            </summary>
            <remarks>
            This can be used to determine if one range comes after or before another range, given the specified
            <paramref name="increment"/> function.
            The increment function is used as this class does not assume how to increment each value, e.g. for a
            <see cref="T:System.DateTime"/> value, you can increment by day, minute, second, etc.
            </remarks>
            <param name="range">Range to check if it touches this range.</param>
            <param name="increment">Delegate to increment the value for checking if the ranges touch.</param>
            <returns><c>true</c> if the ranges touch, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Eto.Forms.Range`1.Intersects(Eto.Forms.Range{`0})">
            <summary>
            Determines if the specified <paramref name="range"/> intersects (overlaps) this instance.
            </summary>
            <param name="range">Range to check for intersection.</param>
            <returns><c>true</c> if the range intersects this instance, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Eto.Forms.Range`1.Intersect(Eto.Forms.Range{`0})">
            <summary>
            Gets the intersection of this instance and the specified <paramref name="range"/>.
            </summary>
            <param name="range">Range to intersect with.</param>
            <returns>A new instance of a range that is the intersection of this instance and the specified range, or null if they do not intersect.</returns>
        </member>
        <member name="M:Eto.Forms.Range`1.Union(Eto.Forms.Range{`0},System.Func{`0,`0})">
            <summary>
            Gets the union of this instance and the specified <paramref name="range"/>, including touching ranges.
            </summary>
            <remarks>
            This is similar to <see cref="M:Eto.Forms.Range`1.Union(Eto.Forms.Range{`0})"/>, however this handles when the two ranges are touching.
            The <paramref name="increment"/> delegate is used to determine if the ranges are touching by incrementing the ends
            of the ranges and comparing that value to the start of the other range.
            </remarks>
            <param name="range">Range to union with.</param>
            <param name="increment">Delegate to increment the value for checking if the ranges touch.</param>
            <returns>The union of this instance and the specified range, or null if they are neither intersecting or touching.</returns>
        </member>
        <member name="M:Eto.Forms.Range`1.Union(Eto.Forms.Range{`0})">
            <summary>
            Gets the union of this instance and an intersecting <paramref name="range"/>.
            </summary>
            <remarks>
            This is similar to <see cref="M:Eto.Forms.Range`1.Union(Eto.Forms.Range{`0},System.Func{`0,`0})"/>, however this only handles when the two ranges are intersecting.
            To union two ranges that touch, use the <see cref="M:Eto.Forms.Range`1.Union(Eto.Forms.Range{`0},System.Func{`0,`0})"/> method instead.
            </remarks>
            <param name="range">Range to union with.</param>
            <returns>The union of this instance and the specified range, or null if they are not intersecting.</returns>
        </member>
        <member name="M:Eto.Forms.Range`1.op_Inequality(Eto.Forms.Range{`0},Eto.Forms.Range{`0})">
            <summary>
            Operator to compare two ranges for inequality.
            </summary>
            <param name="range1">First range to compare.</param>
            <param name="range2">Second range to compare.</param>
            <returns><c>true</c> if the two ranges are not equal, <c>false</c> if they are.</returns>
        </member>
        <member name="M:Eto.Forms.Range`1.op_Equality(Eto.Forms.Range{`0},Eto.Forms.Range{`0})">
            <summary>
            Operator to compare two ranges for equality
            </summary>
            <param name="range1">First range to compare.</param>
            <param name="range2">Second range to compare.</param>
            <returns><c>true</c> if the two ranges are equal, <c>false</c> if they are not.</returns>
        </member>
        <member name="M:Eto.Forms.Range`1.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:Eto.Forms.Range`1"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:Eto.Forms.Range`1"/>.</param>
            <returns><c>true</c> if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:Eto.Forms.Range`1"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Eto.Forms.Range`1.GetHashCode">
            <summary>
            Serves as a hash function for a <see cref="T:Eto.Forms.Range`1"/> object.
            </summary>
            <returns>A hash code for this instance that is suitable for use in hashing algorithms and data structures such as a hash table.</returns>
        </member>
        <member name="M:Eto.Forms.Range`1.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:Eto.Forms.Range`1"/>.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents the current <see cref="T:Eto.Forms.Range`1"/>.</returns>
        </member>
        <member name="M:Eto.Forms.Range`1.Equals(Eto.Forms.Range{`0})">
            <summary>
            Determines whether the specified <paramref name="other"/> range is equal to the current <see cref="T:Eto.Forms.Range`1"/>.
            </summary>
            <param name="other">The <see cref="T:Eto.Forms.Range`1"/> to compare with the current <see cref="T:Eto.Forms.Range`1"/>.</param>
            <returns><c>true</c> if the specified <see cref="T:Eto.Forms.Range`1"/> is equal to the current <see cref="T:Eto.Forms.Range`1"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:Eto.Forms.RangeExtensions">
            <summary>
            Extensions for the <see cref="T:Eto.Forms.Range`1"/> structure
            </summary>
        </member>
        <member name="M:Eto.Forms.RangeExtensions.Interval(Eto.Forms.Range{System.DateTime})">
            <summary>
            Gets the interval for the specified <paramref name="range"/> between the start and end dates.
            </summary>
            <param name="range">Range to get the interval for.</param>
            <returns>A new TimeSpan that is the difference between the start and end dates of the specified range.</returns>
        </member>
        <member name="M:Eto.Forms.RangeExtensions.Length(Eto.Forms.Range{System.Int32})">
            <summary>
            Gets the length of the specified <paramref name="range"/> between the start and end values.
            </summary>
            <param name="range">Range to get the length for.</param>
            <returns>The length between the start and end values of the specified range.</returns>
        </member>
        <member name="M:Eto.Forms.RangeExtensions.WithLength(Eto.Forms.Range{System.Int32},System.Int32)">
            <summary>
            Creates a new range starting at the same position as the specified <paramref name="range"/> and a new length.
            </summary>
            <returns>The length for the new range.</returns>
            <param name="range">Range with the same start but different length of the specified range.</param>
            <param name="length">Length of the new range.</param>
        </member>
        <member name="T:Eto.Forms.Range">
            <summary>
            Helpers for the <see cref="T:Eto.Forms.Range`1"/> structure.
            </summary>
        </member>
        <member name="M:Eto.Forms.Range.FromLength(System.Int32,System.Int32)">
            <summary>
            Creates a new integer range with the specified start and length.
            </summary>
            <returns>A new range with the specified start and length.</returns>
            <param name="start">Start of the range.</param>
            <param name="length">Length of the range.</param>
        </member>
        <member name="M:Eto.Forms.Range.FromLength(System.Int64,System.Int64)">
            <summary>
            Creates a new long range with the specified start and length.
            </summary>
            <returns>A new range with the specified start and length.</returns>
            <param name="start">Start of the range.</param>
            <param name="length">Length of the range.</param>
        </member>
        <member name="T:Eto.Forms.RelayCommand">
            <summary>
            Command to relay execution and execute state to delegates
            </summary>
        </member>
        <member name="M:Eto.Forms.RelayCommand.#ctor(System.Action)">
            <summary>
            Initializes a new instance of the <see cref="T:Eto.Forms.RelayCommand"/> class.
            </summary>
            <remarks>
            The <see cref="M:Eto.Forms.RelayCommand`1.CanExecute(System.Object)"/> will always return true.
            </remarks>
            <param name="execute">Delegate to execute the command.</param>
        </member>
        <member name="M:Eto.Forms.RelayCommand.#ctor(System.Action,System.Func{System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:Eto.Forms.RelayCommand"/> class.
            </summary>
            <remarks>
            This constructor allows you to specify whether the command can be executed.
            If the state of the <paramref name="canExecute"/> delegate changes, you can call <see cref="M:Eto.Forms.RelayCommand`1.UpdateCanExecute"/>
            to tell the control that is bound to this command to call the delegate again.
            </remarks>
            <param name="execute">Delegate to execute the command.</param>
            <param name="canExecute">Delegate to determine the state of whether the command can be executed.</param>
        </member>
        <member name="T:Eto.Forms.RelayCommand`1">
            <summary>
            Command to relay execution and execute state to delegates
            </summary>
        </member>
        <member name="E:Eto.Forms.RelayCommand`1.CanExecuteChanged">
            <summary>
            Occurs when the return value of <see cref="M:Eto.Forms.RelayCommand`1.CanExecute(System.Object)"/> is changed.
            </summary>
        </member>
        <member name="M:Eto.Forms.RelayCommand`1.OnCanExecuteChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Eto.Forms.RelayCommand`1.CanExecuteChanged"/> event.
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:Eto.Forms.RelayCommand`1.#ctor(System.Action{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Eto.Forms.RelayCommand`1"/> class.
            </summary>
            <remarks>
            The <see cref="M:Eto.Forms.RelayCommand`1.CanExecute(System.Object)"/> will always return true.
            </remarks>
            <param name="execute">Delegate to execute the command.</param>
        </member>
        <member name="M:Eto.Forms.RelayCommand`1.#ctor(System.Action{`0},System.Predicate{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Eto.Forms.RelayCommand`1"/> class.
            </summary>
            <remarks>
            This constructor allows you to specify whether the command can be executed.
            If the state of the <paramref name="canExecute"/> delegate changes, you can call <see cref="M:Eto.Forms.RelayCommand`1.UpdateCanExecute"/>
            to tell the control that is bound to this command to call the delegate again.
            </remarks>
            <param name="execute">Delegate to execute the command.</param>
            <param name="canExecute">Delegate to determine the state of whether the command can be executed.</param>
        </member>
        <member name="M:Eto.Forms.RelayCommand`1.CanExecute(System.Object)">
            <summary>
            Determines whether this command can execute with the specified parameter.
            </summary>
            <returns><c>true</c> if this command can execute; otherwise, <c>false</c>.</returns>
            <param name="parameter">Command argument from the control.</param>
        </member>
        <member name="M:Eto.Forms.RelayCommand`1.Execute(System.Object)">
            <summary>
            Executes the command with the specified parameter.
            </summary>
            <param name="parameter">Command argument from the control.</param>
        </member>
        <member name="M:Eto.Forms.RelayCommand`1.UpdateCanExecute">
            <summary>
            Tells consumers of this command that the <see cref="M:Eto.Forms.RelayCommand`1.CanExecute(System.Object)"/> state has changed and should be queried again.
            </summary>
        </member>
        <member name="T:Eto.Forms.SaveFileDialog">
            <summary>
            Dialog for the user to select a file to save
            </summary>
        </member>
        <member name="T:Eto.Forms.SaveFileDialog.IHandler">
            <summary>
            Handler interface for the <see cref="T:Eto.Forms.SaveFileDialog"/>
            </summary>
        </member>
        <member name="T:Eto.Forms.Screen">
            <summary>
            Represents a display on the system.
            </summary>
        </member>
        <member name="M:Eto.Forms.Screen.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Eto.Forms.Screen"/> class.
            </summary>
        </member>
        <member name="M:Eto.Forms.Screen.#ctor(Eto.Forms.Screen.IHandler)">
            <summary>
            Initializes a new instance of the <see cref="T:Eto.Forms.Screen"/> class with the specified <paramref name="handler"/>.
            </summary>
            <remarks>
            Used by platform implementations to create instances of a screen with a particular handler.
            </remarks>
            <param name="handler">Handler for the screen.</param>
        </member>
        <member name="P:Eto.Forms.Screen.Screens">
            <summary>
            Gets an enumerable of display screens available on the current system.
            </summary>
            <value>The screens of the current system.</value>
        </member>
        <member name="P:Eto.Forms.Screen.DisplayBounds">
            <summary>
            Gets the display bounds of all screens on the current system.
            </summary>
            <value>The display bounds of all screens.</value>
        </member>
        <member name="P:Eto.Forms.Screen.PrimaryScreen">
            <summary>
            Gets the primary screen of the current system.
            </summary>
            <remarks>
            This is typically the user's main screen.
            </remarks>
            <value>The primary screen.</value>
        </member>
        <member name="P:Eto.Forms.Screen.DPI">
            <summary>
            Gets the logical Dots/Pixels Per Inch of the screen.
            </summary>
            <value>The Dots Per Inch</value>
        </member>
        <member name="P:Eto.Forms.Screen.Scale">
            <summary>
            Gets the logical scale of the pixels of the screen vs. points.
            </summary>
            <remarks>
            The scale can be used to translate points to pixels.  E.g.
            <code>
            var pixels = points * screen.Scale;
            </code>
            This is useful when creating fonts that need to be a certain pixel size.
            
            Since this is a logical scale, this will give you the 'recommended' pixel size that will appear to be the same
            physical size, even on retina displays.
            </remarks>
            <value>The logical scale of pixels per point.</value>
        </member>
        <member name="P:Eto.Forms.Screen.RealDPI">
            <summary>
            Gets the real Dots/Pixels Per Inch of the screen, accounting for retina displays.
            </summary>
            <remarks>
            This is similar to <see cref="P:Eto.Forms.Screen.DPI"/>, however will give you the 'real' DPI of the screen.
            For example, a Retina display on OS X will have the RealDPI twice the DPI reported.
            </remarks>
            <value>The real DP.</value>
        </member>
        <member name="P:Eto.Forms.Screen.RealScale">
            <summary>
            Gets the real scale of the pixels of the screen vs. points.
            </summary>
            <remarks>
            The scale can be used to translate points to 'real' pixels.  E.g.
            <code>
            var pixels = points * screen.Scale;
            </code>
            This is useful when creating fonts that need to be a certain pixel size.
            
            Since this is a real scale, this will give you the actual pixel size. 
            This means on retina displays on OS X will appear to be half the physical size as regular displays.
            </remarks>
            <value>The real scale of pixels per point.</value>
        </member>
        <member name="P:Eto.Forms.Screen.Bounds">
            <summary>
            Gets the bounds of the display in the <see cref="P:Eto.Forms.Screen.DisplayBounds"/> area.
            </summary>
            <remarks>
            The primary screen's upper left corner is always located at 0,0.
            A negative X/Y indicates that the screen location is to the left or top of the primary screen.
            A positive X/Y indicates that the screen location is to the right or bottom of the primary screen.
            </remarks>
            <value>The display's bounds.</value>
        </member>
        <member name="P:Eto.Forms.Screen.WorkingArea">
            <summary>
            Gets the working area of the display, excluding any menu/task bars, docks, etc.
            </summary>
            <remarks>
            This is useful to position your window in the usable area of the screen.
            </remarks>
            <value>The working area of the screen.</value>
        </member>
        <member name="P:Eto.Forms.Screen.BitsPerPixel">
            <summary>
            Gets the number of bits each pixel uses to represent its color value.
            </summary>
            <value>The screen's bits per pixel.</value>
        </member>
        <member name="P:Eto.Forms.Screen.IsPrimary">
            <summary>
            Gets a value indicating whether this screen is the primary/main screen.
            </summary>
            <value><c>true</c> if this is the primary screen; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Eto.Forms.Screen.LogicalPixelSize">
            <summary>
            Gets the number of physical pixels per logical pixel of this display.
            </summary>
            <remarks>
            On Retina/HighDPI displays, this will usually return 2.0, but can also be a fraction of pixels.  
            Non-retina will return 1.0.
            
            This essentially returns the value of <see cref="P:Eto.Forms.Screen.RealScale"/> divided by <see cref="P:Eto.Forms.Screen.Scale"/>.
            </remarks>
            <value>The number of physical pixels for each logical pixel.</value>
        </member>
        <member name="T:Eto.Forms.Screen.IHandler">
            <summary>
            Handler interface for the <see cref="T:Eto.Forms.Screen"/>.
            </summary>
        </member>
        <member name="P:Eto.Forms.Screen.IHandler.Scale">
            <summary>
            Gets the logical scale of the pixels of the screen vs. points.
            </summary>
            <remarks>
            This scale should be based on a standard 72dpi screen.
            </remarks>
            <value>The logical scale of pixels per point.</value>
        </member>
        <member name="P:Eto.Forms.Screen.IHandler.RealScale">
            <summary>
            Gets the real scale of the pixels of the screen vs. points.
            </summary>
            <remarks>
            This should be based on a standard 72dpi screen, and is useful for retina displays when the real DPI
            is double the logical DPI.  E.g. 1440x900 logical screen size is actually 2880x1800 pixels.
            </remarks>
            <value>The real scale of pixels per point.</value>
        </member>
        <member name="P:Eto.Forms.Screen.IHandler.BitsPerPixel">
            <summary>
            Gets the number of bits each pixel uses to represent its color value.
            </summary>
            <value>The screen's bits per pixel.</value>
        </member>
        <member name="P:Eto.Forms.Screen.IHandler.Bounds">
            <summary>
            Gets the bounds of the display.
            </summary>
            <remarks>
            The primary screen's upper left corner is always located at 0,0.
            A negative X/Y indicates that the screen location is to the left or top of the primary screen.
            A positive X/Y indicates that the screen location is to the right or bottom of the primary screen.
            </remarks>
            <value>The display's bounds.</value>
        </member>
        <member name="P:Eto.Forms.Screen.IHandler.WorkingArea">
            <summary>
            Gets the working area of the display, excluding any menu/task bars, docks, etc.
            </summary>
            <remarks>
            This is useful to position your window in the usable area of the screen.
            </remarks>
            <value>The working area of the screen.</value>
        </member>
        <member name="P:Eto.Forms.Screen.IHandler.IsPrimary">
            <summary>
            Gets a value indicating whether this screen is the primary/main screen.
            </summary>
            <value><c>true</c> if this is the primary screen; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Eto.Forms.Screen.IScreensHandler">
            <summary>
            Handler interface for static methods of the <see cref="T:Eto.Forms.Screen"/>.
            </summary>
        </member>
        <member name="P:Eto.Forms.Screen.IScreensHandler.Screens">
            <summary>
            Gets an enumerable of display screens available on the current system.
            </summary>
            <value>The screens of the current system.</value>
        </member>
        <member name="P:Eto.Forms.Screen.IScreensHandler.PrimaryScreen">
            <summary>
            Gets the primary screen of the current system.
            </summary>
            <remarks>
            This is typically the user's main screen.
            </remarks>
            <value>The primary screen.</value>
        </member>
        <member name="M:Eto.Forms.Screen.FromPoint(Eto.Drawing.PointF)">
            <summary>
            Gets the screen that contains the specified <paramref name="point"/>,
            or the closest screen to the point if it is outside the bounds of all screens.
            </summary>
            <returns>The screen encompassing or closest the specified point.</returns>
            <param name="point">Point to find the screen.</param>
        </member>
        <member name="M:Eto.Forms.Screen.FromRectangle(Eto.Drawing.RectangleF)">
            <summary>
            Gets the screen that encompases the biggest part of the specified <paramref name="rectangle"/>,
            or the closest screen to the rectangle if it is outside the bounds of all screens..
            </summary>
            <returns>The screen encompassing or closest to the specified rectangle.</returns>
            <param name="rectangle">Rectangle to find the screen.</param>
        </member>
        <member name="T:Eto.Forms.SelectFolderDialog">
            <summary>
            Dialog for the user to select a folder in the filesystem
            </summary>
        </member>
        <member name="P:Eto.Forms.SelectFolderDialog.Title">
            <summary>
            Gets or sets the title of dialog
            </summary>
            <value>The title.</value>
        </member>
        <member name="P:Eto.Forms.SelectFolderDialog.Directory">
            <summary>
            Gets or sets the selected directory.
            </summary>
            <value>The selected directory.</value>
        </member>
        <member name="T:Eto.Forms.SelectFolderDialog.IHandler">
            <summary>
            Handler interface for the <see cref="T:Eto.Forms.SelectFolderDialog"/>
            </summary>
        </member>
        <member name="P:Eto.Forms.SelectFolderDialog.IHandler.Title">
            <summary>
            Gets or sets the title of dialog
            </summary>
            <value>The title.</value>
        </member>
        <member name="P:Eto.Forms.SelectFolderDialog.IHandler.Directory">
            <summary>
            Gets or sets the selected directory.
            </summary>
            <value>The selected directory.</value>
        </member>
        <member name="T:Eto.Forms.ThemedControls.ThemedAboutDialogHandler">
            <summary>
            A themed handler for the <see cref="T:Eto.Forms.AboutDialog"/> dialog.
            </summary>
        </member>
        <member name="M:Eto.Forms.ThemedControls.ThemedAboutDialogHandler.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Eto.Forms.ThemedControls.AboutDialogHandler"/> class.
            </summary>
        </member>
        <member name="P:Eto.Forms.ThemedControls.ThemedAboutDialogHandler.Copyright">
            <summary>
            Gets or sets the copyright text.
            </summary>
            <value>The copyright text.</value>
        </member>
        <member name="P:Eto.Forms.ThemedControls.ThemedAboutDialogHandler.Designers">
            <summary>
            Gets or sets the list of graphical designers.
            </summary>
            <value>The list of graphical designers.</value>
            <seealso cref="P:Eto.Forms.ThemedControls.ThemedAboutDialogHandler.Developers"/>
            <seealso cref="P:Eto.Forms.ThemedControls.ThemedAboutDialogHandler.Documenters"/>
        </member>
        <member name="P:Eto.Forms.ThemedControls.ThemedAboutDialogHandler.Developers">
            <summary>
            Gets or sets the list of developers.
            </summary>
            <value>The list of developers.</value>
            <seealso cref="P:Eto.Forms.ThemedControls.ThemedAboutDialogHandler.Designers"/>
            <seealso cref="P:Eto.Forms.ThemedControls.ThemedAboutDialogHandler.Documenters"/>
        </member>
        <member name="P:Eto.Forms.ThemedControls.ThemedAboutDialogHandler.Documenters">
            <summary>
            Gets or sets the list of documenters.
            </summary>
            <value>The list of documenters.</value>
            <seealso cref="P:Eto.Forms.ThemedControls.ThemedAboutDialogHandler.Designers"/>
            <seealso cref="P:Eto.Forms.ThemedControls.ThemedAboutDialogHandler.Developers"/>
        </member>
        <member name="P:Eto.Forms.ThemedControls.ThemedAboutDialogHandler.License">
            <summary>
            Gets or sets the license.
            </summary>
            <value>The license.</value>
        </member>
        <member name="P:Eto.Forms.ThemedControls.ThemedAboutDialogHandler.Logo">
            <summary>
            Gets or sets the application logo.
            </summary>
            <value>The application logo.</value>
        </member>
        <member name="P:Eto.Forms.ThemedControls.ThemedAboutDialogHandler.ProgramDescription">
            <summary>
            Gets or sets the program description.
            </summary>
            <value>The program description.</value>
        </member>
        <member name="P:Eto.Forms.ThemedControls.ThemedAboutDialogHandler.ProgramName">
            <summary>
            Gets or sets the name of the program.
            </summary>
            <value>The name of the program.</value>
        </member>
        <member name="P:Eto.Forms.ThemedControls.ThemedAboutDialogHandler.Title">
            <summary>
            Gets or sets the window title.
            </summary>
            <value>The window title.</value>
        </member>
        <member name="P:Eto.Forms.ThemedControls.ThemedAboutDialogHandler.Version">
            <summary>
            Gets or sets the application version.
            </summary>
            <value>The application version.</value>
        </member>
        <member name="P:Eto.Forms.ThemedControls.ThemedAboutDialogHandler.Website">
            <summary>
            Gets or sets the application website.
            </summary>
            <value>The application website.</value>
        </member>
        <member name="P:Eto.Forms.ThemedControls.ThemedAboutDialogHandler.WebsiteLabel">
            <summary>
            Gets or sets the application website label.
            </summary>
            <value>The application website label.</value>
        </member>
        <member name="M:Eto.Forms.ThemedControls.ThemedAboutDialogHandler.ShowDialog(Eto.Forms.Window)">
            <summary>
            Shows the dialog.
            </summary>
            <returns>The dialog result.</returns>
            <param name="parent">The parent window.</param>
        </member>
        <member name="T:Eto.Forms.ThemedControls.ThemedDocumentControlHandler">
            <summary>
            A themed handler for the <see cref="T:Eto.Forms.DocumentControl"/> control.
            </summary>
        </member>
        <member name="P:Eto.Forms.ThemedControls.ThemedDocumentControlHandler.Font">
            <summary>
            Gets or sets the font for the tab text.
            </summary>
            <value>The font for the tabs.</value>
        </member>
        <member name="M:Eto.Forms.ThemedControls.ThemedDocumentControlHandler.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Eto.Forms.ThemedControls.ThemedDocumentControlHandler"/> class.
            </summary>
        </member>
        <member name="M:Eto.Forms.ThemedControls.ThemedDocumentControlHandler.OnLoad(System.EventArgs)">
            <summary>
            Performs calculations when loaded.
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="P:Eto.Forms.ThemedControls.ThemedDocumentControlHandler.SelectedIndex">
            <summary>
            Gets or sets the index of the selected.
            </summary>
            <value>The index of the selected.</value>
        </member>
        <member name="P:Eto.Forms.ThemedControls.ThemedDocumentControlHandler.AllowReordering">
            <summary>
            Gets or sets a value indicating whether to allow page reordering.
            </summary>
            <value><c>true</c> to allow reordering; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Eto.Forms.ThemedControls.ThemedDocumentControlHandler.GetPage(System.Int32)">
            <summary>
            Gets the page.
            </summary>
            <returns>The page.</returns>
            <param name="index">Index.</param>
        </member>
        <member name="M:Eto.Forms.ThemedControls.ThemedDocumentControlHandler.GetPageCount">
            <summary>
            Gets the page count.
            </summary>
            <returns>The page count.</returns>
        </member>
        <member name="M:Eto.Forms.ThemedControls.ThemedDocumentControlHandler.InsertPage(System.Int32,Eto.Forms.DocumentPage)">
            <summary>
            Inserts the page.
            </summary>
            <param name="index">Index.</param>
            <param name="page">Page.</param>
        </member>
        <member name="M:Eto.Forms.ThemedControls.ThemedDocumentControlHandler.RemovePage(System.Int32)">
            <summary>
            Removes a page.
            </summary>
            <param name="index">Index.</param>
        </member>
        <member name="P:Eto.Forms.ThemedControls.ThemedDocumentControlHandler.Enabled">
            <summary>
            Gets or sets a value indicating whether this control is enabled
            </summary>
            <value><c>true</c> if enabled; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Eto.Forms.ThemedControls.ThemedDocumentControlHandler.AttachEvent(System.String)">
            <summary>
            Attaches the specified event.
            </summary>
            <param name="id">Event identifier</param>
        </member>
        <member name="T:Eto.Forms.ThemedControls.ThemedDocumentPageHandler">
            <summary>
            A themed handler for the <see cref="T:Eto.Forms.DocumentPage"/> control.
            </summary>
        </member>
        <member name="M:Eto.Forms.ThemedControls.ThemedDocumentPageHandler.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Eto.Forms.ThemedControls.ThemedDocumentPageHandler"/> class.
            </summary>
        </member>
        <member name="P:Eto.Forms.ThemedControls.ThemedDocumentPageHandler.Closable">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Eto.Forms.ThemedControls.ThemedDocumentPageHandler"/> is closable.
            </summary>
            <value><c>true</c> if closable; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Eto.Forms.ThemedControls.ThemedDocumentPageHandler.Content">
            <summary>
            Gets or sets the content.
            </summary>
            <value>The content.</value>
        </member>
        <member name="P:Eto.Forms.ThemedControls.ThemedDocumentPageHandler.ContextMenu">
            <summary>
            Gets or sets the context menu.
            </summary>
            <value>The context menu.</value>
        </member>
        <member name="P:Eto.Forms.ThemedControls.ThemedDocumentPageHandler.Image">
            <summary>
            Gets or sets the tab image.
            </summary>
            <value>The tab image.</value>
        </member>
        <member name="P:Eto.Forms.ThemedControls.ThemedDocumentPageHandler.MinimumSize">
            <summary>
            Gets or sets the minimum size.
            </summary>
            <value>The minimum size.</value>
        </member>
        <member name="P:Eto.Forms.ThemedControls.ThemedDocumentPageHandler.Padding">
            <summary>
            Gets or sets the padding.
            </summary>
            <value>The padding.</value>
        </member>
        <member name="P:Eto.Forms.ThemedControls.ThemedDocumentPageHandler.Text">
            <summary>
            Gets or sets the text.
            </summary>
            <value>The text.</value>
        </member>
        <member name="P:Eto.Forms.ThemedControls.ThemedDocumentPageHandler.PropagateLoadEvents">
            <summary>
            Gets a value indicating whether <see cref="E:Eto.Forms.Control.PreLoad"/>/<see cref="E:Eto.Forms.Control.Load"/>/<see cref="E:Eto.Forms.Control.LoadComplete"/>/<see cref="E:Eto.Forms.Control.UnLoad"/>
            events are propagated to the inner control
            </summary>
        </member>
        <member name="T:Eto.Forms.ThemedControls.ThemedExpanderHandler">
            <summary>
            A themed handler for the <see cref="T:Eto.Forms.Expander"/> control.
            </summary>
        </member>
        <member name="P:Eto.Forms.ThemedControls.ThemedExpanderHandler.ExpandedButtonText">
            <summary>
            Gets or sets the text of the button when <see cref="P:Eto.Forms.ThemedControls.ThemedExpanderHandler.Expanded"/> is <c>true</c>.
            </summary>
        </member>
        <member name="P:Eto.Forms.ThemedControls.ThemedExpanderHandler.CollapsedButtonText">
            <summary>
            Gets or sets the text of the button when <see cref="P:Eto.Forms.ThemedControls.ThemedExpanderHandler.Expanded"/> is <c>false</c>.
            </summary>
        </member>
        <member name="M:Eto.Forms.ThemedControls.ThemedExpanderHandler.#ctor">
            <summary>
            Initializes a new instance of the ThemedExpanderHandler.
            </summary>
        </member>
        <member name="M:Eto.Forms.ThemedControls.ThemedExpanderHandler.Initialize">
            <summary>
            Initializes the control after attached to a widget.
            </summary>
        </member>
        <member name="P:Eto.Forms.ThemedControls.ThemedExpanderHandler.Expanded">
            <summary>
            Gets or sets whether the expander content is visible (expanded).
            </summary>
        </member>
        <member name="P:Eto.Forms.ThemedControls.ThemedExpanderHandler.Header">
            <summary>
            Gets or sets the content of the header
            </summary>
        </member>
        <member name="P:Eto.Forms.ThemedControls.ThemedExpanderHandler.Content">
            <summary>
            Gets or sets the content of the control when expanded.
            </summary>
        </member>
        <member name="P:Eto.Forms.ThemedControls.ThemedExpanderHandler.Padding">
            <summary>
            Gets or sets the padding around the <see cref="P:Eto.Forms.ThemedControls.ThemedExpanderHandler.Content"/>.
            </summary>
        </member>
        <member name="P:Eto.Forms.ThemedControls.ThemedExpanderHandler.MinimumSize">
            <summary>
            Gets or sets the minimum size of this control.
            </summary>
        </member>
        <member name="P:Eto.Forms.ThemedControls.ThemedExpanderHandler.ContextMenu">
            <summary>
            Gets or sets the context menu of the expander.
            </summary>
        </member>
        <member name="M:Eto.Forms.ThemedControls.ThemedExpanderHandler.AttachEvent(System.String)">
            <summary>
            Attaches the handler events.
            </summary>
            <param name="id">Identifier of the event to attach</param>
        </member>
        <member name="T:Eto.Forms.ThemedControls.ThemedFilePickerHandler">
            <summary>
            A themed handler for the <see cref="T:Eto.Forms.FilePicker"/> control.
            </summary>
        </member>
        <member name="M:Eto.Forms.ThemedControls.ThemedFilePickerHandler.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Eto.Forms.ThemedControls.ThemedFilePickerHandler"/> class.
            </summary>
        </member>
        <member name="P:Eto.Forms.ThemedControls.ThemedFilePickerHandler.FileAction">
            <summary>
            Gets or sets <see cref="P:Eto.Forms.ThemedControls.ThemedFilePickerHandler.FileAction"/> that is used when the user is selecting the file.
            </summary>
            <value>The file action.</value>
        </member>
        <member name="P:Eto.Forms.ThemedControls.ThemedFilePickerHandler.FilePath">
            <summary>
            Gets or sets the full path of the file that is selected.
            </summary>
            <value>The path of the file.</value>
        </member>
        <member name="P:Eto.Forms.ThemedControls.ThemedFilePickerHandler.CurrentFilterIndex">
            <summary>
            Gets or sets the index of the current filter in the <see cref="P:Eto.Forms.FilePicker.Filters"/> collection
            </summary>
            <value>The index of the current filter.</value>
        </member>
        <member name="P:Eto.Forms.ThemedControls.ThemedFilePickerHandler.Title">
            <summary>
            Gets or sets the title of the dialog that the control will show.
            </summary>
            <value>The title of the dialog.</value>
        </member>
        <member name="M:Eto.Forms.ThemedControls.ThemedFilePickerHandler.ClearFilters">
            <summary>
            Clears all filters
            </summary>
        </member>
        <member name="M:Eto.Forms.ThemedControls.ThemedFilePickerHandler.InsertFilter(System.Int32,Eto.Forms.FileFilter)">
            <summary>
            Inserts a filter at the specified index
            </summary>
            <param name="index">Index to insert the filter</param>
            <param name="filter">Filter to insert</param>
        </member>
        <member name="M:Eto.Forms.ThemedControls.ThemedFilePickerHandler.RemoveFilter(System.Int32)">
            <summary>
            Removes a filter at the specified index
            </summary>
            <param name="index">Index of the filter to remove</param>
        </member>
        <member name="M:Eto.Forms.ThemedControls.ThemedFilePickerHandler.AttachEvent(System.String)">
            <summary>
            Attaches control events.
            </summary>
            <param name="id">ID of the event to attach</param>
        </member>
        <member name="T:Eto.Forms.ThemedControls.ThemedFontPickerHandler">
            <summary>
            A themed handler for the <see cref="T:Eto.Forms.FontPicker"/> control.
            </summary>
        </member>
        <member name="M:Eto.Forms.ThemedControls.ThemedFontPickerHandler.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Eto.Forms.ThemedControls.ThemedFontPickerHandler"/> class.
            </summary>
        </member>
        <member name="P:Eto.Forms.ThemedControls.ThemedFontPickerHandler.Value">
            <summary>
            Gets or sets the currently selected font.
            </summary>
            <value>The selected font.</value>
        </member>
        <member name="M:Eto.Forms.ThemedControls.ThemedFontPickerHandler.AttachEvent(System.String)">
            <summary>
            Attaches control events.
            </summary>
            <param name="id">ID of the event to attach</param>
        </member>
        <member name="T:Eto.Forms.ThemedControls.ThemedSpinnerMode">
            <summary>
            Display Mode of the <see cref="T:Eto.Forms.ThemedControls.ThemedSpinnerHandler"/>
            </summary>
            <copyright>(c) 2013 by Curtis Wensley</copyright>
            <license type="BSD-3">See LICENSE for full terms</license>
        </member>
        <member name="F:Eto.Forms.ThemedControls.ThemedSpinnerMode.Line">
            <summary>
            Shows lines for each element in the spinner
            </summary>
        </member>
        <member name="F:Eto.Forms.ThemedControls.ThemedSpinnerMode.Circle">
            <summary>
            Shows dots for each element in the spinner
            </summary>
        </member>
        <member name="T:Eto.Forms.ThemedControls.ThemedSpinnerDirection">
            <summary>
            Direction to spin the <see cref="T:Eto.Forms.ThemedControls.ThemedSpinnerHandler"/>
            </summary>
            <copyright>(c) 2013 by Curtis Wensley</copyright>
            <license type="BSD-3">See LICENSE for full terms</license>
        </member>
        <member name="F:Eto.Forms.ThemedControls.ThemedSpinnerDirection.Clockwise">
            <summary>
            Spins clockwise
            </summary>
        </member>
        <member name="F:Eto.Forms.ThemedControls.ThemedSpinnerDirection.CounterClockwise">
            <summary>
            Spins counter-clockwise
            </summary>
        </member>
        <member name="T:Eto.Forms.ThemedControls.ThemedSpinnerHandler">
            <summary>
            Themed spinner handler for the <see cref="T:Eto.Forms.Spinner"/> control
            </summary>
            <copyright>(c) 2013 by Curtis Wensley</copyright>
            <license type="BSD-3">See LICENSE for full terms</license>
        </member>
        <member name="P:Eto.Forms.ThemedControls.ThemedSpinnerHandler.Increment">
            <summary>
            Gets or sets the increment for each step when the spinner is animating, where 1 is equal to the distance from one element to the other
            </summary>
            <value>The increment.</value>
        </member>
        <member name="P:Eto.Forms.ThemedControls.ThemedSpinnerHandler.Direction">
            <summary>
            Gets or sets the direction to spin
            </summary>
            <value>The direction.</value>
        </member>
        <member name="P:Eto.Forms.ThemedControls.ThemedSpinnerHandler.DisabledAlpha">
            <summary>
            Gets or sets the alpha of the marks when the spinner is not spinning (disabled)
            </summary>
            <value>The disabled alpha.</value>
        </member>
        <member name="P:Eto.Forms.ThemedControls.ThemedSpinnerHandler.ElementColor">
            <summary>
            Gets or sets the main color of each element
            </summary>
            <value>The color of the element.</value>
        </member>
        <member name="P:Eto.Forms.ThemedControls.ThemedSpinnerHandler.LineThickness">
            <summary>
            Gets or sets the line thickness relative to the control size, when the <see cref="P:Eto.Forms.ThemedControls.ThemedSpinnerHandler.Mode"/> is a Line
            </summary>
            <value>The line thickness.</value>
        </member>
        <member name="P:Eto.Forms.ThemedControls.ThemedSpinnerHandler.LineCap">
            <summary>
            Gets or sets the line cap when the <see cref="P:Eto.Forms.ThemedControls.ThemedSpinnerHandler.Mode"/> is set to line
            </summary>
            <value>The line cap.</value>
        </member>
        <member name="P:Eto.Forms.ThemedControls.ThemedSpinnerHandler.ElementSize">
            <summary>
            Gets or sets the size of each element, relative to the control size
            </summary>
            <value>The size of the element.</value>
        </member>
        <member name="P:Eto.Forms.ThemedControls.ThemedSpinnerHandler.Mode">
            <summary>
            Gets or sets the display mode of the spinner (e.g. Line/Circle)
            </summary>
            <value>The mode.</value>
        </member>
        <member name="P:Eto.Forms.ThemedControls.ThemedSpinnerHandler.NumberOfElements">
            <summary>
            Gets or sets the number of elements to display
            </summary>
            <value>The number of elements to display</value>
        </member>
        <member name="P:Eto.Forms.ThemedControls.ThemedSpinnerHandler.NumberOfVisibleElements">
            <summary>
            Gets or sets the number of visible elements while animating. This must be less than or equal to <see cref="P:Eto.Forms.ThemedControls.ThemedSpinnerHandler.NumberOfElements"/>
            </summary>
            <value>The number of visible elements.</value>
        </member>
        <member name="P:Eto.Forms.ThemedControls.ThemedSpinnerHandler.Speed">
            <summary>
            Gets or sets the speed of the spinner, in seconds for each tick.
            </summary>
            <value>The speed in seconds</value>
        </member>
        <member name="M:Eto.Forms.ThemedControls.ThemedSpinnerHandler.Initialize">
            <summary>
            Called to initialize this widget after it has been constructed
            </summary>
            <remarks>Override this to initialize any of the platform objects. This is called
            in the widget constructor, after all of the widget's constructor code has been called.</remarks>
        </member>
        <member name="M:Eto.Forms.ThemedControls.ThemedSpinnerHandler.OnLoadComplete(System.EventArgs)">
            <summary>
            Called after all other controls have been loaded
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:Eto.Forms.ThemedControls.ThemedSpinnerHandler.OnUnLoad(System.EventArgs)">
            <summary>
            Called when the control is unloaded, which is when it is not currently on a displayed window
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="P:Eto.Forms.ThemedControls.ThemedSpinnerHandler.Enabled">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Eto.Forms.ThemedControls.ThemedSpinnerHandler"/> is enabled (spinning)
            </summary>
            <value><c>true</c> if enabled; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Eto.Forms.ThemedControls.ThemedSplitterHandler">
            <summary>
            ! UNDER CONSTRUCTION !
            Themed splitter handler for the <see cref="P:Eto.Forms.ThemedControls.ThemedSplitterHandler.Splitter"/> control
            </summary>
        </member>
        <member name="M:Eto.Forms.ThemedControls.ThemedSplitterHandler.Initialize">
            <summary>
            Called to initialize this widget after it has been constructed
            </summary>
        </member>
        <member name="P:Eto.Forms.ThemedControls.ThemedSplitterHandler.Orientation">
            <summary>
            Gets or sets the orientation of the panels in the splitter.
            </summary>
        </member>
        <member name="P:Eto.Forms.ThemedControls.ThemedSplitterHandler.FixedPanel">
            <summary>
            Gets or sets the panel with fixed size.
            </summary>
        </member>
        <member name="P:Eto.Forms.ThemedControls.ThemedSplitterHandler.Position">
            <summary>
            Gets or sets the position of the splitter from the left or top, in pixels.
            </summary>
        </member>
        <member name="P:Eto.Forms.ThemedControls.ThemedSplitterHandler.RelativePosition">
            <summary>
            Gets or sets the relative position of the splitter which is based on <see cref="P:Eto.Forms.ThemedControls.ThemedSplitterHandler.FixedPanel"/>.
            </summary>
        </member>
        <member name="P:Eto.Forms.ThemedControls.ThemedSplitterHandler.SplitterWidth">
            <summary>
            Gets or sets size of the splitter/gutter
            </summary>
        </member>
        <member name="P:Eto.Forms.ThemedControls.ThemedSplitterHandler.Panel1">
            <summary>
            Gets or sets the top or left panel of the splitter.
            </summary>
        </member>
        <member name="P:Eto.Forms.ThemedControls.ThemedSplitterHandler.Panel2">
            <summary>
            Gets or sets the bottom or right panel of the splitter.
            </summary>
        </member>
        <member name="P:Eto.Forms.ThemedControls.ThemedSplitterHandler.Splitter">
            <summary>
            Gets the panel used as the splitter between the two panes.
            </summary>
        </member>
        <member name="P:Eto.Forms.ThemedControls.ThemedSplitterHandler.Panel1MinimumSize">
            <summary>
            Gets or sets the minimal size of the first panel.
            </summary>
            <value>The minimal size of the first panel.</value>
        </member>
        <member name="P:Eto.Forms.ThemedControls.ThemedSplitterHandler.Panel2MinimumSize">
            <summary>
            Gets or sets the minimal size of the second panel.
            </summary>
            <value>The minimal size of the second panel.</value>
        </member>
        <member name="T:Eto.Forms.ThemedControls.ThemedStepperHandler">
            <summary>
            Themed version of the <see cref="T:Eto.Forms.Stepper"/> control for platforms that have no support for such a control.
            </summary>
            <remarks>
            Currently used for Gtk and WinForms.  Mac and Wpf Toolkit have controls that have this functionality.
            
            To use this implementation for all platforms, add this before you start your app:
            <code>
            Platform.Detect.Add&gt;Stepper.IHandler&lt;(() => new Eto.Forms.ThemedControls.ThemedStepperHandler());
            </code>
            </remarks>
        </member>
        <member name="P:Eto.Forms.ThemedControls.ThemedStepperHandler.UpText">
            <summary>
            Gets or sets the text for the up/increase button
            </summary>
        </member>
        <member name="P:Eto.Forms.ThemedControls.ThemedStepperHandler.DownText">
            <summary>
            Gets or sets the text for the down/decrease button
            </summary>
        </member>
        <member name="P:Eto.Forms.ThemedControls.ThemedStepperHandler.Font">
            <summary>
            Gets or sets the font for the text in the buttons
            </summary>
        </member>
        <member name="M:Eto.Forms.ThemedControls.ThemedStepperHandler.#ctor">
            <summary>
            Initializes a new instance of the ThemedStepperHandler
            </summary>
        </member>
        <member name="P:Eto.Forms.ThemedControls.ThemedStepperHandler.Orientation">
            <summary>
            Gets or sets the orientation of the stepper
            </summary>
        </member>
        <member name="P:Eto.Forms.ThemedControls.ThemedStepperHandler.ValidDirection">
            <summary>
            Gets or sets the valid directions for the stepper
            </summary>
        </member>
        <member name="P:Eto.Forms.ThemedControls.ThemedStepperHandler.Enabled">
            <summary>
            Gets or sets a value indicating that the control is enabled
            </summary>
        </member>
        <member name="M:Eto.Forms.ThemedControls.ThemedStepperHandler.AttachEvent(System.String)">
            <summary>
            Attaches control events
            </summary>
            <param name="id">ID of the event to attach</param>
        </member>
        <member name="T:Eto.Forms.ThemedControls.ThemedTextStepperHandler">
            <summary>
            Themed implementation of the <see cref="T:Eto.Forms.TextStepper"/> control composed of a <see cref="T:Eto.Forms.TextBox"/> and <see cref="T:Eto.Forms.Stepper"/>.
            </summary>
        </member>
        <member name="M:Eto.Forms.ThemedControls.ThemedTextStepperHandler.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Eto.Forms.ThemedControls.ThemedTextStepperHandler"/> class.
            </summary>
        </member>
        <member name="P:Eto.Forms.ThemedControls.ThemedTextStepperHandler.CaretIndex">
            <summary>
            Gets or sets the index of the current insertion point.
            </summary>
            <remarks>
            When there is selected text, this is usually the start of the selection.
            </remarks>
            <value>The index of the current insertion point.</value>
        </member>
        <member name="P:Eto.Forms.ThemedControls.ThemedTextStepperHandler.Font">
            <summary>
            Gets or sets the font for the text of the control
            </summary>
            <value>The text font.</value>
        </member>
        <member name="P:Eto.Forms.ThemedControls.ThemedTextStepperHandler.MaxLength">
            <summary>
            Gets or sets the maximum length of the text that can be entered in the control.
            </summary>
            <remarks>
            This typically does not affect the value set using <see cref="P:Eto.Forms.TextControl.Text"/>, only the limit of what the user can 
            enter into the control.
            </remarks>
            <value>The maximum length of the text in the control.</value>
        </member>
        <member name="P:Eto.Forms.ThemedControls.ThemedTextStepperHandler.PlaceholderText">
            <summary>
            Gets or sets the placeholder text to show as a hint of what the user should enter.
            </summary>
            <remarks>
            Typically this will be shown when the control is blank, and will dissappear when the user enters text or if
            it has an existing value.
            </remarks>
            <value>The placeholder text.</value>
        </member>
        <member name="P:Eto.Forms.ThemedControls.ThemedTextStepperHandler.ReadOnly">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Eto.Forms.TextBox"/> is read only.
            </summary>
            <remarks>
            A user can selected and copied text when the read only, however the user will not be able to change any of the text.
            This differs from the <see cref="P:Eto.Forms.Control.Enabled"/> property, which disables all user interaction.
            </remarks>
            <value><c>true</c> if the control is read only; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Eto.Forms.ThemedControls.ThemedTextStepperHandler.Selection">
            <summary>
            Gets or sets the current text selection.
            </summary>
            <value>The text selection.</value>
        </member>
        <member name="P:Eto.Forms.ThemedControls.ThemedTextStepperHandler.ShowBorder">
            <summary>
            Gets or sets a value indicating whether to show the control's border.
            </summary>
            <remarks>
            This is a hint to omit the border of the control and show it as plainly as possible.
            
            Typically used when you want to show the control within a cell of the <see cref="T:Eto.Forms.GridView"/>.
            </remarks>
            <value><c>true</c> to show the control border; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Eto.Forms.ThemedControls.ThemedTextStepperHandler.Text">
            <summary>
            Gets or sets the text of the control.
            </summary>
            <value>The text content.</value>
        </member>
        <member name="P:Eto.Forms.ThemedControls.ThemedTextStepperHandler.TextColor">
            <summary>
            Gets or sets the color of the text.
            </summary>
            <remarks>
            By default, the text will get a color based on the user's theme. However, this is usually black.
            </remarks>
            <value>The color of the text.</value>
        </member>
        <member name="P:Eto.Forms.ThemedControls.ThemedTextStepperHandler.ValidDirection">
            <summary>
            Gets or sets the valid directions the stepper will allow the user to click.
            </summary>
            <remarks>
            On some platforms, the up and/or down buttons will not appear disabled, but will not trigger any events when they are 
            not set as a valid direction.
            </remarks>
            <value>The valid directions for the stepper.</value>
        </member>
        <member name="M:Eto.Forms.ThemedControls.ThemedTextStepperHandler.SelectAll">
            <summary>
            Selects all of the text in the control.
            </summary>
            <remarks>
            When setting the selection, the control will be focussed and the associated keyboard may appear on mobile platforms.
            </remarks>
        </member>
        <member name="P:Eto.Forms.ThemedControls.ThemedTextStepperHandler.TextAlignment">
            <summary>
            Gets or sets the alignment of the text in the entry box.
            </summary>
            <value>The text alignment.</value>
        </member>
        <member name="P:Eto.Forms.ThemedControls.ThemedTextStepperHandler.ShowStepper">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Eto.Forms.Control"/> is visible to the user.
            </summary>
            <remarks>
            When the visibility of a control is set to false, it will still occupy space in the layout, but not be shown.
            The only exception is for controls like the <see cref="T:Eto.Forms.Splitter"/>, which will hide a pane if the visibility
            of one of the panels is changed.
            </remarks>
            <value><c>true</c> if visible; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Eto.Forms.ThemedControls.ThemedTextStepperHandler.KeyboardControl">
            <summary>
            Gets the control used to attach keyboard and text input events
            </summary>
            <value>The keyboard control.</value>
        </member>
        <member name="P:Eto.Forms.ThemedControls.ThemedTextStepperHandler.BackgroundColor">
            <summary>
            Gets or sets the color for the background of the control
            </summary>
            <remarks>
            Note that on some platforms (e.g. Mac), setting the background color of a control can change the performance
            characteristics of the control and its children, since it must enable layers to do so.
            </remarks>
            <value>The color of the background.</value>
        </member>
        <member name="P:Eto.Forms.ThemedControls.ThemedTextStepperHandler.AutoSelectMode">
            <summary>
            Gets or sets the auto selection mode.
            </summary>
            <value>The auto selection mode.</value>
        </member>
        <member name="M:Eto.Forms.ThemedControls.ThemedTextStepperHandler.AttachEvent(System.String)">
            <summary>
            Attaches the specified event to the platform-specific control
            </summary>
            <remarks>Implementors should override this method to handle any events that the widget
            supports. Ensure to call the base class' implementation if the event is not
            one the specific widget supports, so the base class' events can be handled as well.</remarks>
            <param name="id">Identifier of the event</param>
        </member>
        <member name="T:Eto.Forms.ButtonToolItem">
            <summary>
            Tool item to execute an action
            </summary>
        </member>
        <member name="M:Eto.Forms.ButtonToolItem.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Eto.Forms.ButtonToolItem"/> class.
            </summary>
        </member>
        <member name="M:Eto.Forms.ButtonToolItem.#ctor(System.EventHandler{System.EventArgs})">
            <summary>
            Initializes a new instance of the <see cref="T:Eto.Forms.ButtonToolItem"/> class with the specified <paramref name="click"/> handler.
            </summary>
            <remarks>
            This is a convenience constructor to set up the click event.
            </remarks>
            <param name="click">Delegate to handle when the tool item is clicked.</param>
        </member>
        <member name="M:Eto.Forms.ButtonToolItem.#ctor(Eto.Forms.Command)">
            <summary>
            Initializes a new instance of the <see cref="T:Eto.Forms.ButtonToolItem"/> class with the specified <paramref name="command"/>.
            </summary>
            <param name="command">Command for the tool item.</param>
        </member>
        <member name="T:Eto.Forms.ButtonToolItem.IHandler">
            <summary>
            Handler for the <see cref="T:Eto.Forms.ButtonToolItem"/>.
            </summary>
        </member>
        <member name="T:Eto.Forms.CheckToolItem">
            <summary>
            Tool item that can be toggled on or off.
            </summary>
        </member>
        <member name="E:Eto.Forms.CheckToolItem.CheckedChanged">
            <summary>
            Occurs when the <see cref="P:Eto.Forms.CheckToolItem.Checked"/> property is changed.
            </summary>
        </member>
        <member name="M:Eto.Forms.CheckToolItem.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Eto.Forms.CheckToolItem"/> class.
            </summary>
        </member>
        <member name="M:Eto.Forms.CheckToolItem.#ctor(Eto.Forms.CheckCommand)">
            <summary>
            Initializes a new instance of the <see cref="T:Eto.Forms.CheckToolItem"/> class with the specified <paramref name="command"/>.
            </summary>
            <param name="command">Command for the tool item.</param>
        </member>
        <member name="P:Eto.Forms.CheckToolItem.Checked">
            <summary>
            Gets or sets a value indicating whether this item is checked.
            </summary>
            <value><c>true</c> if checked; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Eto.Forms.CheckToolItem.OnCheckedChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Eto.Forms.CheckToolItem.CheckedChanged"/> event.
            </summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="T:Eto.Forms.CheckToolItem.IHandler">
            <summary>
            Handler for the <see cref="T:Eto.Forms.CheckToolItem"/>.
            </summary>
        </member>
        <member name="P:Eto.Forms.CheckToolItem.IHandler.Checked">
            <summary>
            Gets or sets a value indicating whether this item is checked.
            </summary>
            <value><c>true</c> if checked; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Eto.Forms.RadioToolItem">
            <summary>
            Tool item that can be toggled on or off.
            </summary>
            <remarks>
            Note that there is only a single group of radio buttons allowed on a toolbar.
            </remarks>
        </member>
        <member name="E:Eto.Forms.RadioToolItem.CheckedChanged">
            <summary>
            Occurs when the <see cref="P:Eto.Forms.RadioToolItem.Checked"/> property is changed.
            </summary>
        </member>
        <member name="M:Eto.Forms.RadioToolItem.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Eto.Forms.RadioToolItem"/> class.
            </summary>
        </member>
        <member name="M:Eto.Forms.RadioToolItem.#ctor(Eto.Forms.CheckCommand)">
            <summary>
            Initializes a new instance of the <see cref="T:Eto.Forms.RadioToolItem"/> class with the specified <paramref name="command"/>.
            </summary>
            <param name="command">Command for the tool item.</param>
        </member>
        <member name="P:Eto.Forms.RadioToolItem.Checked">
            <summary>
            Gets or sets a value indicating whether this item is checked.
            </summary>
            <value><c>true</c> if checked; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Eto.Forms.RadioToolItem.OnCheckedChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Eto.Forms.RadioToolItem.CheckedChanged"/> event.
            </summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="T:Eto.Forms.RadioToolItem.IHandler">
            <summary>
            Handler for the <see cref="T:Eto.Forms.RadioToolItem"/>.
            </summary>
        </member>
        <member name="P:Eto.Forms.RadioToolItem.IHandler.Checked">
            <summary>
            Gets or sets a value indicating whether this item is checked.
            </summary>
            <value><c>true</c> if checked; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Eto.Forms.SeparatorToolItemType">
            <summary>
            Enumeration of the types of separators for the <see cref="T:Eto.Forms.SeparatorToolItem"/>
            </summary>
        </member>
        <member name="F:Eto.Forms.SeparatorToolItemType.Divider">
            <summary>
            Line divider
            </summary>
        </member>
        <member name="F:Eto.Forms.SeparatorToolItemType.Space">
            <summary>
            Fixed space divider
            </summary>
        </member>
        <member name="F:Eto.Forms.SeparatorToolItemType.FlexibleSpace">
            <summary>
            Flexible space divider (not available on all platforms)
            </summary>
            <remarks>
            This is (currently) only available for OS X applications as
            other platforms left-align their toolbars.
            </remarks>
        </member>
        <member name="T:Eto.Forms.SeparatorToolItem">
            <summary>
            Tool item to separate groups of items using a divider, space, etc.
            </summary>
        </member>
        <member name="P:Eto.Forms.SeparatorToolItem.Type">
            <summary>
            Gets or sets the type of the separator.
            </summary>
            <value>The separator type.</value>
        </member>
        <member name="T:Eto.Forms.SeparatorToolItem.IHandler">
            <summary>
            Handler interface for the <see cref="T:Eto.Forms.SeparatorToolItem"/>.
            </summary>
        </member>
        <member name="P:Eto.Forms.SeparatorToolItem.IHandler.Type">
            <summary>
            Gets or sets the type of the separator.
            </summary>
            <value>The separator type.</value>
        </member>
        <member name="T:Eto.Forms.Tool">
            <summary>
            Base class for tool items on a <see cref="T:Eto.Forms.ToolBar"/>
            </summary>
        </member>
        <member name="M:Eto.Forms.Tool.OnPreLoad(System.EventArgs)">
            <summary>
            Called before the tool item is assigned to a control/window
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:Eto.Forms.Tool.OnLoad(System.EventArgs)">
            <summary>
            Called when the tool item is assigned to a control/window
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:Eto.Forms.Tool.OnUnLoad(System.EventArgs)">
            <summary>
            Called when the tool item is removed from a control/window
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="T:Eto.Forms.Tool.IHandler">
            <summary>
            Interface for platform implementations of the <see cref="T:Eto.Forms.Tool"/> class.
            </summary>
        </member>
        <member name="M:Eto.Forms.Tool.IHandler.OnLoad(System.EventArgs)">
            <summary>
            Called when the tool item is assigned to a control/window
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:Eto.Forms.Tool.IHandler.OnPreLoad(System.EventArgs)">
            <summary>
            Called before the tool item is assigned to a control/window
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:Eto.Forms.Tool.IHandler.OnUnLoad(System.EventArgs)">
            <summary>
            Called when the tool item is removed from a control/window
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="T:Eto.Forms.ToolBarTextAlign">
            <summary>
            Text alignment hint for items in a <see cref="T:Eto.Forms.ToolBar"/>
            </summary>
            <remarks>
            Note that some platforms may define the visual style of toolbar items and this just serves as a hint for platforms
            that support such features (e.g. windows).
            </remarks>
            <copyright>(c) 2014 by Curtis Wensley</copyright>
            <license type="BSD-3">See LICENSE for full terms</license>
        </member>
        <member name="F:Eto.Forms.ToolBarTextAlign.Right">
            <summary>
            Text will be shown to the right of the toolbar item, if available
            </summary>
        </member>
        <member name="F:Eto.Forms.ToolBarTextAlign.Underneath">
            <summary>
            Text will be shown below the toolbar items
            </summary>
        </member>
        <member name="T:Eto.Forms.ToolBarDock">
            <summary>
            Docking mode hint for a <see cref="T:Eto.Forms.ToolBar"/>
            </summary>
            <remarks>
            Most platforms will not respect this, and is usually only necessary for constrained devices like iOS and Android.
            Each platform may have a different default docking mode, depending on the type of device.
            E.g. iPhone will by default show the toolbar on the bottom, whereas iPad and dekstop platforms will show it at
            the top by default.
            
            Additionally, some platforms may choose to show the toolbar in a different way, e.g. the Navigation control
            on iPhone has a standard toolbar available, so if you are using one it will attempt to use its toolbar to provide 
            the best native experience.
            </remarks>
            <copyright>(c) 2014 by Curtis Wensley</copyright>
            <license type="BSD-3">See LICENSE for full terms</license>
        </member>
        <member name="F:Eto.Forms.ToolBarDock.Top">
            <summary>
            Toolbar will be shown at the top of the form
            </summary>
        </member>
        <member name="F:Eto.Forms.ToolBarDock.Bottom">
            <summary>
            Toolbar will be shown at the bottom of the form.
            </summary>
        </member>
        <member name="T:Eto.Forms.ToolBar">
            <summary>
            Toolbar widget for use on a <see cref="T:Eto.Forms.Window"/>.
            </summary>
            <remarks>
            Only a single toolbar is currently supported for each window.
            </remarks>
            <seealso cref="P:Eto.Forms.Window.ToolBar"/>
            <copyright>(c) 2014 by Curtis Wensley</copyright>
            <license type="BSD-3">See LICENSE for full terms</license>
        </member>
        <member name="P:Eto.Forms.ToolBar.Dock">
            <summary>
            Gets or sets the docking hint for the toolbar.
            </summary>
            <remarks>
            Most platforms will not respect this, and is usually only necessary for constrained devices like iOS and Android.
            Each platform may have a different default docking mode, depending on the type of device.
            E.g. iPhone will by default show the toolbar on the bottom, whereas iPad and dekstop platforms will show it at
            the top by default.
            
            Additionally, some platforms may choose to show the toolbar in a different way, e.g. the Navigation control
            on iPhone has a standard toolbar available, so if you are using one it will attempt to use its toolbar to provide 
            the best native experience.
            </remarks>
            <value>The dock hint.</value>
        </member>
        <member name="P:Eto.Forms.ToolBar.Items">
            <summary>
            Gets the collection of items in the toolbar.
            </summary>
            <value>The tool item collection.</value>
        </member>
        <member name="P:Eto.Forms.ToolBar.TextAlign">
            <summary>
            Gets or sets the text alignment hint.
            </summary>
            <remarks>
            Note that some platforms may define the visual style of toolbar items and this just serves as a hint for platforms
            that support such features (e.g. windows).
            </remarks>
            <value>The text alignment hint.</value>
        </member>
        <member name="M:Eto.Forms.ToolBar.OnLoad(System.EventArgs)">
            <summary>
            Called when the tool item is loaded to be shown on the form.
            </summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:Eto.Forms.ToolBar.OnUnLoad(System.EventArgs)">
            <summary>
            Called when the tool item is removed from a form.
            </summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:Eto.Forms.ToolBar.OnPreLoad(System.EventArgs)">
            <summary>
            Called when the tool item is removed from a form.
            </summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:Eto.Forms.ToolBar.OnDataContextChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Eto.Forms.BindableWidget.DataContextChanged"/> event
            </summary>
            <remarks>
            Implementors may override this to fire this event on child widgets in a heirarchy. 
            This allows a control to be bound to its own <see cref="P:Eto.Forms.BindableWidget.DataContext"/>, which would be set
            on one of the parent control(s).
            </remarks>
            <param name="e">Event arguments</param>
        </member>
        <member name="T:Eto.Forms.ToolBar.IHandler">
            <summary>
            Handler interface for the <see cref="T:Eto.Forms.ToolBar"/>.
            </summary>
        </member>
        <member name="M:Eto.Forms.ToolBar.IHandler.AddButton(Eto.Forms.ToolItem,System.Int32)">
            <summary>
            Adds a button at the specified index.
            </summary>
            <param name="button">Button to add.</param>
            <param name="index">Index of the button to add.</param>
        </member>
        <member name="M:Eto.Forms.ToolBar.IHandler.RemoveButton(Eto.Forms.ToolItem)">
            <summary>
            Removes the specified button.
            </summary>
            <param name="button">Button to remove.</param>
        </member>
        <member name="M:Eto.Forms.ToolBar.IHandler.Clear">
            <summary>
            Clears all buttons from the toolbar
            </summary>
        </member>
        <member name="P:Eto.Forms.ToolBar.IHandler.TextAlign">
            <summary>
            Gets or sets the text alignment hint.
            </summary>
            <remarks>
            Note that some platforms may define the visual style of toolbar items and this just serves as a hint for platforms
            that support such features (e.g. windows).
            </remarks>
            <value>The text alignment hint.</value>
        </member>
        <member name="P:Eto.Forms.ToolBar.IHandler.Dock">
            <summary>
            Gets or sets the docking hint for the toolbar.
            </summary>
            <remarks>
            Most platforms will not respect this, and is usually only necessary for constrained devices like iOS and Android.
            Each platform may have a different default docking mode, depending on the type of device.
            E.g. iPhone will by default show the toolbar on the bottom, whereas iPad and dekstop platforms will show it at
            the top by default.
            
            Additionally, some platforms may choose to show the toolbar in a different way, e.g. the Navigation control
            on iPhone has a standard toolbar available, so if you are using one it will attempt to use its toolbar to provide 
            the best native experience.
            </remarks>
            <value>The dock hint.</value>
        </member>
        <member name="T:Eto.Forms.ToolItem">
            <summary>
            Base tool item class for a <see cref="T:Eto.Forms.ToolBar"/>.
            </summary>
        </member>
        <member name="P:Eto.Forms.ToolItem.Command">
            <summary>
            Gets or sets the command to invoke when the tool item is pressed.
            </summary>
            <remarks>
            This will invoke the specified command when the tool item is pressed.
            The <see cref="M:System.Windows.Input.ICommand.CanExecute(System.Object)"/> will also used to set the enabled/disabled state of the tool item.
            </remarks>
            <value>The command to invoke.</value>
        </member>
        <member name="P:Eto.Forms.ToolItem.CommandParameter">
            <summary>
            Gets or sets the parameter to pass to the <see cref="P:Eto.Forms.ToolItem.Command"/> when executing or determining its CanExecute state.
            </summary>
            <value>The command parameter.</value>
        </member>
        <member name="E:Eto.Forms.ToolItem.Click">
            <summary>
            Occurs when the user clicks on the item.
            </summary>
        </member>
        <member name="M:Eto.Forms.ToolItem.OnClick(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Eto.Forms.ToolItem.Click"/> event.
            </summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:Eto.Forms.ToolItem.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Eto.Forms.ToolItem"/> class.
            </summary>
        </member>
        <member name="M:Eto.Forms.ToolItem.#ctor(Eto.Forms.Command)">
            <summary>
            Initializes a new instance of the <see cref="T:Eto.Forms.ToolItem"/> class with the specified <paramref name="command"/>.
            </summary>
            <param name="command">Command to initialize the tool item with.</param>
        </member>
        <member name="P:Eto.Forms.ToolItem.Order">
            <summary>
            Gets or sets the order of the tool item when adding to the <see cref="T:Eto.Forms.ToolItemCollection"/>.
            </summary>
            <value>The order when adding the item.</value>
        </member>
        <member name="P:Eto.Forms.ToolItem.Text">
            <summary>
            Gets or sets the text of the item, with mnemonic.
            </summary>
            <value>The text.</value>
        </member>
        <member name="P:Eto.Forms.ToolItem.ToolTip">
            <summary>
            Gets or sets the tool tip to show when hovering the mouse over the item.
            </summary>
            <value>The tool tip.</value>
        </member>
        <member name="P:Eto.Forms.ToolItem.Image">
            <summary>
            Gets or sets the image for the tool item.
            </summary>
            <value>The image.</value>
        </member>
        <member name="P:Eto.Forms.ToolItem.Enabled">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Eto.Forms.ToolItem"/> is enabled.
            </summary>
            <value><c>true</c> if enabled; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Eto.Forms.ToolItem.Tag">
            <summary>
            Gets or sets a user-defined tag for the tool item.
            </summary>
            <value>The user-defined tag.</value>
        </member>
        <member name="T:Eto.Forms.ToolItem.IHandler">
            <summary>
            Handler interface for the <see cref="T:Eto.Forms.ToolItem"/>.
            </summary>
        </member>
        <member name="P:Eto.Forms.ToolItem.IHandler.Image">
            <summary>
            Gets or sets the image for the tool item.
            </summary>
            <value>The image.</value>
        </member>
        <member name="M:Eto.Forms.ToolItem.IHandler.CreateFromCommand(Eto.Forms.Command)">
            <summary>
            Creates the item from a command instance.
            </summary>
            <remarks>
            This is useful when using a platform-defined command. It allows you to create the item in a specific
            way based on the command it is created from.
            </remarks>
            <param name="command">Command the item is created from.</param>
        </member>
        <member name="P:Eto.Forms.ToolItem.IHandler.Text">
            <summary>
            Gets or sets the text of the item, with mnemonic.
            </summary>
            <value>The text.</value>
        </member>
        <member name="P:Eto.Forms.ToolItem.IHandler.ToolTip">
            <summary>
            Gets or sets the tool tip to show when hovering the mouse over the item.
            </summary>
            <value>The tool tip.</value>
        </member>
        <member name="P:Eto.Forms.ToolItem.IHandler.Enabled">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Eto.Forms.ToolItem"/> is enabled.
            </summary>
            <value><c>true</c> if enabled; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Eto.Forms.ToolItemCollection">
            <summary>
            ToolBar item collection.
            </summary>
        </member>
        <member name="M:Eto.Forms.ToolItemCollection.#ctor(Eto.Forms.ToolBar)">
            <summary>
            Initializes a new instance of the <see cref="T:Eto.Forms.ToolItemCollection"/> class.
            </summary>
            <param name="parent">Parent of the tool item.</param>
        </member>
        <member name="M:Eto.Forms.ToolItemCollection.InsertItem(System.Int32,Eto.Forms.ToolItem)">
            <summary>
            Called when an item is inserted.
            </summary>
            <param name="index">Index of the item to insert.</param>
            <param name="item">Item to insert.</param>
        </member>
        <member name="M:Eto.Forms.ToolItemCollection.RemoveItem(System.Int32)">
            <summary>
            Called when an item is removed from the collection.
            </summary>
            <param name="index">Index of the item being removed.</param>
        </member>
        <member name="M:Eto.Forms.ToolItemCollection.ClearItems">
            <summary>
            Called when the collection is cleared.
            </summary>
        </member>
        <member name="M:Eto.Forms.ToolItemCollection.Add(Eto.Forms.ToolItem)">
            <summary>
            Adds the specified item given its order.
            </summary>
            <remarks>
            This will add the item into the collection based on its <see cref="P:Eto.Forms.ToolItem.Order"/>, keeping
            all items in their order.
            </remarks>
            <param name="item">Item to add.</param>
        </member>
        <member name="M:Eto.Forms.ToolItemCollection.Add(Eto.Forms.Command,System.Int32)">
            <summary>
            Add a <paramref name="command"/> with the specified <paramref name="order"/>.
            </summary>
            <param name="command">Command to add.</param>
            <param name="order">Order to add it at.</param>
        </member>
        <member name="M:Eto.Forms.ToolItemCollection.AddSeparator(System.Int32,Eto.Forms.SeparatorToolItemType)">
            <summary>
            Adds a separator item with the specified <paramref name="order"/> or <paramref name="type"/>
            </summary>
            <param name="order">Order to add the separator.</param>
            <param name="type">Type of separator.</param>
        </member>
        <member name="M:Eto.Forms.ToolItemCollection.AddRange(System.Collections.Generic.IEnumerable{Eto.Forms.ToolItem})">
            <summary>
            Adds the specified tool items to the collection.
            </summary>
            <param name="items">Items to add.</param>
        </member>
        <member name="M:Eto.Forms.ToolItemCollection.AddRange(System.Collections.Generic.IEnumerable{Eto.Forms.Command},System.Int32)">
            <summary>
            Adds the specified commands to the collection starting at the specified order.
            </summary>
            <param name="commands">Commands to add.</param>
            <param name="order">Order of the items to add.</param>
        </member>
        <member name="T:Eto.Forms.TrayIndicator">
            <summary>
            A system tray indicator.
            </summary>
        </member>
        <member name="M:Eto.Forms.TrayIndicator.GetCallback">
            <summary>
            Gets an instance of an object used to perform callbacks to the widget from handler implementations.
            </summary>
            <returns>The callback instance to use for this widget.</returns>
        </member>
        <member name="P:Eto.Forms.TrayIndicator.Icon">
            <summary>
            Gets or sets the icon for the <see cref="T:Eto.Forms.TrayIndicator"/>.
            </summary>
            <value>The icon of the <see cref="T:Eto.Forms.TrayIndicator"/>.</value>
        </member>
        <member name="P:Eto.Forms.TrayIndicator.Image">
            <summary>
            Gets or sets the image to display in the tray
            </summary>
            <value>The image to display in the tray.</value>
        </member>
        <member name="P:Eto.Forms.TrayIndicator.Title">
            <summary>
            Gets or sets the title/tooltip for the <see cref="T:Eto.Forms.TrayIndicator"/>.
            </summary>
            <value>The title/tooltip for the <see cref="T:Eto.Forms.TrayIndicator"/>.</value>
        </member>
        <member name="P:Eto.Forms.TrayIndicator.Visible">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Eto.Forms.TrayIndicator"/> is visible.
            </summary>
            <value><c>true</c> if visible; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Eto.Forms.TrayIndicator.Hide">
            <summary>
            Hide this instance of <see cref="T:Eto.Forms.TrayIndicator"/>.
            </summary>
            <remarks>
            Make sure to call this method before closing the application.
            </remarks>
        </member>
        <member name="M:Eto.Forms.TrayIndicator.SetMenu(Eto.Forms.ContextMenu)">
            <summary>
            Sets the indicator menu.
            </summary>
            <remarks>
            Make sure to call this method every time you make changes to the context menu.
            </remarks>
            <param name="menu">The indicator menu.</param>
        </member>
        <member name="P:Eto.Forms.TrayIndicator.Menu">
            <summary>
            Gets or sets the menu shown when the user clicks on the tray icon.
            </summary>
            <value>The context menu.</value>
        </member>
        <member name="M:Eto.Forms.TrayIndicator.Show">
            <summary>
            Show this instance of <see cref="T:Eto.Forms.TrayIndicator"/>.
            </summary>
        </member>
        <member name="T:Eto.Forms.TrayIndicator.IHandler">
            <summary>
            Handler interface for the <see cref="T:Eto.Forms.TrayIndicator"/> control
            </summary>
        </member>
        <member name="P:Eto.Forms.TrayIndicator.IHandler.Title">
            <summary>
            Gets or sets the title/tooltip for the <see cref="T:Eto.Forms.TrayIndicator"/>.
            </summary>
            <value>The title/tooltip for the <see cref="T:Eto.Forms.TrayIndicator"/>.</value>
        </member>
        <member name="P:Eto.Forms.TrayIndicator.IHandler.Visible">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Eto.Forms.TrayIndicator"/> is visible.
            </summary>
            <value><c>true</c> if visible; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Eto.Forms.TrayIndicator.IHandler.Image">
            <summary>
            Gets or sets the image to display in the tray
            </summary>
            <value>The image to display in the tray.</value>
        </member>
        <member name="P:Eto.Forms.TrayIndicator.IHandler.Menu">
            <summary>
            Gets or sets the menu shown when the user clicks on the tray icon.
            </summary>
            <value>The context menu.</value>
        </member>
        <member name="F:Eto.Forms.TrayIndicator.ActivatedEvent">
            <summary>
            Event identifier for handlers when attaching the <see cref="E:Eto.Forms.TrayIndicator.Activated"/> event.
            </summary>
        </member>
        <member name="E:Eto.Forms.TrayIndicator.Activated">
            <summary>
            Event to handle when the user left click the <see cref="T:Eto.Forms.TrayIndicator"/>.
            </summary>
        </member>
        <member name="M:Eto.Forms.TrayIndicator.OnActivated(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Eto.Forms.TrayIndicator.Activated"/> event.
            </summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="T:Eto.Forms.TrayIndicator.ICallback">
            <summary>
            Callback interface for <see cref="T:Eto.Forms.TrayIndicator"/>
            </summary>
        </member>
        <member name="M:Eto.Forms.TrayIndicator.ICallback.OnActivated(Eto.Forms.TrayIndicator,System.EventArgs)">
            <summary>
            Raises activated event.
            </summary>
        </member>
        <member name="T:Eto.Forms.TrayIndicator.Callback">
            <summary>
            Callback implementation for handlers of <see cref="T:Eto.Forms.TrayIndicator"/>
            </summary>
        </member>
        <member name="M:Eto.Forms.TrayIndicator.Callback.OnActivated(Eto.Forms.TrayIndicator,System.EventArgs)">
            <summary>
            Raises activated event.
            </summary>
        </member>
        <member name="T:Eto.Forms.UITimer">
            <summary>
            Provides a timer that executes code at a specified interval on the UI thread
            </summary>
            <remarks>
            This provides a way to execute UI code at a specified <see cref="P:Eto.Forms.UITimer.Interval"/>.
            Note that this is not a high-resolution timer, and you should avoid setting a small interval
            otherwise the UI may become unresponsive depending on the logic in the executed code.
            
            This typically executes the code on the UI main loop, thus the accuracy of the timer is dependent on
            the other UI code executing.
            </remarks>
        </member>
        <member name="E:Eto.Forms.UITimer.Elapsed">
            <summary>
            Occurs each time the <see cref="P:Eto.Forms.UITimer.Interval"/> has elapsed
            </summary>
        </member>
        <member name="M:Eto.Forms.UITimer.OnElapsed(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Eto.Forms.UITimer.Elapsed"/> event.
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="P:Eto.Forms.UITimer.Interval">
            <summary>
            Gets or sets the interval, in seconds
            </summary>
            <remarks>
            Note that this is not a high-resolution timer, and you should avoid setting a small interval
            otherwise the UI may become unresponsive depending on the logic in the executed code.
            </remarks>
        </member>
        <member name="P:Eto.Forms.UITimer.Started">
            <summary>
            Gets a value indicating whether this <see cref="T:Eto.Forms.UITimer"/> is started.
            </summary>
            <value><c>true</c> if started; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Eto.Forms.UITimer.Start">
            <summary>
            Starts the timer
            </summary>
        </member>
        <member name="M:Eto.Forms.UITimer.Stop">
            <summary>
            Stops a running timer
            </summary>
        </member>
        <member name="M:Eto.Forms.UITimer.GetCallback">
            <summary>
            Gets an instance of an object used to perform callbacks to the widget from handler implementations
            </summary>
            <returns>The callback instance to use for this widget</returns>
        </member>
        <member name="T:Eto.Forms.UITimer.ICallback">
            <summary>
            Callback interface for <see cref="T:Eto.Forms.UITimer"/>
            </summary>
        </member>
        <member name="M:Eto.Forms.UITimer.ICallback.OnElapsed(Eto.Forms.UITimer,System.EventArgs)">
            <summary>
            Raises the elapsed event.
            </summary>
        </member>
        <member name="T:Eto.Forms.UITimer.Callback">
            <summary>
            Callback implementation for <see cref="T:Eto.Forms.UITimer"/>
            </summary>
        </member>
        <member name="M:Eto.Forms.UITimer.Callback.OnElapsed(Eto.Forms.UITimer,System.EventArgs)">
            <summary>
            Raises the elapsed event.
            </summary>
        </member>
        <member name="T:Eto.Forms.UITimer.IHandler">
            <summary>
            Handler interface for <see cref="T:Eto.Forms.UITimer"/>
            </summary>
        </member>
        <member name="P:Eto.Forms.UITimer.IHandler.Interval">
            <summary>
            Gets or sets the interval, in seconds to execute <see cref="M:Eto.Forms.UITimer.ICallback.OnElapsed(Eto.Forms.UITimer,System.EventArgs)"/>
            </summary>
        </member>
        <member name="M:Eto.Forms.UITimer.IHandler.Start">
            <summary>
            Starts the timer
            </summary>
        </member>
        <member name="M:Eto.Forms.UITimer.IHandler.Stop">
            <summary>
            Stops a running timer
            </summary>
        </member>
        <member name="T:Eto.Forms.WidgetExtensions">
            <summary>
            Extensions for widget objects
            </summary>
        </member>
        <member name="M:Eto.Forms.WidgetExtensions.With``1(``0,System.Action{``0})">
            <summary>
            Allows execution of extra code on a widget in a declarative manner.
            </summary>
            <typeparam name="T">Type of the widget</typeparam>
            <param name="widget">Widget to perform the action on</param>
            <param name="action">Action to execute on the widget before returning</param>
            <returns>Widget instance</returns>
        </member>
        <member name="T:Eto.Forms.WindowState">
            <summary>
            State of a <see cref="T:Eto.Forms.Window"/>
            </summary>
        </member>
        <member name="F:Eto.Forms.WindowState.Normal">
            <summary>
            Normal, windowed state
            </summary>
        </member>
        <member name="F:Eto.Forms.WindowState.Maximized">
            <summary>
            Window is maximized, taking the entire screen space
            </summary>
        </member>
        <member name="F:Eto.Forms.WindowState.Minimized">
            <summary>
            Window is minimized to the dock/taskbar/etc.
            </summary>
        </member>
        <member name="T:Eto.Forms.WindowStyle">
            <summary>
            Style of a <see cref="T:Eto.Forms.Window"/>
            </summary>
        </member>
        <member name="F:Eto.Forms.WindowStyle.Default">
            <summary>
            Default, bordered style
            </summary>
        </member>
        <member name="F:Eto.Forms.WindowStyle.None">
            <summary>
            Window with no border
            </summary>
        </member>
        <member name="T:Eto.Forms.Window">
            <summary>
            Base window
            </summary>
        </member>
        <member name="F:Eto.Forms.Window.ClosedEvent">
            <summary>
            Identifier for handlers when attaching the <see cref="E:Eto.Forms.Window.Closed"/> event.
            </summary>
        </member>
        <member name="E:Eto.Forms.Window.Closed">
            <summary>
            Occurs when the window is closed.
            </summary>
        </member>
        <member name="M:Eto.Forms.Window.OnClosed(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Eto.Forms.Window.Closed"/> event.
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="F:Eto.Forms.Window.ClosingEvent">
            <summary>
            Identifier for handlers when attaching the <see cref="E:Eto.Forms.Window.Closing"/> event.
            </summary>
        </member>
        <member name="E:Eto.Forms.Window.Closing">
            <summary>
            Occurs before the window is closed, giving an opportunity to cancel the close operation.
            </summary>
        </member>
        <member name="M:Eto.Forms.Window.OnClosing(System.ComponentModel.CancelEventArgs)">
            <summary>
            Raises the <see cref="E:Eto.Forms.Window.Closing"/> event.
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="F:Eto.Forms.Window.LocationChangedEvent">
            <summary>
            Identifier for handlers when attaching the <see cref="E:Eto.Forms.Window.LocationChanged"/> event.
            </summary>
        </member>
        <member name="E:Eto.Forms.Window.LocationChanged">
            <summary>
            Occurs when the <see cref="P:Eto.Forms.Window.Location"/> of the window is changed.
            </summary>
        </member>
        <member name="M:Eto.Forms.Window.OnLocationChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Eto.Forms.Window.LocationChanged"/> event.
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="F:Eto.Forms.Window.OwnerChangedEvent">
            <summary>
            Identifier for handlers when attaching the <see cref="E:Eto.Forms.Window.OwnerChanged"/> event.
            </summary>
        </member>
        <member name="E:Eto.Forms.Window.OwnerChanged">
            <summary>
            Occurs when the <see cref="P:Eto.Forms.Window.Owner"/> is changed.
            </summary>
        </member>
        <member name="M:Eto.Forms.Window.OnOwnerChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Eto.Forms.Window.OwnerChanged"/> event.
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="F:Eto.Forms.Window.WindowStateChangedEvent">
            <summary>
            Identifier for handlers when attaching the <see cref="E:Eto.Forms.Window.WindowStateChanged"/> event.
            </summary>
        </member>
        <member name="E:Eto.Forms.Window.WindowStateChanged">
            <summary>
            Occurs when the <see cref="P:Eto.Forms.Window.WindowState"/> is changed.
            </summary>
        </member>
        <member name="M:Eto.Forms.Window.OnWindowStateChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Eto.Forms.Window.WindowStateChanged"/> event.
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="F:Eto.Forms.Window.LogicalPixelSizeChangedEvent">
            <summary>
            Identifier for handlers when attaching the <see cref="E:Eto.Forms.Window.LogicalPixelSizeChanged"/> event.
            </summary>
        </member>
        <member name="E:Eto.Forms.Window.LogicalPixelSizeChanged">
            <summary>
            Occurs when the <see cref="P:Eto.Forms.Window.LogicalPixelSize"/> of the window is changed.
            </summary>
        </member>
        <member name="M:Eto.Forms.Window.OnLogicalPixelSizeChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Eto.Forms.Window.LogicalPixelSizeChanged"/> event.
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:Eto.Forms.Window.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Eto.Forms.Window"/> class.
            </summary>
        </member>
        <member name="M:Eto.Forms.Window.#ctor(Eto.Forms.Window.IHandler)">
            <summary>
            Initializes a new instance of the <see cref="T:Eto.Forms.Window"/> with the specified handler
            </summary>
            <param name="handler">Pre-created handler to attach to this instance</param>
        </member>
        <member name="P:Eto.Forms.Window.Title">
            <summary>
            Gets or sets the title of the window
            </summary>
            <remarks>
            The title of the window is displayed to the user usually at the top of the window, but in cases where
            you show a window in a mobile environment, this may be the title shown in a navigation controller.
            </remarks>
            <value>The title of the window</value>
        </member>
        <member name="P:Eto.Forms.Window.Location">
            <summary>
            Gets or sets the location of the window
            </summary>
            <remarks>
            Note that in multi-monitor setups, the origin of the location is at the upper-left of <see cref="P:Eto.Forms.Screen.PrimaryScreen"/>
            </remarks>
        </member>
        <member name="P:Eto.Forms.Window.Bounds">
            <summary>
            Gets or sets the size and location of the window
            </summary>
            <value>The bounding rectangle of the window</value>
        </member>
        <member name="P:Eto.Forms.Window.ToolBar">
            <summary>
            Gets or sets the tool bar for the window.
            </summary>
            <remarks>
            Note that each window can only have a single tool bar
            </remarks>
            <value>The tool bar for the window</value>
        </member>
        <member name="P:Eto.Forms.Window.Opacity">
            <summary>
            Gets or sets the opacity of the window
            </summary>
            <value>The window opacity.</value>
        </member>
        <member name="M:Eto.Forms.Window.Close">
            <summary>
            Closes the window
            </summary>
            <remarks>
            Note that once a window is closed, it cannot be shown again in most platforms.
            </remarks>
        </member>
        <member name="P:Eto.Forms.Window.Owner">
            <summary>
            Gets or sets the owner of this window.
            </summary>
            <remarks>
            This sets the parent window that has ownership over this window.
            For a <see cref="T:Eto.Forms.Dialog"/>, this will be the window that will be disabled while the modal dialog is shown.
            With a  <see cref="T:Eto.Forms.Form"/>, the specified owner will always be below the current window when shown, and will 
            still be responsive to user input.  Typically, but not always, the window will move along with the owner.
            </remarks>
            <value>The owner of this window.</value>
        </member>
        <member name="P:Eto.Forms.Window.Screen">
            <summary>
            Gets the screen this window is mostly contained in. Typically defined by the screen center of the window is visible.
            </summary>
            <value>The window's current screen.</value>
        </member>
        <member name="P:Eto.Forms.Window.Menu">
            <summary>
            Gets or sets the menu bar for this window
            </summary>
            <remarks>
            Some platforms have a global menu bar (e.g. ubuntu, OS X).
            When the winow is in focus, the global menu bar will be changed to reflect the menu assigned.
            </remarks>
            <value>The menu.</value>
        </member>
        <member name="P:Eto.Forms.Window.Icon">
            <summary>
            Gets or sets the icon for the window to show in the menu bar.
            </summary>
            <remarks>
            The icon should have many variations, such as 16x16, 24x24, 32x32, 48x48, 64x64, etc. This ensures that
            the many places it is used (title bar, task bar, switch window, etc) all have optimized icon sizes.
            
            For OS X, the application icon is specified in the .app bundle, not by this value.
            </remarks>
            <value>The icon for this window.</value>
        </member>
        <member name="P:Eto.Forms.Window.Resizable">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Eto.Forms.Window"/> is resizable.
            </summary>
            <value><c>true</c> if resizable; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Eto.Forms.Window.Maximizable">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Eto.Forms.Window"/> can be maximized.
            </summary>
            <remarks>
            This may hide or disable the minimize button on the title bar.
            </remarks>
            <value><c>true</c> if maximizable; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Eto.Forms.Window.Minimizable">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Eto.Forms.Window"/> can be minimized.
            </summary>
            <remarks>
            This may hide or disable the maximize button on the title bar.
            </remarks>
            <value><c>true</c> if minimizable; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Eto.Forms.Window.ShowInTaskbar">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Eto.Forms.Window"/> will show in the taskbar.
            </summary>
            <remarks>
            Some platforms, e.g. OS X do not show a separate icon for each running window.
            </remarks>
            <value><c>true</c> if the window will show in taskbar; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Eto.Forms.Window.Topmost">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Eto.Forms.Window"/> is above all other windows.
            </summary>
            <remarks>
            The window should be above all other windows when this is true.  In some platforms, this will show above all other windows only
            when the application has focus.
            </remarks>
            <value><c>true</c> if the window should be topmost; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Eto.Forms.Window.WindowState">
            <summary>
            Gets or sets the state of the window.
            </summary>
            <value>The state of the window.</value>
        </member>
        <member name="P:Eto.Forms.Window.RestoreBounds">
            <summary>
            Gets the bounds of the window before it was minimized or maximized, or the current bounds if <see cref="P:Eto.Forms.Window.WindowState"/> is Normal.
            </summary>
            <remarks>
            This is useful to retrieve the desired size and position of the window even though it is currently maximized or minimized.
            </remarks>
            <value>The restore bounds.</value>
        </member>
        <member name="M:Eto.Forms.Window.Minimize">
            <summary>
            Sets <see cref="P:Eto.Forms.Window.WindowState"/> to <see cref="F:Eto.Forms.WindowState.Minimized"/>
            </summary>
        </member>
        <member name="M:Eto.Forms.Window.Maximize">
            <summary>
            Sets <see cref="P:Eto.Forms.Window.WindowState"/> to <see cref="F:Eto.Forms.WindowState.Maximized"/>
            </summary>
        </member>
        <member name="P:Eto.Forms.Window.WindowStyle">
            <summary>
            Gets or sets the style of this window.
            </summary>
            <value>The window style.</value>
        </member>
        <member name="M:Eto.Forms.Window.BringToFront">
            <summary>
            Brings the window in front of all other windows in the z-order.
            </summary>
        </member>
        <member name="M:Eto.Forms.Window.SendToBack">
            <summary>
            Sends the window behind all other windows in the z-order.
            </summary>
        </member>
        <member name="M:Eto.Forms.Window.OnDataContextChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Eto.Forms.BindableWidget.DataContextChanged"/> event
            </summary>
            <remarks>
            Implementors may override this to fire this event on child widgets in a heirarchy. 
            This allows a control to be bound to its own <see cref="P:Eto.Forms.BindableWidget.DataContext"/>, which would be set
            on one of the parent control(s).
            </remarks>
            <param name="e">Event arguments</param>
        </member>
        <member name="P:Eto.Forms.Window.LogicalPixelSize">
            <summary>
            Gets the number of pixels per logical pixel when on a high DPI display.
            </summary>
            <remarks>
            This indicates the number of pixels per logical pixel.  
            All units in Eto.Forms such as control size, drawing operations, etc are in logical pixels.
            When not in high DPI, this will be 1.0; 
            Retina displays in OS X will return 2; and
            in windows this matches the scale set in the monitor settings.
            
            Use the <see cref="E:Eto.Forms.Window.LogicalPixelSizeChanged"/> to detect when the window is moved to 
            a display with a different DPI.
            </remarks>
        </member>
        <member name="M:Eto.Forms.Window.GetCallback">
            <summary>
            Gets an instance of an object used to perform callbacks to the widget from handler implementations
            </summary>
            <returns>The callback instance to use for this widget</returns>
        </member>
        <member name="T:Eto.Forms.Window.ICallback">
            <summary>
            Callback interface for instances of <see cref="T:Eto.Forms.Window"/>
            </summary>
        </member>
        <member name="M:Eto.Forms.Window.ICallback.OnClosed(Eto.Forms.Window,System.EventArgs)">
            <summary>
            Raises the closed event.
            </summary>
        </member>
        <member name="M:Eto.Forms.Window.ICallback.OnClosing(Eto.Forms.Window,System.ComponentModel.CancelEventArgs)">
            <summary>
            Raises the closing event.
            </summary>
        </member>
        <member name="M:Eto.Forms.Window.ICallback.OnLocationChanged(Eto.Forms.Window,System.EventArgs)">
            <summary>
            Raises the location changed event.
            </summary>
        </member>
        <member name="M:Eto.Forms.Window.ICallback.OnWindowStateChanged(Eto.Forms.Window,System.EventArgs)">
            <summary>
            Raises the window state changed event.
            </summary>
        </member>
        <member name="M:Eto.Forms.Window.ICallback.OnLogicalPixelSizeChanged(Eto.Forms.Window,System.EventArgs)">
            <summary>
            Raises the logical pixel size changed event.
            </summary>
        </member>
        <member name="T:Eto.Forms.Window.Callback">
            <summary>
            Callback methods for handlers of <see cref="T:Eto.Forms.Control"/>
            </summary>
        </member>
        <member name="M:Eto.Forms.Window.Callback.OnClosed(Eto.Forms.Window,System.EventArgs)">
            <summary>
            Raises the closed event.
            </summary>
        </member>
        <member name="M:Eto.Forms.Window.Callback.OnClosing(Eto.Forms.Window,System.ComponentModel.CancelEventArgs)">
            <summary>
            Raises the closing event.
            </summary>
        </member>
        <member name="M:Eto.Forms.Window.Callback.OnLocationChanged(Eto.Forms.Window,System.EventArgs)">
            <summary>
            Raises the location changed event.
            </summary>
        </member>
        <member name="M:Eto.Forms.Window.Callback.OnWindowStateChanged(Eto.Forms.Window,System.EventArgs)">
            <summary>
            Raises the window state changed event.
            </summary>
        </member>
        <member name="M:Eto.Forms.Window.Callback.OnLogicalPixelSizeChanged(Eto.Forms.Window,System.EventArgs)">
            <summary>
            Raises the logical pixel size changed event.
            </summary>
        </member>
        <member name="T:Eto.Forms.Window.IHandler">
            <summary>
            Handler interface for the <see cref="T:Eto.Forms.Window"/>
            </summary>
        </member>
        <member name="P:Eto.Forms.Window.IHandler.ToolBar">
            <summary>
            Gets or sets the tool bar for the window.
            </summary>
            <remarks>
            Note that each window can only have a single tool bar
            </remarks>
            <value>The tool bar for the window</value>
        </member>
        <member name="M:Eto.Forms.Window.IHandler.Close">
            <summary>
            Closes the window
            </summary>
            <remarks>
            Note that once a window is closed, it cannot be shown again in most platforms.
            </remarks>
        </member>
        <member name="P:Eto.Forms.Window.IHandler.Location">
            <summary>
            Gets or sets the location of the window
            </summary>
            <remarks>
            Note that in multi-monitor setups, the origin of the location is at the upper-left of <see cref="P:Eto.Forms.Screen.PrimaryScreen"/>
            </remarks>
        </member>
        <member name="P:Eto.Forms.Window.IHandler.Opacity">
            <summary>
            Gets or sets the opacity of the window
            </summary>
            <value>The window opacity.</value>
        </member>
        <member name="P:Eto.Forms.Window.IHandler.Title">
            <summary>
            Gets or sets the title of the window
            </summary>
            <remarks>
            The title of the window is displayed to the user usually at the top of the window, but in cases where
            you show a window in a mobile environment, this may be the title shown in a navigation controller.
            </remarks>
            <value>The title of the window</value>
        </member>
        <member name="P:Eto.Forms.Window.IHandler.Screen">
            <summary>
            Gets the screen this window is mostly contained in. Typically defined by the screen center of the window is visible.
            </summary>
            <value>The window's current screen.</value>
        </member>
        <member name="P:Eto.Forms.Window.IHandler.Menu">
            <summary>
            Gets or sets the menu bar for this window
            </summary>
            <remarks>
            Some platforms have a global menu bar (e.g. ubuntu, OS X).
            When the winow is in focus, the global menu bar will be changed to reflect the menu assigned.
            </remarks>
            <value>The menu.</value>
        </member>
        <member name="P:Eto.Forms.Window.IHandler.Icon">
            <summary>
            Gets or sets the icon for the window to show in the menu bar.
            </summary>
            <remarks>
            The icon should have many variations, such as 16x16, 24x24, 32x32, 48x48, 64x64, etc. This ensures that
            the many places it is used (title bar, task bar, switch window, etc) all have optimized icon sizes.
            
            For OS X, the application icon is specified in the .app bundle, not by this value.
            </remarks>
            <value>The icon for this window.</value>
        </member>
        <member name="P:Eto.Forms.Window.IHandler.Resizable">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Eto.Forms.Window"/> is resizable.
            </summary>
            <value><c>true</c> if resizable; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Eto.Forms.Window.IHandler.Maximizable">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Eto.Forms.Window"/> can be maximized.
            </summary>
            <remarks>
            This may hide or disable the minimize button on the title bar.
            </remarks>
            <value><c>true</c> if maximizable; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Eto.Forms.Window.IHandler.Minimizable">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Eto.Forms.Window"/> can be minimized.
            </summary>
            <remarks>
            This may hide or disable the maximize button on the title bar.
            </remarks>
            <value><c>true</c> if minimizable; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Eto.Forms.Window.IHandler.ShowInTaskbar">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Eto.Forms.Window"/> will show in the taskbar.
            </summary>
            <remarks>
            Some platforms, e.g. OS X do not show a separate icon for each running window.
            </remarks>
            <value><c>true</c> if the window will show in taskbar; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Eto.Forms.Window.IHandler.Topmost">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Eto.Forms.Window"/> is above all other windows.
            </summary>
            <remarks>
            The window should be above all other windows when this is true.  In some platforms, this will show above all other windows only
            when the application has focus.
            </remarks>
            <value><c>true</c> if the window should be topmost; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Eto.Forms.Window.IHandler.WindowState">
            <summary>
            Gets or sets the state of the window.
            </summary>
            <value>The state of the window.</value>
        </member>
        <member name="P:Eto.Forms.Window.IHandler.RestoreBounds">
            <summary>
            Gets the bounds of the window before it was minimized or maximized.
            </summary>
            <remarks>
            This is useful to retrieve the desired size and position of the window even though it is currently maximized or minimized.
            </remarks>
            <value>The restore bounds.</value>
        </member>
        <member name="P:Eto.Forms.Window.IHandler.WindowStyle">
            <summary>
            Gets or sets the style of this window.
            </summary>
            <value>The window style.</value>
        </member>
        <member name="M:Eto.Forms.Window.IHandler.BringToFront">
            <summary>
            Brings the window in front of all other windows in the z-order.
            </summary>
        </member>
        <member name="M:Eto.Forms.Window.IHandler.SendToBack">
            <summary>
            Sends the window behind all other windows in the z-order.
            </summary>
        </member>
        <member name="M:Eto.Forms.Window.IHandler.SetOwner(Eto.Forms.Window)">
            <summary>
            Sets the owner of the window
            </summary>
            <param name="owner">Owner of the window</param>
        </member>
        <member name="P:Eto.Forms.Window.IHandler.LogicalPixelSize">
            <summary>
            Gets the number of pixels per logical pixel when on a high DPI display.
            </summary>
            <remarks>
            This indicates the number of pixels per logical pixel.  
            All units in Eto.Forms such as control size, drawing operations, etc are in logical pixels.
            When not in high DPI, this will be 1.0; 
            Retina displays in OS X will return 2; and
            in windows this matches the scale set in the monitor settings.
            
            Use the <see cref="E:Eto.Forms.Window.LogicalPixelSizeChanged"/> to detect when the window is moved to 
            a display with a different DPI.
            </remarks>
        </member>
        <member name="T:Eto.HandlerAttribute">
            <summary>
            Attribute to specify the interface type to use for the handler of a <see cref="T:Eto.Widget"/>
            </summary>
            <remarks>
            Apply this to your widget-derived class to allow it to automatically create your handler.
            </remarks>
        </member>
        <member name="P:Eto.HandlerAttribute.Type">
            <summary>
            Gets the type of the handler required for the widget
            </summary>
            <value>The type of the handler</value>
        </member>
        <member name="M:Eto.HandlerAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Eto.HandlerAttribute"/> class.
            </summary>
            <param name="type">Type of the handler to use for the applied widget</param>
        </member>
        <member name="T:Eto.Helper">
            <summary>
            Helper functions specific to Eto
            </summary>
        </member>
        <member name="F:Eto.Helper.DegreesToRadians">
            <summary>
            Constant to convert degrees to radians for angle parameters
            </summary>
        </member>
        <member name="T:Eto.IO.StaticIconType">
            <summary>
            Type of static icon to get
            </summary>
            <copyright>(c) 2014 by Curtis Wensley</copyright>
            <license type="BSD-3">See LICENSE for full terms</license>
        </member>
        <member name="F:Eto.IO.StaticIconType.OpenDirectory">
            <summary>
            Icon for an open directory/folder
            </summary>
        </member>
        <member name="F:Eto.IO.StaticIconType.CloseDirectory">
            <summary>
            Icon for a closed directory/folder
            </summary>
        </member>
        <member name="T:Eto.IO.IconSize">
            <summary>
            Size of icon to get
            </summary>
            <copyright>(c) 2014 by Curtis Wensley</copyright>
            <license type="BSD-3">See LICENSE for full terms</license>
        </member>
        <member name="F:Eto.IO.IconSize.Large">
            <summary>
            Large icon (32x32 or 64x64 for retina)
            </summary>
        </member>
        <member name="F:Eto.IO.IconSize.Small">
            <summary>
            Small icon (16x16 or 32x32 for retina)
            </summary>
        </member>
        <member name="T:Eto.IO.SystemIcons">
            <summary>
            Methods to get system icons for file types and static icons
            </summary>
            <copyright>(c) 2014 by Curtis Wensley</copyright>
            <license type="BSD-3">See LICENSE for full terms</license>
        </member>
        <member name="M:Eto.IO.SystemIcons.GetFileIcon(System.String,Eto.IO.IconSize)">
            <summary>
            Gets a file icon for the specified file
            </summary>
            <remarks>
            The file does not necessarily have to exist for the icon to be retrieved, though if it is a specific file
            then the platform may be able to return a file-specific icon if one is available.
            </remarks>
            <returns>The icon for the specified file name.</returns>
            <param name="fileName">Name of the file to get the icon for.</param>
            <param name="size">Size of the icon.</param>
        </member>
        <member name="M:Eto.IO.SystemIcons.GetStaticIcon(Eto.IO.StaticIconType,Eto.IO.IconSize)">
            <summary>
            Gets a static system-defined icon for the specified type.
            </summary>
            <returns>The static icon for the specified type.</returns>
            <param name="type">Type of the static icon to retrieve.</param>
            <param name="size">Size of the icon.</param>
        </member>
        <member name="T:Eto.IO.SystemIcons.IHandler">
            <summary>
            Handler interface for the <see cref="T:Eto.IO.SystemIcons"/> methods
            </summary>
        </member>
        <member name="M:Eto.IO.SystemIcons.IHandler.GetFileIcon(System.String,Eto.IO.IconSize)">
            <summary>
            Gets a file icon for the specified file
            </summary>
            <remarks>
            The file does not necessarily have to exist for the icon to be retrieved, though if it is a specific file
            then the platform may be able to return a file-specific icon if one is available.
            </remarks>
            <returns>The icon for the specified file name.</returns>
            <param name="fileName">Name of the file to get the icon for.</param>
            <param name="size">Size of the icon.</param>
        </member>
        <member name="M:Eto.IO.SystemIcons.IHandler.GetStaticIcon(Eto.IO.StaticIconType,Eto.IO.IconSize)">
            <summary>
            Gets a static system-defined icon for the specified type.
            </summary>
            <returns>The static icon for the specified type.</returns>
            <param name="type">Type of the static icon to retrieve.</param>
            <param name="size">Size of the icon.</param>
        </member>
        <member name="T:Eto.NamespaceInfo">
            <summary>
            Helper class to get information about a namespace and assembly
            </summary>
            <remarks>
            This is used to easily split the namespace and assembly parts from a string, and get the assembly instance.
            For example, "Eto.Drawing, Eto" will be split into "Eto.Drawing" for the namespace and the <see cref="P:Eto.NamespaceInfo.Assembly"/>
            instance for the Eto.dll.
            
            Used primarily for serialization and conversion of types.
            </remarks>
        </member>
        <member name="P:Eto.NamespaceInfo.Assembly">
            <summary>
            Gets or sets the assembly.
            </summary>
            <value>The assembly.</value>
        </member>
        <member name="P:Eto.NamespaceInfo.Namespace">
            <summary>
            Gets the namespace.
            </summary>
            <value>The namespace.</value>
        </member>
        <member name="M:Eto.NamespaceInfo.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Eto.NamespaceInfo"/> class.
            </summary>
            <param name="ns">Namespace in the form of "My.Namespace, MyAssembly"</param>
        </member>
        <member name="M:Eto.NamespaceInfo.#ctor(System.String,System.Reflection.Assembly)">
            <summary>
            Initializes a new instance of the <see cref="T:Eto.NamespaceInfo"/> class.
            </summary>
            <param name="ns">Namespace part in the form of "My.Namespace"</param>
            <param name="assembly">Assembly for the namespace</param>
        </member>
        <member name="M:Eto.NamespaceInfo.FindType(System.String)">
            <summary>
            Finds the specified type in the <see cref="P:Eto.NamespaceInfo.Namespace"/> of this <see cref="P:Eto.NamespaceInfo.Assembly"/>
            </summary>
            <returns>The type if found, otherwise null</returns>
            <param name="typeName">Type name without namespace</param>
        </member>
        <member name="M:Eto.NamespaceInfo.FindResource(System.String)">
            <summary>
            Finds the resource in the <see cref="P:Eto.NamespaceInfo.Namespace"/> of this <see cref="P:Eto.NamespaceInfo.Assembly"/>
            </summary>
            <returns>The resource stream if found, otherwise null</returns>
            <param name="resourceName">Resource name without namespace</param>
        </member>
        <member name="M:Eto.NamespaceInfo.FindResource">
            <summary>
            Finds the resource in the <see cref="P:Eto.NamespaceInfo.Assembly"/> with the specified <see cref="P:Eto.NamespaceInfo.Namespace"/>
            </summary>
            <returns>The resource if found, otherwise null</returns>
        </member>
        <member name="T:Eto.OperatingSystemPlatform">
            <summary>
            Operating system platform information
            </summary>
            <remarks>
            Access this information from <see cref="P:Eto.EtoEnvironment.Platform"/>
            </remarks>
        </member>
        <member name="P:Eto.OperatingSystemPlatform.IsMono">
            <summary>
            Gets a value indicating that the current .NET runtime is mono
            </summary>
        </member>
        <member name="P:Eto.OperatingSystemPlatform.IsWindows">
            <summary>
            Gets a value indicating that the current OS is windows system
            </summary>
        </member>
        <member name="P:Eto.OperatingSystemPlatform.IsWinRT">
            <summary>
            Gets a value indicating that the current OS is a Windows Runtime (WinRT) system.
            </summary>
        </member>
        <member name="P:Eto.OperatingSystemPlatform.IsUnix">
            <summary>
            Gets a value indicating that the current OS is a unix-based system
            </summary>
            <remarks>
            This will be true for both Unix (e.g. OS X) and all Linux variants.
            </remarks>
        </member>
        <member name="P:Eto.OperatingSystemPlatform.IsMac">
            <summary>
            Gets a value indicating that the current OS is a Mac OS X system
            </summary>
        </member>
        <member name="P:Eto.OperatingSystemPlatform.IsLinux">
            <summary>
            Gets a value indicating that the current OS is a Linux system
            </summary>
        </member>
        <member name="M:Eto.OperatingSystemPlatform.#ctor">
            <summary>
            Initializes a new instance of the OperatingSystemPlatform class
            </summary>
        </member>
        <member name="T:Eto.ISupportInitialize">
            <summary>
            Interface for objects that support initialization.
            </summary>
        </member>
        <member name="M:Eto.ISupportInitialize.BeginInit">
            <summary>
            Called before initialization from serialization.
            </summary>
        </member>
        <member name="M:Eto.ISupportInitialize.EndInit">
            <summary>
            Called after initialization from serialization.
            </summary>
        </member>
        <member name="T:Eto.ITypeDescriptorContext">
            <summary>
            Interface for a type descriptor context, for type converter compatibility in portable class libraries.
            </summary>
        </member>
        <member name="T:Eto.TypeConverterAttribute">
            <summary>
            Type converter attribute, for type converter compatibility in portable class libraries.
            </summary>
        </member>
        <member name="P:Eto.TypeConverterAttribute.ConverterTypeName">
            <summary>
            Gets the name of the type for the type converter of the associated type.
            </summary>
            <value>The name of the type.</value>
        </member>
        <member name="M:Eto.TypeConverterAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Eto.TypeConverterAttribute"/> class.
            </summary>
            <param name="type">Type of the type converter.</param>
        </member>
        <member name="M:Eto.TypeConverterAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Eto.TypeConverterAttribute"/> class.
            </summary>
            <param name="typeName">Type name of the type converter.</param>
        </member>
        <member name="T:Eto.TypeDescriptor">
            <summary>
            Type descriptor for conversion compatibility.
            </summary>
        </member>
        <member name="M:Eto.TypeDescriptor.GetConverter(System.Type)">
            <summary>
            Gets the type converter for the specified type.
            </summary>
            <returns>The type converter, or null if the type has no defined converter.</returns>
            <param name="type">Type to get the converter for.</param>
        </member>
        <member name="T:Eto.TypeConverter">
            <summary>
            Type converter implementation, for type converter compatibility in portable class libraries.
            </summary>
        </member>
        <member name="M:Eto.TypeConverter.CanConvertFrom(System.Type)">
            <summary>
            Determines whether this instance can convert from the specified sourceType.
            </summary>
            <returns><c>true</c> if this instance can convert from the specified sourceType; otherwise, <c>false</c>.</returns>
            <param name="sourceType">Source type to convert from.</param>
        </member>
        <member name="M:Eto.TypeConverter.CanConvertFrom(Eto.ITypeDescriptorContext,System.Type)">
            <summary>
            Determines whether this instance can convert from the specified context sourceType.
            </summary>
            <returns><c>true</c> if this instance can convert from the specified context sourceType; otherwise, <c>false</c>.</returns>
            <param name="context">Context.</param>
            <param name="sourceType">Source type.</param>
        </member>
        <member name="M:Eto.TypeConverter.CanConvertTo(System.Type)">
            <summary>
            Determines whether this instance can convert to the specified destinationType.
            </summary>
            <returns><c>true</c> if this instance can convert to the specified destinationType; otherwise, <c>false</c>.</returns>
            <param name="destinationType">Destination type.</param>
        </member>
        <member name="M:Eto.TypeConverter.CanConvertTo(Eto.ITypeDescriptorContext,System.Type)">
            <summary>
            Determines whether this instance can convert to the specified context destinationType.
            </summary>
            <returns><c>true</c> if this instance can convert to the specified context destinationType; otherwise, <c>false</c>.</returns>
            <param name="context">Context.</param>
            <param name="destinationType">Destination type.</param>
        </member>
        <member name="M:Eto.TypeConverter.ConvertFrom(System.Object)">
            <summary>
            Converts from the specified object.
            </summary>
            <returns>The converted object.</returns>
            <param name="o">Object to convert.</param>
        </member>
        <member name="M:Eto.TypeConverter.ConvertFrom(Eto.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts the specified <paramref name="value"/>.
            </summary>
            <returns>The converted value.</returns>
            <param name="context">Context.</param>
            <param name="culture">Culture.</param>
            <param name="value">Value to convert.</param>
        </member>
        <member name="M:Eto.TypeConverter.ConvertFromInvariantString(System.String)">
            <summary>
            Converts from an invariant string.
            </summary>
            <returns>The from invariant string.</returns>
            <param name="text">Text to convert.</param>
        </member>
        <member name="M:Eto.TypeConverter.ConvertFromInvariantString(Eto.ITypeDescriptorContext,System.String)">
            <summary>
            Converts from an invariant string.
            </summary>
            <returns>The from invariant string.</returns>
            <param name="context">Context.</param>
            <param name="text">Text to convert.</param>
        </member>
        <member name="M:Eto.TypeConverter.ConvertFromString(System.String)">
            <summary>
            Converts from string.
            </summary>
            <returns>The converted object.</returns>
            <param name="text">Text to convert.</param>
        </member>
        <member name="M:Eto.TypeConverter.ConvertFromString(Eto.ITypeDescriptorContext,System.String)">
            <summary>
            Converts from string.
            </summary>
            <returns>The converted object.</returns>
            <param name="context">Context.</param>
            <param name="text">Text to convert.</param>
        </member>
        <member name="M:Eto.TypeConverter.ConvertFromString(Eto.ITypeDescriptorContext,System.Globalization.CultureInfo,System.String)">
            <summary>
            Converts from string.
            </summary>
            <returns>The converted object.</returns>
            <param name="context">Context.</param>
            <param name="culture">Culture.</param>
            <param name="text">Text to convert.</param>
        </member>
        <member name="M:Eto.TypeConverter.ConvertTo(System.Object,System.Type)">
            <summary>
            Converts to the specified type.
            </summary>
            <returns>The converted object.</returns>
            <param name="value">Value to convert.</param>
            <param name="destinationType">Destination type to convert to.</param>
        </member>
        <member name="M:Eto.TypeConverter.ConvertTo(Eto.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts to the specified type.
            </summary>
            <returns>The converted object.</returns>
            <param name="context">Context.</param>
            <param name="culture">Culture.</param>
            <param name="value">Value to convert.</param>
            <param name="destinationType">Destination type to convert to.</param>
        </member>
        <member name="M:Eto.TypeConverter.ConvertToInvariantString(System.Object)">
            <summary>
            Converts to an invariant string.
            </summary>
            <returns>The converted string.</returns>
            <param name="value">Value to convert.</param>
        </member>
        <member name="M:Eto.TypeConverter.ConvertToInvariantString(Eto.ITypeDescriptorContext,System.Object)">
            <summary>
            Converts to invariant string.
            </summary>
            <returns>The converted string.</returns>
            <param name="context">Context.</param>
            <param name="value">Value to convert.</param>
        </member>
        <member name="M:Eto.TypeConverter.ConvertToString(System.Object)">
            <summary>
            Converts to a string.
            </summary>
            <returns>The converted string.</returns>
            <param name="value">Value to convert.</param>
        </member>
        <member name="M:Eto.TypeConverter.ConvertToString(Eto.ITypeDescriptorContext,System.Object)">
            <summary>
            Converts to a string.
            </summary>
            <returns>The converted string.</returns>
            <param name="context">Context.</param>
            <param name="value">Value to convert.</param>
        </member>
        <member name="M:Eto.TypeConverter.ConvertToString(Eto.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts to a string.
            </summary>
            <returns>The converted string.</returns>
            <param name="context">Context.</param>
            <param name="culture">Culture.</param>
            <param name="value">Value to convert.</param>
        </member>
        <member name="M:Eto.TypeConverter.GetConvertFromException(System.Object)">
            <summary>
            Gets the exception when converting from a value.
            </summary>
            <returns>The convert from exception.</returns>
            <param name="value">Value converted from.</param>
        </member>
        <member name="M:Eto.TypeConverter.GetConvertToException(System.Object,System.Type)">
            <summary>
            Gets the exception when converting to a value.
            </summary>
            <returns>The convert to exception.</returns>
            <param name="value">Value converting to.</param>
            <param name="destinationType">Destination type.</param>
        </member>
        <member name="M:Eto.TypeConverter.IsValid(System.Object)">
            <summary>
            Determines whether this instance is valid the specified value.
            </summary>
            <returns><c>true</c> if this instance is valid the specified value; otherwise, <c>false</c>.</returns>
            <param name="value">Value.</param>
        </member>
        <member name="M:Eto.TypeConverter.IsValid(Eto.ITypeDescriptorContext,System.Object)">
            <summary>
            Determines whether this instance is valid the specified context value.
            </summary>
            <returns><c>true</c> if this instance is valid the specified context value; otherwise, <c>false</c>.</returns>
            <param name="context">Context.</param>
            <param name="value">Value.</param>
        </member>
        <member name="T:Eto.WidgetCreatedEventArgs">
            <summary>
            Arguments for when a widget is created
            </summary>
            <copyright>(c) 2012-2015 by Curtis Wensley</copyright>
            <license type="BSD-3">See LICENSE for full terms</license>
        </member>
        <member name="P:Eto.WidgetCreatedEventArgs.Instance">
            <summary>
            Gets the instance of the widget that was created
            </summary>
        </member>
        <member name="M:Eto.WidgetCreatedEventArgs.#ctor(Eto.Widget)">
            <summary>
            Initializes a new instance of the WidgetCreatedArgs class
            </summary>
            <param name="instance">Instance of the widget that was created</param>
        </member>
        <member name="T:Eto.HandlerCreatedEventArgs">
            <summary>
            Arguments for when a widget is created
            </summary>
            <copyright>(c) 2012-2015 by Curtis Wensley</copyright>
            <license type="BSD-3">See LICENSE for full terms</license>
        </member>
        <member name="P:Eto.HandlerCreatedEventArgs.Instance">
            <summary>
            Gets the instance of the widget that was created
            </summary>
        </member>
        <member name="M:Eto.HandlerCreatedEventArgs.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the WidgetCreatedArgs class
            </summary>
            <param name="instance">Instance of the widget that was created</param>
        </member>
        <member name="T:Eto.PlatformFeatures">
            <summary>
            Flags to specify which global features are supported for a platform
            </summary>
        </member>
        <member name="F:Eto.PlatformFeatures.None">
            <summary>
            No extra features supported.
            </summary>
        </member>
        <member name="F:Eto.PlatformFeatures.CustomCellSupportsControlView">
            <summary>
            Specifies that the <see cref="T:Eto.Forms.CustomCell"/> supports creating a Control for each cell.
            If not specified, then the CustomCell will paint its content when not in edit mode.
            </summary>
        </member>
        <member name="F:Eto.PlatformFeatures.DrawableWithTransparentContent">
            <summary>
            Specifies that the <see cref="T:Eto.Forms.Drawable"/> supports automatic transparent background for its <c>Content</c>.
            If not specified, then setting the content may not work as intended
            (most often not rendering with transparent background, thus overpainting the drawable).
            </summary>
        </member>
        <member name="F:Eto.PlatformFeatures.TabIndexWithCustomContainers">
            <summary>
            Specifies the <see cref="P:Eto.Forms.Control.TabIndex"/> is based on the logical tree, not the visual tree.
            Both GTK and WinForms do not support creating a custom tab focus and is based on the direct containers.
            
            For example, setting a TabIndex for controls in DynamicLayout and StackLayout might not behave as expected on platforms
            that do not support this.
            </summary>
        </member>
        <member name="T:Eto.Platform">
            <summary>
            Base platform class
            </summary>
            <remarks>
            This class takes care of creating the platform-specific implementations of each control.
            All controls the platform can handle should be added using <see cref="M:Eto.Platform.Add``1(System.Func{``0})"/>.
            </remarks>
            <copyright>(c) 2012-2015 by Curtis Wensley</copyright>
            <license type="BSD-3">See LICENSE for full terms</license>
        </member>
        <member name="E:Eto.Platform.HandlerCreated">
            <summary>
            Event to handle when widgets are created by this platform
            </summary>
        </member>
        <member name="M:Eto.Platform.OnHandlerCreated(Eto.HandlerCreatedEventArgs)">
            <summary>
            Handles the <see cref="E:Eto.Platform.WidgetCreated"/> event
            </summary>
            <param name="e">Arguments for the event</param>
        </member>
        <member name="E:Eto.Platform.WidgetCreated">
            <summary>
            Event to handle when widgets are created by this platform
            </summary>
        </member>
        <member name="M:Eto.Platform.OnWidgetCreated(Eto.WidgetCreatedEventArgs)">
            <summary>
            Handles the <see cref="E:Eto.Platform.WidgetCreated"/> event
            </summary>
            <param name="e">Arguments for the event</param>
        </member>
        <member name="P:Eto.Platform.ID">
            <summary>
            Gets the ID of this platform
            </summary>
            <remarks>
            The platform ID can be used to determine which platform is currently in use.  The platform
            does not necessarily correspond to the OS that it is running on, as for example the GTK platform
            can run on OS X and Windows.
            </remarks>
        </member>
        <member name="P:Eto.Platform.IsMac">
            <summary>
            Gets a value indicating whether this platform is a mac based platform (MonoMac/XamMac)
            </summary>
            <value><c>true</c> if this platform is mac; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Eto.Platform.IsWinForms">
            <summary>
            Gets a value indicating whether this platform is based on Windows Forms
            </summary>
            <value><c>true</c> if this platform is window forms; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Eto.Platform.IsWpf">
            <summary>
            Gets a value indicating whether this platform is based on WPF
            </summary>
            <value><c>true</c> if this platform is wpf; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Eto.Platform.IsGtk">
            <summary>
            Gets a value indicating whether this platform is based on GTK# (2 or 3)
            </summary>
            <value><c>true</c> if this platform is gtk; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Eto.Platform.IsIos">
            <summary>
            Gets a value indicating whether this platform is based on Xamarin.iOS
            </summary>
            <value><c>true</c> if this platform is ios; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Eto.Platform.IsAndroid">
            <summary>
            Gets a value indicating whether this platform is based on Xamarin.Android.
            </summary>
            <value><c>true</c> if this platform is android; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Eto.Platform.IsDesktop">
            <summary>
            Gets a value indicating whether this is a desktop platform. This includes Mac, Gtk, WinForms, Wpf, Direct2D.
            </summary>
            <remarks>
            A desktop platform is usually used via mouse &amp; keyboard, and can have complex user interface elements.
            </remarks>
            <value><c>true</c> if this is a desktop platform; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Eto.Platform.IsMobile">
            <summary>
            Gets a value indicating whether this is a mobile platform. This includes iOS, Android, and WinRT.
            </summary>
            <remarks>
            A mobile platform is usually touch friendly, and have a simpler interface.
            </remarks>
            <value><c>true</c> if this instance is mobile; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Eto.Platform.IsValid">
            <summary>
            Gets a value indicating that this platform is valid on the running device
            </summary>
            <remarks>
            This is used in platform detection to ensure that the correct platform is loaded.
            For example, the Mac platforms are only valid when run in an .app bundle.
            </remarks>
            <value><c>true</c> if this platform is valid and can be run; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Eto.Platform.#ctor">
            <summary>
            Initializes a new instance of the Platform class
            </summary>
        </member>
        <member name="M:Eto.Platform.Supports``1">
            <summary>
            Gets a value indicating that the specified type is supported by this platform
            </summary>
            <typeparam name="T">Type of the handler or class with HandlerAttribute to test for.</typeparam>
            <returns>true if the specified type is supported, false otherwise</returns>
        </member>
        <member name="M:Eto.Platform.Supports(System.Type)">
            <summary>
            Gets a value indicating that the specified <paramref name="type"/> is supported by this platform
            </summary>
            <param name="type">Type of the handler or class with HandlerAttribute to test for.</param>
            <returns>true if the specified type is supported, false otherwise</returns>
        </member>
        <member name="M:Eto.Platform.LoadAssembly(System.String)">
            <summary>
            Loads the extensions specified by the assembly attribute <see cref="T:Eto.PlatformExtensionAttribute"/>.
            </summary>
            <seealso cref="M:Eto.Platform.LoadAssembly(System.Reflection.Assembly)"/>
            <param name="assemblyName">Name of the assembly to load the extensions for.</param>
        </member>
        <member name="M:Eto.Platform.LoadAssembly(System.Reflection.Assembly)">
            <summary>
            Loads the extensions specified by the assembly attribute <see cref="T:Eto.PlatformExtensionAttribute"/>.
            </summary>
            <remarks>
            This is useful for 3rd party libraries and when defining your own custom controls.
            
            This method is called automatically on the same assembly of a custom control when its handler cannot be found.
            It will also be called for the same assembly with the prefix of the platform ID.
            
            For example, if <c>MyControl</c> was declared in <c>MyControls.dll</c>, then Eto will automatically also
            load <c>MyControls.Wpf.dll</c> for the Wpf platform, and <c>MyControls.XamMac2.dll</c> for the XamMac2 platform, etc.
            
            Use <see cref="T:Eto.ExportHandlerAttribute"/> and <see cref="T:Eto.ExportInitializerAttribute"/> to register
            handlers with the platform when the assembly is loaded or perform other logic.
            </remarks>
            <param name="assembly">Assembly to load the extensions for.</param>
        </member>
        <member name="P:Eto.Platform.SupportedFeatures">
            <summary>
            Gets the supported features of the platform.
            </summary>
            <value>The supported features.</value>
        </member>
        <member name="P:Eto.Platform.Instance">
            <summary>
            Gets the platform for the current thread
            </summary>
            <remarks>
            Typically you'd have only one platform active at a time, and this holds an instance to that value.
            The current platform is set automatically by the <see cref="T:Eto.Forms.Application"/> class
            when it is initially created.
            
            This will return a different value for each thread, so if you have multiple platforms running
            (e.g. GTK + Mac for OS X), then this will allow for that.
            
            This will be used when creating controls. To create controls on a different platform outside of its own thread, 
            use the <see cref="P:Eto.Platform.Context"/> property.
            </remarks>
        </member>
        <member name="P:Eto.Platform.Detect">
            <summary>
            Returns the current generator, or detects the generator to use if no current generator is set.
            </summary>
            <remarks>
            This detects the platform to use based on the generator assemblies available and the current OS.
            
            For windows, it will prefer WPF to Windows Forms.
            Mac OS X will prefer the Mac platform.
            Other unix-based platforms will prefer GTK.
            </remarks>
        </member>
        <member name="M:Eto.Platform.Initialize(Eto.Platform)">
            <summary>
            Initializes the specified <paramref name="platform"/> as the current generator, for the current thread
            </summary>
            <remarks>
            This is called automatically by the <see cref="T:Eto.Forms.Application"/> when it is constructed
            </remarks>
            <param name="platform">Generator to set as the current generator</param>
        </member>
        <member name="M:Eto.Platform.Initialize(System.String)">
            <summary>
            Initialize the generator with the specified <paramref name="platformType"/> as the current generator
            </summary>
            <param name="platformType">Type of the generator to set as the current generator</param>
        </member>
        <member name="M:Eto.Platform.Get(System.String)">
            <summary>
            Gets the generator of the specified type
            </summary>
            <param name="generatorType">Type of the generator to get</param>
            <returns>An instance of a Generator of the specified type, or null if it cannot be loaded</returns>
        </member>
        <member name="M:Eto.Platform.Add``1(System.Func{``0})">
            <summary>
            Add the <paramref name="instantiator"/> for the specified handler type of <typeparamref name="T"/>
            </summary>
            <param name="instantiator">Instantiator to create an instance of the handler</param>
            <typeparam name="T">The handler type to add the instantiator for (usually an interface derived from <see cref="T:Eto.Widget.IHandler"/>)</typeparam>
        </member>
        <member name="M:Eto.Platform.Add(System.Type,System.Func{System.Object})">
            <summary>
            Add the specified type and instantiator.
            </summary>
            <param name="type">Type of the handler (usually an interface derived from <see cref="T:Eto.Widget.IHandler"/>)</param>
            <param name="instantiator">Instantiator to create an instance of the handler</param>
        </member>
        <member name="M:Eto.Platform.Find(System.Type)">
            <summary>
            Find the delegate to create instances of the specified <paramref name="type"/>
            </summary>
            <param name="type">Type of the handler interface to get the instantiator for (usually derived from <see cref="T:Eto.Widget.IHandler"/> or another type)</param>
        </member>
        <member name="M:Eto.Platform.Find``1">
            <summary>
            Finds the delegate to create instances of the specified type
            </summary>
            <typeparam name="T">Type of the handler interface (usually derived from <see cref="T:Eto.Widget.IHandler"/> or another type)</typeparam>
            <returns>The delegate to use to create instances of the specified type</returns>
        </member>
        <member name="M:Eto.Platform.Create``1">
            <summary>
            Creates a new instance of the handler of the specified type of <typeparamref name="T"/>
            </summary>
            <remarks>
            This extension should be used when creating instances of a fixed type.
            </remarks>
            <typeparam name="T">Type of handler to create</typeparam>
            <returns>A new instance of a handler</returns>
        </member>
        <member name="M:Eto.Platform.Create(System.Type)">
            <summary>
            Creates a new instance of the handler of the specified type
            </summary>
            <param name="type">Type of handler to create</param>
            <returns>A new instance of a handler</returns>
        </member>
        <member name="M:Eto.Platform.CreateShared(System.Type)">
            <summary>
            Creates a shared singleton instance of the specified type of <paramref name="type"/>
            </summary>
            <param name="type">The type of handler to get a shared instance for</param>
            <returns>The shared instance of a handler of the given type, or a new instance if not already created</returns>
        </member>
        <member name="M:Eto.Platform.CreateShared``1">
            <summary>
            Creates a shared singleton instance of the specified type of <typeparamref name="T"/>
            </summary>
            <remarks>
            This extension should be used when creating shared instances of a fixed type.
            </remarks>
            <typeparam name="T">The type of handler to get a shared instance for</typeparam>
            <returns>The shared instance of a handler of the given type, or a new instance if not already created</returns>
        </member>
        <member name="M:Eto.Platform.Cache``2(System.Object)">
            <summary>
            Gets a shared cache dictionary
            </summary>
            <remarks>
            This is used to cache things like brushes and pens, but can also be used to cache other things for your
            application's use.
            </remarks>
            <param name="cacheKey">Unique cache key to load the cache instance</param>
            <typeparam name="TKey">The type of the lookup key</typeparam>
            <typeparam name="TValue">The type of the lookup value</typeparam>
        </member>
        <member name="M:Eto.Platform.ThreadStart">
            <summary>
            Used at the start of your custom threads
            </summary>
            <returns></returns>
        </member>
        <member name="P:Eto.Platform.Context">
            <summary>
            Gets an object to wrap in the platform's context, when using multiple platforms.
            </summary>
            <remarks>
            This sets this platform as current, and reverts back to the previous platform when disposed.
            
            This value may be null.
            </remarks>
            <example>
            <code>
            	using (platform.Context)
            	{
            		// do some stuff with the specified platform
            	}
            </code>
            </example>
        </member>
        <member name="M:Eto.Platform.Invoke(System.Action)">
            <summary>
            Invoke the specified action within the context of this platform
            </summary>
            <remarks>
            This is useful when you are using multiple platforms at the same time, and gives you an easy
            way to execute code within the context of this platform.
            </remarks>
            <param name="action">Action to execute.</param>
        </member>
        <member name="M:Eto.Platform.Invoke``1(System.Func{``0})">
            <summary>
            Invoke the specified function within the context of this platform, returning its value.
            </summary>
            <remarks>
            This is useful when you are using multiple platforms at the same time, and gives you an easy
            way to execute code within the context of this platform, and return its value.
            </remarks>
            <example>
            <code>
            	var mycontrol = MyPlatform.Invoke(() => new MyControl());
            </code>
            </example>
            <param name="action">Action to execute.</param>
            <typeparam name="T">The type of value to return.</typeparam>
        </member>
        <member name="T:Eto.PlatformContext">
            <summary>
            Sets the current generator for a block of code
            </summary>
        </member>
        <member name="T:Eto.ExportInitializerAttribute">
            <summary>
            Attribute to apply to 3rd party assemblies to load additional controls or functionality.
            </summary>
            <remarks>
            This can be used by both by the cross platform control library, and in each of the platform-specific libraries.
            </remarks>
            <example>
            For example, say you want to create a new control, called <code>MyControl</code>, you would have a shared assembly, plus implementation assemblies for each platform.
            
            MyControls.dll:
            <code>
            using Eto;
            using Eto.Forms;
            
            namespace MyControls
            {
            	[Handler(typeof(IHandler))]
            	public class MyControl : Control
            	{
            		new IHandler Handler => base.Handler as IHandler;
            
            		public bool SomeProperty
            		{
            			get { return Handler.SomeProperty; }
            			set { Handler.SomeProperty = value; }
            		}
            
            		public new interface IHandler : IHandler
            		{
            			bool SomeProperty { get; set; }
            		}
            	}
            }
            </code>
            
            MyControls.Wpf.dll:
            <code>
            using Eto;
            using Eto.Forms;
            using Eto.Wpf.Forms;
            
            [assembly:ExportInitializer(typeof(MyControls.Wpf.MyPlatform))]
            
            namespace MyControls.Wpf
            {
            	class MyPlatform : IPlatformExtension
            	{
            		public Initialize(Platform platform)
            		{
            			platform.Add&lt;MyControl.IHandler&gt;(() => new MyControlHandler());
            		}
            	}
            
            	public class MyControlHandler : WpfFrameworkElement&lt;SomeWpfControl, MyControl, MyControl.ICallback>, MyControl.IHandler
            	{
            		public MyControlHandler()
            		{
            			Control = new SomeWpfControl();
            		}
            
            		// TODO:
            		public bool SomeProperty
            		{
            			get { return false; }
            			set { }
            		}
            	}
            }
            </code>
            </example>
        </member>
        <member name="P:Eto.ExportInitializerAttribute.InitializerType">
            <summary>
            Type of the extension class to instantiate when the assembly this attribute is supplied on is loaded by the platform.
            </summary>
            <remarks>
            This type should usually implement <see cref="T:Eto.IPlatformInitializer"/> so that it can know what platform it is being loaded on.
            </remarks>
            <value>The type of the extension.</value>
        </member>
        <member name="M:Eto.ExportInitializerAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the PlatformInitializerAttribute class
            </summary>
            <param name="initializerType">Type of the initializer to create</param>
        </member>
        <member name="M:Eto.ExportInitializerAttribute.Register(Eto.Platform)">
            <summary>
            Registers the extension with the specified platform
            </summary>
            <returns><c>true</c>, if the extension was applied, <c>false</c> otherwise.</returns>
            <param name="platform">Platform to register this extension with.</param>
        </member>
        <member name="T:Eto.IPlatformInitializer">
            <summary>
            Platform extension for 3rd party libraries to provide additional controls or functionality
            </summary>
            <remarks>
            This is implemented for types that are referenced using the <see cref="T:Eto.ExportInitializerAttribute"/>.
            </remarks>
        </member>
        <member name="M:Eto.IPlatformInitializer.Initialize(Eto.Platform)">
            <summary>
            Called to add specific functionality to the specified <paramref name="platform"/>
            </summary>
            <param name="platform">Platform to add the extension to</param>
        </member>
        <member name="T:Eto.PlatformExtensionAttribute">
            <summary>
            Base extension attribute to wire up 3rd party controls and native handler implementations.
            </summary>
            <remarks>
            All extensions are loaded via <see cref="M:Eto.Platform.LoadAssembly(System.Reflection.Assembly)"/>.  
            
            Use the <see cref="P:Eto.PlatformExtensionAttribute.PlatformID"/> property to specify which platform the extension applies to.
            </remarks>
        </member>
        <member name="P:Eto.PlatformExtensionAttribute.PlatformID">
            <summary>
            Gets or sets the platform identifier this extension should be loaded on, or null to load for all platforms.
            </summary>
            <value>The platform identifier.</value>
        </member>
        <member name="M:Eto.PlatformExtensionAttribute.Supports(Eto.Platform)">
            <summary>
            Gets a value indicating that this extension supports the specified platform.
            </summary>
            <remarks>
            <see cref="M:Eto.PlatformExtensionAttribute.Register(Eto.Platform)"/> will only be called if this returns <c>true</c>.
            </remarks>
            <returns><c>true</c>, if this extension supports the specified platform, <c>false</c> otherwise.</returns>
            <param name="platform">Platform to determine if this extension applies.</param>
        </member>
        <member name="M:Eto.PlatformExtensionAttribute.Register(Eto.Platform)">
            <summary>
            Registers the extension with the specified platform
            </summary>
            <returns><c>true</c>, if the extension was applied, <c>false</c> otherwise.</returns>
            <param name="platform">Platform to register this extension with.</param>
        </member>
        <member name="T:Eto.Platforms">
            <summary>
            Constants for the standard Generator generators
            </summary>
        </member>
        <member name="F:Eto.Platforms.Direct2D">
            <summary>
            Type of the Direct2D platform
            </summary>
        </member>
        <member name="F:Eto.Platforms.Ios">
            <summary>
            Type of the iOS platform
            </summary>
        </member>
        <member name="F:Eto.Platforms.Gtk">
            <summary>
            Type of the GTK platform
            </summary>
        </member>
        <member name="F:Eto.Platforms.Gtk2">
            <summary>
            Type of the GTK 2 platform
            </summary>
        </member>
        <member name="F:Eto.Platforms.Gtk3">
            <summary>
            Type of the GTK 3 platform
            </summary>
        </member>
        <member name="F:Eto.Platforms.Mac">
            <summary>
            Type of the Mac OS X platform
            </summary>
        </member>
        <member name="F:Eto.Platforms.Mac64">
            <summary>
            Type of the Mac OS X platform on 64-bit mono
            </summary>
        </member>
        <member name="F:Eto.Platforms.XamMac">
            <summary>
            Type of the Xamarin.Mac v1 OS X platform
            </summary>
        </member>
        <member name="F:Eto.Platforms.XamMac2">
            <summary>
            Type of the Xamarin.Mac v2 OS X platform
            </summary>
        </member>
        <member name="F:Eto.Platforms.WinForms">
            <summary>
            Type of the Windows forms platform
            </summary>
        </member>
        <member name="F:Eto.Platforms.Wpf">
            <summary>
            ID of the WPF platform
            </summary>
        </member>
        <member name="F:Eto.Platforms.Android">
            <summary>
            ID of the Android platform
            </summary>
        </member>
        <member name="T:Eto.PropertyStore">
            <summary>
            A storage for properties and events of a class
            </summary>
            <remarks>
            This is used by <see cref="T:Eto.Widget"/> object to minimize the footprint of each instance.
            For example, the <see cref="T:Eto.Forms.Control"/> class has around 20 events, each would take up to 4 bytes on a 32 bit 
            system for a total overhead of 80 bytes per instance.
            Most of the events won't be handled on most controls, so using a dictionary can dramatically reduce the size.
            
            This can also be used for rarely used properties that do not need to be extremely performant when getting or setting the value.
            </remarks>
        </member>
        <member name="P:Eto.PropertyStore.Parent">
            <summary>
            Gets the parent object that this property store is attached to
            </summary>
            <remarks>
            This is used to attach/remove events
            </remarks>
            <value>The parent object</value>
        </member>
        <member name="M:Eto.PropertyStore.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Eto.PropertyStore"/> class.
            </summary>
            <param name="parent">Parent to attach the properties to</param>
        </member>
        <member name="M:Eto.PropertyStore.Get``1(System.Object,``0)">
            <summary>
            Gets a value from the property store with the specified key of a concrete type
            </summary>
            <param name="key">Key of the property to get</param>
            <param name="defaultValue">Value to return when the specified property is not found in the dictionary</param>
            <typeparam name="T">The type of property to get.</typeparam>
            <returns>Value of the property with the given key, or <paramref name="defaultValue"/> if not found</returns>
        </member>
        <member name="M:Eto.PropertyStore.Get``1(System.Object,System.Func{``0})">
            <summary>
            Gets a value from the property store with the specified key of a concrete type
            </summary>
            <param name="key">Key of the property to get</param>
            <param name="defaultValue">Value to return when the specified property is not found in the dictionary</param>
            <typeparam name="T">The type of property to get.</typeparam>
            <returns>Value of the property with the given key, or <paramref name="defaultValue"/> if not found</returns>
        </member>
        <member name="M:Eto.PropertyStore.Create``1(System.Object)">
            <summary>
            Gets a value from the property store with the specified key of a concrete type, and creates a new instance if it doesn't exist yet.
            </summary>
            <param name="key">Key of the property to get</param>
            <typeparam name="T">Type type of property to get.</typeparam>
            <returns>Value of the property with the given key, or a new instance if not already added</returns>
        </member>
        <member name="M:Eto.PropertyStore.Create``1(System.Object,System.Func{``0})">
            <summary>
            Gets a value from the property store with the specified key of a concrete type, and creates a new instance if it doesn't exist yet.
            </summary>
            <param name="key">Key of the property to get</param>
            <param name="create">Delegate to create the object, if it doesn't already exist</param>
            <typeparam name="T">Type type of property to get.</typeparam>
            <returns>Value of the property with the given key, or a new instance if not already added</returns>
        </member>
        <member name="M:Eto.PropertyStore.AddEvent(System.Object,System.Delegate)">
            <summary>
            Adds a generic event delegate with the specified key
            </summary>
            <remarks>
            This should be called in an event's add accessor.
            If you are adding a handler-based event, call <see cref="M:Eto.PropertyStore.AddHandlerEvent(System.String,System.Delegate)"/> instead, which will automatically
            tell the handler that it needs to be wired up.
            
            You can use any subclass of <see cref="T:System.EventArgs"/> for the type of event handler
            
            To trigger the event, use <see cref="M:Eto.PropertyStore.TriggerEvent``1(System.Object,System.Object,``0)"/>.
            </remarks>
            <seealso cref="M:Eto.PropertyStore.RemoveEvent(System.Object,System.Delegate)"/>
            <seealso cref="M:Eto.PropertyStore.AddHandlerEvent(System.String,System.Delegate)"/>
            <example>
            Example implementation of a generic event
            <code>
            	static readonly object MySomethingEventKey = new object();
            	
            	public event EventHandler&lt;EventArgs&gt; MySomething
            	{
            		add { Properties.AddEvent(MySomethingEvent, value); }
            		remove { Properties.RemoveEvent(MySomethingEvent, value); }
            	}
            </code>
            </example>
            <param name="key">Key of the event to add to</param>
            <param name="value">Delegate to add to the event</param>
        </member>
        <member name="M:Eto.PropertyStore.AddHandlerEvent(System.String,System.Delegate)">
            <summary>
            Adds a handler-based event delegate with the specified key
            </summary>
            <remarks>
            This should be called in an event's add accessor.
            This is used for any event that should be triggered by the platform handler. 
            This will call <see cref="M:Eto.Widget.IHandler.HandleEvent(string,bool)"/> with the specified <paramref name="key"/> for the
            first subscription to the event.
            
            You can use any subclass of <see cref="T:System.EventArgs"/> for the type of event handler
            
            To trigger the event, use <see cref="M:Eto.PropertyStore.TriggerEvent``1(System.Object,System.Object,``0)"/>
            </remarks>
            <example>
            Example implementation of a handler-triggered event
            <code>
            	public const string MySomethingEvent = "MyControl.MySomething";
            	
            	public event EventHandler&lt;EventArgs&gt; MySomething
            	{
            		add { Properties.AddHandlerEvent(MySomethingEvent, value); }
            		remove { Properties.RemoveHandlerEvent(MySomethingEvent, value); }
            	}
            </code>
            </example>
            <param name="key">Key of the event to add to</param>
            <param name="value">Delegate to add to the event</param>
        </member>
        <member name="M:Eto.PropertyStore.RemoveEvent(System.Object,System.Delegate)">
            <summary>
            Removes the event delegate with the specified <paramref name="key"/>
            </summary>
            <remarks>
            Use this in the remove accessor of your event.  See <see cref="M:Eto.PropertyStore.AddEvent(System.Object,System.Delegate)"/> and <see cref="M:Eto.PropertyStore.AddHandlerEvent(System.String,System.Delegate)"/>
            for examples.
            </remarks>
            <param name="key">Key of the event to remove</param>
            <param name="value">Delegate to remove from the event</param>
        </member>
        <member name="M:Eto.PropertyStore.TriggerEvent``1(System.Object,System.Object,``0)">
            <summary>
            Triggers an event with the specified key
            </summary>
            <remarks>
            Call this in your OnMyEvent(EventArgs) method to trigger the event if it has been subscribed to.
            This can handle events that have any type of EventArgs.
            </remarks>
            <example>
            This shows how to trigger either a generic event or handler-triggered event:
            <code>
            	protected virtual void OnMySomething(EventArgs e)
            	{
            		Properties.TriggerEvent(MySomethingEventKey, this, e);
            	}
            </code>
            </example>
            <param name="key">Key of the generic or handler event</param>
            <param name="sender">Object sending the event (usually 'this')</param>
            <param name="args">Arguments for the event</param>
            <typeparam name="T">Type of the event arguments</typeparam>
        </member>
        <member name="M:Eto.PropertyStore.Set``1(System.Object,``0,``0)">
            <summary>
            Set the value for the specified property key, removing the value from the dictionary if it is the default value of T.
            </summary>
            <remarks>
            This can be used as an optimized way to set the value in the dictionary as if the value set equal to the <paramref name="defaultValue"/>
            (e.g. null for reference types, false for bool, 0 for int, etc), then it will be removed from the dictionary
            instead of just set to the value, reducing memory usage.
            The <see cref="M:Eto.PropertyStore.Get``1(System.Object,``0)"/> should be passed the same default when retrieving the parameter value.
            </remarks>
            <param name="key">Key of the property to set.</param>
            <param name="value">Value for the property.</param>
            <param name="defaultValue">Value of the property when it should be removed from the dictionary. This should match what is passed to <see cref="M:Eto.PropertyStore.Get``1(System.Object,``0)"/> when getting the value.</param>
            <typeparam name="T">The type of the property to set.</typeparam>
        </member>
        <member name="M:Eto.PropertyStore.Set``1(System.Object,``0,System.ComponentModel.PropertyChangedEventHandler,``0,System.String)">
            <summary>
            Set the value for the specified property key, raising the <paramref name="propertyChanged"/> handler if it has changed.
            </summary>
            <remarks>
            This is useful when creating properties that need to trigger changed events without having to write boilerplate code.
            </remarks>
            <example>
            <code>
            public class MyForm : Form, INotifyPropertyChanged
            {
            	static readonly MyPropertyKey = new object();
            
            	public bool MyProperty
            	{
            		get { return Properties.Get&lt;bool&gt;(MyPropertyKey); }
            		set { Properties.Set(MyPropertyKey, value, PropertyChanged); }
            	}
            
            	public event PropertyChangedEventHandler PropertyChanged;
            }
            </code>
            </example>
            <param name="key">Key of the property to set.</param>
            <param name="value">Value for the property.</param>
            <param name="defaultValue">Default value of the property to compare when removing the key</param>
            <param name="propertyChanged">Property changed event handler to raise if the property value has changed.</param>
            <param name="propertyName">Name of the property, or omit to get the property name from the caller.</param>
            <typeparam name="T">The type of the property to set.</typeparam>
            <returns>true if the property was changed, false if not</returns>
        </member>
        <member name="M:Eto.PropertyStore.Set``1(System.Object,``0,System.Action,``0)">
            <summary>
            Set the value for the specified property key, calling the <paramref name="propertyChanged"/> delegate if it has changed.
            </summary>
            <remarks>
            This is useful when creating properties that need to trigger changed events without having to write boilerplate code.
            </remarks>
            <example>
            <code>
            public class MyForm : Form
            {
            	static readonly MyPropertyKey = new object();
            
            	public bool MyProperty
            	{
            		get { return Properties.Get&lt;bool&gt;(MyPropertyKey); }
            		set { Properties.Set(MyPropertyKey, value, OnMyPropertyChanged); }
            	}
            
            	public event EventHandler&lt;EventArgs&gt; MyPropertyChanged;
            	
            	protected virtual void MyPropertyChanged(EventArgs e)
            	{
            		if (MyPropertyChanged != null)
            			MyPropertyChanged(this, e);
            	}
            }
            </code>
            </example>
            <param name="key">Key of the property to set.</param>
            <param name="value">Value for the property.</param>
            <param name="defaultValue">Default value of the property to compare when removing the key</param>
            <param name="propertyChanged">Property changed event handler to raise if the property value has changed.</param>
            <typeparam name="T">The type of the property to set.</typeparam>
            <returns>true if the property was changed, false if not</returns>
        </member>
        <member name="M:Eto.PropertyStore.SetCommand(System.Object,System.Windows.Input.ICommand,System.Action{System.Boolean},System.Action{System.EventHandler{System.EventArgs}},System.Action{System.EventHandler{System.EventArgs}},System.Func{System.Object})">
            <summary>
            Sets an <see cref="T:System.Windows.Input.ICommand"/> value for the specified property <paramref name="key"/>.
            </summary>
            <param name="key">Key of the property to set</param>
            <param name="value">Command instance</param>
            <param name="setEnabled">Delegate to set the widget as enabled when the command state changes.</param>
            <param name="addExecute">Delegate to attach the execute event handler when the widget invokes the command.</param>
            <param name="removeExecute">Delegate to detach the execute event handler.</param>
            <param name="getParameter">Delegate to get the parameter to pass to the command</param>
            <seealso cref="M:Eto.PropertyStore.GetCommand(System.Object)"/>
        </member>
        <member name="M:Eto.PropertyStore.UpdateCommandCanExecute(System.Object)">
            <summary>
            Updates the command's execute status, typically when the CommandParameter changes.
            </summary>
            <param name="key">Key of the command to execute.</param>
        </member>
        <member name="M:Eto.PropertyStore.GetCommand(System.Object)">
            <summary>
            Gets the command instance for the specified property key.
            </summary>
            <returns>The command instance, or null if it is not set.</returns>
            <param name="key">Key of the property to get.</param>
            <seealso cref="M:Eto.PropertyStore.SetCommand(System.Object,System.Windows.Input.ICommand,System.Action{System.Boolean},System.Action{System.EventHandler{System.EventArgs}},System.Action{System.EventHandler{System.EventArgs}},System.Func{System.Object})"/>
        </member>
        <member name="T:Eto.RuntimeNamePropertyAttribute">
            <summary>
            Attribute to specify the name property of a control for serialization
            </summary>
            <remarks>
            Used by Eto.Serialization.Xaml, for example, to specify which property is used for the name property.
            
            E.g. when specifying the ID, it also specifies which name of the backing field.
            </remarks>
        </member>
        <member name="P:Eto.RuntimeNamePropertyAttribute.Name">
            <summary>
            Gets the name of the property to use as the runtime name
            </summary>
            <value>The name.</value>
        </member>
        <member name="M:Eto.RuntimeNamePropertyAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Eto.RuntimeNamePropertyAttribute"/> class.
            </summary>
            <param name="name">Name of the property</param>
        </member>
        <member name="T:Eto.StyleWidgetHandler`1">
            <summary>
            Delegate to handle styling a widget
            </summary>
            <remarks>
            This allows you to add additional logic or set properties on the widget based on the styles set on the widget.
            </remarks>
            <typeparam name="TWidget">Type of widget to style</typeparam>
            <param name="widget">Widget instance that is being styled</param>
        </member>
        <member name="T:Eto.StyleHandler`1">
            <summary>
            Delegate to handle styling a widget handler
            </summary>
            <remarks>
            This allows you to add additional logic or set properties on the widget and platform-specific control(s)
            based on the styles set on the widget.
            </remarks>
            <param name="handler">Handler instance that is being styled</param>
            <typeparam name="THandler">Type of the handler to style</typeparam>
        </member>
        <member name="T:Eto.Style">
            <summary>
            Style manager for widgets
            </summary>
            <remarks>
            Styles allow you to attach custom platform-specific logic to a widget.
            In your platform-specific assembly, use Style.Add&lt;H&gt;(string, StyleHandler&lt;H&gt;)
            to add the style logic with the same id.
            
            Typically, your styles will be added in your platform-specific executable,
            before your application is run.
            </remarks>
            <example>
            Style the widget, with no direct access to platform-specifics
            <code><![CDATA[
            Style.Add<Form>("mainForm", widget => {
            	widget.Title = "Hello!";
            });
            ]]></code>
            
            Style based on a platform-specific handler (this is for Mac OS X):
            <code><![CDATA[
            Style.Add<Eto.Mac.Forms.FormHandler>("mainForm", handler => {
            	handler.Control.CollectionBehavior |= NSWindowCollectionBehavior.FullScreenPrimary;
            });
            Style.Add<Eto.Mac.Forms.ApplicationHandler>("application", handler => {
            	handler.EnableFullScreen ();
            });
            
            // create the UI (typically this is in your UI library, not in the platform-specific assembly)
            var app = new Application {
            	Style = "application";  // will apply the style here
            };
            
            app.Initialized += delegate {
            	app.MainForm = new Form { Style = "mainForm" }; // apply the mainForm style
            	app.MainForm.Show ();
            };
            
            ]]></code>
            </example>
        </member>
        <member name="E:Eto.Style.StyleWidget">
            <summary>
            Event to handle when a widget has being styled
            </summary>
        </member>
        <member name="M:Eto.Style.Add``1(System.String,Eto.StyleWidgetHandler{``0})">
            <summary>
            Adds a style for a widget
            </summary>
            <remarks>
            Styling a widget allows you to access the widget, but not the platform-specific controls (in a type-safe way).
            
            Typically, you'd use Style.Add&lt;H&gt;(string, StyleHandler&lt;H&gt;) instead, which will add a style based on the widget handler, which
            will give you direct and type safe access to platform-specifics of the widget.
            </remarks>
            <typeparam name="TWidget">Type of the widget to style</typeparam>
            <param name="style">Identifier of the style</param>
            <param name="handler">Delegate with your logic to style the widget</param>
        </member>
        <member name="M:Eto.Style.Add``1(System.String,Eto.StyleHandler{``0})">
            <summary>
            Adds a style for a widget handler
            </summary>
            <remarks>
            Styling a widget handler allows you to access both the widget and the platform-specifics for the widget.
            
            To use this, you would have to add a reference to one of the Eto.*.dll's so that you can utilize
            the platform handler directly.  Typically this would be called before your application is run.
            </remarks>
            <typeparam name="THandler">Type of the handler that should be styled</typeparam>
            <param name="style">Identifier for the style</param>
            <param name="styleHandler">Delegate with your logic to style the widget and/or platform control</param>
        </member>
        <member name="T:Eto.Threading.Thread">
            <summary>
            Provides access to platform-specific threading.
            Not all platforms implement this as you can use System.Threading.Thread instead in most cases.
            </summary>
            <remarks>
            Most platforms have a concept of threads, though some (e.g. WinRT) do not.
            This may be removed in a future version in favour of using Task.Run(), Task.Delay(), which works across all
            platforms on .net 4.5+ and PCL.
            </remarks>
        </member>
        <member name="P:Eto.Threading.Thread.CurrentThread">
            <summary>
            Gets the current thread instance
            </summary>
            <value>The current thread.</value>
        </member>
        <member name="P:Eto.Threading.Thread.MainThread">
            <summary>
            Gets the main thread.
            </summary>
            <value>The main thread.</value>
        </member>
        <member name="M:Eto.Threading.Thread.#ctor(System.Action)">
            <summary>
            Initializes a new instance of the <see cref="T:Eto.Threading.Thread"/> class for a specific ation
            </summary>
            <param name="action">Action to execute in a separate thread</param>
        </member>
        <member name="M:Eto.Threading.Thread.OnExecuted">
            <summary>
            Called when the thread is executed, for custom thread instances
            </summary>
        </member>
        <member name="M:Eto.Threading.Thread.Start">
            <summary>
            Start the thread, for custom thread instances
            </summary>
        </member>
        <member name="M:Eto.Threading.Thread.Abort">
            <summary>
            Abort this instance, for custom thread instances
            </summary>
        </member>
        <member name="P:Eto.Threading.Thread.IsAlive">
            <summary>
            Gets a value indicating whether this thread is alive.
            </summary>
            <value><c>true</c> if this thread is alive; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Eto.Threading.Thread.IsMain">
            <summary>
            Gets a value indicating whether this thread instance is the main UI thread.
            </summary>
            <value><c>true</c> if this thread instance is the main UI thread; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Eto.Threading.Thread.IsMainThread">
            <summary>
            Gets a value indicating if the current thread is the main UI thread.
            </summary>
            <value><c>true</c> if the current thread is the main UI thread; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Eto.Threading.Thread.GetCallback">
            <summary>
            Gets an instance of an object used to perform callbacks to the widget from handler implementations
            </summary>
            <returns>The callback instance to use for this widget</returns>
        </member>
        <member name="T:Eto.Threading.Thread.ICallback">
            <summary>
            Interface for callback methods of this class
            </summary>
        </member>
        <member name="M:Eto.Threading.Thread.ICallback.OnExecuted(Eto.Threading.Thread)">
            <summary>
            Raises the executed event.
            </summary>
        </member>
        <member name="T:Eto.Threading.Thread.Callback">
            <summary>
            Callbacks for the <see cref="T:Eto.Threading.Thread"/>
            </summary>
        </member>
        <member name="M:Eto.Threading.Thread.Callback.OnExecuted(Eto.Threading.Thread)">
            <summary>
            Raises the executed event.
            </summary>
        </member>
        <member name="T:Eto.Threading.Thread.IHandler">
            <summary>
            Handler interface for the <see cref="T:Eto.Threading.Thread"/> class
            </summary>
        </member>
        <member name="M:Eto.Threading.Thread.IHandler.Create">
            <summary>
            Creates a custom thread that will execute the <see cref="M:Eto.Threading.Thread.ICallback.OnExecuted(Eto.Threading.Thread)"/> method when started
            </summary>
        </member>
        <member name="M:Eto.Threading.Thread.IHandler.CreateCurrent">
            <summary>
            Creates an instance for the current thread
            </summary>
        </member>
        <member name="M:Eto.Threading.Thread.IHandler.CreateMain">
            <summary>
            Creates an instance for the main UI thread
            </summary>
        </member>
        <member name="M:Eto.Threading.Thread.IHandler.Start">
            <summary>
            Starts a custom thread when created using <see cref="M:Eto.Threading.Thread.IHandler.Create"/>
            </summary>
        </member>
        <member name="M:Eto.Threading.Thread.IHandler.Abort">
            <summary>
            Aborts a custom thread when created using <see cref="M:Eto.Threading.Thread.IHandler.Create"/>
            </summary>
        </member>
        <member name="P:Eto.Threading.Thread.IHandler.IsAlive">
            <summary>
            Gets a value indicating whether this thread is alive.
            </summary>
            <value><c>true</c> if this thread is alive; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Eto.Threading.Thread.IHandler.IsMain">
            <summary>
            Gets a value indicating whether this thread instance is the main UI thread.
            </summary>
            <value><c>true</c> if this thread instance is the main UI thread; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Eto.TypeHelper">
            <summary>
            Extension methods to provide a consistent .
            
            Some of these are from https://gist.github.com/jeffwilcox/2432351 (no attribution requested.)
            </summary>
        </member>
        <member name="M:Eto.TypeHelper.IsInstanceOfType(System.Type,System.Object)">
            <summary>
            Determines whether the specified object is an instance of the current Type.
            </summary>
            <param name="type">The type.</param>
            <param name="o">The object to compare with the current type.</param>
            <returns>true if the current Type is in the inheritance hierarchy of the 
            object represented by o, or if the current Type is an interface that o 
            supports. false if neither of these conditions is the case, or if o is 
            null, or if the current Type is an open generic type (that is, 
            ContainsGenericParameters returns true).</returns>
        </member>
        <member name="T:Eto.UnhandledExceptionEventArgs">
            <summary>
            Provides data for the event that is raised when there is an exception that is not handled otherwise
            </summary>
            <remarks>There is a System.UnhandledExceptionEventArgs class, but that doesn't seem to be available in
            the Core CLR, therefore we redefine it here.</remarks>
        </member>
        <member name="M:Eto.UnhandledExceptionEventArgs.#ctor(System.Object,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Eto.UnhandledExceptionEventArgs"/> class.
            </summary>
            <param name="exception">The exception object.</param>
            <param name="isTerminating"><c>true</c> if the application will terminate, otherwise <c>false</c>.</param>
        </member>
        <member name="P:Eto.UnhandledExceptionEventArgs.ExceptionObject">
            <summary>
            Gets the unhandled exception object.
            </summary>
        </member>
        <member name="P:Eto.UnhandledExceptionEventArgs.IsTerminating">
            <summary>
            Indicates whether the application is terminating.
            </summary>
        </member>
        <member name="T:Eto.IControlObjectSource">
            <summary>
            Interface for widgets that have a control object
            </summary>
            <copyright>(c) 2012-2014 by Curtis Wensley</copyright>
            <license type="BSD-3">See LICENSE for full terms</license>
        </member>
        <member name="P:Eto.IControlObjectSource.ControlObject">
            <summary>
            Gets the control object for this widget
            </summary>
            <value>The control object for the widget</value>
        </member>
        <member name="T:Eto.IHandlerSource">
            <summary>
            Interface for widgets that have a handler
            </summary>
            <copyright>(c) 2012-2014 by Curtis Wensley</copyright>
            <license type="BSD-3">See LICENSE for full terms</license>
        </member>
        <member name="P:Eto.IHandlerSource.Handler">
            <summary>
            Gets the platform handler object for the widget
            </summary>
            <value>The handler for the widget</value>
        </member>
        <member name="T:Eto.ICallbackSource">
            <summary>
            Interface to get the callback object for a widget
            </summary>
        </member>
        <member name="P:Eto.ICallbackSource.Callback">
            <summary>
            Gets an instance of an object used to perform callbacks to the widget from handler implementations
            </summary>
            <remarks>
            The callback should implement the parent class' callback interface so that there only needs
            to be a single callback for the entire hierarchy.
            
            This should return a static instance to avoid having overhead for each instance of your widget.
            </remarks>
            <returns>The callback instance to use for this widget</returns>
        </member>
        <member name="T:Eto.Widget">
             <summary>
             Base widget class for all objects requiring a platform-specific implementation
             </summary>
             <remarks>
             The Widget is the base of all abstracted objects that have platform-specific implementations.
            
             To implement the handler for a widget, use the <see cref="T:Eto.WidgetHandler`1"/> as the base class.
             </remarks>
             <copyright>(c) 2012-2014 by Curtis Wensley</copyright>
             <license type="BSD-3">See LICENSE for full terms</license>
        </member>
        <member name="P:Eto.Widget.Platform">
            <summary>
            Gets the platform that was used to create the <see cref="P:Eto.Widget.Handler"/> for this widget
            </summary>
            <remarks>
            This gets set to the current <see cref="P:Eto.Platform.Instance"/> during the construction of the object
            </remarks>
        </member>
        <member name="P:Eto.Widget.Handler">
            <summary>
            Gets the platform-specific handler for this widget
            </summary>
        </member>
        <member name="P:Eto.Widget.NativeHandle">
            <summary>
            Gets the native platform-specific handle for integration purposes
            </summary>
            <value>The native handle.</value>
        </member>
        <member name="M:Eto.Widget.GetCallback">
            <summary>
            Gets an instance of an object used to perform callbacks to the widget from handler implementations
            </summary>
            <remarks>
            The callback should implement the parent class' <see cref="T:Eto.Widget.ICallback"/> interface so that there only needs
            to be a single callback for the entire hierarchy.
            
            This should return a static instance to avoid having overhead for each instance of your control.
            </remarks>
            <returns>The callback instance to use for this widget</returns>
        </member>
        <member name="T:Eto.Widget.ICallback">
            <summary>>
            Base callback interface for all widgets
            </summary>
        </member>
        <member name="T:Eto.Widget.IHandler">
            <summary>
            Handler interface for the <see cref="P:Eto.Widget.IHandler.Widget"/> class
            </summary>
            <copyright>(c) 2012-2014 by Curtis Wensley</copyright>
            <license type="BSD-3">See LICENSE for full terms</license>
        </member>
        <member name="P:Eto.Widget.IHandler.ID">
            <summary>
            Gets or sets an ID for the widget
            </summary>
            <remarks>
            Some platforms may use this to identify controls (e.g. web)
            </remarks>
        </member>
        <member name="P:Eto.Widget.IHandler.Widget">
            <summary>
            Gets the widget this handler is implemented for
            </summary>
        </member>
        <member name="P:Eto.Widget.IHandler.NativeHandle">
            <summary>
            Gets the native platform-specific handle for integration purposes
            </summary>
            <value>The native handle.</value>
        </member>
        <member name="M:Eto.Widget.IHandler.Initialize">
            <summary>
            Called after the widget is constructed
            </summary>
            <remarks>
            This gets called automatically after the control is constructed and the <see cref="P:Eto.Widget.IHandler.Widget"/> and <see cref="P:Eto.Widget.Platform"/> properties are set.
            When the handler has specialized construction methods, then the <see cref="T:Eto.AutoInitializeAttribute"/> can be used to disable automatic
            initialization. In this case, it is the responsibility of the subclass to call <see cref="M:Eto.Widget.Initialize"/> 
            </remarks>
        </member>
        <member name="M:Eto.Widget.IHandler.HandleEvent(System.String,System.Boolean)">
            <summary>
            Called to handle a specific event
            </summary>
            <remarks>
            Most events are late bound by this method. Instead of wiring all events, this
            will be called with an event string that is defined by the control.
            
            This is called automatically when attaching to events, but must be called manually
            when users of the control only override the event's On... method.
            </remarks>
            <param name="id">ID of the event to handle</param>
            <param name = "defaultEvent">True if the event is default (e.g. overridden or via an event handler subscription)</param>
        </member>
        <member name="M:Eto.Widget.RegisterEvent``1(System.Linq.Expressions.Expression{System.Action{``0}},System.String)">
            <summary>
            Registers the event for overridding
            </summary>
            <remarks>
            This is used to register an event that will be automatically hooked up when a derived class overrides the
            event method.
            This should be called in the static constructor of your class.
            </remarks>
            <example>
            Shows a custom control with an event:
            <code>
            public class MyEtoControl : Eto.Forms.Control
            {
            	public const string MySomethingEvent = "MyEtoControl.MySomethingEvent";
            	
            	public event EventHandler&lt;EventArgs&gt; MySomething
            	{
            		add { Properties.AddHandlerEvent(MySomethingEvent, value); }
            		remove { Properties.RemoveEvent(MySomethingEvent, value); }
            	}
            
            	protected virtual void OnMySomething(EventArgs e)
            	{
            		Properties.TriggerEvent(MySomethingEvent, this, e);
            	}
            
            	static MyEtoControl()
            	{
            		RegisterEvent&lt;MyEtoControl&gt;(c => c.OnMySomething(null), MySomethingEvent);
            	}
            }
            </code>
            </example>
            <param name="method">Expression to call the method that raises your event</param>
            <param name="identifier">Identifier of the event</param>
            <typeparam name="T">Your object type</typeparam>
        </member>
        <member name="M:Eto.Widget.#ctor">
            <summary>
            Initializes a new instance of the Widget class
            </summary>
        </member>
        <member name="M:Eto.Widget.#ctor(Eto.Widget.IHandler)">
            <summary>
            Initializes a new instance of the Widget class
            </summary>
            <param name="handler">Handler to assign to this widget for its implementation</param>
        </member>
        <member name="M:Eto.Widget.Initialize">
            <summary>
            Initializes the widget handler
            </summary>
            <remarks>
            This is typically called from the constructor after all of the logic is completed to construct
            the object.
            
            If your handler interface has the <see cref="T:Eto.AutoInitializeAttribute"/> set to false, then you are responsible
            for calling this method in your constructor after calling the creation method on your custom handler.
            </remarks>
        </member>
        <member name="P:Eto.Widget.Properties">
            <summary>
            Gets the dictionary of properties for this widget
            </summary>
        </member>
        <member name="P:Eto.Widget.ID">
            <summary>
            Gets or sets the ID of this widget
            </summary>
        </member>
        <member name="P:Eto.Widget.Style">
            <summary>
            Gets or sets the style of this widget
            </summary>
            <remarks>
            Styles allow you to attach custom platform-specific logic to a widget.
            In your platform-specific assembly, use <see cref="M:Style.Add{H}(string, StyleHandler{H})"/>
            to add the style logic with the same id.
            </remarks>
            <example>
            <code><![CDATA[
            // in your UI
            var control = new Button { Style = "mystyle" };
            
            // in your platform assembly
            using Eto.Mac.Forms.Controls;
            
            Styles.AddHandler<ButtonHandler>("mystyle", handler => {
            	// this is where you can use handler.Control to set properties, handle events, etc.
            	handler.Control.BezelStyle = NSBezelStyle.SmallSquare;
            });
            ]]></code>
            </example>
        </member>
        <member name="E:Eto.Widget.StyleChanged">
            <summary>
            Occurs when the <see cref="P:Eto.Widget.Style"/> property has changed
            </summary>
        </member>
        <member name="M:Eto.Widget.OnStyleChanged(System.EventArgs)">
            <summary>
            Handles when the <see cref="P:Eto.Widget.Style"/> is changed.
            </summary>
        </member>
        <member name="P:Eto.Widget.ControlObject">
            <summary>
            Gets the instance of the platform-specific object
            </summary>
            <remarks>
            This can sometimes be useful to get the platform-specific object.
            Some handlers may not have any backing object for its functionality, so this may be null.
            
            It is more preferred to use the <see cref="P:Eto.Widget.Handler"/> and cast that to the platform-specific
            handler class which can give you additional methods and helpers to do common tasks.
            
            For example, the <see cref="T:Eto.Forms.Application"/> object's handler for OS X has a AddFullScreenMenuItem
            property to specify if you want full screen support in your app.
            </remarks>
        </member>
        <member name="M:Eto.Widget.HandleEvent(System.String)">
            <summary>
            Attaches the specified late-bound event to the control to be handled
            </summary>
            <remarks>
            This needs to be called when you want to override the On... methods instead of attaching 
            to the associated event.
            </remarks>
            <example>
            <code><![CDATA[
            // this will call HandleEvent automatically
            var textBox = new TextBox ();
            textBox.TextChanged += MyTextChangedHandler;
            
            // must call HandleEvent when overriding OnTextChanged
            public class MyTextBox : TextBox
            {
            	public MyTextBox()
            	{
            		HandleEvent (TextChangedEvent);
            	}
            	
            	protected override void OnTextChanged (EventArgs e)
            	{
            		// your logic
            	}
            }
            
            ]]></code>
            </example>
            <param name="id">ID of the event to handle.  Usually a constant in the form of [Control].[EventName]Event (e.g. TextBox.TextChangedEvent)</param>
        </member>
        <member name="M:Eto.Widget.Dispose">
            <summary>
            Disposes of this widget, supressing the finalizer
            </summary>
        </member>
        <member name="M:Eto.Widget.Dispose(System.Boolean)">
            <summary>
            Handles the disposal of this widget
            </summary>
            <param name="disposing">True if the caller called <see cref="M:Eto.Widget.Dispose"/> manually, false if being called from a finalizer</param>
        </member>
        <member name="M:Eto.Widget.ToString">
            <summary>
            Gets a string that represents the current object with its ID if specified.
            </summary>
            <returns>A string value indicating the type and ID (if specified) of this widget.</returns>
        </member>
        <member name="T:Eto.WidgetHandler`1">
            <summary>
            Base platform handler for widgets
            </summary>
            <remarks>
            This is the base class for platform handlers. 
            It is used to help wire up events and provide base functionality of a widget.
            
            If you are creating an InstanceWidget, you should use <see cref="T:Eto.WidgetHandler`2"/>.
            </remarks>
            <example>
            This example shows how to implement a platform handler for a widget called StaticWidget
            <code><![CDATA[
            // override the class and implement widget-specific interface
            public MyStaticWidgetHandler : WidgetHandler<StaticWidget>, IStaticWidget
            {
            	// implement IStaticWidget's properties and methods
            }
            ]]></code>
            </example>
            <seealso cref="T:Eto.WidgetHandler`2"/>
            <typeparam name="TWidget">Type of widget the handler is for</typeparam>
        </member>
        <member name="P:Eto.WidgetHandler`1.Widget">
            <summary>
            Gets the widget that this platform handler is attached to
            </summary>
        </member>
        <member name="P:Eto.WidgetHandler`1.ID">
            <summary>
            Gets or sets the ID of this widget
            </summary>
        </member>
        <member name="M:Eto.WidgetHandler`1.IsEventHandled(System.String)">
            <summary>
            Gets a value indicating that the specified event is handled
            </summary>
            <param name="id">Identifier of the event</param>
            <returns>True if the event is handled, otherwise false</returns>
        </member>
        <member name="P:Eto.WidgetHandler`1.Callback">
            <summary>
            Gets the callback object for the control
            </summary>
            <remarks>
            This object is typically a single static instance that is used by the platform handlers to call private or protected
            methods on the widget, such as protected event methods e.g. protected virtual void OnClick(EventArgs e)
            </remarks>
            <value>The callback.</value>
        </member>
        <member name="M:Eto.WidgetHandler`1.HandleEvent(System.String,System.Boolean)">
            <summary>
            Called to handle a specific event
            </summary>
            <remarks>
            Most events are late bound by this method. Instead of wiring all events, this
            will be called with an event string that is defined by the control.
            
            This is called automatically when attaching to events, but must be called manually
            when users of the control only override the event's On... method.
            
            Override the <see cref="M:Eto.WidgetHandler`1.AttachEvent(System.String)"/> to attach your events
            </remarks>
            <seealso cref="M:Eto.WidgetHandler`1.AttachEvent(System.String)"/>
            <param name="id">ID of the event to handle</param>
            <param name="defaultEvent">True if the event is default (e.g. overridden or via an event handler subscription)</param>
        </member>
        <member name="M:Eto.WidgetHandler`1.AttachEvent(System.String)">
            <summary>
            Attaches the specified event to the platform-specific control
            </summary>
            <remarks>
            Implementors should override this method to handle any events that the widget
            supports. Ensure to call the base class' implementation if the event is not
            one the specific widget supports, so the base class' events can be handled as well.
            </remarks>
            <param name="id">Identifier of the event</param>
        </member>
        <member name="M:Eto.WidgetHandler`1.Initialize">
            <summary>
            Called to initialize this widget after it has been constructed
            </summary>
            <remarks>
            Override this to initialize any of the platform objects.  This is called
            in the widget constructor, after all of the widget's constructor code has been called.
            </remarks>
        </member>
        <member name="P:Eto.WidgetHandler`1.Eto#Widget#IHandler#Widget">
            <summary>
            Gets or sets the widget instance
            </summary>
        </member>
        <member name="P:Eto.WidgetHandler`1.NativeHandle">
            <summary>
            Gets the native platform-specific handle for integration purposes
            </summary>
            <value>The native handle.</value>
        </member>
        <member name="M:Eto.WidgetHandler`1.Dispose">
            <summary>
            Disposes this object
            </summary>
            <remarks>
            To handle disposal logic, use the <see cref="M:Eto.WidgetHandler`1.Dispose(System.Boolean)"/> method.
            </remarks>
        </member>
        <member name="M:Eto.WidgetHandler`1.Dispose(System.Boolean)">
            <summary>
            Disposes the object
            </summary>
            <param name="disposing">True when disposed manually, false if disposed via the finalizer</param>
        </member>
        <member name="T:Eto.WidgetHandler`2">
            <summary>
            Base platform handler for <see cref="T:Eto.Widget"/> objects that have a backing platform object
            </summary>
            <remarks>
            This is the base class for platform handlers. 
            It is used to help wire up events and provide base functionality of a widget.
            </remarks>
            <example>
            This example shows how to implement a platform handler for a widget
            <code><![CDATA[
            // override the class and implement widget-specific interface
            public MyWidgetHandler : WidgetHandler<MyPlatformControl, MyWidget>, IMyWidget
            {
            	// implement IStaticWidget's properties and methods
            }
            ]]></code>
            </example>
            <seealso cref="T:Eto.WidgetHandler`2"/>
            <typeparam name="TControl">Type of the platform-specific object</typeparam>
            <typeparam name="TWidget">Type of widget the handler is for</typeparam>
        </member>
        <member name="M:Eto.WidgetHandler`2.CreateControl">
            <summary>
            Creates the control if not already set.
            </summary>
            <remarks>
            Override this to create the control instance for the handler.
            This makes it easy to extend existing handler implementations with different control implementations.
            Some platforms (e.g. Mac) require subclasses to implement/override functionality.
            </remarks>
            <returns>The control.</returns>
        </member>
        <member name="P:Eto.WidgetHandler`2.DisposeControl">
            <summary>
            Gets a value indicating that control should automatically be disposed when this widget is disposed
            </summary>
        </member>
        <member name="P:Eto.WidgetHandler`2.Control">
            <summary>
            Gets or sets the platform-specific control object
            </summary>
        </member>
        <member name="P:Eto.WidgetHandler`2.HasControl">
            <summary>
            Gets a value indicating whether this instance has a <see cref="P:Eto.WidgetHandler`2.Control"/> instance.
            </summary>
            <value><c>true</c> if this instance has a control; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Eto.WidgetHandler`2.Eto#IControlObjectSource#ControlObject">
            <summary>
            Gets the platform-specific control object
            </summary>
        </member>
        <member name="M:Eto.WidgetHandler`2.Dispose(System.Boolean)">
            <summary>
            Disposes this widget and the associated control if <see cref="P:Eto.WidgetHandler`2.DisposeControl"/> is <c>true</c>
            </summary>
            <param name="disposing">True if <see cref="M:Eto.WidgetHandler`2.Dispose(System.Boolean)"/> was called manually, false if called from the finalizer</param>
        </member>
        <member name="M:Eto.WidgetHandler`2.GetControl(`1)">
            <summary>
            Gets the platform-specific control object of the specified widget using this handler
            </summary>
            <remarks>
            The widget must be using a handler that returns the same control.
            
            This can be used very easily by platform code:
            <code>
            	MyControl mycontrol;
            	var platformControl = MyControlHandler.GetControl(mycontrol);
            </code>
            
            Note that even if the specified handler is used, the control might not actually be using that
            handler.  This method will still work as long as the handler implements using the same base platform-specific control.
            </remarks>
            <param name="widget">The widget to get the platform-specific control from</param>
            <returns>The platform-specific control used for the specified widget</returns>
        </member>
        <member name="P:Eto.WidgetHandler`2.Connector">
            <summary>
            Gets a weak connector class to hook up events to the underlying control
            </summary>
            <remarks>
            Some frameworks (e.g. gtk, monomac, ios, android) keep track of references in a way that leak objects when
            there is a circular reference between the control and the handler.  This is the case when registering events
            from the control to a method implemented in the handler.
            This instance can be used to connect the objects together using a weak reference to the handler, allowing
            controls to be garbage collected.
            </remarks>
            <value>The connector instance</value>
        </member>
        <member name="M:Eto.WidgetHandler`2.CreateConnector">
            <summary>
            Creates the event connector for this control
            </summary>
            <remarks>
            This creates the weak connector to use for event registration and other purposes.
            </remarks>
            <seealso cref="P:Eto.WidgetHandler`2.Connector"/>
        </member>
        <member name="T:Eto.WidgetHandler`2.WeakConnector">
            <summary>
            Connector for events to keep a weak reference to allow controls to be garbage collected when no longer referenced
            </summary>
            <seealso cref="P:Eto.WidgetHandler`2.Connector"/>
        </member>
        <member name="P:Eto.WidgetHandler`2.WeakConnector.Handler">
            <summary>
            Gets the handler that the connector is associated with
            </summary>
            <remarks>
            This property is used to access the handler instance to trigger events.
            </remarks>
            <value>The handler.</value>
        </member>
        <member name="T:Eto.WidgetHandler`3">
            <summary>
            Widget handler with type-specific callback
            </summary>
            <remarks>
            This can be used by controls that have events to trigger using a callback class.
            </remarks>
            <example>
            This is a full example showing a new control with a handler-triggered event and a property.
            <code>
            	// in your eto-only dll:
            	public class MyEtoControl : Eto.Forms.Control
            	{
            
            		// define an event that is triggered by the handler
            		public const string MySomethingEvent = "MyEtoControl.MySomething";
            		
            		public event EventHandler&lt;EventArgs&gt; MySomething
            		{
            			add { Properties.AddHandlerEvent(MySomethingEvent, value); }
            			remove { Properties.RemoveEvent(MySomethingEvent, value); }
            		}
            		
            		// allow subclasses to override the event
            		protected virtual void OnMySomething(EventArgs e)
            		{
            			Properties.TriggerEvent(MySomethingEvent, this, e);
            		}
            
            		static MyEtoControl()
            		{
            			RegisterEvent&lt;MyEtoControl&gt;(c => c.OnMySomething(null), MySomethingEvent);
            		}
            
            		// defines the callback interface to trigger the event from handlers
            		public interface ICallback : Eto.Control.ICallback
            		{
            			void OnMySomething(MyEtoControl widget, EventArgs e);
            		}
            
            		// defines the callback implementation
            		protected class Callback : Eto.Control.Callback, ICallback
            		{
            			public void OnMySomething(MyEtoControl widget, EventArgs e)
            			{
            				using (widget.Platform.Context)
            					widget.OnMySomething(e);
            			}
            		}
            
            		// create single instance of the callback, and tell Eto we want to use it
            		static readonly object callback = new Callback();
            		protected override object GetCallback() { return callback; }
            
            		// handler interface for other methods/properties
            		public interface IHandler : Eto.Control.IHandler
            		{
            			string MyProperty { get; set; }
            		}
            
            		new IHandler Handler { get { (IHandler)base.Handler; } }
            
            		public string MyProperty { get { return Handler.MyProperty; } set { Handler.MyProperty = value; } }
            	}
            
            
            	// in each platform-specific dll:
            	public class MyHandler : WidgetHandler&lt;PlatformSpecificControl, MyEtoControl, MyEtoControl.ICallback&gt; : MyEtoControl.IHandler
            	{
            		public MyHandler()
            		{
            			Control = new PlatformSpecificControl();
            		}
            
            		public string MyProperty { get; set; }
            
            		public override void AttachEvent(string id)
            		{
            			switch (id)
            			{
            				case MyEtoControl.MySomethingEvent:
            					Control.SomeEvent += (sender, e) => Callback.OnMySomething(EventArgs.Empty);
            					break;
            
            				default:
            					base.AttachEvent(id);
            					break;
            			}
            		}
            	}
            </code>
            </example>
            <typeparam name="TControl">Type of the platform-specific object</typeparam>
            <typeparam name="TWidget">Type of widget the handler is for</typeparam>
            <typeparam name="TCallback">Type of the callback</typeparam>
        </member>
        <member name="P:Eto.WidgetHandler`3.Callback">
            <summary>
            Gets the callback object for the control
            </summary>
            <remarks>
            This object is typically a single static instance that is used by the platform handlers to call private or protected
            methods on the widget, such as protected event methods e.g. protected virtual void OnClick(EventArgs e)
            </remarks>
            <value>The callback.</value>
        </member>
    </members>
</doc>
